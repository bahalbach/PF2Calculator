{"version":3,"sources":["CollapsableInput.js","Proficiency.js","LevelSelection.js","ProficiencyInput.js","AbilityScore.js","AbilityScoreInput.js","ByLevelInput.js","Modifier.js","ItemBonus.js","PF2App.js","serviceWorker.js","index.js"],"names":["CollapsableInput","props","state","collapseView","handleClick","bind","event","this","setState","className","onClick","description","listInput","React","Component","Proficiency","untrained","trained","expert","master","legendary","proficiencies","currentProf","initial","profArray","i","push","maxProf","usedProficiencies","level","proficiencyValue","every","val","index","profDesc","get","toName","getInitial","getMax","getLevelAcquired","key","newProficiencyWithIntial","target","value","newProficiencyWithChangedLevel","parseInt","profValue","initialProf","oldProficiency","newProfs","diff","length","oldProf","oldLevel","changedProf","newLevel","oldProfs","slice","LevelSelection","name","onChange","ProficiencyInput","prof","proficiency","profList","getProficiencies","map","AbilityScore","boosts","apexLevel","scoreArray","scoreWithApex","currentScore","Math","max","maxScore","scoreDesc","getMod","newInitial","newBoosts","newApexLevel","checked","console","error","AbilityScoreInput","score","scoreList","getBoosts","type","getApexLevel","ByLevelInput","levelList","modifier","Modifier","values","Array","fill","desc","newValues","ItemBonus","Flag","ProficiencyPresets","CheckboxInput","isFighter","label","isMartial","isCaster","isAlchemist","AbilityScorePresets","is18a","is16a","is16pp","is14p","is10","ItemBonusPresets","itemBonus","isNone","isABPWeapon","isABPSkill1","isABPSkill2","totalBonusDescription","effect","useOverride","isTrue","override","getDescription","attackAbilityScore","StrikeInput","selectedLevel","onEffectChange","useMiscModifiers","damageAbilityScore","EffectInput","PF2App","targetInfo","routines","circumstanceBonus","statusBonus","circumstancePenalty","statusPenalty","itemPenalty","untypedPenalty","selectedRoutine","selectedEffect","handleEffectChange","propertyName","newPropertyValue","createUpdated","newRoutines","update","$set","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6f9aa65b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass CollapsableInput extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            collapseView: true,\r\n        };\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick(event) {\r\n        this.setState({collapseView: !this.state.collapseView});\r\n    }\r\n\r\n    render() {\r\n        // if (this.state.collapseView) {\r\n            return (\r\n                <div className=\"CollapsableInput\">\r\n                    <div \r\n                        className=\"CollapsableInputDescription\"\r\n                        onClick={this.handleClick}\r\n                    >\r\n                        {this.props.description}\r\n                    </div>\r\n                        {this.state.collapseView ? \"\" : this.props.listInput}\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default CollapsableInput","const MAX_LEVEL = 20;\r\n\r\nclass Proficiency {\r\n    constructor(untrained = 1, trained = 1, expert = null, master = null, legendary = null) {\r\n        this.proficiencies = [untrained, trained, expert, master, legendary];\r\n        let currentProf = 0;\r\n        if (trained && trained === 1) {\r\n            currentProf = 1;\r\n            if (expert && expert === 1) {\r\n                currentProf = 2;\r\n                if (master && master === 1) {\r\n                    currentProf = 3;\r\n                    if (legendary && legendary === 1) {\r\n                        currentProf = 4;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.initial = currentProf;\r\n        this.profArray = [];\r\n\r\n        for (let i = 0; i < MAX_LEVEL; i++) {\r\n            while (this.proficiencies[currentProf + 1] && this.proficiencies[currentProf + 1] === (i + 1)) {\r\n                currentProf++;\r\n            }\r\n            if (currentProf === 0) {\r\n                this.profArray.push(0);\r\n            } else {\r\n                this.profArray.push((i + 1) + (currentProf * 2));\r\n            }\r\n        }\r\n        this.maxProf = currentProf;\r\n        this.usedProficiencies = []\r\n        for (let i = this.initial; i <= this.maxProf; i++) {\r\n            this.usedProficiencies.push(i);\r\n        }\r\n    }\r\n\r\n    get(level) {\r\n        return this.profArray[level - 1];\r\n    }\r\n\r\n    getInitial() {\r\n        return this.initial;\r\n    }\r\n\r\n    getMax() {\r\n        return this.maxProf;\r\n    }\r\n\r\n    getLevelAcquired(proficiencyValue) {\r\n        return this.proficiencies[proficiencyValue];\r\n    }\r\n\r\n    getProficiencies() {\r\n        return this.usedProficiencies;\r\n    }\r\n\r\n    isFighter() {\r\n        return this.proficiencies.every((val, index) => val === [1, 1, 1, 5, 13][index]);\r\n    }\r\n    isMartial() {\r\n        return this.proficiencies.every((val, index) => val === [1, 1, 5, 13, null][index]);\r\n    }\r\n    isCaster() {\r\n        return this.proficiencies.every((val, index) => val === [1, 1, 11, null, null][index]);\r\n    }\r\n    isAlchemist() {\r\n        return this.proficiencies.every((val, index) => val === [1, 1, 7, null, null][index]);\r\n    }\r\n    getDescription(level) {\r\n        let profDesc = \" \";\r\n        if (level) {\r\n            profDesc += \"(\" + this.get(level) + \") \";\r\n        }\r\n\r\n        profDesc += Proficiency.toName(this.getInitial()) + \" 1\";\r\n        for (let i = this.getInitial() + 1; i <= this.getMax(); i++) {\r\n            profDesc += \", \" + Proficiency.toName(i) + \" \" + this.getLevelAcquired(i);\r\n        }\r\n\r\n        return profDesc;\r\n    }\r\n\r\n    createUpdated(key, event) {\r\n        switch (key) {\r\n            case \"initial\":\r\n                return Proficiency.newProficiencyWithIntial(event.target.value, this);\r\n            case \"fighter\":\r\n                return new Proficiency(1, 1, 1, 5, 13);\r\n            case \"martial\":\r\n                return new Proficiency(1, 1, 5, 13, null);\r\n            case \"caster\":\r\n                return new Proficiency(1, 1, 11, null, null);\r\n            case \"alchemist\":\r\n                return new Proficiency(1, 1, 7, null, null);\r\n            default:\r\n                return Proficiency.newProficiencyWithChangedLevel(key, parseInt(event.target.value), this);\r\n        }\r\n    }\r\n\r\n    static toName(profValue) {\r\n        return ([\r\n            \"Untrained\",\r\n            \"Trained\",\r\n            \"Expert\",\r\n            \"Master\",\r\n            \"Legendary\"\r\n        ][profValue]);\r\n    }\r\n\r\n    static newProficiencyWithIntial(initialProf, oldProficiency) {\r\n        let newProfs = [1, null, null, null, null];\r\n        const diff = initialProf - oldProficiency.usedProficiencies[0];\r\n        for (let i = 0; i < newProfs.length; i++) {\r\n            if (i <= initialProf) {\r\n                newProfs[i] = 1;\r\n            } else {\r\n                let oldProf = oldProficiency.usedProficiencies[i - initialProf];\r\n                let oldLevel = oldProficiency.getLevelAcquired(oldProf);\r\n                newProfs[oldProf + diff] = oldLevel;\r\n            }\r\n        }\r\n        return new Proficiency(newProfs[0], newProfs[1], newProfs[2], newProfs[3], newProfs[4]);\r\n    }\r\n\r\n    static newProficiencyWithChangedLevel(changedProf, newLevel, oldProficiency) {\r\n        let oldProfs = oldProficiency.proficiencies.slice();\r\n        oldProfs[changedProf] = newLevel;\r\n        //console.log(oldProfs);\r\n        return new Proficiency(...oldProfs);\r\n\r\n    }\r\n}\r\n\r\nexport default Proficiency","import React from 'react';\r\n\r\n// name, value, onChange\r\nfunction LevelSelection(props) {\r\n    return (\r\n        <div >\r\n                        <label> {props.name + \": \"}\r\n                            <select value={props.value} \r\n                                onChange={props.onChange}\r\n                            >\r\n                                <option value=\"never\">\r\n                                    Never\r\n                                </option>\r\n                                <option value=\"1\">\r\n                                    1\r\n                                </option>\r\n                                <option value=\"2\">\r\n                                    2\r\n                                </option>\r\n                                <option value=\"3\">\r\n                                    3\r\n                                </option>\r\n                                <option value=\"4\">\r\n                                    4\r\n                                </option>\r\n                                <option value=\"5\">\r\n                                    5\r\n                                </option>\r\n                                <option value=\"6\">\r\n                                    6\r\n                                </option>\r\n                                <option value=\"7\">\r\n                                    7\r\n                                </option>\r\n                                <option value=\"8\">\r\n                                    8\r\n                                </option>\r\n                                <option value=\"9\">\r\n                                    9\r\n                                </option>\r\n                                <option value=\"10\">\r\n                                    10\r\n                                </option>\r\n                                <option value=\"11\">\r\n                                    11\r\n                                </option>\r\n                                <option value=\"12\">\r\n                                    12\r\n                                </option>\r\n                                <option value=\"13\">\r\n                                    13\r\n                                </option>\r\n                                <option value=\"14\">\r\n                                    14\r\n                                </option>\r\n                                <option value=\"15\">\r\n                                    15\r\n                                </option>\r\n                                <option value=\"16\">\r\n                                    16\r\n                                </option>\r\n                                <option value=\"17\">\r\n                                    17\r\n                                </option>\r\n                                <option value=\"18\">\r\n                                    18\r\n                                </option>\r\n                                <option value=\"19\">\r\n                                    19\r\n                                </option>\r\n                                <option value=\"20\">\r\n                                    20\r\n                                </option>\r\n                            </select>\r\n                        </label>\r\n                    </div>\r\n    );\r\n}\r\n\r\nexport default LevelSelection","import React from 'react';\r\nimport Proficiency from './Proficiency';\r\nimport LevelSelection from './LevelSelection';\r\n\r\nfunction ProficiencyInput(props) {\r\n    // props: proficiency, onChange\r\n    \r\n    let prof = props.proficiency;\r\n\r\n    let profList = prof.getProficiencies().map(\r\n        (profValue, index) => {\r\n            if (index === 0) {\r\n                return (\r\n                    <div key=\"initial\">\r\n                        <label> Initial: {}\r\n                            <select\r\n                                value={prof.getInitial()}\r\n                                onChange={props.onChange.bind(null,\"initial\")}\r\n                            >\r\n                                <option value=\"0\">\r\n                                    Untrained\r\n                                </option>\r\n                                <option value=\"1\">\r\n                                    Trained\r\n                                </option>\r\n                                <option value=\"2\">\r\n                                    Expert\r\n                                </option>\r\n                                <option value=\"3\">\r\n                                    Master\r\n                                </option>\r\n                                <option value=\"4\">\r\n                                    Legendary\r\n                                </option>\r\n                            </select>\r\n                        </label>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let value = prof.getLevelAcquired(profValue);\r\n                if (value === null) value = \"never\";\r\n                return (\r\n                    <LevelSelection key={profValue} name={Proficiency.toName(profValue)}\r\n                        value={value} onChange={props.onChange.bind(null, profValue)}\r\n                    />\r\n                );\r\n            }\r\n        }\r\n    );\r\n    if (prof.getMax() < 4) {\r\n        profList.push(<LevelSelection key={prof.getMax() + 1} name={Proficiency.toName(prof.getMax() + 1)}\r\n            value=\"never\" onChange={props.onChange.bind(null, prof.getMax() + 1)}\r\n        />);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"ProficiencyInput\">\r\n            {profList}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default ProficiencyInput","const MAX_LEVEL = 20;\r\n\r\nclass AbilityScore {\r\n    constructor(initial = 10, boosts = [false, false, false, false], apexLevel = null) {\r\n        this.initial = initial;\r\n        this.boosts = boosts;\r\n        this.apexLevel = apexLevel;\r\n\r\n        this.scoreArray = [initial];\r\n        let currentScore = initial;\r\n        let scoreWithApex;\r\n\r\n        for (let i = 2; i <= MAX_LEVEL; i++) {\r\n            if ((i === 5 && boosts[0]) || (i === 10 && boosts[1]) || (i === 15 && boosts[2]) || (i === 20 && boosts[3]))\r\n                currentScore < 18 ? currentScore += 2 : currentScore += 1;\r\n            (apexLevel && i >= apexLevel) ? (scoreWithApex = Math.max(18, currentScore + 2)) : scoreWithApex = currentScore;\r\n            this.scoreArray.push(scoreWithApex);\r\n        }\r\n        this.maxScore = scoreWithApex;\r\n    }\r\n\r\n    get(level) {\r\n        return this.scoreArray[level - 1];\r\n    }\r\n\r\n    getMod(level) {\r\n        return parseInt((this.scoreArray[level - 1] - 10) / 2);\r\n    }\r\n\r\n    getInitial() {\r\n        return this.initial;\r\n    }\r\n    getBoosts() {\r\n        return this.boosts;\r\n    }\r\n    getApexLevel() {\r\n        return this.apexLevel;\r\n    }\r\n\r\n    getScores() {\r\n        return [this.initial, ...this.boosts, this.apexLevel];\r\n    }\r\n\r\n    is18a() {\r\n        if (this.initial !== 18) return false;\r\n        if (this.boosts[0] !== true) return false;\r\n        if (this.boosts[1] !== true) return false;\r\n        if (this.boosts[2] !== true) return false;\r\n        if (this.boosts[3] !== true) return false;\r\n        if (this.apexLevel !== 17) return false;\r\n        return true;\r\n    }\r\n\r\n    is16a() {\r\n        if (this.initial !== 16) return false;\r\n        if (this.boosts[0] !== true) return false;\r\n        if (this.boosts[1] !== true) return false;\r\n        if (this.boosts[2] !== true) return false;\r\n        if (this.apexLevel !== 17) return false;\r\n        return true;\r\n    }\r\n\r\n    is16pp() {\r\n        if (this.initial !== 16) return false;\r\n        if (this.boosts[0] !== true) return false;\r\n        if (this.boosts[1] !== true) return false;\r\n        if (this.boosts[2] !== true) return false;\r\n        if (this.apexLevel !== null) return false;\r\n        return true;\r\n    }\r\n\r\n    is14p() {\r\n        if (this.initial !== 14) return false;\r\n        if (this.boosts[0] !== true) return false;\r\n        if (this.boosts[1] !== true) return false;\r\n        if (this.boosts[2] !== false) return false;\r\n        if (this.boosts[3] !== false) return false;\r\n        if (this.apexLevel !== null) return false;\r\n        return true;\r\n    }\r\n\r\n    is10() {\r\n        if (this.initial !== 10) return false;\r\n        if (this.boosts[0] !== false) return false;\r\n        if (this.boosts[1] !== false) return false;\r\n        if (this.boosts[2] !== false) return false;\r\n        if (this.boosts[3] !== false) return false;\r\n        if (this.apexLevel !== null) return false;\r\n        return true;\r\n    }\r\n\r\n    getDescription(level) {\r\n        let scoreDesc = \" \";\r\n        if (level) {\r\n            scoreDesc += \"(\" + this.getMod(level) + \") \";\r\n        }\r\n\r\n        scoreDesc += this.initial + \" to \" + this.maxScore;\r\n\r\n        return scoreDesc;\r\n    }\r\n\r\n    createUpdated(key, event) {\r\n        let newInitial = this.initial;\r\n        let newBoosts = this.boosts.slice();\r\n        let newApexLevel = this.apexLevel;\r\n        switch (key) {\r\n            case \"18a\":\r\n                return new AbilityScore(18, [true, true, true, true], 17);\r\n            case \"16a\":\r\n                return new AbilityScore(16, [true, true, true, false], 17);\r\n            case \"16++\":\r\n                return new AbilityScore(16, [true, true, true, false], null);\r\n            case \"14+\":\r\n                return new AbilityScore(14, [true, true, false, false], null);\r\n            case \"10\":\r\n                return new AbilityScore(10, [false, false, false, false], null);\r\n\r\n            case \"initial\":\r\n                newInitial = parseInt(event.target.value);\r\n                break;\r\n            case 0:\r\n            case 1:\r\n            case 2:\r\n            case 3:\r\n                newBoosts[key] = event.target.checked;\r\n                break;\r\n            case \"apex\":\r\n                let value = event.target.value;\r\n                if (value === \"never\") value = null;\r\n                newApexLevel = value;\r\n                break;\r\n            default:\r\n                console.error(\"Unhandled ability score\");\r\n        }\r\n        return new AbilityScore(newInitial, newBoosts, newApexLevel);\r\n    }\r\n}\r\n/*\r\n\r\n        this.proficiencies = [untrained,trained,expert,master,legendary];\r\n        let currentProf = 0;\r\n        if (trained && trained===1) {\r\n            currentProf = 1;\r\n            if (expert && expert===1) {\r\n                currentProf = 2;\r\n                if (master && master===1) {\r\n                    currentProf = 3;\r\n                    if (legendary && legendary===1) {\r\n                        currentProf = 4;\r\n        }}}}\r\n        this.initial = currentProf;\r\n        this.profArray = [];\r\n\r\n        for(let i=0; i<MAX_LEVEL; i++) {\r\n            while (this.proficiencies[currentProf+1] && this.proficiencies[currentProf+1] === (i+1)) {\r\n                currentProf++;\r\n            }\r\n            if (currentProf===0) {\r\n                this.profArray.push(0);\r\n            } else {\r\n                this.profArray.push((i+1) + (currentProf*2));\r\n            }\r\n        }\r\n        this.maxProf = currentProf;\r\n        this.usedProficiencies = []\r\n        for(let i=this.initial; i<=this.maxProf; i++) {\r\n            this.usedProficiencies.push(i);\r\n        }\r\n    }\r\n\r\n    get(level) {\r\n        return this.profArray[level-1];\r\n    }\r\n\r\n    getInitial() {\r\n        return this.initial;\r\n    }\r\n\r\n    getMax() {\r\n        return this.maxProf;\r\n    }\r\n\r\n    getLevelAcquired(proficiencyValue) {\r\n        return this.proficiencies[proficiencyValue];\r\n    }\r\n\r\n    getProficiencies() {\r\n        return this.usedProficiencies;\r\n    }\r\n\r\n    static toName(profValue) {\r\n        return ([\r\n            \"Untrained\",\r\n            \"Trained\",\r\n            \"Expert\",\r\n            \"Master\",\r\n            \"Legendary\"\r\n        ][profValue]);\r\n    }\r\n\r\n    static newProficiencyWithIntial(initialProf, oldProficiency) {\r\n        let newProfs = [1,null,null,null,null];\r\n        const diff = initialProf - oldProficiency.usedProficiencies[0];\r\n        for(let i=0; i<newProfs.length; i++) {\r\n            if (i <= initialProf) {\r\n                newProfs[i] = 1;\r\n            } else {\r\n                let oldProf = oldProficiency.usedProficiencies[i-initialProf];\r\n                let oldLevel = oldProficiency.getLevelAcquired(oldProf);\r\n                newProfs[oldProf+diff] = oldLevel;\r\n            }\r\n        }\r\n        return new Proficiency(newProfs[0], newProfs[1], newProfs[2], newProfs[3], newProfs[4]);\r\n    }\r\n\r\n    static newProficiencyWithChangedLevel(changedProf, newLevel, oldProficiency) {\r\n        let oldProfs = oldProficiency.proficiencies.slice();\r\n        oldProfs[changedProf] = newLevel;\r\n        console.log(oldProfs);\r\n        return new Proficiency(...oldProfs);\r\n\r\n    }\r\n}\r\n*/\r\n\r\nexport default AbilityScore","import React from 'react';\r\nimport LevelSelection from './LevelSelection';\r\n\r\nfunction AbilityScoreInput(props) {\r\n    // props: score, onChange\r\n\r\n    const score = props.score;\r\n    let scoreList = [];\r\n    scoreList.push(\r\n        <div key=\"initial\">\r\n            <label> Initial: { } \r\n                <select \r\n                    value={score.getInitial()}\r\n                    onChange={props.onChange.bind(null,\"initial\")}\r\n                >\r\n                    <option value=\"8\">\r\n                        8\r\n                    </option>\r\n                    <option value=\"10\">\r\n                        10\r\n                    </option>\r\n                    <option value=\"12\">\r\n                        12\r\n                    </option>\r\n                    <option value=\"14\">\r\n                        14\r\n                    </option>\r\n                    <option value=\"16\">\r\n                        16\r\n                    </option>\r\n                    <option value=\"18\">\r\n                        18\r\n                    </option>\r\n                </select>\r\n            </label>\r\n        </div>\r\n    );\r\n    const boosts = score.getBoosts();\r\n    for(let i=0; i<boosts.length; i++) {\r\n        scoreList.push(\r\n            <div key={i}>\r\n                <label> Boost {(1+i)*5}: { }\r\n                    <input \r\n                        type=\"checkbox\" \r\n                        checked={boosts[i]} \r\n                        onChange={props.onChange.bind(null,i)}\r\n                    />\r\n                </label>\r\n            </div>\r\n        );\r\n    }\r\n    let apexLevel = score.getApexLevel();\r\n    if (apexLevel === null) apexLevel = \"never\";\r\n    scoreList.push(\r\n        <LevelSelection key=\"apex\" name=\"Apex Level\" \r\n            value={apexLevel} onChange={props.onChange.bind(null,\"apex\")}\r\n        />\r\n    );\r\n\r\n    return (\r\n        <div className=\"AbilityScoreInput\">\r\n            {scoreList}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default AbilityScoreInput","import React from 'react';\r\n\r\nfunction ByLevelInput(props) {\r\n    // level: value\r\n    let levelList = [];\r\n    for (let i = 1; i <= 20; i++) {\r\n        levelList.push(\r\n            <div key={i}>\r\n                <label> Level {i}: { }\r\n                    <input \r\n                        type=\"number\" \r\n                        value={props.modifier.get(i)} \r\n                        onChange={props.onChange.bind(null,i)}\r\n                    />\r\n                </label>\r\n            </div>\r\n        );\r\n    }\r\n    return levelList;\r\n}\r\n\r\nexport default ByLevelInput","// Store:\r\n//     item bonuses\r\n//     if using other bonuses/penalties\r\n//     item penalties\r\n//     status bonuses\r\n//     status penalties\r\n//     circumstance bonuses\r\n//     circumstance penalties\r\n//     untyped penalties (other than MAP)\r\n\r\nclass Modifier {\r\n    constructor(values = null) {\r\n        if (values === null) {\r\n            this.values = new Array(20).fill(0);\r\n        } else\r\n            this.values = values;\r\n    }\r\n\r\n    get(level) {\r\n        return this.values[level - 1]\r\n    }\r\n\r\n    getDescription(level) {\r\n        let desc = \" \";\r\n        if (level) {\r\n            desc += \"(\" + this.get(level) + \") \";\r\n        }\r\n\r\n        desc += this.values[0] + \" to \" + this.values[19];\r\n\r\n        return desc;\r\n    }\r\n\r\n    createUpdated(key, event) {\r\n        let newValues;\r\n        switch (key) {\r\n            case \"0\":\r\n                newValues = new Array(20).fill(0);\r\n                break;\r\n            case \"+1\":\r\n            case \"-1\":\r\n                newValues = new Array(20).fill(1);\r\n                break;\r\n            case \"+2\":\r\n            case \"-2\":\r\n                newValues = new Array(20).fill(2);\r\n                break;\r\n            case \"+3\":\r\n            case \"-3\":\r\n                newValues = new Array(20).fill(3);\r\n                break;\r\n            case \"+4\":\r\n            case \"-4\":\r\n                newValues = new Array(20).fill(4);\r\n                break;\r\n            \r\n            default:\r\n                newValues = this.values.slice();\r\n                newValues[key-1] = parseInt(event.target.value);\r\n        }\r\n        return new Modifier(newValues);\r\n    }\r\n}\r\n\r\nexport default Modifier","class ItemBonus {\r\n    constructor(values = null) {\r\n        if (values === null) {\r\n            this.values = new Array(20).fill(0);\r\n        } else\r\n            this.values = values;\r\n    }\r\n\r\n    get(level) {\r\n        return this.values[level - 1]\r\n    }\r\n\r\n    getDescription(level) {\r\n        let desc = \" \";\r\n        if (level) {\r\n            desc += \"(\" + this.get(level) + \") \";\r\n        }\r\n\r\n        desc += this.values[0] + \" to \" + this.values[19];\r\n\r\n        return desc;\r\n    }\r\n\r\n    isNone() {\r\n        for (let i = 0; i < 20; i++) {\r\n            if (this.values[i] !== 0) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    isABPWeapon() {\r\n        for (let i = 0; i < 20; i++) {\r\n            if (i + 1 >= 16) {if (this.values[i] !== 3) return false; else continue;}\r\n            if (i + 1 >= 10) {if (this.values[i] !== 2) return false; else continue;}\r\n            if (i + 1 >= 2) {if (this.values[i] !== 1) return false; else continue;}\r\n            if (this.values[i] !== 0) return false; else continue;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    isABPSkill1() {\r\n        for (let i = 0; i < 20; i++) {\r\n            if (i + 1 >= 17) {if (this.values[i] !== 3) return false; else continue;}\r\n            if (i + 1 >= 9) {if (this.values[i] !== 2) return false; else continue;}\r\n            if (i + 1 >= 3) {if (this.values[i] !== 1) return false; else continue;}\r\n            if (this.values[i] !== 0) return false; else continue;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    isABPSkill2() {\r\n        for (let i = 0; i < 20; i++) {\r\n            if (i + 1 >= 20) {if (this.values[i] !== 3) return false; else continue;}\r\n            if (i + 1 >= 13) {if (this.values[i] !== 2) return false; else continue;}\r\n            if (i + 1 >= 6) {if (this.values[i] !== 1) return false; else continue;}\r\n            if (this.values[i] !== 0) return false; else continue;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    createUpdated(key, event) {\r\n        let newValues;\r\n        switch (key) {\r\n            case \"None\":\r\n                newValues = new Array(20).fill(0);\r\n                return new ItemBonus(newValues);\r\n            case \"ABPWeapon\":\r\n                newValues = new Array(20).fill(0);\r\n                for (let i = 0; i < 20; i++) {\r\n                    if (i + 1 >= 16) {newValues[i] = 3; continue;}\r\n                    if (i + 1 >= 10) {newValues[i] = 2; continue;}\r\n                    if (i + 1 >= 2) {newValues[i] = 1; continue;}\r\n                }\r\n                return new ItemBonus(newValues);\r\n            case \"ABPSkill1\":\r\n                newValues = new Array(20).fill(0);\r\n                for (let i = 0; i < 20; i++) {\r\n                    if (i + 1 >= 17) {newValues[i] = 3; continue;}\r\n                    if (i + 1 >= 9) {newValues[i] = 2; continue;}\r\n                    if (i + 1 >= 3) {newValues[i] = 1; continue;}\r\n                }\r\n                return new ItemBonus(newValues);\r\n            case \"ABPSkill2\":\r\n                newValues = new Array(20).fill(0);\r\n                for (let i = 0; i < 20; i++) {\r\n                    if (i + 1 >= 20) {newValues[i] = 3; continue;}\r\n                    if (i + 1 >= 13) {newValues[i] = 2; continue;}\r\n                    if (i + 1 >= 6) {newValues[i] = 1; continue;}\r\n                }\r\n                return new ItemBonus(newValues);\r\n            // case \"ABPSkill3\":\r\n            //     newValues = new Array(20).fill(0);\r\n            //     for (let i = 0; i < 20; i++) {\r\n            //         if (i + 1 >= 15) newValues[i] = 2;\r\n            //         if (i + 1 >= 9) newValues[i] = 1;\r\n            //     }\r\n            //     return new ItemBonus(newValues);\r\n            // case \"ABPSkill4\":\r\n            //     newValues = new Array(20).fill(0);\r\n            //     for (let i = 0; i < 20; i++) {\r\n            //         if (i + 1 >= 20) newValues[i] = 2;\r\n            //         if (i + 1 >= 15) newValues[i] = 1;\r\n            //     }\r\n            //     return new ItemBonus(newValues);\r\n            // case \"ABPSkill5\":\r\n            //     newValues = new Array(20).fill(0);\r\n            //     for (let i = 0; i < 20; i++) {\r\n            //         if (i + 1 >= 17) newValues[i] = 1;\r\n            //     }\r\n            //     return new ItemBonus(newValues);\r\n            // case \"ABPSkill6\":\r\n            //     newValues = new Array(20).fill(0);\r\n            //     for (let i = 0; i < 20; i++) {\r\n            //         if (i + 1 >= 20) newValues[i] = 1;\r\n            //     }\r\n            //     return new ItemBonus(newValues);\r\n            // case \"ABPPerception\":\r\n            //     newValues = new Array(20).fill(0);\r\n            //     for (let i = 0; i < 20; i++) {\r\n            //         if (i + 1 >= 19) newValues[i] = 3;\r\n            //         if (i + 1 >= 13) newValues[i] = 2;\r\n            //         if (i + 1 >= 7) newValues[i] = 1;\r\n            //     }\r\n            //     return new ItemBonus(newValues);\r\n            default:\r\n                newValues = this.values.slice();\r\n                newValues[key-1] = parseInt(event.target.value);\r\n                return new ItemBonus(newValues);\r\n        }\r\n    }\r\n}\r\n\r\nexport default ItemBonus","import React from 'react';\r\nimport update from 'immutability-helper';\r\nimport CollapsableInput from './CollapsableInput';\r\nimport Proficiency from './Proficiency';\r\nimport ProficiencyInput from './ProficiencyInput';\r\nimport AbilityScore from './AbilityScore';\r\nimport AbilityScoreInput from './AbilityScoreInput';\r\nimport ByLevelInput from './ByLevelInput';\r\nimport './PF2App.css';\r\nimport Modifier from './Modifier';\r\nimport ItemBonus from './ItemBonus';\r\n\r\nclass Flag {\r\n    constructor(value = false) {\r\n        this.value = value;\r\n    }\r\n\r\n    isTrue() {\r\n        return this.value;\r\n    }\r\n\r\n    createUpdated(event) {\r\n        return new Flag(event.target.checked);\r\n    }\r\n}\r\n\r\nfunction ProficiencyPresets(props) {\r\n    return (\r\n        <div className=\"ProficiencyPresets\">\r\n            <CheckboxInput\r\n                checked={props.proficiency.isFighter()}\r\n                onChange={props.onChange.bind(null, \"fighter\")}\r\n                label={\"Fighter\"}\r\n            />\r\n            <CheckboxInput\r\n                checked={props.proficiency.isMartial()}\r\n                onChange={props.onChange.bind(null, \"martial\")}\r\n                label={\"Martial\"}\r\n            />\r\n            <CheckboxInput\r\n                checked={props.proficiency.isCaster()}\r\n                onChange={props.onChange.bind(null, \"caster\")}\r\n                label={\"Caster\"}\r\n            />\r\n            <CheckboxInput\r\n                checked={props.proficiency.isAlchemist()}\r\n                onChange={props.onChange.bind(null, \"alchemist\")}\r\n                label={\"Alchemist/Warpriest\"}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction AbilityScorePresets(props) {\r\n    return (\r\n        <div className=\"AbilityScorePresets\">\r\n            <CheckboxInput\r\n                checked={props.score.is18a()}\r\n                onChange={props.onChange.bind(null, \"18a\")}\r\n                label={\"18a\"}\r\n            />\r\n            <CheckboxInput\r\n                checked={props.score.is16a()}\r\n                onChange={props.onChange.bind(null, \"16a\")}\r\n                label={\"16a\"}\r\n            />\r\n            <CheckboxInput\r\n                checked={props.score.is16pp()}\r\n                onChange={props.onChange.bind(null, \"16++\")}\r\n                label={\"16++\"}\r\n            />\r\n            <CheckboxInput\r\n                checked={props.score.is14p()}\r\n                onChange={props.onChange.bind(null, \"14+\")}\r\n                label={\"14+\"}\r\n            />\r\n            <CheckboxInput\r\n                checked={props.score.is10()}\r\n                onChange={props.onChange.bind(null, \"10\")}\r\n                label={\"10\"}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ItemBonusPresets(props) {\r\n    return (\r\n        <div className=\"ItemBonusPresets\">\r\n            <CheckboxInput\r\n                checked={props.itemBonus.isNone()}\r\n                onChange={props.onChange.bind(null, \"None\")}\r\n                label={\"None\"}\r\n            />\r\n            <CheckboxInput\r\n                checked={props.itemBonus.isABPWeapon()}\r\n                onChange={props.onChange.bind(null, \"ABPWeapon\")}\r\n                label={\"ABP Weapon\"}\r\n            />\r\n            <CheckboxInput\r\n                checked={props.itemBonus.isABPSkill1()}\r\n                onChange={props.onChange.bind(null, \"ABPSkill1\")}\r\n                label={\"ABP Skill Item 1\"}\r\n            />\r\n            <CheckboxInput\r\n                checked={props.itemBonus.isABPSkill2()}\r\n                onChange={props.onChange.bind(null, \"ABPSkill2\")}\r\n                label={\"ABP Skill Item 2\"}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction CheckboxInput(props) {\r\n    // props: checked, onChange, label\r\n    return (\r\n        <label className=\"CheckboxInput\">\r\n            <input\r\n                type=\"checkbox\"\r\n                checked={props.checked}\r\n                onChange={props.onChange}\r\n            />\r\n            {props.label}\r\n        </label>\r\n    );\r\n}\r\n\r\n// function CheckInput(props) {\r\n//     return (\r\n\r\n//     );\r\n// }\r\nfunction totalBonusDescription(effect, level) {\r\n    if (effect.useOverride.isTrue()) {\r\n        return effect.override.getDescription(level);\r\n    }\r\n    else {\r\n        let desc = \" \";\r\n        if (level) {\r\n            let levelTotal = effect.attackAbilityScore.getMod(level) + effect.proficiency.get(level) + effect.itemBonus.get(level);\r\n            desc += \"(\" + levelTotal + \") \";\r\n        }\r\n        let initial = effect.attackAbilityScore.getMod(1) + effect.proficiency.get(1) + effect.itemBonus.get(1);\r\n        let final = effect.attackAbilityScore.getMod(20) + effect.proficiency.get(20) + effect.itemBonus.get(20);\r\n        desc += initial + \" to \" + final;\r\n\r\n        return desc;\r\n    }\r\n}\r\n\r\nfunction StrikeInput(props) {\r\n    /*\r\n        Proficiency, Primary Ability Scor\r\n    */\r\n\r\n    return (\r\n        <div className=\"StrikeInput\" >\r\n            <CollapsableInput\r\n                description={\"Total Bonus: \" + totalBonusDescription(props.effect, props.selectedLevel)}\r\n                listInput={\r\n                    <div className=\"CheckInput\">\r\n                        <CheckboxInput\r\n                            checked={props.effect.useOverride.isTrue()}\r\n                            onChange={props.onEffectChange.bind(null, \"useOverride\")}\r\n                            label=\"Override Attack Bonus?\"\r\n                        />\r\n                        <CollapsableInput\r\n                            description={\"Override: \" + props.effect.override.getDescription(props.selectedLevel)}\r\n                            listInput={\r\n                                <ByLevelInput\r\n                                    modifier={props.effect.override}\r\n                                    onChange={props.onEffectChange.bind(null, \"override\")}\r\n                                />\r\n                            }\r\n                        />\r\n                        <ProficiencyPresets\r\n                            proficiency={props.effect.proficiency}\r\n                            onChange={props.onEffectChange.bind(null, \"proficiency\")}\r\n                        />\r\n                        <CollapsableInput\r\n                            description={\"Proficiency: \" + props.effect.proficiency.getDescription(props.selectedLevel)}\r\n                            listInput={\r\n                                <ProficiencyInput\r\n                                    proficiency={props.effect.proficiency}\r\n                                    onChange={props.onEffectChange.bind(null, \"proficiency\")}\r\n                                />\r\n                            }\r\n                        />\r\n                        <AbilityScorePresets\r\n                            score={props.effect.attackAbilityScore}\r\n                            onChange={props.onEffectChange.bind(null, \"attackAbilityScore\")}\r\n                        />\r\n                        <CollapsableInput\r\n                            description={\"Attack Ability Score: \" + props.effect.attackAbilityScore.getDescription(props.selectedLevel)}\r\n                            listInput={\r\n                                <AbilityScoreInput\r\n                                    score={props.effect.attackAbilityScore}\r\n                                    onChange={props.onEffectChange.bind(null, \"attackAbilityScore\")}\r\n                                />\r\n                            }\r\n                        />\r\n                        <ItemBonusPresets\r\n                            itemBonus={props.effect.itemBonus}\r\n                            onChange={props.onEffectChange.bind(null, \"itemBonus\")}\r\n                        />\r\n                        <CollapsableInput\r\n                            description={\"Item Bonus: \" + props.effect.itemBonus.getDescription(props.selectedLevel)}\r\n                            listInput={\r\n                                <ByLevelInput\r\n                                    modifier={props.effect.itemBonus}\r\n                                    onChange={props.onEffectChange.bind(null, \"itemBonus\")}\r\n                                />\r\n                            }\r\n                        />\r\n                        <CheckboxInput\r\n                            checked={props.effect.useMiscModifiers.isTrue()}\r\n                            onChange={props.onEffectChange.bind(null, \"useMiscModifiers\")}\r\n                            label=\"Add Circumstance/Status Bonuses/Penalties\"\r\n                        />\r\n                    </div>\r\n                }\r\n            />\r\n            {/* <MAPInput /> */}\r\n            <CollapsableInput\r\n                description={\"Damage Ability Score: \" + props.effect.damageAbilityScore.getDescription(props.selectedLevel)}\r\n                listInput={\r\n                    <AbilityScoreInput\r\n                        score={props.effect.damageAbilityScore}\r\n                        onChange={props.onEffectChange.bind(null, \"damageAbilityScore\")}\r\n                    />\r\n                }\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction EffectInput(props) {\r\n    return (\r\n        <StrikeInput\r\n            effect={props.effect}\r\n            selectedLevel={props.selectedLevel}\r\n            onEffectChange={props.onEffectChange}\r\n        />\r\n    );\r\n}\r\nclass PF2App extends React.Component {\r\n    /*\r\n        Target Selector\r\n        Graph Settings\r\n        Graph\r\n        Edit Current Effect\r\n        Select Effects\r\n    */\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            targetInfo: {\r\n                selectedLevel: 3\r\n            },\r\n            routines: [\r\n                [\r\n                    {\r\n                        useOverride: new Flag(),\r\n                        override: new Modifier(),\r\n\r\n                        proficiency: new Proficiency(1, 1, 5, 13),\r\n                        attackAbilityScore: new AbilityScore(18, [true, true, true, true], 17),\r\n                        itemBonus: new ItemBonus(),\r\n\r\n                        useMiscModifiers: new Flag(),\r\n                        circumstanceBonus: new Modifier(),\r\n                        statusBonus: new Modifier(),\r\n                        circumstancePenalty: new Modifier(),\r\n                        statusPenalty: new Modifier(),\r\n                        itemPenalty: new Modifier(),\r\n                        untypedPenalty: new Modifier(),\r\n\r\n                        damageAbilityScore: new AbilityScore(),\r\n                    }\r\n                ]\r\n            ],\r\n            selectedRoutine: 0,\r\n            selectedEffect: 0,\r\n        };\r\n        // this.handleProficiencyChange = this.handleProficiencyChange.bind(this);\r\n        // this.handleAbilityScoreChange = this.handleAbilityScoreChange.bind(this);\r\n        this.handleEffectChange = this.handleEffectChange.bind(this);\r\n    }\r\n\r\n\r\n\r\n    // handleProficiencyChange(key, event) {\r\n    //     const currentProf = this.state.routines[this.state.selectedRoutine][this.state.selectedEffect].proficiency;\r\n    //     const newProf = currentProf.createUpdated(key, event);\r\n    //     const selected = this.state.selectedEffect;\r\n    //     const newEffects = update(this.state.effects, {\r\n    //         [selected]: { proficiency: { $set: newProf } }\r\n    //     });\r\n    //     this.setState({ effects: newEffects });\r\n    // }\r\n\r\n    // handleAbilityScoreChange(isAttack, key, event) {\r\n    //     const currentEffect = this.state.effects[this.state.selectedEffect];\r\n    //     const currentScore = (isAttack ? currentEffect.attackAbilityScore : currentEffect.damageAbilityScore);\r\n    //     const effectProperty = (isAttack ? \"attackAbilityScore\" : \"damageAbilityScore\");\r\n    //     let newScore = currentScore.createUpdated(key, event);\r\n\r\n    //     const newEffects = update(this.state.effects, {\r\n    //         [this.state.selectedEffect]: { [effectProperty]: { $set: newScore } }\r\n    //     });\r\n\r\n    //     this.setState({ effects: newEffects });\r\n    // }\r\n\r\n    handleEffectChange(propertyName, key, event) {\r\n        const currentEffect = this.state.routines[this.state.selectedRoutine][this.state.selectedEffect];\r\n        const currentPropertyValue = currentEffect[propertyName];\r\n        const newPropertyValue = currentPropertyValue.createUpdated(key, event);\r\n\r\n        // switch(propertyName) {\r\n        //     case \"proficiency\":\r\n        //         break;\r\n        //     case \"attackAbilityScore\":\r\n        //         break;\r\n        //     case \"damageAbilityScore\":\r\n        //         break;\r\n        // }\r\n\r\n        const newRoutines = update(this.state.routines, {\r\n            [this.state.selectedRoutine]: {\r\n                [this.state.selectedEffect]: {\r\n                    [propertyName]: { $set: newPropertyValue }\r\n                }\r\n            }\r\n        });\r\n\r\n        this.setState({ routines: newRoutines });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"PF2App\">\r\n                <EffectInput\r\n                    effect={this.state.routines[this.state.selectedRoutine][this.state.selectedEffect]}\r\n                    selectedLevel={this.state.targetInfo.selectedLevel}\r\n                    onEffectChange={this.handleEffectChange}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PF2App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport PF2App from './PF2App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <PF2App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}