{"version":3,"sources":["Target/weaknessSlice.js","Target/targetSlice.js","types.js","defaults.js","Target/TargetInput.js","Routine/damageSlice.js","Routine/effectSlice.js","Routine/activityPathSlice.js","Routine/routineSlice.js","Calculation/Distribution.js","Calculation/Calculation.js","Calculation/EvaluateActivityPath.js","Routine/LevelList.js","Display/useGenerateGraphs.js","Display/Display.js","Routine/SelectedRoutine.js","Routines.js","Export.js","PF2App.js","store.js","serviceWorker.js","index.js"],"names":["weaknessAdapter","createEntityAdapter","weakness","weaknessesSlice","createSlice","name","initialState","getInitialState","reducers","weaknessAdded","addOne","weaknessUpdated","updateOne","weaknessCreated","reducer","state","action","payload","id","type","value","prepare","parentId","weaknessRemoved","removeOne","actions","getSelectors","weaknesses","selectweaknessById","selectById","selectweaknessEntities","selectIds","selectEntities","targetAdapter","selectAll","selectTotal","targetsSlice","targetAdded","targetUpdated","changes","match","level","extraReducers","builder","addCase","weaknessId","entities","push","filter","wid","targets","selecttargetById","selecttargetEntities","graphTypes","DISTRIBUTION","PMDEFENSE","PMRES","ACTrends","LOW","MODERATE","HIGH","EXTREME","SaveTrends","TERRIBLE","activityTypes","STRIKE","SAVE","bonusTrends","FIGHTERWEAPON","MARTIALWEAPON","CASTERWEAPON","DC171519","damageTrends","NONE","FIGHTERMELEE","FIGHTERRANGED","MARTIALMELEE","MARTIALRANGED","CASTERCANTRIP","CASTERMELEE","CASTERRANGED","dieTrends","WEAPON","SPELLLEVEL1","SPELLLEVEL2","defaultActivities","FIGHTER","MARTIAL","CASTER","ALCH","FIGHTERR","MARTIALR","CASTERR","ALCHR","CASTERCA","CASTERCS","CASTERBR","CASTERSA","CASTERS","defenses","AC","FORT","REF","WILL","PER","MAPs","N1","N2","N3","A1","A2","A3","R1","R2","R3","RA1","RA2","RA3","RAA1","RAA2","RAA3","nextMAPs","MAPvalues","rollTypes","NORMAL","ADVANTAGE","DISADVANTAGE","damageTypes","B","P","S","FIRE","materials","COLD_IRON","SILVER","ADAMANTINE","effectTypes","FLATFOOT","FRIGHTENED1","FRIGHTENED2","FRIGHTENED3","FRIGHTENED4","conditions","ALWAYS","CRIT","SUCC","FAIL","CRIF","AT_LEAST_SUCC","AT_LEAST_FAIL","FAIL_WORSE","SUCC_WORSE","dCond","BASIC","Weakness","useSelector","dispatch","useDispatch","className","onChange","e","target","isNaN","parseInt","AddWeakness","useState","weaknessValue","setWeaknessValue","WeaknessSelect","options","dt","key","m","TargetInput","ACTrend","FortTrend","RefTrend","WillTrend","PerTrend","flatfooted","ACOptions","dv","SaveOptions","htmlFor","placeholder","checked","map","defaultTypes","defaultTargetTypes","defaultDamageConditions","CASTERC","zero","maxScore","score16","martialProf","alchProf","casterProf","spellProf","weaponItem","weaponDice","spellDice","spellDice2","i","Math","floor","martialSpec","casterSpec","fighterAB","martialAB","casterAB","alchAB","casterSpellAttack","casterSaveDC","fighterStatic","fighterRanged","martialStatic","martialRanged","casterStatic","casterRanged","bonusTrendValues","damageTrendValues","dieTrendValues","defaultValues","defaultDiceNum","defaultStatic","extremeAC","highAC","moderateAC","lowAC","defaultACs","defaultSaves","damageAdapter","empty","damageId","damagesSlice","damageAdded","damageUpdated","damageCreated","damageCondition","damageType","material","persistent","multiplier","dieTrend","dieAdjustments","diceSize","damageTrend","damageAdjustments","damageRemoved","damages","selectdamageById","selectdamageEntities","effectAdapter","effectId","effectsSlice","effectAdded","effectUpdated","effectCreated","effectCondition","effectType","effectRemoved","effects","selecteffectById","selecteffectEntities","setDefault","apId","setChildren","applyDefault","ap","override","defaultActivity","targetType","diceNum","staticDamage","apIds","activityPathAdapter","activityPathId","defaultParentActivity","useDefault","MAP","bonusTrend","bonusAdjustments","activityPathsSlice","activityPathAdded","activityPathUpdated","activityPathRemoved","undefined","activityPathCreated","parentAP","applyMAP","condition","targetInfoId","routineId","did","eid","ids","activityPaths","selectactivityPathById","selectactivityPathEntities","routinesAdapter","routinesSlice","selectedRoutine","setRoutine","routineAdded","routineUpdated","routineRemoved","routineCreated","display","updateSelected","routines","selectRoutineById","selectRoutineEntities","selectAllRoutines","selectSelectedRoutine","convolve","vec1","vec2","length","Error","volume","kernel","displacement","convVec","j","consolidateDists","maxDamage","dists","dist","max","damageDist","index","applyMin","min","shift","addDamage","context","normal","dam","newDist","newDam","oldValue","chance","newValue","diff","multiplyDist","validateCondition","degreeOfSuccess","indicies","includes","ActivityPathEvaluator","this","routine","ACBonus","resBonus","initialTargetState","frightened","dataArray","cumulative","PdataArray","Pcumulative","expD","expP","routineDDist","routinePDDist","activityPath","evalPath","PdamageDist","currentSum","targetState","defenseBonus","resistanceBonus","currentTarget","currentDamages","currentEffects","currentWeaknesses","activity","bonus","DC","targetValue","console","log","critPercent","dif","getCritSuccessPercent","succPercent","getSuccessPercent","failPercent","getFailurePercent","crfaPercent","getCritFailurePercent","rollType","notcrit","nothit","notfail","notcrfa","notsucc","chances","critDamages","succDamages","failDamages","crfaDamages","damageTrees","forEach","damage","diceArray","damageTree","damageQuality","totalStaticDamage","totalDamageDist","maxW","maxR","calculateExpectedDamage","targetStates","effect","evaluations","Map","has","pathDist","pathPDist","set","get","Plot","createPlotlyComponent","Plotly","evaluateByLevel","evaluator","datasets","perDatasets","levelArray","expDbyLevel","expPDbyLevel","evalRoutine","x","y","yaxis","evaluatePM","displayLevel","defense","expectedDamages","expectedPersistentDamages","bonusArray","expDbyBonus","expPDbyBonus","toFixed","evaluateDistribution","useGenerateGraphs","graphType","title","byLevelTile","xtitle","ytitle","byLeveldatasets","byLevelperDatasets","damageChart","classname","data","layout","autosize","xaxis","legend","xanchor","margin","l","r","useResizeHandler","style","width","height","persistentDamageChart","byLevelDamageChart","byLevelPerDamageChart","Display","addPersistent","setAddPersistent","setGraphType","setDisplayLevel","graphTypeOptions","gt","displayLevelOptions","BYLEVEL","generateAdjustments","entries","adjustments","currentValue","currentIndex","levelOptions","LevelList","dieEntries","generateEntries","dieLevelList","newLevel","conditionOptions","c","bonusTrendOptions","bt","activityTypeOptions","at","MAPOptions","defenseOptions","d","rollOptions","rt","damageConditionOptions","dc","dieTrendOptions","diceSizeOptions","ds","damageTrendOptions","damageTypeOptions","materialOptions","effectTypeOptions","et","multiplierOptions","NameInput","ActivityPath","displayCondition","bonusLevelList","onClick","Damage","damageLevelList","Effect","SelectedRoutine","Routines","routineOptions","routineDisplays","ImportExport","ReactGA","initialize","PF2App","props","send","Export","store","configureStore","routineReducer","activityPathReducer","damageReducer","effectReducer","weaknessReducer","targetReducer","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.24412c4c.chunk.js","sourcesContent":["import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const weaknessAdapter = createEntityAdapter();\r\n\r\nlet weakness = 0;\r\n\r\nexport const weaknessesSlice = createSlice({\r\n  name: \"weaknesses\",\r\n  initialState: weaknessAdapter.getInitialState(),\r\n  reducers: {\r\n    weaknessAdded: weaknessAdapter.addOne,\r\n    weaknessUpdated: weaknessAdapter.updateOne,\r\n    weaknessCreated: {\r\n      reducer: (state, action) => {\r\n        const { id, type, value } = action.payload;\r\n        weaknessAdapter.addOne(state, { id, type, value });\r\n      },\r\n      prepare: ({ parentId, type, value }) => {\r\n        const id = ++weakness;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n            type,\r\n            value,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    weaknessRemoved: weaknessAdapter.removeOne,\r\n  },\r\n});\r\n\r\nexport const {\r\n  weaknessRemoved,\r\n  weaknessCreated,\r\n  weaknessAdded,\r\n  weaknessUpdated,\r\n} = weaknessesSlice.actions;\r\n\r\nexport default weaknessesSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selectweaknessById,\r\n  selectIds: selectweaknessIds,\r\n  selectEntities: selectweaknessEntities,\r\n  selectAll: selectAllweaknesses,\r\n  selectTotal: selectTotalweaknesses,\r\n} = weaknessAdapter.getSelectors((state) => state.weaknesses);\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\n// import { defaultACs, defaultSaves } from \"../defaults\";\r\n// import { defenses } from \"../types\";\r\nimport { weaknessCreated, weaknessRemoved } from \"./weaknessSlice\";\r\n\r\nexport const targetAdapter = createEntityAdapter();\r\n\r\nexport const targetsSlice = createSlice({\r\n  name: \"targets\",\r\n  initialState: targetAdapter.getInitialState(),\r\n  reducers: {\r\n    targetAdded: targetAdapter.addOne,\r\n    targetUpdated: {\r\n      prepare: ({ id, changes, match, level }) => {\r\n        if (!level) level = 1;\r\n        if (level < 1) level = 1;\r\n        if (level > 20) level = 20;\r\n        return { payload: { id, changes, match, level } };\r\n      },\r\n      reducer: (state, action) => {\r\n        targetAdapter.updateOne(state, action.payload);\r\n        // const target = state.entities[action.payload.id];\r\n        // if (!target.level) target.level = 0;\r\n        // if (target.level < -1) target.level = -1;\r\n        // if (target.level > 24) target.level = 24;\r\n        // if (target.useDefaultAC) {\r\n        //   target[defenses.AC] = defaultACs[target.defaultAC][target.level];\r\n        // }\r\n        // if (target.useDefaultFort) {\r\n        //   target[defenses.FORT] =\r\n        //     defaultSaves[target.defaultFort][target.level];\r\n        // }\r\n        // if (target.useDefaultRef) {\r\n        //   target[defenses.REF] = defaultSaves[target.defaultRef][target.level];\r\n        // }\r\n        // if (target.useDefaultWill) {\r\n        //   target[defenses.WILL] =\r\n        //     defaultSaves[target.defaultWill][target.level];\r\n        // }\r\n        // if (target.useDefaultPer) {\r\n        //   target[defenses.PER] = defaultSaves[target.defaultPer][target.level];\r\n        // }\r\n      },\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(weaknessCreated, (state, action) => {\r\n        const { parentId: id, id: weaknessId } = action.payload;\r\n        state.entities[id].weaknesses.push(weaknessId);\r\n        // targetAdded.updateOne(state, { id, changes: { weaknesses: [...weaknesses, weaknessId] }});\r\n      })\r\n      .addCase(weaknessRemoved, (state, action) => {\r\n        const { parentId: id, id: weaknessId } = action.payload;\r\n        state.entities[id].weaknesses = state.entities[id].weaknesses.filter(\r\n          (wid) => wid !== weaknessId\r\n        );\r\n      });\r\n  },\r\n});\r\n\r\nexport const { targetAdded, targetUpdated } = targetsSlice.actions;\r\n\r\nexport default targetsSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selecttargetById,\r\n  selectIds: selecttargetIds,\r\n  selectEntities: selecttargetEntities,\r\n  selectAll: selectAlltargets,\r\n  selectTotal: selectTotaltargets,\r\n} = targetAdapter.getSelectors((state) => state.targets);\r\n","export const graphTypes = {\r\n  DISTRIBUTION: \"Damage Distribution\",\r\n  PMDEFENSE: \"+/- AC/Save Bonus\",\r\n  PMRES: \"+/- Resistance/Weakness\",\r\n};\r\n\r\nexport const ACTrends = {\r\n  LOW: \"Low\",\r\n  MODERATE: \"Moderate\",\r\n  HIGH: \"High\",\r\n  EXTREME: \"Extreme\",\r\n};\r\n\r\nexport const SaveTrends = {\r\n  TERRIBLE: \"Terrible\",\r\n  LOW: \"Low\",\r\n  MODERATE: \"Moderate\",\r\n  HIGH: \"High\",\r\n  EXTREME: \"Extreme\",\r\n};\r\n\r\nexport const activityTypes = {\r\n  STRIKE: \"Strike\",\r\n  SAVE: \"Save\",\r\n};\r\n\r\nexport const bonusTrends = {\r\n  FIGHTERWEAPON: \"Fighter Weapon\",\r\n  MARTIALWEAPON: \"Martial Weapon\",\r\n  CASTERWEAPON: \"Caster Weapon\",\r\n  DC171519: \"Caster Spell\",\r\n};\r\n\r\nexport const damageTrends = {\r\n  NONE: \"None\",\r\n  FIGHTERMELEE: \"Fighter Melee\",\r\n  FIGHTERRANGED: \"Fighter Ranged\",\r\n  MARTIALMELEE: \"Martial Melee\",\r\n  MARTIALRANGED: \"Martial Ranged\",\r\n  CASTERCANTRIP: \"Caster Cantrip\",\r\n  CASTERMELEE: \"Caster Melee\",\r\n  CASTERRANGED: \"Caster Ranged\",\r\n};\r\n\r\nexport const dieTrends = {\r\n  NONE: \"None\",\r\n  WEAPON: \"Weapon\",\r\n  SPELLLEVEL1: \"1 x Spell Level\",\r\n  SPELLLEVEL2: \"2 x Spell Level\",\r\n};\r\n\r\nexport const defaultActivities = {\r\n  FIGHTER: \"Fighter Melee\",\r\n  MARTIAL: \"Martial Melee\",\r\n  CASTER: \"Caster(16str) Melee\",\r\n  ALCH: \"Alchemist(16str) Melee\",\r\n  FIGHTERR: \"Fighter Ranged\",\r\n  MARTIALR: \"Martial Ranged\",\r\n  CASTERR: \"Caster(16dex) Ranged\",\r\n  ALCHR: \"Alchemist(16dex) Ranged\",\r\n  CASTERCA: \"Caster Cantrip Attack\",\r\n  CASTERCS: \"Caster Cantrip Save\",\r\n  CASTERBR: \"Caster 2dX Basic Save\",\r\n  CASTERSA: \"Caster Spell Attack\",\r\n  CASTERS: \"Caster Save\",\r\n};\r\n\r\nexport const defaultValuesAC = {\r\n  LOW: \"Low\",\r\n  MODERATE: \"Moderate\",\r\n  HIGH: \"High\",\r\n  EXTREME: \"Extreme\",\r\n};\r\n\r\nexport const defaultValuesSaves = {\r\n  TERRIBLE: \"Terrible\",\r\n  LOW: \"Low\",\r\n  MODERATE: \"Moderate\",\r\n  HIGH: \"High\",\r\n  EXTREME: \"Extreme\",\r\n};\r\n\r\nexport const defenses = {\r\n  AC: \"AC\",\r\n  FORT: \"Fort\",\r\n  REF: \"Ref\",\r\n  WILL: \"Will\",\r\n  PER: \"Perception\",\r\n};\r\n\r\nexport const MAPs = {\r\n  N1: \"0 (0x-5)\",\r\n  N2: \"-5 (1x-5)\",\r\n  N3: \"-10 (2x-5)\",\r\n  A1: \"0 (0x-4)\",\r\n  A2: \"-4 (1x-4)\",\r\n  A3: \"-8 (2x-4)\",\r\n  R1: \"0 (0x-3)\",\r\n  R2: \"-3 (1x-3)\",\r\n  R3: \"-6 (2x-3)\",\r\n  RA1: \"0 (0x-2)\",\r\n  RA2: \"-2 (1x-2)\",\r\n  RA3: \"-4 (2x-2)\",\r\n  RAA1: \"0 (0x-1)\",\r\n  RAA2: \"-1 (1x-1)\",\r\n  RAA3: \"-2 (2x-1)\",\r\n};\r\n\r\nexport const nextMAPs = {\r\n  \"0 (0x-5)\": \"-5 (1x-5)\",\r\n  \"-5 (1x-5)\": \"-10 (2x-5)\",\r\n  \"-10 (2x-5)\": \"-10 (2x-5)\",\r\n  \"0 (0x-4)\": \"-4 (1x-4)\",\r\n  \"-4 (1x-4)\": \"-8 (2x-4)\",\r\n  \"-8 (2x-4)\": \"-8 (2x-4)\",\r\n  \"0 (0x-3)\": \"-3 (1x-3)\",\r\n  \"-3 (1x-3)\": \"-6 (2x-3)\",\r\n  \"-6 (2x-3)\": \"-6 (2x-3)\",\r\n  \"0 (0x-2)\": \"-2 (1x-2)\",\r\n  \"-2 (1x-2)\": \"-4 (2x-2)\",\r\n  \"-4 (2x-2)\": \"-4 (2x-2)\",\r\n  \"0 (0x-1)\": \"-1 (1x-1)\",\r\n  \"-1 (1x-1)\": \"-2 (2x-1)\",\r\n  \"-2 (2x-1)\": \"-2 (2x-1)\",\r\n};\r\n\r\nexport const MAPvalues = {\r\n  \"0 (0x-5)\": 0,\r\n  \"-5 (1x-5)\": -5,\r\n  \"-10 (2x-5)\": -10,\r\n  \"0 (0x-4)\": 0,\r\n  \"-4 (1x-4)\": -4,\r\n  \"-8 (2x-4)\": -8,\r\n  \"0 (0x-3)\": 0,\r\n  \"-3 (1x-3)\": -3,\r\n  \"-6 (2x-3)\": -6,\r\n  \"0 (0x-2)\": 0,\r\n  \"-2 (1x-2)\": -2,\r\n  \"-4 (2x-2)\": -4,\r\n  \"0 (0x-1)\": 0,\r\n  \"-1 (1x-1)\": -1,\r\n  \"-2 (2x-1)\": -2,\r\n};\r\n\r\nexport const rollTypes = {\r\n  NORMAL: \"Normal\",\r\n  ADVANTAGE: \"Advantage\",\r\n  DISADVANTAGE: \"Disadvantage\",\r\n};\r\n\r\nexport const damageTypes = {\r\n  NONE: \"None\",\r\n  B: \"bludgeoning\",\r\n  P: \"piercing\",\r\n  S: \"slashing\",\r\n  FIRE: \"fire\",\r\n};\r\n\r\nexport const materials = {\r\n  NONE: \"none\",\r\n  COLD_IRON: \"cold iron\",\r\n  SILVER: \"silver\",\r\n  ADAMANTINE: \"adamantine\",\r\n};\r\n\r\nexport const effectTypes = {\r\n  FLATFOOT: \"Flatfooted\",\r\n  FRIGHTENED1: \"Frightened 1\",\r\n  FRIGHTENED2: \"Frightened 2\",\r\n  FRIGHTENED3: \"Frightened 3\",\r\n  FRIGHTENED4: \"Frightened 4\",\r\n};\r\n\r\nexport const conditions = {\r\n  ALWAYS: \"Always\",\r\n  CRIT: \"On Crit\",\r\n  SUCC: \"On Success\",\r\n  FAIL: \"On Failure\",\r\n  CRIF: \"On Crit Fail\",\r\n  AT_LEAST_SUCC: \"Success or better\",\r\n  AT_LEAST_FAIL: \"Failure or better\",\r\n  FAIL_WORSE: \"Failure or worse\",\r\n  SUCC_WORSE: \"Success or worse\",\r\n};\r\n\r\nexport const dCond = {\r\n  STRIKE: \"x1 hit, x2 crit\",\r\n  BASIC: \"Basic save\",\r\n  ALWAYS: \"Always\",\r\n  CRIT: \"On Crit\",\r\n  SUCC: \"On Success\",\r\n  FAIL: \"On Failure\",\r\n  CRIF: \"On Crit Fail\",\r\n  AT_LEAST_SUCC: \"Success or better\",\r\n  AT_LEAST_FAIL: \"Failure or better\",\r\n  FAIL_WORSE: \"Failure or worse\",\r\n  SUCC_WORSE: \"Success or worse\",\r\n};\r\n\r\nexport const diceNums = {\r\n  0: 0,\r\n  1: 1,\r\n  2: 2,\r\n  3: 3,\r\n  4: 4,\r\n  5: 5,\r\n  6: 6,\r\n  7: 7,\r\n  8: 8,\r\n  9: 9,\r\n  10: 10,\r\n  11: 11,\r\n  12: 12,\r\n  13: 13,\r\n  14: 14,\r\n  15: 15,\r\n  16: 16,\r\n  17: 17,\r\n  18: 18,\r\n  19: 19,\r\n  20: 20,\r\n};\r\n\r\nexport const diceSizes = {\r\n  4: 4,\r\n  6: 6,\r\n  8: 8,\r\n  10: 10,\r\n  12: 12,\r\n};\r\n","import {\r\n  activityTypes,\r\n  ACTrends,\r\n  bonusTrends,\r\n  damageTrends,\r\n  dCond,\r\n  defaultActivities,\r\n  defenses,\r\n  dieTrends,\r\n  SaveTrends,\r\n} from \"./types\";\r\n\r\nexport const defaultTypes = {\r\n  [defaultActivities.FIGHTER]: activityTypes.STRIKE,\r\n  [defaultActivities.MARTIAL]: activityTypes.STRIKE,\r\n  [defaultActivities.CASTER]: activityTypes.STRIKE,\r\n  [defaultActivities.ALCH]: activityTypes.STRIKE,\r\n  [defaultActivities.FIGHTERR]: activityTypes.STRIKE,\r\n  [defaultActivities.MARTIALR]: activityTypes.STRIKE,\r\n  [defaultActivities.CASTERR]: activityTypes.STRIKE,\r\n  [defaultActivities.ALCHR]: activityTypes.STRIKE,\r\n  [defaultActivities.CASTERCA]: activityTypes.STRIKE,\r\n  [defaultActivities.CASTERCS]: activityTypes.SAVE,\r\n  [defaultActivities.CASTERSA]: activityTypes.STRIKE,\r\n  [defaultActivities.CASTERS]: activityTypes.SAVE,\r\n  [defaultActivities.CASTERBR]: activityTypes.SAVE,\r\n};\r\n\r\nexport const defaultTargetTypes = {\r\n  [defaultActivities.FIGHTER]: defenses.AC,\r\n  [defaultActivities.MARTIAL]: defenses.AC,\r\n  [defaultActivities.CASTER]: defenses.AC,\r\n  [defaultActivities.ALCH]: defenses.AC,\r\n  [defaultActivities.FIGHTERR]: defenses.AC,\r\n  [defaultActivities.MARTIALR]: defenses.AC,\r\n  [defaultActivities.CASTERR]: defenses.AC,\r\n  [defaultActivities.ALCHR]: defenses.AC,\r\n  [defaultActivities.CASTERCA]: defenses.AC,\r\n  [defaultActivities.CASTERCS]: defenses.REF,\r\n  [defaultActivities.CASTERSA]: defenses.AC,\r\n  [defaultActivities.CASTERS]: defenses.REF,\r\n  [defaultActivities.CASTERBR]: defenses.REF,\r\n};\r\n\r\nexport const defaultDamageConditions = {\r\n  [defaultActivities.FIGHTER]: dCond.STRIKE,\r\n  [defaultActivities.MARTIAL]: dCond.STRIKE,\r\n  [defaultActivities.CASTER]: dCond.STRIKE,\r\n  [defaultActivities.ALCH]: dCond.STRIKE,\r\n  [defaultActivities.FIGHTERR]: dCond.STRIKE,\r\n  [defaultActivities.MARTIALR]: dCond.STRIKE,\r\n  [defaultActivities.CASTERR]: dCond.STRIKE,\r\n  [defaultActivities.ALCHR]: dCond.STRIKE,\r\n  [defaultActivities.CASTERC]: dCond.STRIKE,\r\n  [defaultActivities.CASTERS]: dCond.BASIC,\r\n  [defaultActivities.CASTERCA]: dCond.STRIKE,\r\n  [defaultActivities.CASTERCS]: dCond.BASIC,\r\n  [defaultActivities.CASTERSA]: dCond.STRIKE,\r\n  [defaultActivities.CASTERS]: dCond.BASIC,\r\n  [defaultActivities.CASTERBR]: dCond.BASIC,\r\n};\r\n\r\nconst zero = {};\r\n\r\nconst maxScore = {};\r\nconst score16 = {};\r\nconst martialProf = {};\r\nconst alchProf = {};\r\nconst casterProf = {};\r\n\r\nconst spellProf = {};\r\n\r\nconst weaponItem = {};\r\nconst weaponDice = {};\r\nconst spellDice = {};\r\nconst spellDice2 = {};\r\nfor (let i = 1; i <= 20; i++) {\r\n  spellDice[i] = Math.floor((i + 1) / 2);\r\n  spellDice2[i] = 2 * Math.floor((i + 1) / 2);\r\n}\r\n\r\nconst martialSpec = {};\r\nconst casterSpec = {};\r\n\r\nconst fighterAB = {};\r\nconst martialAB = {};\r\nconst casterAB = {};\r\nconst alchAB = {};\r\n\r\nconst casterSpellAttack = {};\r\nconst casterSaveDC = {};\r\n\r\nconst fighterStatic = {};\r\nconst fighterRanged = {};\r\nconst martialStatic = {};\r\nconst martialRanged = {};\r\nconst casterStatic = {};\r\nconst casterRanged = {};\r\n\r\nfor (let i = 1; i <= 20; i++) {\r\n  zero[i] = 0;\r\n\r\n  maxScore[i] = 4;\r\n  score16[i] = 3;\r\n\r\n  martialProf[i] = 2;\r\n  alchProf[i] = 2;\r\n  casterProf[i] = 2;\r\n\r\n  spellProf[i] = 2;\r\n\r\n  weaponItem[i] = 0;\r\n  weaponDice[i] = 1;\r\n\r\n  martialSpec[i] = 0;\r\n  casterSpec[i] = 0;\r\n\r\n  if (i >= 2) {\r\n    weaponItem[i] = 1;\r\n  }\r\n  if (i >= 4) {\r\n    weaponDice[i] = 2;\r\n  }\r\n  if (i >= 5) {\r\n    martialProf[i] = 4;\r\n    score16[i] = 4;\r\n  }\r\n  if (i >= 7) {\r\n    alchProf[i] = 4;\r\n    martialSpec[i] = 1;\r\n    spellProf[i] = 4;\r\n  }\r\n  if (i >= 10) {\r\n    weaponItem[i] = 2;\r\n    maxScore[i] = 5;\r\n  }\r\n  if (i >= 11) {\r\n    casterProf[i] = 4;\r\n  }\r\n  if (i >= 12) {\r\n    weaponDice[i] = 3;\r\n  }\r\n  if (i >= 13) {\r\n    martialProf[i] = 6;\r\n    casterSpec[i] = 1;\r\n  }\r\n  if (i >= 15) {\r\n    martialSpec[i] = 2;\r\n    score16[i] = 5;\r\n    spellProf[i] = 6;\r\n  }\r\n  if (i >= 16) {\r\n    weaponItem[i] = 3;\r\n  }\r\n  if (i >= 17) {\r\n    maxScore[i] = 6;\r\n  }\r\n  if (i >= 19) {\r\n    weaponDice[i] = 4;\r\n    spellProf[i] = 8;\r\n  }\r\n  if (i >= 20) {\r\n    maxScore[i] = 7;\r\n  }\r\n\r\n  fighterAB[i] = i + martialProf[i] + maxScore[i] + weaponItem[i] + 2;\r\n  martialAB[i] = i + martialProf[i] + maxScore[i] + weaponItem[i];\r\n  casterAB[i] = i + casterProf[i] + score16[i] + weaponItem[i];\r\n  alchAB[i] = i + alchProf[i] + score16[i] + weaponItem[i];\r\n  casterSpellAttack[i] = i + spellProf[i] + maxScore[i];\r\n  casterSaveDC[i] = 10 + i + spellProf[i] + maxScore[i];\r\n\r\n  fighterStatic[i] = maxScore[i] + (martialSpec[i] * (martialProf[i] + 2)) / 2;\r\n  fighterRanged[i] = (martialSpec[i] * (martialProf[i] + 2)) / 2;\r\n  martialStatic[i] = maxScore[i] + (martialSpec[i] * martialProf[i]) / 2;\r\n  martialRanged[i] = (martialSpec[i] * martialProf[i]) / 2;\r\n  casterStatic[i] = score16[i] + (casterSpec[i] * casterProf[i]) / 2;\r\n  casterRanged[i] = (casterSpec[i] * casterProf[i]) / 2;\r\n}\r\nexport const bonusTrendValues = {\r\n  [bonusTrends.FIGHTERWEAPON]: fighterAB,\r\n  [bonusTrends.MARTIALWEAPON]: martialAB,\r\n  [bonusTrends.CASTERWEAPON]: casterAB,\r\n  [bonusTrends.DC171519]: casterSpellAttack,\r\n};\r\n\r\nexport const damageTrendValues = {\r\n  [damageTrends.NONE]: zero,\r\n  [damageTrends.FIGHTERMELEE]: fighterStatic,\r\n  [damageTrends.MARTIALMELEE]: martialStatic,\r\n  [damageTrends.CASTERMELEE]: casterStatic,\r\n  [damageTrends.FIGHTERRANGED]: fighterRanged,\r\n  [damageTrends.MARTIALRANGED]: martialRanged,\r\n  [damageTrends.CASTERRANGED]: casterRanged,\r\n  [damageTrends.CASTERCANTRIP]: maxScore,\r\n};\r\n\r\nexport const dieTrendValues = {\r\n  [dieTrends.NONE]: zero,\r\n  [dieTrends.WEAPON]: weaponDice,\r\n  [dieTrends.SPELLLEVEL1]: spellDice,\r\n  [dieTrends.SPELLLEVEL2]: spellDice2,\r\n};\r\n\r\nexport const defaultValues = {\r\n  [defaultActivities.FIGHTER]: fighterAB,\r\n  [defaultActivities.MARTIAL]: martialAB,\r\n  [defaultActivities.CASTER]: casterAB,\r\n  [defaultActivities.ALCH]: alchAB,\r\n  [defaultActivities.FIGHTERR]: fighterAB,\r\n  [defaultActivities.MARTIALR]: martialAB,\r\n  [defaultActivities.CASTERR]: casterAB,\r\n  [defaultActivities.ALCHR]: alchAB,\r\n  [defaultActivities.CASTERCA]: casterSpellAttack,\r\n  [defaultActivities.CASTERCS]: casterSaveDC,\r\n  [defaultActivities.CASTERSA]: casterSpellAttack,\r\n  [defaultActivities.CASTERS]: casterSaveDC,\r\n  [defaultActivities.CASTERBR]: casterSaveDC,\r\n};\r\n\r\nexport const defaultDiceNum = {\r\n  [defaultActivities.FIGHTER]: weaponDice,\r\n  [defaultActivities.MARTIAL]: weaponDice,\r\n  [defaultActivities.CASTER]: weaponDice,\r\n  [defaultActivities.ALCH]: weaponDice,\r\n  [defaultActivities.FIGHTERR]: weaponDice,\r\n  [defaultActivities.MARTIALR]: weaponDice,\r\n  [defaultActivities.CASTERR]: weaponDice,\r\n  [defaultActivities.ALCHR]: weaponDice,\r\n  [defaultActivities.CASTERCA]: spellDice,\r\n  [defaultActivities.CASTERCS]: spellDice,\r\n  [defaultActivities.CASTERSA]: zero,\r\n  [defaultActivities.CASTERS]: zero,\r\n  [defaultActivities.CASTERBR]: spellDice2,\r\n};\r\n\r\nexport const defaultStatic = {\r\n  [defaultActivities.FIGHTER]: fighterStatic,\r\n  [defaultActivities.MARTIAL]: martialStatic,\r\n  [defaultActivities.CASTER]: casterStatic,\r\n  [defaultActivities.ALCH]: casterStatic,\r\n  [defaultActivities.FIGHTERR]: fighterRanged,\r\n  [defaultActivities.MARTIALR]: martialRanged,\r\n  [defaultActivities.CASTERR]: casterRanged,\r\n  [defaultActivities.ALCHR]: casterRanged,\r\n  [defaultActivities.CASTERCA]: maxScore,\r\n  [defaultActivities.CASTERCS]: maxScore,\r\n  [defaultActivities.CASTERSA]: zero,\r\n  [defaultActivities.CASTERS]: zero,\r\n  [defaultActivities.CASTERBR]: zero,\r\n};\r\n\r\nconst extremeAC = {\r\n  \"-1\": 18,\r\n  0: 19,\r\n  1: 19,\r\n  2: 21,\r\n  3: 22,\r\n  4: 24,\r\n  5: 25,\r\n  6: 27,\r\n  7: 28,\r\n  8: 30,\r\n  9: 31,\r\n  10: 33,\r\n  11: 34,\r\n  12: 36,\r\n  13: 37,\r\n  14: 39,\r\n  15: 40,\r\n  16: 42,\r\n  17: 43,\r\n  18: 45,\r\n  19: 46,\r\n  20: 48,\r\n  21: 49,\r\n  22: 51,\r\n  23: 52,\r\n  24: 54,\r\n};\r\nconst highAC = { ...extremeAC };\r\nfor (let level in highAC) highAC[level] -= 3;\r\n\r\nconst moderateAC = { ...extremeAC };\r\nfor (let level in moderateAC) moderateAC[level] -= 4;\r\n\r\nconst lowAC = { ...extremeAC };\r\nfor (let level in lowAC) lowAC[level] -= 6;\r\n\r\nexport const defaultACs = {\r\n  [ACTrends.EXTREME]: extremeAC,\r\n  [ACTrends.HIGH]: highAC,\r\n  [ACTrends.MODERATE]: moderateAC,\r\n  [ACTrends.LOW]: lowAC,\r\n};\r\n\r\nconst extremeSaves = {\r\n  \"-1\": 9,\r\n  0: 10,\r\n  1: 11,\r\n  2: 12,\r\n  3: 14,\r\n  4: 15,\r\n  5: 17,\r\n  6: 18,\r\n  7: 20,\r\n  8: 21,\r\n  9: 23,\r\n  10: 24,\r\n  11: 26,\r\n  12: 27,\r\n  13: 29,\r\n  14: 30,\r\n  15: 32,\r\n  16: 33,\r\n  17: 35,\r\n  18: 36,\r\n  19: 38,\r\n  20: 39,\r\n  21: 41,\r\n  22: 43,\r\n  23: 44,\r\n  24: 46,\r\n};\r\nconst highSaves = {\r\n  \"-1\": 8,\r\n  0: 9,\r\n  1: 10,\r\n  2: 11,\r\n  3: 12,\r\n  4: 14,\r\n  5: 15,\r\n  6: 17,\r\n  7: 18,\r\n  8: 19,\r\n  9: 21,\r\n  10: 22,\r\n  11: 24,\r\n  12: 25,\r\n  13: 26,\r\n  14: 28,\r\n  15: 29,\r\n  16: 30,\r\n  17: 32,\r\n  18: 33,\r\n  19: 35,\r\n  20: 36,\r\n  21: 38,\r\n  22: 39,\r\n  23: 40,\r\n  24: 42,\r\n};\r\nconst moderateSaves = {\r\n  \"-1\": 5,\r\n  0: 6,\r\n  1: 7,\r\n  2: 8,\r\n  3: 9,\r\n  4: 11,\r\n  5: 12,\r\n  6: 14,\r\n  7: 15,\r\n  8: 16,\r\n  9: 18,\r\n  10: 19,\r\n  11: 21,\r\n  12: 22,\r\n  13: 23,\r\n  14: 25,\r\n  15: 26,\r\n  16: 28,\r\n  17: 29,\r\n  18: 30,\r\n  19: 32,\r\n  20: 33,\r\n  21: 35,\r\n  22: 36,\r\n  23: 37,\r\n  24: 38,\r\n};\r\nconst lowSaves = {\r\n  \"-1\": 2,\r\n  0: 3,\r\n  1: 4,\r\n  2: 5,\r\n  3: 6,\r\n  4: 8,\r\n  5: 9,\r\n  6: 11,\r\n  7: 12,\r\n  8: 13,\r\n  9: 15,\r\n  10: 16,\r\n  11: 18,\r\n  12: 19,\r\n  13: 20,\r\n  14: 22,\r\n  15: 23,\r\n  16: 25,\r\n  17: 26,\r\n  18: 27,\r\n  19: 29,\r\n  20: 30,\r\n  21: 32,\r\n  22: 33,\r\n  23: 34,\r\n  24: 36,\r\n};\r\nconst terribleSaves = {\r\n  \"-1\": 0,\r\n  0: 1,\r\n  1: 2,\r\n  2: 3,\r\n  3: 4,\r\n  4: 6,\r\n  5: 7,\r\n  6: 8,\r\n  7: 10,\r\n  8: 11,\r\n  9: 12,\r\n  10: 14,\r\n  11: 15,\r\n  12: 16,\r\n  13: 18,\r\n  14: 19,\r\n  15: 20,\r\n  16: 22,\r\n  17: 23,\r\n  18: 24,\r\n  19: 26,\r\n  20: 27,\r\n  21: 28,\r\n  22: 30,\r\n  23: 31,\r\n  24: 32,\r\n};\r\nexport const defaultSaves = {\r\n  [SaveTrends.EXTREME]: extremeSaves,\r\n  [SaveTrends.HIGH]: highSaves,\r\n  [SaveTrends.MODERATE]: moderateSaves,\r\n  [SaveTrends.LOW]: lowSaves,\r\n  [SaveTrends.TERRIBLE]: terribleSaves,\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { selecttargetById, targetUpdated } from \"./targetSlice\";\r\nimport { ACTrends, damageTypes, materials, SaveTrends } from \"../types\";\r\nimport {\r\n  selectweaknessById,\r\n  weaknessCreated,\r\n  weaknessRemoved,\r\n  weaknessUpdated,\r\n} from \"./weaknessSlice\";\r\n\r\nfunction TargetInput({ id }) {\r\n  const {\r\n    name,\r\n\r\n    // level,\r\n    // matchRoutines,\r\n    // levelDiff,\r\n\r\n    // [defenses.AC]: AC,\r\n    // defaultAC,\r\n    // useDefaultAC,\r\n    // [defenses.FORT]: Fort,\r\n    // defaultFort,\r\n    // useDefaultFort,\r\n    // [defenses.REF]: Ref,\r\n    // defaultRef,\r\n    // useDefaultRef,\r\n    // [defenses.WILL]: Will,\r\n    // defaultWill,\r\n    // useDefaultWill,\r\n    // [defenses.PER]: Perception,\r\n    // defaultPer,\r\n    // useDefaultPer,\r\n\r\n    ACTrend,\r\n    FortTrend,\r\n    RefTrend,\r\n    WillTrend,\r\n    PerTrend,\r\n\r\n    flatfooted,\r\n    weaknesses,\r\n  } = useSelector((state) => selecttargetById(state, 0));\r\n  const dispatch = useDispatch();\r\n\r\n  const ACOptions = [];\r\n  for (let dv in ACTrends) {\r\n    ACOptions.push(<option key={dv}>{ACTrends[dv]}</option>);\r\n  }\r\n  const SaveOptions = [];\r\n  for (let dv in SaveTrends) {\r\n    SaveOptions.push(<option key={dv}>{SaveTrends[dv]}</option>);\r\n  }\r\n\r\n  // name, level, ac, fort, ref, will, perception, resistances/weaknesses\r\n  return (\r\n    <div className=\"box flexbox\">\r\n      <span className=\"input\">\r\n        <label htmlFor=\"targetName\">{\"Target Name: \"}</label>\r\n        <input\r\n          id=\"targetName\"\r\n          type=\"text\"\r\n          placeholder=\"Enter Target name\"\r\n          value={name}\r\n          onChange={(e) =>\r\n            dispatch(targetUpdated({ id, changes: { name: e.target.value } }))\r\n          }\r\n        />\r\n      </span>\r\n\r\n      {/* <span className=\"input\">\r\n        <label htmlFor=\"Level\">{\" Level: \"}</label>\r\n        <input\r\n          id=\"Level\"\r\n          type=\"number\"\r\n          value={level}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: {\r\n                  level: parseInt(e.target.value),\r\n                },\r\n                match: matchRoutines,\r\n                level: parseInt(e.target.value) - levelDiff,\r\n              })\r\n            )\r\n          }\r\n        />\r\n      </span> */}\r\n\r\n      {/* <span className=\"input\">\r\n        <label htmlFor=\"match\">{\" Match routine levels: \"}</label>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={matchRoutines}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { matchRoutines: e.target.checked },\r\n                match: e.target.checked,\r\n                level: level - levelDiff,\r\n              })\r\n            )\r\n          }\r\n        />\r\n        <input\r\n          type=\"number\"\r\n          value={levelDiff}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: {\r\n                  levelDiff: parseInt(e.target.value),\r\n                },\r\n                match: matchRoutines,\r\n                level: level - parseInt(e.target.value),\r\n              })\r\n            )\r\n          }\r\n        />\r\n      </span> */}\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"AC\">{\" AC: \"}</label>\r\n        {/* <input\r\n          type=\"checkbox\"\r\n          checked={useDefaultAC}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { useDefaultAC: e.target.checked } })\r\n            )\r\n          }\r\n        /> */}\r\n        <select\r\n          id=\"AC\"\r\n          value={ACTrend}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { ACTrend: e.target.value } })\r\n            )\r\n          }\r\n        >\r\n          {ACOptions}\r\n        </select>\r\n        {/* <input\r\n          id=\"AC\"\r\n          type=\"number\"\r\n          value={AC}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: {\r\n                  useDefaultAC: false,\r\n                  [defenses.AC]: parseInt(e.target.value),\r\n                },\r\n              })\r\n            )\r\n          }\r\n        /> */}\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"Fort\">{\" Fort: \"}</label>\r\n        {/* <input\r\n          type=\"checkbox\"\r\n          checked={useDefaultFort}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { useDefaultFort: e.target.checked },\r\n              })\r\n            )\r\n          }\r\n        /> */}\r\n        <select\r\n          id=\"Fort\"\r\n          value={FortTrend}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { FortTrend: e.target.value } })\r\n            )\r\n          }\r\n        >\r\n          {SaveOptions}\r\n        </select>\r\n        {/* <input\r\n          id=\"Fort\"\r\n          type=\"number\"\r\n          value={Fort}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { [defenses.FORT]: parseInt(e.target.value) },\r\n              })\r\n            )\r\n          }\r\n        /> */}\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"Ref\">{\" Ref: \"}</label>\r\n        {/* <input\r\n          type=\"checkbox\"\r\n          checked={useDefaultRef}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { useDefaultRef: e.target.checked },\r\n              })\r\n            )\r\n          }\r\n        /> */}\r\n        <select\r\n          id=\"Red\"\r\n          value={RefTrend}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { RefTrend: e.target.value } })\r\n            )\r\n          }\r\n        >\r\n          {SaveOptions}\r\n        </select>\r\n        {/* <input\r\n          id=\"Ref\"\r\n          type=\"number\"\r\n          value={Ref}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { [defenses.REF]: parseInt(e.target.value) },\r\n              })\r\n            )\r\n          }\r\n        /> */}\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"Will\">{\" Will: \"}</label>\r\n        {/* <input\r\n          type=\"checkbox\"\r\n          checked={useDefaultWill}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { useDefaultWill: e.target.checked },\r\n              })\r\n            )\r\n          }\r\n        /> */}\r\n        <select\r\n          id=\"Will\"\r\n          value={WillTrend}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { WillTrend: e.target.value } })\r\n            )\r\n          }\r\n        >\r\n          {SaveOptions}\r\n        </select>\r\n        {/* <input\r\n          id=\"Will\"\r\n          type=\"number\"\r\n          value={Will}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { [defenses.WILL]: parseInt(e.target.value) },\r\n              })\r\n            )\r\n          }\r\n        /> */}\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"Perception\">{\" Perception: \"}</label>\r\n        {/* <input\r\n          type=\"checkbox\"\r\n          checked={useDefaultPer}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { useDefaultPer: e.target.checked },\r\n              })\r\n            )\r\n          }\r\n        /> */}\r\n        <select\r\n          id=\"Perception\"\r\n          value={PerTrend}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { PerTrend: e.target.value } })\r\n            )\r\n          }\r\n        >\r\n          {SaveOptions}\r\n        </select>\r\n        {/* <input\r\n          id=\"Perception\"\r\n          type=\"number\"\r\n          value={Perception}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { [defenses.PER]: parseInt(e.target.value) },\r\n              })\r\n            )\r\n          }\r\n        /> */}\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"Flatfooted\">{\" Flatfooted: \"}</label>\r\n        <input\r\n          id=\"Flatfooted\"\r\n          type=\"checkbox\"\r\n          checked={flatfooted}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { flatfooted: e.target.checked } })\r\n            )\r\n          }\r\n        />\r\n      </span>\r\n\r\n      <div className=\"box flexbox\">\r\n        {\" Resistance/Weakness: \"}\r\n        {weaknesses.map((weaknessId) => (\r\n          <Weakness parentId={id} id={weaknessId} key={weaknessId} />\r\n        ))}\r\n        <AddWeakness parentId={id} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// const TargetInfo = ({ id }) => {\r\n//   const { overrideDefault, type, value, weaknesses } = useSelector((state) =>\r\n//     selecttargetInfoById(state, id)\r\n//   );\r\n//   const dispatch = useDispatch();\r\n\r\n//   const defenseOptions = [];\r\n//   for (let d in defenses) {\r\n//     defenseOptions.push(<option key={d}>{defenses[d]}</option>);\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"box\">\r\n//       {\"Override Target: \"}\r\n//       <input\r\n//         type=\"checkbox\"\r\n//         checked={overrideDefault}\r\n//         onChange={(e) =>\r\n//           dispatch(\r\n//             targetInfoUpdated({\r\n//               id,\r\n//               changes: { overrideDefault: e.target.checked },\r\n//             })\r\n//           )\r\n//         }\r\n//       />\r\n\r\n// {/* <Weaknesses parentId={id} weaknessIds={weaknesses} /> */}\r\n\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const Weaknesses = ({ parentId, weaknessIds }) => {\r\n//   return (\r\n//     <span>\r\n//       {weaknessIds.map((weaknessId) => (\r\n//         <Weakness id={weaknessId} key={weaknessId} />\r\n//       ))}\r\n//       <AddWeakness id={parentId} />\r\n//     </span>\r\n//   );\r\n// };\r\n\r\nconst Weakness = ({ id, parentId }) => {\r\n  // needs to have parent id to remove weakness\r\n  const { type, value } = useSelector((state) => selectweaknessById(state, id));\r\n  const dispatch = useDispatch();\r\n\r\n  const updateOrRemoveWeakness = (e) => {\r\n    if (e.target.value === damageTypes.NONE) {\r\n      // remove this weakness\r\n      dispatch(weaknessRemoved({ id, parentId }));\r\n    } else {\r\n      dispatch(weaknessUpdated({ id, changes: { type: e.target.value } }));\r\n    }\r\n  };\r\n  const updateWeaknessValue = (e) => {\r\n    if (!isNaN(e.target.value)) {\r\n      dispatch(\r\n        weaknessUpdated({ id, changes: { value: parseInt(e.target.value) } })\r\n      );\r\n    }\r\n  };\r\n  return (\r\n    <span className=\"input\">\r\n      <WeaknessSelect value={type} onChange={updateOrRemoveWeakness} />\r\n      <input type=\"number\" value={value} onChange={updateWeaknessValue} />\r\n    </span>\r\n  );\r\n};\r\n\r\nlet weaknessId = 0;\r\n\r\nconst AddWeakness = ({ parentId }) => {\r\n  const dispatch = useDispatch();\r\n  let [weaknessValue, setWeaknessValue] = useState(0);\r\n\r\n  // add a Weakness to TargetInfo id\r\n  const addWeakness = (e) => {\r\n    if (e.target.value !== damageTypes.NONE) {\r\n      // need to create a new weakness\r\n      weaknessId++;\r\n      dispatch(\r\n        weaknessCreated({\r\n          id: weaknessId,\r\n          type: e.target.value,\r\n          value: weaknessValue,\r\n          parentId: parentId,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <span className=\"input\">\r\n      <WeaknessSelect value={damageTypes.NONE} onChange={addWeakness} />\r\n      <input\r\n        type=\"number\"\r\n        value={weaknessValue}\r\n        onChange={(e) => setWeaknessValue(parseInt(e.target.value))}\r\n      />\r\n    </span>\r\n  );\r\n};\r\n\r\nconst WeaknessSelect = ({ value, onChange }) => {\r\n  const options = [];\r\n  for (let dt in damageTypes) {\r\n    options.push(<option key={dt}>{damageTypes[dt]}</option>);\r\n  }\r\n  for (let m in materials) {\r\n    if (materials[m] === materials.NONE) continue;\r\n    options.push(<option key={m}>{materials[m]}</option>);\r\n  }\r\n  return (\r\n    <span>\r\n      <select value={value} onChange={(e) => onChange(e)}>\r\n        {options}\r\n      </select>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default TargetInput;\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\nimport {\r\n  damageTrends,\r\n  damageTypes,\r\n  dCond,\r\n  dieTrends,\r\n  materials,\r\n} from \"../types\";\r\n\r\nexport const damageAdapter = createEntityAdapter();\r\n\r\n// damageAdded({\r\n//   id: 0,\r\n//   condition: dCond.STRIKE,\r\n//   diceNum: 1,\r\n//   diceSize: 8,\r\n//   staticDamage: 6,\r\n//   type: damageTypes.PIERCE,\r\n//   material: materials.COLD_IRON,\r\n// });\r\nconst empty = {};\r\nfor (let i = 1; i <= 20; i++) {\r\n  empty[i] = 0;\r\n}\r\n\r\nlet damageId = 1;\r\nexport const damagesSlice = createSlice({\r\n  name: \"damages\",\r\n  initialState: damageAdapter.getInitialState(),\r\n  reducers: {\r\n    damageAdded: damageAdapter.addOne,\r\n    damageUpdated: damageAdapter.updateOne,\r\n    damageCreated: {\r\n      reducer: (state, action) => {\r\n        const { id } = action.payload;\r\n        damageAdapter.addOne(state, {\r\n          id,\r\n          damageCondition: dCond.STRIKE,\r\n          damageType: damageTypes.S,\r\n          material: materials.NONE,\r\n          persistent: false,\r\n          multiplier: 1,\r\n\r\n          dieTrend: dieTrends.NONE,\r\n          dieAdjustments: { ...empty },\r\n          diceSize: 6,\r\n          damageTrend: damageTrends.NONE,\r\n          damageAdjustments: { ...empty },\r\n        });\r\n      },\r\n      prepare: ({ parentId }) => {\r\n        const id = ++damageId;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    damageRemoved: (state, action) => {\r\n      damageAdapter.removeOne(state, action.payload.id);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { damageRemoved, damageCreated, damageAdded, damageUpdated } =\r\n  damagesSlice.actions;\r\n\r\nexport default damagesSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selectdamageById,\r\n  selectIds: selectdamageIds,\r\n  selectEntities: selectdamageEntities,\r\n  selectAll: selectAlldamages,\r\n  selectTotal: selectTotaldamages,\r\n} = damageAdapter.getSelectors((state) => state.damages);\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\nimport { conditions, effectTypes } from \"../types\";\r\n\r\nexport const effectAdapter = createEntityAdapter();\r\n\r\nlet effectId = 1;\r\nexport const effectsSlice = createSlice({\r\n  name: \"effects\",\r\n  initialState: effectAdapter.getInitialState(),\r\n  reducers: {\r\n    effectAdded: effectAdapter.addOne,\r\n    effectUpdated: effectAdapter.updateOne,\r\n    effectCreated: {\r\n      reducer: (state, action) => {\r\n        const { id } = action.payload;\r\n        effectAdapter.addOne(state, {\r\n          id,\r\n          effectCondition: conditions.ALWAYS,\r\n          effectType: effectTypes.FLATFOOT,\r\n        });\r\n      },\r\n      prepare: ({ parentId }) => {\r\n        const id = ++effectId;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    effectRemoved: (state, action) => {\r\n      effectAdapter.removeOne(state, action.payload.id);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { effectAdded, effectUpdated, effectCreated, effectRemoved } =\r\n  effectsSlice.actions;\r\n\r\nexport default effectsSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selecteffectById,\r\n  selectIds: selecteffectIds,\r\n  selectEntities: selecteffectEntities,\r\n  selectAll: selectAlleffects,\r\n  selectTotal: selectTotaleffects,\r\n} = effectAdapter.getSelectors((state) => state.effects);\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\nimport {\r\n  defaultDamageConditions,\r\n  defaultDiceNum,\r\n  defaultStatic,\r\n  defaultTargetTypes,\r\n  defaultTypes,\r\n  defaultValues,\r\n} from \"../defaults\";\r\nimport { targetUpdated } from \"../Target/targetSlice\";\r\nimport {\r\n  activityTypes,\r\n  conditions,\r\n  damageTypes,\r\n  dCond,\r\n  defaultActivities,\r\n  bonusTrends,\r\n  defenses,\r\n  MAPs,\r\n  materials,\r\n  nextMAPs,\r\n} from \"../types\";\r\nimport { damageCreated, damageRemoved } from \"./damageSlice\";\r\nimport { effectCreated, effectRemoved } from \"./effectSlice\";\r\n\r\nfunction setDefault(state, apId, setChildren = true) {\r\n  function applyDefault(apId) {\r\n    const ap = state.entities[apId];\r\n    if (ap.override) {\r\n      return;\r\n    }\r\n    const defaultActivity = ap.defaultActivity;\r\n    ap.type = defaultTypes[defaultActivity];\r\n    ap.targetType = defaultTargetTypes[defaultActivity];\r\n    ap.value = defaultValues[defaultActivity][ap.level];\r\n    ap.damageCondition = defaultDamageConditions[defaultActivity];\r\n    ap.diceNum = defaultDiceNum[defaultActivity][ap.level];\r\n    ap.staticDamage = defaultStatic[defaultActivity][ap.level];\r\n    if (setChildren) {\r\n      for (let apId of ap.apIds) {\r\n        state.entities[apId].level = ap.level;\r\n        applyDefault(apId);\r\n      }\r\n    }\r\n  }\r\n  applyDefault(apId);\r\n}\r\nexport const activityPathAdapter = createEntityAdapter();\r\n\r\nconst empty = {};\r\nfor (let i = 1; i <= 20; i++) {\r\n  empty[i] = 0;\r\n}\r\nlet activityPathId = 1;\r\nconst defaultParentActivity = {\r\n  level: 1,\r\n  useDefault: false,\r\n  defaultActivity: defaultActivities.FIGHTER,\r\n  type: activityTypes.STRIKE,\r\n  targetType: defenses.AC,\r\n  value: 9,\r\n  MAP: MAPs.N1,\r\n  damageCondition: dCond.STRIKE,\r\n  diceNum: 1,\r\n  diceSize: 8,\r\n  staticDamage: 4,\r\n  damageType: damageTypes.S,\r\n  material: materials.NONE,\r\n\r\n  bonusTrend: bonusTrends.MARTIALWEAPON,\r\n  bonusAdjustments: { ...empty },\r\n};\r\n\r\nexport const activityPathsSlice = createSlice({\r\n  name: \"activityPaths\",\r\n  initialState: activityPathAdapter.getInitialState(),\r\n  reducers: {\r\n    activityPathAdded: activityPathAdapter.addOne,\r\n    activityPathUpdated: (state, action) => {\r\n      activityPathAdapter.updateOne(state, action.payload);\r\n      // setDefault(state, action.payload.id);\r\n    },\r\n    activityPathRemoved: (state, action) => {\r\n      const { id, parentId } = action.payload;\r\n      activityPathAdapter.removeOne(state, id);\r\n      if (parentId !== undefined) {\r\n        state.entities[parentId].apIds = state.entities[parentId].apIds.filter(\r\n          (apId) => apId !== id\r\n        );\r\n      }\r\n    },\r\n    activityPathCreated: {\r\n      reducer: (state, action) => {\r\n        const { id, parentId, applyMAP } = action.payload;\r\n\r\n        let parentAP;\r\n        if (parentId !== undefined) {\r\n          parentAP = state.entities[parentId];\r\n        } else {\r\n          parentAP = defaultParentActivity;\r\n        }\r\n\r\n        activityPathAdapter.addOne(state, {\r\n          id,\r\n          condition: conditions.ALWAYS,\r\n          override: false,\r\n          level: parentAP.level,\r\n          useDefault: parentAP.useDefault,\r\n          defaultActivity: parentAP.defaultActivity,\r\n          type: parentAP.type,\r\n          targetType: parentAP.targetType,\r\n          targetInfoId: 0,\r\n          value: parentAP.value,\r\n          MAP: applyMAP ? nextMAPs[parentAP.MAP] : parentAP.MAP,\r\n          damageCondition: parentAP.damageCondition,\r\n          diceNum: parentAP.diceNum,\r\n          diceSize: parentAP.diceSize,\r\n          staticDamage: parentAP.staticDamage,\r\n          damageType: parentAP.damageType,\r\n          material: parentAP.material,\r\n          damages: [],\r\n          effects: [],\r\n          apIds: [],\r\n\r\n          bonusTrend: parentAP.bonusTrend,\r\n          bonusAdjustments: { ...parentAP.bonusAdjustments },\r\n          damageTrend: parentAP.damageTrend,\r\n          damageAdjustments: { ...parentAP.damageAdjustments },\r\n          dieTrend: parentAP.dieTrend,\r\n          dieAdjustments: { ...parentAP.dieAdjustments },\r\n        });\r\n\r\n        if (parentId !== undefined) state.entities[parentId].apIds.push(id);\r\n      },\r\n      prepare: ({ parentId, routineId, applyMAP }) => {\r\n        const id = ++activityPathId;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n            routineId,\r\n            applyMAP,\r\n          },\r\n        };\r\n      },\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(damageCreated, (state, action) => {\r\n        const { parentId: id, id: damageId } = action.payload;\r\n        state.entities[id].damages.push(damageId);\r\n      })\r\n      .addCase(damageRemoved, (state, action) => {\r\n        const { parentId: id, id: damageId } = action.payload;\r\n        state.entities[id].damages = state.entities[id].damages.filter(\r\n          (did) => did !== damageId\r\n        );\r\n      })\r\n      .addCase(effectCreated, (state, action) => {\r\n        const { parentId: id, id: effectId } = action.payload;\r\n        state.entities[id].effects.push(effectId);\r\n      })\r\n      .addCase(effectRemoved, (state, action) => {\r\n        const { parentId: id, id: effectId } = action.payload;\r\n        state.entities[id].effects = state.entities[id].effects.filter(\r\n          (eid) => eid !== effectId\r\n        );\r\n      })\r\n      .addCase(targetUpdated, (state, action) => {\r\n        const { match, level } = action.payload;\r\n        defaultParentActivity.level = level;\r\n        if (match) {\r\n          for (let id of state.ids) {\r\n            state.entities[id].level = level;\r\n            setDefault(state, id, false);\r\n          }\r\n        }\r\n      });\r\n  },\r\n});\r\n\r\nexport const {\r\n  activityPathCreated,\r\n  activityPathAdded,\r\n  activityPathUpdated,\r\n  activityPathRemoved,\r\n} = activityPathsSlice.actions;\r\n\r\nexport default activityPathsSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selectactivityPathById,\r\n  selectIds: selectactivityPathIds,\r\n  selectEntities: selectactivityPathEntities,\r\n  selectAll: selectAllactivityPaths,\r\n  selectTotal: selectTotalactivityPaths,\r\n} = activityPathAdapter.getSelectors((state) => state.activityPaths);\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\nimport { activityPathCreated, activityPathRemoved } from \"./activityPathSlice\";\r\n\r\nexport const routinesAdapter = createEntityAdapter();\r\n\r\nlet routineId = 1;\r\nexport const routinesSlice = createSlice({\r\n  name: \"routines\",\r\n  initialState: routinesAdapter.getInitialState({ selectedRoutine: 0 }),\r\n  reducers: {\r\n    setRoutine: (state, action) => {\r\n      state.selectedRoutine = action.payload || 0;\r\n    },\r\n    routineAdded: routinesAdapter.addOne,\r\n    routineUpdated: routinesAdapter.updateOne,\r\n    routineRemoved: (state, action) => {\r\n      routinesAdapter.removeOne(state, action);\r\n      if (action.payload === state.selectedRoutine)\r\n        state.selectedRoutine = state.ids ? state.ids[0] : undefined;\r\n    },\r\n    routineCreated: {\r\n      reducer: (state, action) => {\r\n        const { id, name, apIds } = action.payload;\r\n        state.selectedRoutine = id;\r\n        routinesAdapter.addOne(state, { id, name, display: true, apIds });\r\n      },\r\n      prepare: () => {\r\n        const id = ++routineId;\r\n        return { payload: { id, name: \"New Routine\", apIds: [] } };\r\n      },\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(activityPathCreated, (state, action) => {\r\n        const { routineId: id, id: apId } = action.payload;\r\n        if (id !== undefined) state.entities[id].apIds.push(apId);\r\n      })\r\n      .addCase(activityPathRemoved, (state, action) => {\r\n        const { routineId, id } = action.payload;\r\n        if (routineId !== undefined) {\r\n          state.entities[routineId].apIds = state.entities[\r\n            routineId\r\n          ].apIds.filter((apId) => apId !== id);\r\n        }\r\n      });\r\n  },\r\n});\r\n\r\nexport const {\r\n  routineCreated,\r\n  setRoutine,\r\n  updateSelected,\r\n  routineAdded,\r\n  routineUpdated,\r\n  routineRemoved,\r\n} = routinesSlice.actions;\r\n\r\nexport default routinesSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selectRoutineById,\r\n  selectIds: selectRoutineIds,\r\n  selectEntities: selectRoutineEntities,\r\n  selectAll: selectAllRoutines,\r\n  selectTotal: selectTotalRoutines,\r\n} = routinesAdapter.getSelectors((state) => state.routines);\r\n\r\nexport const selectSelectedRoutine = (state) => state.routines.selectedRoutine;\r\n","export const convolve = (vec1, vec2) => {\r\n  if (vec1.length === 0 || vec2.length === 0) {\r\n    throw new Error(\"Vectors can not be empty!\");\r\n  }\r\n  const volume = vec1;\r\n  const kernel = vec2;\r\n  let displacement = 0;\r\n  const convVec = [];\r\n\r\n  for (let i = 0; i < volume.length; i++) {\r\n    for (let j = 0; j < kernel.length; j++) {\r\n      if (displacement + j !== convVec.length) {\r\n        convVec[displacement + j] =\r\n          convVec[displacement + j] + volume[i] * kernel[j];\r\n      } else {\r\n        convVec.push(volume[i] * kernel[j]);\r\n      }\r\n    }\r\n    displacement++;\r\n  }\r\n\r\n  return convVec;\r\n};\r\n\r\nexport const multiplyDist = (dam, dist, multiplier) => {\r\n  if (multiplier === 0) return [0, [1]];\r\n  if (multiplier === 1) return [dam, [...dist]];\r\n\r\n  const newDist = [0];\r\n  let index = 0;\r\n  const newDam = Math.floor(dam * multiplier);\r\n\r\n  let i = 0;\r\n  let oldValue = newDam;\r\n  for (let chance of dist) {\r\n    let newValue = Math.floor((dam + i) * multiplier);\r\n    if (newValue === oldValue) {\r\n      // console.log(`adding ${newValue} at ${index} with ${chance}`);\r\n      newDist[index] += chance;\r\n    } else {\r\n      if (newValue > oldValue + 1) {\r\n        for (let diff = 0; diff < newValue - (oldValue + 1); diff++) {\r\n          index++;\r\n          // console.log(`adding ${newValue} at ${index} with ${0}`);\r\n          newDist[index] = 0;\r\n        }\r\n      }\r\n      index++;\r\n      // console.log(`adding ${newValue} at ${index} with ${chance}`);\r\n      newDist[index] = chance;\r\n    }\r\n    oldValue = newValue;\r\n    i++;\r\n  }\r\n\r\n  return [newDam, newDist];\r\n};\r\n\r\nexport const consolidateDists = (...dists) => {\r\n  // dists = [[{staticDamage, damageDist}, chance]]...]\r\n  // console.log(dists);\r\n  let maxDamage = 0;\r\n  for (let dist of dists) {\r\n    // console.log(`chance is ${dist[1]}`);\r\n    maxDamage = Math.max(\r\n      maxDamage,\r\n      dist[0].staticDamage + dist[0].damageDist.length\r\n    );\r\n  }\r\n  let damageDist = [];\r\n  for (let i = 0; i < maxDamage; i++) {\r\n    damageDist.push(0);\r\n    // console.log(`i is ${i}`);\r\n    for (let dist of dists) {\r\n      if (dist[0].staticDamage <= i) {\r\n        let index = i - dist[0].staticDamage;\r\n        // console.log(`val ${dist[0].damageDist[index]} at index ${index}`);\r\n        if (index < dist[0].damageDist.length)\r\n          damageDist[i] += dist[0].damageDist[index] * dist[1];\r\n      }\r\n    }\r\n  }\r\n  // console.log([staticDamage, damageDist]);\r\n  return damageDist;\r\n};\r\n\r\nexport const applyMin = (staticDamage, damageDist, min) => {\r\n  while (staticDamage < min) {\r\n    if (damageDist.length >= 2) {\r\n      damageDist[1] += damageDist[0];\r\n      damageDist.shift();\r\n    }\r\n    staticDamage++;\r\n  }\r\n  return [staticDamage, damageDist];\r\n};\r\n","import {\r\n  bonusTrendValues,\r\n  damageTrendValues,\r\n  defaultACs,\r\n  defaultSaves,\r\n  dieTrendValues,\r\n} from \"../defaults\";\r\nimport {\r\n  activityTypes,\r\n  dCond,\r\n  defenses,\r\n  MAPvalues,\r\n  materials,\r\n  rollTypes,\r\n} from \"../types\";\r\nimport { applyMin, convolve, multiplyDist } from \"./Distribution\";\r\n\r\nfunction getCritSuccessPercent(bonus, DC, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -20) {\r\n    chance = 0;\r\n  } else if (dif === -20) {\r\n    chance = 5;\r\n  } else if (dif < -9) {\r\n    chance = keen ? 10 : 5;\r\n  } else if (dif < 8) {\r\n    chance = (11 + dif) * 5;\r\n  } else {\r\n    chance = 95;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nfunction getSuccessPercent(bonus, DC, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -29) {\r\n    chance = 0;\r\n  } else if (dif < -20) {\r\n    chance = 5;\r\n  } else if (dif === -20) {\r\n    chance = 0;\r\n  } else if (dif < -9) {\r\n    chance = (keen ? 19 : 20 + dif) * 5;\r\n  } else if (dif < -1) {\r\n    chance = 50;\r\n  } else if (dif < 9) {\r\n    chance = (8 - dif) * 5;\r\n  } else {\r\n    chance = 5;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nfunction getFailurePercent(bonus, DC, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -29) {\r\n    chance = 5;\r\n  } else if (dif < -20) {\r\n    chance = (29 + dif) * 5;\r\n  } else if (dif < -10) {\r\n    chance = 45;\r\n  } else if (dif < -1) {\r\n    chance = (-2 - dif) * 5;\r\n  } else if (dif < 9) {\r\n    chance = 5;\r\n  } else {\r\n    chance = 0;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nfunction getCritFailurePercent(bonus, DC, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -29) {\r\n    chance = 95;\r\n  } else if (dif < -10) {\r\n    chance = (-10 - dif) * 5;\r\n  } else if (dif < -1) {\r\n    chance = 5;\r\n  } else {\r\n    chance = 0;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nconst addDamage = (\r\n  context,\r\n  type,\r\n  material,\r\n  persistent,\r\n  staticDamage,\r\n  damageDist,\r\n  multiplier\r\n) => {\r\n  if (persistent) {\r\n    context = context.persistent;\r\n  } else {\r\n    context = context.normal;\r\n  }\r\n  [staticDamage, damageDist] = multiplyDist(\r\n    staticDamage,\r\n    damageDist,\r\n    multiplier\r\n  );\r\n  if (!(type in context)) {\r\n    context[type] = { material, staticDamage, damageDist };\r\n  } else {\r\n    context[type].staticDamage += staticDamage;\r\n    context[type].damageDist = convolve(context[type].damageDist, damageDist);\r\n    if (material !== materials.NONE) context[type].material = material;\r\n  }\r\n};\r\n\r\nfunction calculateExpectedDamage(\r\n  level,\r\n  activity,\r\n  damages,\r\n  target,\r\n  targetState,\r\n  weaknesses,\r\n  defenseBonus,\r\n  resistanceBonus\r\n) {\r\n  let bonus;\r\n  let DC;\r\n  let targetValue;\r\n  switch (activity.targetType) {\r\n    case defenses.AC:\r\n      targetValue = defaultACs[target.ACTrend][level];\r\n      break;\r\n    case defenses.FORT:\r\n      targetValue = defaultSaves[target.FortTrend][level];\r\n      break;\r\n    case defenses.REF:\r\n      targetValue = defaultSaves[target.RefTrend][level];\r\n      break;\r\n    case defenses.WILL:\r\n      targetValue = defaultSaves[target.WillTrend][level];\r\n      break;\r\n    case defenses.PER:\r\n      targetValue = defaultSaves[target.PerTrend][level];\r\n      break;\r\n\r\n    default:\r\n      targetValue = defaultACs[target.ACTrend][level];\r\n      break;\r\n  }\r\n  switch (activity.type) {\r\n    case activityTypes.STRIKE:\r\n      bonus = bonusTrendValues[activity.bonusTrend][level];\r\n      bonus += activity.bonusAdjustments[level];\r\n      bonus += MAPvalues[activity.MAP];\r\n      DC = targetValue + defenseBonus - targetState.frightened;\r\n      if (activity.targetType === defenses.AC) {\r\n        if (target.flatfooted || targetState.flatfooted) DC -= 2;\r\n      } else {\r\n        DC += 10;\r\n      }\r\n      break;\r\n\r\n    case activityTypes.SAVE:\r\n      bonus = targetValue + defenseBonus - targetState.frightened;\r\n      DC = bonusTrendValues[activity.bonusTrend][level];\r\n      DC += activity.bonusAdjustments[level];\r\n      if (activity.targetType === defenses.AC) {\r\n        bonus -= 10;\r\n      }\r\n      break;\r\n\r\n    default:\r\n      console.log(`Activity type ${activity.type} not implemented`);\r\n  }\r\n\r\n  let critPercent = getCritSuccessPercent(bonus, DC);\r\n  let succPercent = getSuccessPercent(bonus, DC);\r\n  let failPercent = getFailurePercent(bonus, DC);\r\n  let crfaPercent = getCritFailurePercent(bonus, DC);\r\n  if (activity.rollType === rollTypes.ADVANTAGE) {\r\n    let notcrit = 100 - critPercent;\r\n    critPercent = 100 - (notcrit * notcrit) / 100;\r\n    let nothit = notcrit - succPercent;\r\n    succPercent = 100 - (nothit * nothit) / 100 - critPercent;\r\n    let notfail = nothit - failPercent;\r\n    failPercent = 100 - (notfail * notfail) / 100 - succPercent - critPercent;\r\n    crfaPercent = (crfaPercent * crfaPercent) / 100;\r\n  } else if (activity.rollType === rollTypes.DISADVANTAGE) {\r\n    let notcrfa = 100 - crfaPercent;\r\n    crfaPercent = 100 - (notcrfa * notcrfa) / 100;\r\n    let notfail = notcrfa - failPercent;\r\n    failPercent = 100 - (notfail * notfail) / 100 - crfaPercent;\r\n    let notsucc = notfail - succPercent;\r\n    succPercent = 100 - (notsucc * notsucc) / 100 - failPercent - crfaPercent;\r\n    critPercent = (critPercent * critPercent) / 100;\r\n  }\r\n  const chances = [\r\n    critPercent / 100,\r\n    succPercent / 100,\r\n    failPercent / 100,\r\n    crfaPercent / 100,\r\n  ];\r\n  const critDamages = { normal: {}, persistent: {} };\r\n  const succDamages = { normal: {}, persistent: {} };\r\n  const failDamages = { normal: {}, persistent: {} };\r\n  const crfaDamages = { normal: {}, persistent: {} };\r\n  const damageTrees = [critDamages, succDamages, failDamages, crfaDamages];\r\n\r\n  // go through each damage and evaluate it, put damage types together\r\n  damages.forEach((damage) => {\r\n    let {\r\n      damageCondition,\r\n      // diceNum,\r\n      diceSize,\r\n      // staticDamage,\r\n      damageType,\r\n      material,\r\n      persistent,\r\n      multiplier,\r\n    } = damage;\r\n    // if (!staticDamage) staticDamage = 0;\r\n\r\n    let diceNum = dieTrendValues[damage.dieTrend][level];\r\n    // console.log(dieTrendValues[damage.dieTrend]);\r\n    diceNum += damage.dieAdjustments[level];\r\n    if (diceNum < 0) diceNum = 0;\r\n    let staticDamage = damageTrendValues[damage.damageTrend][level];\r\n    staticDamage += damage.damageAdjustments[level];\r\n    let damageDist = [1];\r\n    const diceArray = [];\r\n    for (let i = 0; i < diceSize; i++) {\r\n      diceArray.push(1 / diceSize);\r\n    }\r\n    for (let i = 0; i < diceNum; i++) {\r\n      damageDist = convolve(damageDist, diceArray);\r\n    }\r\n    staticDamage += diceNum;\r\n\r\n    // console.log(diceNum);\r\n    // console.log(damage);\r\n    // console.log(level);\r\n    // console.log(staticDamage);\r\n\r\n    switch (damageCondition) {\r\n      case dCond.STRIKE:\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          critDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 2\r\n        );\r\n        break;\r\n\r\n      case dCond.BASIC:\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 0.5\r\n        );\r\n        addDamage(\r\n          failDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          crfaDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 2\r\n        );\r\n        break;\r\n\r\n      case dCond.CRIF:\r\n        addDamage(\r\n          crfaDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.FAIL:\r\n        addDamage(\r\n          failDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.SUCC:\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.CRIT:\r\n        addDamage(\r\n          critDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.AT_LEAST_SUCC:\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          critDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.AT_LEAST_FAIL:\r\n        addDamage(\r\n          failDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          critDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.FAIL_WORSE:\r\n        addDamage(\r\n          crfaDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          failDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.SUCC_WORSE:\r\n        addDamage(\r\n          crfaDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          failDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n\r\n        break;\r\n\r\n      case dCond.ALWAYS:\r\n        addDamage(\r\n          crfaDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          failDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          critDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      default:\r\n        console.log(\r\n          `Damage condition ${damage.condition} not implemented yet.`\r\n        );\r\n    }\r\n  });\r\n\r\n  // for each damage group\r\n  // console.log(damageTrees);\r\n  for (let damageTree of damageTrees) {\r\n    for (let damageQuality of [\"normal\", \"persistent\"]) {\r\n      let totalStaticDamage = 0;\r\n      let totalDamageDist = [1];\r\n      for (let type in damageTree[damageQuality]) {\r\n        let { material, staticDamage, damageDist } =\r\n          damageTree[damageQuality][type];\r\n\r\n        // ignore if there's 0 damage\r\n        if (damageDist.length === 1 && staticDamage <= 0) continue;\r\n\r\n        // make min damage 1 before resistances\r\n        [staticDamage, damageDist] = applyMin(staticDamage, damageDist, 1);\r\n\r\n        // find max weakness and resistance, weaknesses are negative numbers\r\n        let maxW = 0;\r\n        let maxR = 0;\r\n        weaknesses.forEach((weakness) => {\r\n          if (weakness.type === type || weakness.type === material) {\r\n            if (weakness.value + resistanceBonus < 0) {\r\n              maxW = Math.min(maxW, weakness.value + resistanceBonus);\r\n            } else if (weakness.value + resistanceBonus > 0) {\r\n              maxR = Math.max(maxR, weakness.value + resistanceBonus);\r\n            }\r\n          }\r\n        });\r\n        staticDamage = staticDamage - (maxR + maxW);\r\n\r\n        // make min damage 0 after resistances\r\n        [staticDamage, damageDist] = applyMin(staticDamage, damageDist, 0);\r\n\r\n        // console.log([staticDamage, damageDist]);\r\n\r\n        // damageTree[damageQuality][type].staticDamage = staticDamage;\r\n        // damageTree[damageQuality][type].damageDist = damageDist;\r\n        totalStaticDamage += staticDamage;\r\n        totalDamageDist = convolve(totalDamageDist, damageDist);\r\n      }\r\n      damageTree[damageQuality].staticDamage = totalStaticDamage;\r\n      damageTree[damageQuality].damageDist = totalDamageDist;\r\n    }\r\n  }\r\n\r\n  return [damageTrees, chances];\r\n}\r\n\r\nexport { calculateExpectedDamage };\r\n","import { convolve, consolidateDists } from \"./Distribution\";\r\nimport { calculateExpectedDamage } from \"./Calculation\";\r\nimport { conditions, effectTypes } from \"../types\";\r\n\r\nfunction validateCondition(condition, degreeOfSuccess) {\r\n  let indicies = [];\r\n  // console.log(`cond is: ${ap.condition}`);\r\n  switch (condition) {\r\n    case conditions.ALWAYS:\r\n      indicies = [0, 1, 2, 3];\r\n      break;\r\n\r\n    case conditions.AT_LEAST_FAIL:\r\n      indicies = [0, 1, 2];\r\n      break;\r\n\r\n    case conditions.AT_LEAST_SUCC:\r\n      indicies = [0, 1];\r\n      break;\r\n\r\n    case conditions.CRIF:\r\n      indicies = [3];\r\n      break;\r\n\r\n    case conditions.CRIT:\r\n      indicies = [0];\r\n      break;\r\n\r\n    case conditions.FAIL:\r\n      indicies = [2];\r\n      break;\r\n\r\n    case conditions.FAIL_WORSE:\r\n      indicies = [2, 3];\r\n      break;\r\n\r\n    case conditions.SUCC:\r\n      indicies = [1];\r\n      break;\r\n\r\n    case conditions.SUCC_WORSE:\r\n      indicies = [1, 2, 3];\r\n      break;\r\n\r\n    default:\r\n  }\r\n  return indicies.includes(degreeOfSuccess);\r\n}\r\n\r\nclass ActivityPathEvaluator {\r\n  constructor(activityPaths, targets, damages, effects, weaknesses) {\r\n    this.activityPaths = activityPaths;\r\n    this.targets = targets;\r\n    this.damages = damages;\r\n    this.effects = effects;\r\n    this.weaknesses = weaknesses;\r\n  }\r\n\r\n  evalRoutine(routine, level, ACBonus, resBonus) {\r\n    const initialTargetState = {\r\n      flatfooted: false,\r\n      frightened: 0,\r\n    };\r\n    const dataArray = [];\r\n    const cumulative = [];\r\n    const PdataArray = [];\r\n    const Pcumulative = [];\r\n\r\n    let expD = 0;\r\n    let expP = 0;\r\n    let routineDDist = [1];\r\n    let routinePDDist = [1];\r\n    for (let i = 0; i < routine.apIds.length; i++) {\r\n      let activityPath = this.activityPaths[routine.apIds[i]];\r\n      let [damageDist, PdamageDist] = this.evalPath(\r\n        activityPath,\r\n        initialTargetState,\r\n        level,\r\n        ACBonus,\r\n        resBonus\r\n      );\r\n      routineDDist = convolve(routineDDist, damageDist);\r\n      routinePDDist = convolve(routinePDDist, PdamageDist);\r\n    }\r\n    let currentSum = 1;\r\n    for (let i = 0; i < routineDDist.length; i++) {\r\n      dataArray.push(i);\r\n      cumulative.push(currentSum);\r\n      currentSum -= routineDDist[i];\r\n\r\n      expD += routineDDist[i] * i;\r\n    }\r\n    currentSum = 1;\r\n    for (let i = 0; i < routinePDDist.length; i++) {\r\n      PdataArray.push(i);\r\n      Pcumulative.push(currentSum);\r\n      currentSum -= routinePDDist[i];\r\n\r\n      expP += routinePDDist[i] * i;\r\n    }\r\n    return {\r\n      expD,\r\n      expP,\r\n      dataArray,\r\n      routineDDist,\r\n      cumulative,\r\n      PdataArray,\r\n      routinePDDist,\r\n      Pcumulative,\r\n    };\r\n  }\r\n\r\n  evalPath(activityPath, targetState, level, defenseBonus, resistanceBonus) {\r\n    // evaluate this and all following APs\r\n    let currentTarget = this.targets[0];\r\n    let currentDamages = activityPath.damages.map(\r\n      (damageId) => this.damages[damageId]\r\n    );\r\n    //currentDamages.push(activityPath);\r\n    let currentEffects = activityPath.effects.map(\r\n      (effectId) => this.effects[effectId]\r\n    );\r\n    let currentWeaknesses = currentTarget.weaknesses.map(\r\n      (weaknessId) => this.weaknesses[weaknessId]\r\n    );\r\n\r\n    // calculate the expected damage for this activity\r\n    let [damageTrees, chances] = calculateExpectedDamage(\r\n      level,\r\n      activityPath,\r\n      currentDamages,\r\n      currentTarget,\r\n      targetState,\r\n      currentWeaknesses,\r\n      defenseBonus,\r\n      resistanceBonus\r\n    );\r\n\r\n    const targetStates = [targetState, targetState, targetState, targetState];\r\n    // go through each degree of success\r\n    for (let i = 0; i < 4; i++) {\r\n      // go though each effect and update targetStates\r\n      currentEffects.forEach((effect) => {\r\n        let { effectCondition, effectType } = effect;\r\n        if (validateCondition(effectCondition, i)) {\r\n          switch (effectType) {\r\n            case effectTypes.FLATFOOT:\r\n              if (targetStates[i].flatfooted !== true)\r\n                targetStates[i] = { ...targetStates[i], flatfooted: true };\r\n              break;\r\n\r\n            case effectTypes.FRIGHTENED1:\r\n              if (targetStates[i].frightened < 1)\r\n                targetStates[i] = {\r\n                  ...targetStates[i],\r\n                  frightened: 1,\r\n                };\r\n              break;\r\n            case effectTypes.FRIGHTENED2:\r\n              if (targetStates[i].frightened < 2)\r\n                targetStates[i] = {\r\n                  ...targetStates[i],\r\n                  frightened: 2,\r\n                };\r\n              break;\r\n            case effectTypes.FRIGHTENED3:\r\n              if (targetStates[i].frightened < 3)\r\n                targetStates[i] = {\r\n                  ...targetStates[i],\r\n                  frightened: 3,\r\n                };\r\n              break;\r\n            case effectTypes.FRIGHTENED4:\r\n              if (targetStates[i].frightened < 4)\r\n                targetStates[i] = {\r\n                  ...targetStates[i],\r\n                  frightened: 4,\r\n                };\r\n              break;\r\n\r\n            default:\r\n              console.log(`Effect type ${effectType} not implemented`);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // go through each activity path, depending on its condition add its damage distributions to this activities appropriately\r\n    activityPath.apIds.forEach((apId) => {\r\n      let ap = this.activityPaths[apId];\r\n\r\n      const evaluations = new Map();\r\n      // go through each degree of success\r\n      for (let i = 0; i < 4; i++) {\r\n        // evaluate if necessary and add distribution to damageTrees\r\n        if (validateCondition(ap.condition, i)) {\r\n          if (evaluations.has(targetStates[i])) {\r\n            // already evaluated\r\n          } else {\r\n            let [pathDist, pathPDist] = this.evalPath(\r\n              ap,\r\n              targetStates[i],\r\n              level,\r\n              defenseBonus,\r\n              resistanceBonus\r\n            );\r\n            evaluations.set(targetStates[i], { pathDist, pathPDist });\r\n          }\r\n\r\n          damageTrees[i].normal.damageDist = convolve(\r\n            damageTrees[i].normal.damageDist,\r\n            evaluations.get(targetStates[i]).pathDist\r\n          );\r\n          damageTrees[i].persistent.damageDist = convolve(\r\n            damageTrees[i].persistent.damageDist,\r\n            evaluations.get(targetStates[i]).pathPDist\r\n          );\r\n        }\r\n      }\r\n    });\r\n\r\n    let damageDist = consolidateDists(\r\n      [damageTrees[0].normal, chances[0]],\r\n      [damageTrees[1].normal, chances[1]],\r\n      [damageTrees[2].normal, chances[2]],\r\n      [damageTrees[3].normal, chances[3]]\r\n    );\r\n    let PdamageDist = consolidateDists(\r\n      [damageTrees[0].persistent, chances[0]],\r\n      [damageTrees[1].persistent, chances[1]],\r\n      [damageTrees[2].persistent, chances[2]],\r\n      [damageTrees[3].persistent, chances[3]]\r\n    );\r\n    // console.log(damageDist);\r\n\r\n    return [damageDist, PdamageDist];\r\n  }\r\n}\r\n\r\nconst evaluateRoutine = (evaluator, routine) => {};\r\nexport { ActivityPathEvaluator, evaluateRoutine };\r\n","import React from \"react\";\r\n\r\nexport const generateEntries = (adjustments) => {\r\n  let currentValue = adjustments[1];\r\n  const entries = [[1, currentValue]];\r\n  for (let level = 2; level <= 20; level++) {\r\n    if (currentValue !== adjustments[level]) {\r\n      currentValue = adjustments[level];\r\n      entries.push([level, currentValue]);\r\n    }\r\n  }\r\n  return entries;\r\n};\r\n\r\nconst generateAdjustments = (entries) => {\r\n  const adjustments = {};\r\n  let currentValue = 0;\r\n  let currentIndex = 0;\r\n  console.log(entries);\r\n  for (let level = 1; level <= 20; level++) {\r\n    if (entries[currentIndex] && entries[currentIndex][0] === level) {\r\n      console.log(\"here\");\r\n      currentValue = entries[currentIndex][1];\r\n      if (!currentValue) currentValue = 0;\r\n      currentIndex++;\r\n    }\r\n    adjustments[level] = currentValue;\r\n  }\r\n  return adjustments;\r\n};\r\n\r\nexport const adjustmentsFromLevelChange = (entries, index, newLevel) => {\r\n  entries[index] = [newLevel, entries[index][1]];\r\n  return generateAdjustments(entries);\r\n};\r\n\r\nexport const adjustmentsFromValueChange = (entries, index, newValue) => {\r\n  entries[index] = [entries[index][0], newValue];\r\n  return generateAdjustments(entries);\r\n};\r\n\r\nconst levelOptions = [];\r\nfor (let level = 1; level <= 20; level++) {\r\n  levelOptions.push(<option key={level}>{level}</option>);\r\n}\r\n\r\nexport const LevelList = (name, dispatch, action, id, adjustments) => {\r\n  const dieEntries = generateEntries(adjustments);\r\n\r\n  let dieLevelList = [];\r\n  for (let i = 0; i < dieEntries.length; i++) {\r\n    dieLevelList.push(\r\n      <span className=\"input\" key={i}>\r\n        <select\r\n          value={dieEntries[i][0]}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              action({\r\n                id,\r\n                changes: {\r\n                  [name]: adjustmentsFromLevelChange(\r\n                    dieEntries,\r\n                    i,\r\n                    parseInt(e.target.value)\r\n                  ),\r\n                },\r\n              })\r\n            )\r\n          }\r\n        >\r\n          {levelOptions}\r\n        </select>\r\n        <input\r\n          type=\"number\"\r\n          value={dieEntries[i][1]}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              action({\r\n                id,\r\n                changes: {\r\n                  [name]: adjustmentsFromValueChange(\r\n                    dieEntries,\r\n                    i,\r\n                    parseInt(e.target.value)\r\n                  ),\r\n                },\r\n              })\r\n            )\r\n          }\r\n        />\r\n      </span>\r\n    );\r\n  }\r\n  return dieLevelList;\r\n};\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectactivityPathEntities } from \"../Routine/activityPathSlice\";\r\nimport { selectdamageEntities } from \"../Routine/damageSlice\";\r\nimport { selectRoutineEntities } from \"../Routine/routineSlice\";\r\nimport { selecttargetEntities } from \"../Target/targetSlice\";\r\nimport { selectweaknessEntities } from \"../Target/weaknessSlice\";\r\nimport { graphTypes } from \"../types\";\r\nimport { selecteffectEntities } from \"../Routine/effectSlice\";\r\n\r\nimport { ActivityPathEvaluator } from \"../Calculation/EvaluateActivityPath\";\r\n\r\nimport Plotly from \"plotly.js-basic-dist\";\r\nimport createPlotlyComponent from \"react-plotly.js/factory\";\r\nimport { defaultACs, defaultSaves } from \"../defaults\";\r\nconst Plot = createPlotlyComponent(Plotly);\r\n\r\nconst useGenerateGraphs = (graphType, displayLevel) => {\r\n  const routines = useSelector(selectRoutineEntities);\r\n  const activityPaths = useSelector(selectactivityPathEntities);\r\n  const targets = useSelector(selecttargetEntities);\r\n  const damages = useSelector(selectdamageEntities);\r\n  const effects = useSelector(selecteffectEntities);\r\n  const weaknesses = useSelector(selectweaknessEntities);\r\n\r\n  const evaluator = new ActivityPathEvaluator(\r\n    activityPaths,\r\n    targets,\r\n    damages,\r\n    effects,\r\n    weaknesses\r\n  );\r\n\r\n  const currentTarget = targets[0];\r\n  let title = \"\";\r\n  let byLevelTile = \"\";\r\n\r\n  title += \" Vs \";\r\n  title += \" AC: \" + defaultACs[currentTarget.ACTrend][displayLevel];\r\n  title += \" Fort: \" + defaultSaves[currentTarget.FortTrend][displayLevel];\r\n  title += \" Ref: \" + defaultSaves[currentTarget.RefTrend][displayLevel];\r\n  title += \" Will: \" + defaultSaves[currentTarget.WillTrend][displayLevel];\r\n  title += \" Per: \" + defaultSaves[currentTarget.PerTrend][displayLevel];\r\n\r\n  byLevelTile += \" Vs \";\r\n  byLevelTile += \" AC: \" + currentTarget.ACTrend;\r\n  byLevelTile += \" Fort: \" + currentTarget.FortTrend;\r\n  byLevelTile += \" Ref: \" + currentTarget.RefTrend;\r\n  byLevelTile += \" Will: \" + currentTarget.WillTrend;\r\n  byLevelTile += \" Per: \" + currentTarget.PerTrend;\r\n\r\n  let datasets;\r\n  let perDatasets;\r\n  let expectedDamages;\r\n  let expectedPersistentDamages;\r\n  switch (graphType) {\r\n    case graphTypes.DISTRIBUTION:\r\n      ({ expectedDamages, expectedPersistentDamages, datasets, perDatasets } =\r\n        evaluateDistribution(routines, evaluator, displayLevel));\r\n      break;\r\n    case graphTypes.PMDEFENSE:\r\n      ({ expectedDamages, expectedPersistentDamages, datasets, perDatasets } =\r\n        evaluatePM(routines, evaluator, displayLevel, true));\r\n      break;\r\n    case graphTypes.PMRES:\r\n      ({ expectedDamages, expectedPersistentDamages, datasets, perDatasets } =\r\n        evaluatePM(routines, evaluator, displayLevel, false));\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  let { datasets: byLeveldatasets, perDatasets: byLevelperDatasets } =\r\n    evaluateByLevel(routines, evaluator);\r\n\r\n  // let maxDamage = 0;\r\n  // let maxPDamage = 0;\r\n\r\n  // go through routines, evaluate them, and put data together for use in charts\r\n  // Done evaluating routines and putting data together\r\n\r\n  let xtitle;\r\n  let ytitle;\r\n  if (graphType === graphTypes.DISTRIBUTION) {\r\n    xtitle = \"damage\";\r\n    ytitle = \"chance\";\r\n  } else if (graphType === graphTypes.PMDEFENSE) {\r\n    xtitle = \"+/- AC/Save Bonus\";\r\n    ytitle = \"Expected Damage\";\r\n  } else if (graphType === graphTypes.PMRES) {\r\n    xtitle = \"+/- Resistance/Weakness\";\r\n    ytitle = \"Expected Damage\";\r\n  }\r\n\r\n  let damageChart = (\r\n    <Plot\r\n      classname=\"plot\"\r\n      data={datasets}\r\n      layout={{\r\n        title: title,\r\n        autosize: true,\r\n        xaxis: { title: xtitle },\r\n        yaxis: { title: ytitle },\r\n        legend: {\r\n          x: 1,\r\n          y: 1,\r\n          xanchor: \"right\",\r\n        },\r\n        margin: {\r\n          l: 40,\r\n          r: 40,\r\n        },\r\n      }}\r\n      useResizeHandler={true}\r\n      style={{ width: \"100%\", height: \"100%\" }}\r\n    />\r\n  );\r\n  let persistentDamageChart = (\r\n    <Plot\r\n      classname=\"plot\"\r\n      data={perDatasets}\r\n      layout={{\r\n        title: \"Expected Persistent Damage\",\r\n        autosize: true,\r\n        xaxis: { title: \"persistent damage\" },\r\n        yaxis: { title: \"chance\" },\r\n        legend: {\r\n          x: 1,\r\n          y: 1,\r\n          xanchor: \"right\",\r\n        },\r\n        margin: {\r\n          l: 40,\r\n          r: 40,\r\n        },\r\n      }}\r\n      useResizeHandler={true}\r\n      style={{ width: \"100%\", height: \"100%\" }}\r\n    />\r\n  );\r\n  let byLevelDamageChart = (\r\n    <Plot\r\n      classname=\"plot\"\r\n      data={byLeveldatasets}\r\n      layout={{\r\n        title: byLevelTile,\r\n        autosize: true,\r\n        xaxis: { title: \"Level\" },\r\n        yaxis: { title: \"Expected Damage\" },\r\n        legend: {\r\n          x: 1,\r\n          y: 1,\r\n          xanchor: \"right\",\r\n        },\r\n        margin: {\r\n          l: 40,\r\n          r: 40,\r\n        },\r\n      }}\r\n      useResizeHandler={true}\r\n      style={{ width: \"100%\", height: \"100%\" }}\r\n    />\r\n  );\r\n  let byLevelPerDamageChart = (\r\n    <Plot\r\n      classname=\"plot\"\r\n      data={byLevelperDatasets}\r\n      layout={{\r\n        title: byLevelTile,\r\n        autosize: true,\r\n        xaxis: { title: \"Level\" },\r\n        yaxis: { title: \"Expected Persistent Damage\" },\r\n        legend: {\r\n          x: 1,\r\n          y: 1,\r\n          xanchor: \"right\",\r\n        },\r\n        margin: {\r\n          l: 40,\r\n          r: 40,\r\n        },\r\n      }}\r\n      useResizeHandler={true}\r\n      style={{ width: \"100%\", height: \"100%\" }}\r\n    />\r\n  );\r\n  return {\r\n    expectedDamages,\r\n    expectedPersistentDamages,\r\n    damageChart,\r\n    persistentDamageChart,\r\n    byLevelDamageChart,\r\n    byLevelPerDamageChart,\r\n  };\r\n};\r\n\r\nconst evaluateByLevel = (routines, evaluator) => {\r\n  let datasets = [];\r\n  let perDatasets = [];\r\n\r\n  for (let id in routines) {\r\n    let routine = routines[id];\r\n    if (!routine.display) continue;\r\n\r\n    const levelArray = [];\r\n    const expDbyLevel = [];\r\n    const expPDbyLevel = [];\r\n    for (let level = 1; level <= 20; level++) {\r\n      levelArray.push(level);\r\n      let { expD, expP } = evaluator.evalRoutine(routine, level, 0, 0);\r\n      expDbyLevel.push(expD);\r\n      expPDbyLevel.push(expP);\r\n    }\r\n    datasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: levelArray,\r\n      y: expDbyLevel,\r\n      yaxis: \"y\",\r\n    });\r\n    perDatasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: levelArray,\r\n      y: expPDbyLevel,\r\n      yaxis: \"y\",\r\n    });\r\n  }\r\n\r\n  return { datasets, perDatasets };\r\n};\r\n\r\nconst evaluatePM = (routines, evaluator, displayLevel, defense = true) => {\r\n  let datasets = [];\r\n  let perDatasets = [];\r\n  let expectedDamages = [];\r\n  let expectedPersistentDamages = [];\r\n\r\n  for (let id in routines) {\r\n    let routine = routines[id];\r\n    if (!routine.display) continue;\r\n\r\n    const bonusArray = [];\r\n    const expDbyBonus = [];\r\n    const expPDbyBonus = [];\r\n\r\n    for (let bonus = -5; bonus <= 5; bonus++) {\r\n      bonusArray.push(bonus);\r\n      let { expD, expP } = evaluator.evalRoutine(\r\n        routine,\r\n        displayLevel,\r\n        defense ? bonus : 0,\r\n        defense ? 0 : bonus\r\n      );\r\n\r\n      if (bonus === 0) {\r\n        expectedDamages.push(\r\n          <div key={routine.id}>\r\n            {routine.name}\r\n            {\": \"}\r\n            {expD.toFixed(2)}\r\n          </div>\r\n        );\r\n        expectedPersistentDamages.push(\r\n          <div key={routine.id}>\r\n            {routine.name}\r\n            {\": \"}\r\n            {expP.toFixed(2)}\r\n          </div>\r\n        );\r\n      }\r\n\r\n      expDbyBonus.push(expD);\r\n      expPDbyBonus.push(expP);\r\n    }\r\n\r\n    datasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: bonusArray,\r\n      y: expDbyBonus,\r\n      yaxis: \"y\",\r\n    });\r\n    perDatasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: bonusArray,\r\n      y: expPDbyBonus,\r\n      yaxis: \"y\",\r\n    });\r\n  }\r\n  return { expectedDamages, expectedPersistentDamages, datasets, perDatasets };\r\n};\r\n\r\nconst evaluateDistribution = (routines, evaluator, displayLevel) => {\r\n  let datasets = [];\r\n  let perDatasets = [];\r\n  let expectedDamages = [];\r\n  let expectedPersistentDamages = [];\r\n\r\n  for (let id in routines) {\r\n    let routine = routines[id];\r\n    if (!routine.display) continue;\r\n    let {\r\n      expD,\r\n      expP,\r\n      dataArray,\r\n      routineDDist,\r\n      cumulative,\r\n      PdataArray,\r\n      routinePDDist,\r\n      Pcumulative,\r\n    } = evaluator.evalRoutine(routine, displayLevel, 0, 0);\r\n    expectedDamages.push(\r\n      <div key={routine.id}>\r\n        {routine.name}\r\n        {\": \"}\r\n        {expD.toFixed(2)}\r\n      </div>\r\n    );\r\n    expectedPersistentDamages.push(\r\n      <div key={routine.id}>\r\n        {routine.name}\r\n        {\": \"}\r\n        {expP.toFixed(2)}\r\n      </div>\r\n    );\r\n    datasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: dataArray,\r\n      y: cumulative,\r\n      yaxis: \"y\",\r\n    });\r\n    datasets.push({\r\n      type: \"bar\",\r\n      name: expD.toFixed(2),\r\n      x: dataArray,\r\n      y: routineDDist,\r\n    });\r\n    perDatasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: PdataArray,\r\n      y: Pcumulative,\r\n    });\r\n    perDatasets.push({\r\n      type: \"bar\",\r\n      name: expP.toFixed(2),\r\n      x: PdataArray,\r\n      y: routinePDDist,\r\n    });\r\n  }\r\n  return { expectedDamages, expectedPersistentDamages, datasets, perDatasets };\r\n};\r\n\r\nexport default useGenerateGraphs;\r\n","import React, { useState } from \"react\";\r\nimport { graphTypes } from \"../types\";\r\n\r\nimport useGenerateGraphs from \"./useGenerateGraphs\";\r\n\r\nconst Display = () => {\r\n  // evaluates routines and displays appropriate graphs\r\n\r\n  const [addPersistent, setAddPersistent] = useState(false);\r\n  const [graphType, setGraphType] = useState(graphTypes.DISTRIBUTION);\r\n  const [displayLevel, setDisplayLevel] = useState(1);\r\n  const {\r\n    expectedDamages,\r\n    expectedPersistentDamages,\r\n    damageChart,\r\n    persistentDamageChart,\r\n    byLevelDamageChart,\r\n    byLevelPerDamageChart,\r\n  } = useGenerateGraphs(graphType, displayLevel);\r\n  // const [perMulti, setPerMulti] = useState(2);\r\n\r\n  const graphTypeOptions = [];\r\n  for (let gt in graphTypes) {\r\n    graphTypeOptions.push(<option key={gt}>{graphTypes[gt]}</option>);\r\n  }\r\n  const displayLevelOptions = [];\r\n  for (let i = 1; i <= 20; i++) {\r\n    displayLevelOptions.push(\r\n      <option key={i} value={i}>\r\n        {i}\r\n      </option>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      {\"Graph Type: \"}\r\n      <select value={graphType} onChange={(e) => setGraphType(e.target.value)}>\r\n        {graphTypeOptions}\r\n      </select>\r\n      {graphType === graphTypes.BYLEVEL ? (\r\n        \"\"\r\n      ) : (\r\n        <select\r\n          value={displayLevel}\r\n          onChange={(e) => setDisplayLevel(e.target.value)}\r\n        >\r\n          {displayLevelOptions}\r\n        </select>\r\n      )}\r\n      {\" Show persistent damage: \"}\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={addPersistent}\r\n        onChange={(e) => setAddPersistent(e.target.checked)}\r\n      />\r\n      {/* , persistent damage multiplier:\r\n      <input\r\n        type=\"number\"\r\n        value={perMulti ? perMulti : 0}\r\n        onChange={(e) => setPerMulti(e.target.valueAsNumber)}\r\n      /> */}\r\n      <div>\r\n        Expected Damage:\r\n        {expectedDamages}\r\n      </div>\r\n      {damageChart}\r\n      {byLevelDamageChart}\r\n      {!addPersistent ? (\r\n        \"\"\r\n      ) : (\r\n        <div>\r\n          <div>\r\n            Expected Persistent Damage:\r\n            {expectedPersistentDamages}\r\n          </div>\r\n          {persistentDamageChart}\r\n          {byLevelPerDamageChart}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Display;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { LevelList } from \"./LevelList\";\r\nimport {\r\n  activityTypes,\r\n  bonusTrends,\r\n  conditions,\r\n  damageTrends,\r\n  damageTypes,\r\n  dCond,\r\n  defenses,\r\n  diceSizes,\r\n  dieTrends,\r\n  effectTypes,\r\n  MAPs,\r\n  materials,\r\n  rollTypes,\r\n} from \"../types\";\r\nimport {\r\n  activityPathCreated,\r\n  activityPathUpdated,\r\n  activityPathRemoved,\r\n  selectactivityPathById,\r\n} from \"./activityPathSlice\";\r\n\r\nimport {\r\n  damageCreated,\r\n  damageRemoved,\r\n  damageUpdated,\r\n  selectdamageById,\r\n} from \"./damageSlice\";\r\nimport {\r\n  effectCreated,\r\n  effectRemoved,\r\n  effectUpdated,\r\n  selecteffectById,\r\n} from \"./effectSlice\";\r\nimport { routineUpdated, selectRoutineById } from \"./routineSlice\";\r\n\r\nconst conditionOptions = [];\r\nfor (let c in conditions) {\r\n  conditionOptions.push(<option key={c}>{conditions[c]}</option>);\r\n}\r\n// const defaultActivityOptions = [];\r\n// for (let da in defaultActivities) {\r\n//   defaultActivityOptions.push(\r\n//     <option key={da}>{defaultActivities[da]}</option>\r\n//   );\r\n// }\r\nconst bonusTrendOptions = [];\r\nfor (let bt in bonusTrends) {\r\n  bonusTrendOptions.push(<option key={bt}>{bonusTrends[bt]}</option>);\r\n}\r\nconst activityTypeOptions = [];\r\nfor (let at in activityTypes) {\r\n  activityTypeOptions.push(<option key={at}>{activityTypes[at]}</option>);\r\n}\r\nconst MAPOptions = [];\r\nfor (let m in MAPs) {\r\n  MAPOptions.push(<option key={m}>{MAPs[m]}</option>);\r\n}\r\nconst defenseOptions = [];\r\nfor (let d in defenses) {\r\n  defenseOptions.push(<option key={d}>{defenses[d]}</option>);\r\n}\r\nconst rollOptions = [];\r\nfor (let rt in rollTypes) {\r\n  rollOptions.push(<option key={rt}>{rollTypes[rt]}</option>);\r\n}\r\n\r\nconst damageConditionOptions = [];\r\nfor (let dc in dCond) {\r\n  damageConditionOptions.push(<option key={dc}>{dCond[dc]}</option>);\r\n}\r\nconst dieTrendOptions = [];\r\nfor (let dt in dieTrends) {\r\n  dieTrendOptions.push(<option key={dt}>{dieTrends[dt]}</option>);\r\n}\r\n// const diceNumOptions = [];\r\n// for (let dn in diceNums) {\r\n//   diceNumOptions.push(<option key={dn}>{dn}</option>);\r\n// }\r\nconst diceSizeOptions = [];\r\nfor (let ds in diceSizes) {\r\n  diceSizeOptions.push(<option key={ds}>{ds}</option>);\r\n}\r\nconst damageTrendOptions = [];\r\nfor (let dt in damageTrends) {\r\n  damageTrendOptions.push(<option key={dt}>{damageTrends[dt]}</option>);\r\n}\r\n\r\nconst damageTypeOptions = [];\r\nfor (let dt in damageTypes) {\r\n  damageTypeOptions.push(<option key={dt}>{damageTypes[dt]}</option>);\r\n}\r\nconst materialOptions = [];\r\nfor (let m in materials) {\r\n  materialOptions.push(<option key={m}>{materials[m]}</option>);\r\n}\r\nconst effectTypeOptions = [];\r\nfor (let et in effectTypes) {\r\n  effectTypeOptions.push(<option key={et}>{effectTypes[et]}</option>);\r\n}\r\nconst multiplierOptions = [];\r\nfor (let m of [0.5, 1, 2]) {\r\n  multiplierOptions.push(<option key={m}>{m}</option>);\r\n}\r\n\r\nfunction SelectedRoutine({ routineId }) {\r\n  // const selectedRoutine = useSelector(selectSelectedRoutine);\r\n  const apIds = useSelector((state) =>\r\n    selectRoutineById(state, routineId)\r\n  ).apIds;\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className=\"selectedRoutine\">\r\n      <NameInput id={routineId} />\r\n      {apIds.map((apId) => (\r\n        <ActivityPath\r\n          id={apId}\r\n          routineId={routineId}\r\n          key={apId}\r\n          displayCondition={false}\r\n        />\r\n      ))}\r\n      <button\r\n        className=\"add\"\r\n        onClick={() => dispatch(activityPathCreated({ routineId: routineId }))}\r\n      >\r\n        +\r\n      </button>\r\n      {/* <EffectInput /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst NameInput = ({ id }) => {\r\n  const dispatch = useDispatch();\r\n  const name = useSelector((state) => selectRoutineById(state, id)).name;\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      <label htmlFor=\"routineName\">Routine Name:</label>\r\n      <input\r\n        id=\"routineName\"\r\n        type=\"text\"\r\n        placeholder=\"Enter routine name\"\r\n        value={name}\r\n        onChange={(e) =>\r\n          dispatch(routineUpdated({ id, changes: { name: e.target.value } }))\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ActivityPath = ({ id, parentId, routineId, displayCondition = true }) => {\r\n  const {\r\n    condition,\r\n    type,\r\n    targetType,\r\n\r\n    bonusTrend,\r\n    bonusAdjustments,\r\n\r\n    MAP,\r\n    rollType,\r\n    damages,\r\n    effects,\r\n    apIds,\r\n  } = useSelector((state) => selectactivityPathById(state, id));\r\n  const dispatch = useDispatch();\r\n\r\n  const bonusLevelList = LevelList(\r\n    \"bonusAdjustments\",\r\n    dispatch,\r\n    activityPathUpdated,\r\n    id,\r\n    bonusAdjustments\r\n  );\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      {displayCondition ? (\r\n        <div>\r\n          {\"Condition: \"}\r\n          <select\r\n            value={condition}\r\n            onChange={(e) =>\r\n              dispatch(\r\n                activityPathUpdated({\r\n                  id,\r\n                  changes: { condition: e.target.value },\r\n                })\r\n              )\r\n            }\r\n          >\r\n            {conditionOptions}\r\n          </select>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n\r\n      <div className=\"\">\r\n        <div className=\"flexbox\">\r\n          <button\r\n            className=\"delete\"\r\n            onClick={(e) => {\r\n              dispatch(activityPathRemoved({ id, parentId, routineId }));\r\n            }}\r\n          >\r\n            -\r\n          </button>\r\n          {/* <span className=\"input\">\r\n            <label htmlFor=\"override\">{\"Override: \"}</label>\r\n            <input\r\n              id=\"override\"\r\n              type=\"checkbox\"\r\n              checked={override}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { override: e.target.checked },\r\n                  })\r\n                )\r\n              }\r\n            />\r\n          </span> */}\r\n          {/* <span className=\"input\">\r\n            <label htmlFor=\"Level\">{\" Level: \"}</label>\r\n            <input\r\n              id=\"Level\"\r\n              type=\"number\"\r\n              value={level}\r\n              min={1}\r\n              max={20}\r\n              onChange={(e) => {\r\n                let level = parseInt(e.target.value) || 1;\r\n                if (level > 20) level = 20;\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: {\r\n                      level,\r\n                    },\r\n                  })\r\n                );\r\n              }}\r\n            />\r\n          </span> */}\r\n          {/* <span className=\"input\"> */}\r\n          {/* <input\r\n              type=\"checkbox\"\r\n              checked={useDefault}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { useDefault: e.target.checked },\r\n                  })\r\n                )\r\n              }\r\n            /> */}\r\n          {\" (\"}\r\n          <select\r\n            value={bonusTrend}\r\n            onChange={(e) =>\r\n              dispatch(\r\n                activityPathUpdated({\r\n                  id,\r\n                  changes: { bonusTrend: e.target.value },\r\n                })\r\n              )\r\n            }\r\n          >\r\n            {bonusTrendOptions}\r\n          </select>\r\n          {type === activityTypes.SAVE ? \"+10\" : \"\"}+{bonusLevelList})\r\n          {/* </span> */}\r\n          <span className=\"input\">\r\n            <select\r\n              value={type}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  activityPathUpdated({ id, changes: { type: e.target.value } })\r\n                )\r\n              }\r\n            >\r\n              {activityTypeOptions}\r\n            </select>\r\n            {/* {type === activityTypes.STRIKE ? \" +\" : \" DC: \"}\r\n            <input\r\n              type=\"number\"\r\n              value={value ? value : 0}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { value: parseInt(e.target.value) },\r\n                  })\r\n                )\r\n              }\r\n            /> */}\r\n          </span>\r\n          <span className=\"input\">\r\n            {\" MAP: \"}\r\n            <select\r\n              value={MAP}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  activityPathUpdated({ id, changes: { MAP: e.target.value } })\r\n                )\r\n              }\r\n            >\r\n              {MAPOptions}\r\n            </select>\r\n          </span>\r\n          <span className=\"input\">\r\n            {\" VS: \"}\r\n            <select\r\n              value={targetType}\r\n              onChange={(e) => {\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { targetType: e.target.value },\r\n                  })\r\n                );\r\n              }}\r\n            >\r\n              {defenseOptions}\r\n            </select>\r\n          </span>\r\n          <span className=\"input\">\r\n            <select\r\n              value={rollType}\r\n              onChange={(e) => {\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { rollType: e.target.value },\r\n                  })\r\n                );\r\n              }}\r\n            >\r\n              {rollOptions}\r\n            </select>\r\n          </span>\r\n        </div>\r\n        {/* <div className=\"flexbox\">\r\n          Damage:\r\n          <select\r\n            value={damageCondition}\r\n            onChange={(e) =>\r\n              dispatch(\r\n                activityPathUpdated({\r\n                  id,\r\n                  changes: { damageCondition: e.target.value },\r\n                })\r\n              )\r\n            }\r\n          >\r\n            {damageConditionOptions}\r\n          </select>\r\n          <select\r\n            value={diceNum}\r\n            onChange={(e) =>\r\n              dispatch(\r\n                activityPathUpdated({\r\n                  id,\r\n                  changes: { diceNum: parseInt(e.target.value) },\r\n                })\r\n              )\r\n            }\r\n          >\r\n            {diceNumOptions}\r\n          </select>\r\n          d\r\n          <select\r\n            value={diceSize}\r\n            onChange={(e) =>\r\n              dispatch(\r\n                activityPathUpdated({\r\n                  id,\r\n                  changes: { diceSize: parseInt(e.target.value) },\r\n                })\r\n              )\r\n            }\r\n          >\r\n            {diceSizeOptions}\r\n          </select>\r\n          {\" + \"}\r\n          <input\r\n            type=\"number\"\r\n            value={staticDamage ? staticDamage : 0}\r\n            onChange={(e) =>\r\n              dispatch(\r\n                activityPathUpdated({\r\n                  id,\r\n                  changes: { staticDamage: parseInt(e.target.value) },\r\n                })\r\n              )\r\n            }\r\n          />\r\n          <select\r\n            value={damageType}\r\n            onChange={(e) => {\r\n              dispatch(\r\n                activityPathUpdated({\r\n                  id,\r\n                  changes: { damageType: e.target.value },\r\n                })\r\n              );\r\n            }}\r\n          >\r\n            {damageTypeOptions}\r\n          </select>\r\n          <select\r\n            value={material}\r\n            onChange={(e) => {\r\n              dispatch(\r\n                damageUpdated({ id, changes: { material: e.target.value } })\r\n              );\r\n            }}\r\n          >\r\n            {materialOptions}\r\n          </select>\r\n        </div> */}\r\n        <div className=\"box\">\r\n          {\"Damage: \"}\r\n          {damages.map((damageId) => (\r\n            <Damage parentId={id} id={damageId} key={damageId} />\r\n          ))}\r\n          <button\r\n            className=\"add\"\r\n            onClick={() => dispatch(damageCreated({ parentId: id }))}\r\n          >\r\n            +\r\n          </button>\r\n        </div>\r\n        <div className=\"box\">\r\n          {\"Effects: \"}\r\n          {effects.map((effectId) => (\r\n            <Effect parentId={id} id={effectId} key={effectId} />\r\n          ))}\r\n          <button\r\n            className=\"add\"\r\n            onClick={() => dispatch(effectCreated({ parentId: id }))}\r\n          >\r\n            +\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"box\">\r\n        {apIds.map((apId) => (\r\n          <ActivityPath id={apId} parentId={id} key={apId} />\r\n        ))}\r\n        <button\r\n          className=\"add\"\r\n          onClick={() => dispatch(activityPathCreated({ parentId: id }))}\r\n        >\r\n          +\r\n        </button>\r\n        <button\r\n          className=\"add\"\r\n          onClick={() =>\r\n            dispatch(activityPathCreated({ parentId: id, applyMAP: true }))\r\n          }\r\n        >\r\n          +MAP\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Damage = ({ parentId, id }) => {\r\n  const {\r\n    damageCondition,\r\n    damageType,\r\n    material,\r\n    persistent,\r\n    multiplier,\r\n\r\n    dieTrend,\r\n    dieAdjustments,\r\n    diceSize,\r\n    damageTrend,\r\n    damageAdjustments,\r\n  } = useSelector((state) => selectdamageById(state, id));\r\n  const dispatch = useDispatch();\r\n\r\n  const dieLevelList = LevelList(\r\n    \"dieAdjustments\",\r\n    dispatch,\r\n    damageUpdated,\r\n    id,\r\n    dieAdjustments\r\n  );\r\n\r\n  const damageLevelList = LevelList(\r\n    \"damageAdjustments\",\r\n    dispatch,\r\n    damageUpdated,\r\n    id,\r\n    damageAdjustments\r\n  );\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      <button\r\n        className=\"delete\"\r\n        onClick={(e) => {\r\n          dispatch(damageRemoved({ id, parentId }));\r\n        }}\r\n      >\r\n        -\r\n      </button>\r\n      <select\r\n        value={damageCondition}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            damageUpdated({ id, changes: { damageCondition: e.target.value } })\r\n          )\r\n        }\r\n      >\r\n        {damageConditionOptions}\r\n      </select>\r\n      {\": (\"}\r\n      <select\r\n        value={dieTrend}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            damageUpdated({\r\n              id,\r\n              changes: { dieTrend: e.target.value },\r\n            })\r\n          )\r\n        }\r\n      >\r\n        {dieTrendOptions}\r\n      </select>\r\n      +{dieLevelList}\r\n      )d\r\n      <select\r\n        value={diceSize}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            damageUpdated({\r\n              id,\r\n              changes: { diceSize: parseInt(e.target.value) },\r\n            })\r\n          )\r\n        }\r\n      >\r\n        {diceSizeOptions}\r\n      </select>\r\n      {\" + (\"}\r\n      <select\r\n        value={damageTrend}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            damageUpdated({\r\n              id,\r\n              changes: { damageTrend: e.target.value },\r\n            })\r\n          )\r\n        }\r\n      >\r\n        {damageTrendOptions}\r\n      </select>\r\n      +{damageLevelList}){\" (\"}\r\n      <select\r\n        value={damageType}\r\n        onChange={(e) => {\r\n          dispatch(\r\n            damageUpdated({ id, changes: { damageType: e.target.value } })\r\n          );\r\n        }}\r\n      >\r\n        {damageTypeOptions}\r\n      </select>\r\n      <select\r\n        value={material}\r\n        onChange={(e) => {\r\n          dispatch(\r\n            damageUpdated({ id, changes: { material: e.target.value } })\r\n          );\r\n        }}\r\n      >\r\n        {materialOptions}\r\n      </select>\r\n      {\" Persistent: \"}\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={persistent}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            damageUpdated({\r\n              id,\r\n              changes: { persistent: e.target.checked },\r\n            })\r\n          )\r\n        }\r\n      />\r\n      {\") damage x \"}\r\n      <select\r\n        value={multiplier}\r\n        onChange={(e) => {\r\n          dispatch(\r\n            damageUpdated({ id, changes: { multiplier: e.target.value } })\r\n          );\r\n        }}\r\n      >\r\n        {multiplierOptions}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Effect = ({ parentId, id }) => {\r\n  const { effectCondition, effectType } = useSelector((state) =>\r\n    selecteffectById(state, id)\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      <button\r\n        className=\"delete\"\r\n        onClick={(e) => {\r\n          dispatch(effectRemoved({ id, parentId }));\r\n        }}\r\n      >\r\n        -\r\n      </button>\r\n      <select\r\n        value={effectCondition}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            effectUpdated({ id, changes: { effectCondition: e.target.value } })\r\n          )\r\n        }\r\n      >\r\n        {conditionOptions}\r\n      </select>\r\n      <select\r\n        value={effectType}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            effectUpdated({ id, changes: { effectType: e.target.value } })\r\n          )\r\n        }\r\n      >\r\n        {effectTypeOptions}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectedRoutine;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  routineCreated,\r\n  routineRemoved,\r\n  routineUpdated,\r\n  selectAllRoutines,\r\n  selectSelectedRoutine,\r\n  setRoutine,\r\n} from \"./Routine/routineSlice\";\r\n\r\nconst Routines = () => {\r\n  const routines = useSelector(selectAllRoutines);\r\n  const selectedRoutine = useSelector(selectSelectedRoutine);\r\n  const dispatch = useDispatch();\r\n\r\n  const routineOptions = [];\r\n  const routineDisplays = [];\r\n  routines.forEach((routine) => {\r\n    routineOptions.push(\r\n      <option value={routine.id} key={routine.id}>\r\n        {routine.name}\r\n      </option>\r\n    );\r\n    routineDisplays.push(\r\n      <div className=\"flexbox\" key={routine.id}>\r\n        <button\r\n          className=\"remove\"\r\n          onClick={() => dispatch(routineRemoved(routine.id))}\r\n        >\r\n          -\r\n        </button>\r\n        <span\r\n          className={routine.display ? \"routineOn\" : \"routineOff\"}\r\n          onClick={() =>\r\n            dispatch(\r\n              routineUpdated({\r\n                id: routine.id,\r\n                changes: { display: !routine.display },\r\n              })\r\n            )\r\n          }\r\n        >\r\n          {routine.name}\r\n        </span>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      Selected Routine:\r\n      <select\r\n        value={selectedRoutine}\r\n        onChange={(e) => dispatch(setRoutine(e.target.value))}\r\n      >\r\n        {routineOptions}\r\n      </select>\r\n      <button className=\"add\" onClick={() => dispatch(routineCreated())}>\r\n        +\r\n      </button>\r\n      <div className=\"routines\">{routineDisplays}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Routines;\r\n","import React from \"react\";\r\n// import { useSelector } from \"react-redux\";\r\n\r\nconst ImportExport = () => {\r\n  return <div className=\"box\">Import and Export Here</div>;\r\n};\r\n\r\nexport default ImportExport;\r\n","import React from \"react\";\r\nimport ReactGA from \"react-ga4\";\r\n// import { useSelector } from \"react-redux\";\r\n// import update from \"immutability-helper\";\r\n\r\n// //import { useSelector, useDispatch } from 'react-redux';\r\n// import { selectCurrentEffect } from \"./Effect/effectSlice\";\r\n\r\n// import {\r\n//   CheckboxInput,\r\n//   CollapsableInput,\r\n//   ByLevelInput,\r\n// } from \"./Effect/Inputs/CommonInputs.js\";\r\n\r\n// import MAP from \"./Effect/Model/MAP.js\";\r\n// import Proficiency from \"./Effect/Model/Proficiency.js\";\r\n// import AbilityScore from \"./Effect/Model/AbilityScore.js\";\r\n// import Modifier from \"./Effect/Model/Modifier.js\";\r\n// import AdditionalEffectArray from \"./Effect/Model/AdditionalEffectArray.js\";\r\n\r\n// import {\r\n//   totalBonusDescription,\r\n//   attackBonusDescription,\r\n//   totalDamageDescription,\r\n//   calculateExpectedDamage,\r\n// } from \"./Calculation.js\";\r\n\r\nimport TargetInput from \"./Target/TargetInput\";\r\nimport Display from \"./Display/Display\";\r\n// import { selectTarget, selectLevel } from \"./Target/targetSlice\";\r\n\r\nimport SelectedRoutine from \"./Routine/SelectedRoutine\";\r\nimport Routines from \"./Routines\";\r\nimport Export from \"./Export\";\r\n\r\nimport \"./PF2App.css\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectSelectedRoutine } from \"./Routine/routineSlice\";\r\n\r\n// function DisplayOutput(props) {\r\n//   // props: effect, target\r\n//   const target = useSelector(selectTarget);\r\n//   const effect = useSelector(selectCurrentEffect);\r\n//   return (\r\n//     <div className=\"Display\">\r\n//       <CollapsableInput\r\n//         description={\r\n//           \"Expected Damage: \" + calculateExpectedDamage(effect, target)\r\n//         }\r\n//         listInput=\"\"\r\n//       />\r\n//     </div>\r\n//   );\r\n// }\r\nReactGA.initialize(\"G-JR2YK097BG\");\r\n\r\nfunction PF2App(props) {\r\n  const selectedRoutine = useSelector(selectSelectedRoutine);\r\n  ReactGA.send(\"pageview\");\r\n\r\n  return (\r\n    <div className=\"PF2App\">\r\n      <TargetInput id={0} />\r\n      <Display />\r\n      <Routines />\r\n      {selectedRoutine !== undefined ? (\r\n        <SelectedRoutine routineId={selectedRoutine} />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {/* <SelectedRoutine /> */}\r\n\r\n      <Export />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PF2App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport routineReducer, { routineAdded } from \"./Routine/routineSlice\";\r\nimport activityPathReducer, {\r\n  activityPathAdded,\r\n} from \"./Routine/activityPathSlice\";\r\nimport damageReducer, { damageAdded } from \"./Routine/damageSlice\";\r\nimport effectReducer from \"./Routine/effectSlice\";\r\nimport targetReducer, { targetAdded } from \"./Target/targetSlice\";\r\nimport weaknessReducer from \"./Target/weaknessSlice\";\r\nimport {\r\n  activityTypes,\r\n  ACTrends,\r\n  bonusTrends,\r\n  conditions,\r\n  damageTrends,\r\n  damageTypes,\r\n  dCond,\r\n  defaultActivities,\r\n  defenses,\r\n  dieTrends,\r\n  MAPs,\r\n  materials,\r\n  rollTypes,\r\n  SaveTrends,\r\n} from \"./types\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    routines: routineReducer,\r\n    activityPaths: activityPathReducer,\r\n    damages: damageReducer,\r\n    effects: effectReducer,\r\n    weaknesses: weaknessReducer,\r\n    targets: targetReducer,\r\n  },\r\n});\r\n\r\nstore.dispatch(\r\n  routineAdded({ id: 0, name: \"Martial\", display: true, apIds: [0] })\r\n);\r\n\r\nconst empty = {};\r\nfor (let i = 1; i <= 20; i++) {\r\n  empty[i] = 0;\r\n}\r\nstore.dispatch(\r\n  activityPathAdded({\r\n    id: 0,\r\n    condition: conditions.ALWAYS,\r\n    override: false,\r\n    level: 1,\r\n    useDefault: false,\r\n    defaultActivity: defaultActivities.FIGHTER,\r\n    type: activityTypes.STRIKE,\r\n    targetType: defenses.AC,\r\n    targetInfoId: 0,\r\n    value: 9,\r\n\r\n    rollType: rollTypes.NORMAL,\r\n    damageCondition: dCond.STRIKE,\r\n    diceNum: 1,\r\n    diceSize: 8,\r\n    staticDamage: 4,\r\n    damageType: damageTypes.S,\r\n    material: materials.NONE,\r\n    damages: [0],\r\n    effects: [],\r\n    apIds: [],\r\n\r\n    MAP: MAPs.N1,\r\n    bonusTrend: bonusTrends.MARTIALWEAPON,\r\n    bonusAdjustments: { ...empty },\r\n  })\r\n);\r\n\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 0,\r\n    damageCondition: dCond.STRIKE,\r\n    damageType: damageTypes.S,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n\r\n    dieTrend: dieTrends.WEAPON,\r\n    dieAdjustments: { ...empty },\r\n    diceSize: 8,\r\n    damageTrend: damageTrends.MARTIALMELEE,\r\n    damageAdjustments: { ...empty },\r\n  })\r\n);\r\n\r\nstore.dispatch(\r\n  targetAdded({\r\n    id: 0,\r\n    name: \"Custom Target\",\r\n\r\n    // overrideDefault: true,\r\n    // addMods: false,\r\n    // // level: 1,\r\n    // matchRoutines: true,\r\n    // levelDiff: 0,\r\n\r\n    // useDefaultAC: true,\r\n    // defaultAC: defaultValuesAC.HIGH,\r\n    // [defenses.AC]: 16,\r\n    // useDefaultFort: true,\r\n    // defaultFort: defaultValuesSaves.MODERATE,\r\n    // [defenses.FORT]: 7,\r\n    // useDefaultRef: true,\r\n    // defaultRef: defaultValuesSaves.MODERATE,\r\n    // [defenses.REF]: 7,\r\n    // useDefaultWill: true,\r\n    // defaultWill: defaultValuesSaves.MODERATE,\r\n    // [defenses.WILL]: 7,\r\n    // useDefaultPer: true,\r\n    // defaultPer: defaultValuesSaves.MODERATE,\r\n    // [defenses.PER]: 7,\r\n\r\n    ACTrend: ACTrends.HIGH,\r\n    FortTrend: SaveTrends.MODERATE,\r\n    RefTrend: SaveTrends.MODERATE,\r\n    WillTrend: SaveTrends.MODERATE,\r\n    PerTrend: SaveTrends.MODERATE,\r\n\r\n    flatfooted: false,\r\n    weaknesses: [],\r\n  })\r\n);\r\n// store.dispatch(weaknessAdded({ id: 0, type: damageTypes.FIRE, value: 10 }));\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 0,\r\n//     damageCondition: dCond.STRIKE,\r\n//     diceNum: 1,\r\n//     diceSize: 8,\r\n//     staticDamage: 4,\r\n//     damageType: damageTypes.B,\r\n//     material: materials.COLD_IRON,\r\n//     persistent: false,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 1,\r\n//     condition: dCond.CRIT,\r\n//     diceNum: 0,\r\n//     diceSize: 8,\r\n//     staticDamage: 10,\r\n//     type: damageTypes.FIRE,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//   })\r\n// );\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport PF2App from \"./PF2App\";\r\nimport store from \"./store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <PF2App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}