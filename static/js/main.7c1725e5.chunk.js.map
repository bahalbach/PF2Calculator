{"version":3,"sources":["defaults.js","types.js","Target/weaknessSlice.js","Target/targetSlice.js","Target/TargetInput.js","Calculation/Distribution.js","Routine/damageSlice.js","Routine/activityPathSlice.js","Routine/routineSlice.js","Calculation/Calculation.js","Calculation/EvaluateActivityPath.js","Display.js","Routine/SelectedRoutine.js","Routines.js","Export.js","PF2App.js","Routine/effectSlice.js","store.js","serviceWorker.js","index.js"],"names":["activityTypes","STRIKE","SAVE","defaultActivities","FIGHTER","defaultValuesAC","LOW","MODERATE","HIGH","EXTREME","defaultValuesSaves","TERRIBLE","defenses","AC","FORT","REF","WILL","PER","MAPs","N1","N2","N3","A1","A2","A3","R1","R2","R3","RA1","RA2","RA3","RAA1","RAA2","RAA3","nextMAPs","MAPvalues","damageTypes","NONE","B","P","S","FIRE","materials","COLD_IRON","SILVER","ADAMANTINE","conditions","ALWAYS","CRIT","SUCC","FAIL","CRIF","AT_LEAST_SUCC","AT_LEAST_FAIL","FAIL_WORSE","SUCC_WORSE","dCond","BASIC","defaultTypes","defaultTargetTypes","defaultDamageConditions","maxScore","martialProf","alchProf","casterProf","weaponItem","weaponDice","martialSpec","casterSpec","fighterAB","fighterStatic","i","defaultValues","defaultDiceNum","defaultStatic","extremeAC","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","highAC","level","moderateAC","lowAC","defaultACs","defaultSaves","weaknessAdapter","createEntityAdapter","weakness","weaknessesSlice","createSlice","name","initialState","getInitialState","reducers","weaknessAdded","addOne","weaknessUpdated","updateOne","weaknessCreated","reducer","state","action","payload","id","type","value","prepare","parentId","weaknessRemoved","removeOne","actions","getSelectors","weaknesses","selectweaknessById","selectById","selectweaknessEntities","selectIds","selectEntities","targetAdapter","selectAll","selectTotal","targetsSlice","targetAdded","targetUpdated","target","entities","useDefaultAC","defaultAC","useDefaultFort","defaultFort","useDefaultRef","defaultRef","useDefaultWill","defaultWill","useDefaultPer","defaultPer","extraReducers","builder","addCase","weaknessId","push","filter","wid","targets","selecttargetById","selecttargetEntities","Weakness","useSelector","dispatch","useDispatch","className","onChange","e","changes","isNaN","parseInt","AddWeakness","useState","weaknessValue","setWeaknessValue","WeaknessSelect","options","dt","key","m","TargetInput","Fort","Ref","Will","Perception","flatfooted","ACOptions","dv","SaveOptions","htmlFor","placeholder","checked","map","convolve","vec1","vec2","length","Error","volume","kernel","displacement","convVec","j","consolidateDists","maxDamage","dists","dist","Math","max","staticDamage","damageDist","index","applyMin","min","shift","damageAdapter","damageId","damagesSlice","damageAdded","damageUpdated","damageCreated","damageCondition","diceNum","diceSize","damageType","material","persistent","damageRemoved","damages","selectdamageById","selectdamageEntities","activityPathAdapter","activityPathId","defaultParentActivity","useDefault","defaultActivity","targetType","MAP","activityPathsSlice","activityPathAdded","activityPathUpdated","apId","applyDefault","ap","override","apIds","setDefault","activityPathRemoved","undefined","activityPathCreated","parentAP","applyMAP","condition","targetInfoId","effects","routineId","did","activityPaths","selectactivityPathById","selectactivityPathEntities","routinesAdapter","routinesSlice","selectedRoutine","setRoutine","routineAdded","routineUpdated","routineCreated","updateSelected","routines","selectRoutineById","selectRoutineEntities","selectAllRoutines","selectSelectedRoutine","addDamage","context","multiplier","normal","dam","newDist","newDam","floor","oldValue","chance","newValue","diff","multiplyDist","ActivityPathEvaluator","this","activityPath","currentTarget","currentDamages","currentWeaknesses","activity","bonus","DC","console","log","chances","keen","dif","getCritSuccessPercent","getSuccessPercent","getFailurePercent","getCritFailurePercent","critDamages","succDamages","failDamages","crfaDamages","damageTrees","forEach","damage","diceArray","damageTree","damageQuality","totalStaticDamage","totalDamageDist","maxW","maxR","calculateExpectedDamage","evalPath","pathDist","pathPDist","indicies","Display","addPersistent","setAddPersistent","perMulti","setPerMulti","evaluator","maxPDamage","datasets","expectedDamages","expectedPersistentDamages","routine","expD","routineDDist","routinePDDist","PdamageDist","dataArray","x","y","fill","label","data","xAxisID","yAxisID","spanGaps","toFixed","labels","valueAsNumber","conditionOptions","c","defaultActivityOptions","da","activityTypeOptions","at","MAPOptions","defenseOptions","d","damageConditionOptions","dc","diceNumOptions","dn","diceSizeOptions","ds","damageTypeOptions","materialOptions","NameInput","ActivityPath","displayCondition","onClick","Damage","SelectedRoutine","Routines","routineOptions","ImportExport","PF2App","props","Export","effectAdapter","effectsSlice","effectAdded","effectUpdated","store","configureStore","routineReducer","activityPathReducer","damageReducer","effectReducer","weaknessReducer","targetReducer","overrideDefault","addMods","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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AIoE,GAErB,IAAK,IAAI/J,EAAI,EAAGA,EAAI8J,EAAS9J,IAC3BkJ,EAAajB,GAASiB,EAAYqG,GAIpC,OAFAtG,GAAgBa,EAERD,GACN,KAAK5K,EAAMvD,OACTuR,GACEgC,EACAjF,EACAC,EACAC,EACAjB,EACAC,EACA,GAEF+D,GACE+B,EACAhF,EACAC,EACAC,EACAjB,EACAC,EACA,GAEF,MAEF,KAAKjK,EAAMC,MACT+N,GACEgC,EACAjF,EACAC,EACAC,EACAjB,EACAC,EACA,IAEF+D,GACEiC,EACAlF,EACAC,EACAC,EACAjB,EACAC,EACA,GAEF+D,GACEkC,EACAnF,EACAC,EACAC,EACAjB,EACAC,EACA,GAEF,MAEF,KAAKjK,EAAML,KACTqO,GACEkC,EACAnF,EACAC,EACAC,EACAjB,EACAC,EACA,GAEF,MAEF,KAAKjK,EAAMN,KACTsO,GACEiC,EACAlF,EACAC,EACAC,EACAjB,EACAC,EACA,GAEF,MAEF,KAAKjK,EAAMP,KACTuO,GACEgC,EACAjF,EACAC,EACAC,EACAjB,EACAC,EACA,GAEF,MAEF,KAAKjK,EAAMR,KACTwO,GACE+B,EACAhF,EACAC,EACAC,EACAjB,EACAC,EACA,GAEF,MAEF,KAAKjK,EAAMJ,cACToO,GACEgC,EACAjF,EACAC,EACAC,EACAjB,EACAC,EACA,GAEF+D,GACE+B,EACAhF,EACAC,EACAC,EACAjB,EACAC,EACA,GAEF,MAEF,KAAKjK,EAAMH,cACTmO,GACEiC,EACAlF,EACAC,EACAC,EACAjB,EACAC,EACA,GAEF+D,GACEgC,EACAjF,EACAC,EACAC,EACAjB,EACAC,EACA,GAEF+D,GACE+B,EACAhF,EACAC,EACAC,EACAjB,EACAC,EACA,GAEF,MAEF,KAAKjK,EAAMF,WACTkO,GACEkC,EACAnF,EACAC,EACAC,EACAjB,EACAC,EACA,GAEF+D,GACEiC,EACAlF,EACAC,EACAC,EACAjB,EACAC,EACA,GAEF,MAEF,KAAKjK,EAAMD,WACTiO,GACEkC,EACAnF,EACAC,EACAC,EACAjB,EACAC,EACA,GAEF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","file":"static/js/main.7c1725e5.chunk.js","sourcesContent":["import {\r\n  activityTypes,\r\n  dCond,\r\n  defaultActivities,\r\n  defaultValuesAC,\r\n  defaultValuesSaves,\r\n  defenses,\r\n} from \"./types\";\r\n\r\nexport const defaultTypes = {\r\n  [defaultActivities.FIGHTER]: activityTypes.STRIKE,\r\n};\r\n\r\nexport const defaultTargetTypes = {\r\n  [defaultActivities.FIGHTER]: defenses.AC,\r\n};\r\n\r\nexport const defaultDamageConditions = {\r\n  [defaultActivities.FIGHTER]: dCond.STRIKE,\r\n};\r\n\r\nconst maxScore = {};\r\nconst martialProf = {};\r\nconst alchProf = {};\r\nconst casterProf = {};\r\n\r\nconst weaponItem = {};\r\nconst weaponDice = {};\r\nconst spellDice = {};\r\n\r\nconst martialSpec = {};\r\nconst casterSpec = {};\r\n\r\nconst fighterAB = {};\r\nconst fighterStatic = {};\r\n\r\nfor (let i = 1; i <= 20; i++) {\r\n  maxScore[i] = 4;\r\n  martialProf[i] = 2;\r\n  alchProf[i] = 2;\r\n  casterProf[i] = 2;\r\n\r\n  weaponItem[i] = 0;\r\n  weaponDice[i] = 1;\r\n\r\n  martialSpec[i] = 0;\r\n  casterSpec[i] = 0;\r\n\r\n  if (i >= 2) {\r\n    weaponItem[i] = 1;\r\n  }\r\n  if (i >= 4) {\r\n    weaponDice[i] = 2;\r\n  }\r\n  if (i >= 5) {\r\n    martialProf[i] = 4;\r\n  }\r\n  if (i >= 7) {\r\n    alchProf[i] = 4;\r\n    martialSpec[i] = 1;\r\n  }\r\n  if (i >= 10) {\r\n    weaponItem[i] = 2;\r\n    maxScore[i] = 5;\r\n  }\r\n  if (i >= 11) {\r\n    casterProf[i] = 4;\r\n  }\r\n  if (i >= 12) {\r\n    weaponDice[i] = 3;\r\n  }\r\n  if (i >= 13) {\r\n    martialProf[i] = 6;\r\n    casterSpec[i] = 1;\r\n  }\r\n  if (i >= 15) {\r\n    martialSpec[i] = 2;\r\n  }\r\n  if (i >= 16) {\r\n    weaponItem[i] = 3;\r\n  }\r\n  if (i >= 17) {\r\n    maxScore[i] = 6;\r\n  }\r\n  if (i >= 19) {\r\n    weaponDice[i] = 4;\r\n  }\r\n  if (i >= 20) {\r\n    maxScore[i] = 7;\r\n  }\r\n\r\n  fighterAB[i] = i + martialProf[i] + maxScore[i] + weaponItem[i] + 2;\r\n  fighterStatic[i] = maxScore[i] + (martialSpec[i] * (martialProf[i] + 2)) / 2;\r\n}\r\n\r\nexport const defaultValues = {\r\n  [defaultActivities.FIGHTER]: fighterAB,\r\n};\r\n\r\nexport const defaultDiceNum = {\r\n  [defaultActivities.FIGHTER]: weaponDice,\r\n};\r\n\r\nexport const defaultStatic = {\r\n  [defaultActivities.FIGHTER]: fighterStatic,\r\n};\r\n\r\nconst extremeAC = {\r\n  \"-1\": 18,\r\n  0: 19,\r\n  1: 19,\r\n  2: 21,\r\n  3: 22,\r\n  4: 24,\r\n  5: 25,\r\n  6: 27,\r\n  7: 28,\r\n  8: 30,\r\n  9: 31,\r\n  10: 33,\r\n  11: 34,\r\n  12: 36,\r\n  13: 37,\r\n  14: 39,\r\n  15: 40,\r\n  16: 42,\r\n  17: 43,\r\n  18: 45,\r\n  19: 46,\r\n  20: 48,\r\n  21: 49,\r\n  22: 51,\r\n  23: 52,\r\n  24: 54,\r\n};\r\nconst highAC = { ...extremeAC };\r\nfor (let level in highAC) highAC[level] -= 3;\r\n\r\nconst moderateAC = { ...extremeAC };\r\nfor (let level in moderateAC) moderateAC[level] -= 4;\r\n\r\nconst lowAC = { ...extremeAC };\r\nfor (let level in lowAC) lowAC[level] -= 6;\r\n\r\nexport const defaultACs = {\r\n  [defaultValuesAC.EXTREME]: extremeAC,\r\n  [defaultValuesAC.HIGH]: highAC,\r\n  [defaultValuesAC.MODERATE]: moderateAC,\r\n  [defaultValuesAC.LOW]: lowAC,\r\n};\r\n\r\nconst extremeSaves = {\r\n  \"-1\": 9,\r\n  0: 10,\r\n  1: 11,\r\n  2: 12,\r\n  3: 14,\r\n  4: 15,\r\n  5: 17,\r\n  6: 18,\r\n  7: 20,\r\n  8: 21,\r\n  9: 23,\r\n  10: 24,\r\n  11: 26,\r\n  12: 27,\r\n  13: 29,\r\n  14: 30,\r\n  15: 32,\r\n  16: 33,\r\n  17: 35,\r\n  18: 36,\r\n  19: 38,\r\n  20: 39,\r\n  21: 41,\r\n  22: 43,\r\n  23: 44,\r\n  24: 46,\r\n};\r\nconst highSaves = {\r\n  \"-1\": 8,\r\n  0: 9,\r\n  1: 10,\r\n  2: 11,\r\n  3: 12,\r\n  4: 14,\r\n  5: 15,\r\n  6: 17,\r\n  7: 18,\r\n  8: 19,\r\n  9: 21,\r\n  10: 22,\r\n  11: 24,\r\n  12: 25,\r\n  13: 26,\r\n  14: 28,\r\n  15: 29,\r\n  16: 30,\r\n  17: 32,\r\n  18: 33,\r\n  19: 35,\r\n  20: 36,\r\n  21: 38,\r\n  22: 39,\r\n  23: 40,\r\n  24: 42,\r\n};\r\nconst moderateSaves = {\r\n  \"-1\": 5,\r\n  0: 6,\r\n  1: 7,\r\n  2: 8,\r\n  3: 9,\r\n  4: 11,\r\n  5: 12,\r\n  6: 14,\r\n  7: 15,\r\n  8: 16,\r\n  9: 18,\r\n  10: 19,\r\n  11: 21,\r\n  12: 22,\r\n  13: 23,\r\n  14: 25,\r\n  15: 26,\r\n  16: 28,\r\n  17: 29,\r\n  18: 30,\r\n  19: 32,\r\n  20: 33,\r\n  21: 35,\r\n  22: 36,\r\n  23: 37,\r\n  24: 38,\r\n};\r\nconst lowSaves = {\r\n  \"-1\": 2,\r\n  0: 3,\r\n  1: 4,\r\n  2: 5,\r\n  3: 6,\r\n  4: 8,\r\n  5: 9,\r\n  6: 11,\r\n  7: 12,\r\n  8: 13,\r\n  9: 15,\r\n  10: 16,\r\n  11: 18,\r\n  12: 19,\r\n  13: 20,\r\n  14: 22,\r\n  15: 23,\r\n  16: 25,\r\n  17: 26,\r\n  18: 27,\r\n  19: 29,\r\n  20: 30,\r\n  21: 32,\r\n  22: 33,\r\n  23: 34,\r\n  24: 36,\r\n};\r\nconst terribleSaves = {\r\n  \"-1\": 0,\r\n  0: 1,\r\n  1: 2,\r\n  2: 3,\r\n  3: 4,\r\n  4: 6,\r\n  5: 7,\r\n  6: 8,\r\n  7: 10,\r\n  8: 11,\r\n  9: 12,\r\n  10: 14,\r\n  11: 15,\r\n  12: 16,\r\n  13: 18,\r\n  14: 19,\r\n  15: 20,\r\n  16: 22,\r\n  17: 23,\r\n  18: 24,\r\n  19: 26,\r\n  20: 27,\r\n  21: 28,\r\n  22: 30,\r\n  23: 31,\r\n  24: 32,\r\n};\r\nexport const defaultSaves = {\r\n  [defaultValuesSaves.EXTREME]: extremeSaves,\r\n  [defaultValuesSaves.HIGH]: highSaves,\r\n  [defaultValuesSaves.MODERATE]: moderateSaves,\r\n  [defaultValuesSaves.LOW]: lowSaves,\r\n  [defaultValuesSaves.TERRIBLE]: terribleSaves,\r\n};\r\n","export const activityTypes = {\r\n  STRIKE: \"Strike\",\r\n  SAVE: \"Save\",\r\n};\r\n\r\nexport const defaultActivities = {\r\n  FIGHTER: \"Fighter Strike\",\r\n};\r\n\r\nexport const defaultValuesAC = {\r\n  LOW: \"Low\",\r\n  MODERATE: \"Moderate\",\r\n  HIGH: \"High\",\r\n  EXTREME: \"Extreme\",\r\n};\r\n\r\nexport const defaultValuesSaves = {\r\n  TERRIBLE: \"Terrible\",\r\n  LOW: \"Low\",\r\n  MODERATE: \"Moderate\",\r\n  HIGH: \"High\",\r\n  EXTREME: \"Extreme\",\r\n};\r\n\r\nexport const defenses = {\r\n  AC: \"AC\",\r\n  FORT: \"Fort\",\r\n  REF: \"Ref\",\r\n  WILL: \"Will\",\r\n  PER: \"Perception\",\r\n};\r\n\r\nexport const MAPs = {\r\n  N1: \"0 (0x-5)\",\r\n  N2: \"-5 (1x-5)\",\r\n  N3: \"-10 (2x-5)\",\r\n  A1: \"0 (0x-4)\",\r\n  A2: \"-4 (1x-4)\",\r\n  A3: \"-8 (2x-4)\",\r\n  R1: \"0 (0x-3)\",\r\n  R2: \"-3 (1x-3)\",\r\n  R3: \"-6 (2x-3)\",\r\n  RA1: \"0 (0x-2)\",\r\n  RA2: \"-2 (1x-2)\",\r\n  RA3: \"-4 (2x-2)\",\r\n  RAA1: \"0 (0x-1)\",\r\n  RAA2: \"-1 (1x-1)\",\r\n  RAA3: \"-2 (2x-1)\",\r\n};\r\n\r\nexport const nextMAPs = {\r\n  \"0 (0x-5)\": \"-5 (1x-5)\",\r\n  \"-5 (1x-5)\": \"-10 (2x-5)\",\r\n  \"-10 (2x-5)\": \"-10 (2x-5)\",\r\n  \"0 (0x-4)\": \"-4 (1x-4)\",\r\n  \"-4 (1x-4)\": \"-8 (2x-4)\",\r\n  \"-8 (2x-4)\": \"-8 (2x-4)\",\r\n  \"0 (0x-3)\": \"-3 (1x-3)\",\r\n  \"-3 (1x-3)\": \"-6 (2x-3)\",\r\n  \"-6 (2x-3)\": \"-6 (2x-3)\",\r\n  \"0 (0x-2)\": \"-2 (1x-2)\",\r\n  \"-2 (1x-2)\": \"-4 (2x-2)\",\r\n  \"-4 (2x-2)\": \"-4 (2x-2)\",\r\n  \"0 (0x-1)\": \"-1 (1x-1)\",\r\n  \"-1 (1x-1)\": \"-2 (2x-1)\",\r\n  \"-2 (2x-1)\": \"-2 (2x-1)\",\r\n};\r\n\r\nexport const MAPvalues = {\r\n  \"0 (0x-5)\": 0,\r\n  \"-5 (1x-5)\": -5,\r\n  \"-10 (2x-5)\": -10,\r\n  \"0 (0x-4)\": 0,\r\n  \"-4 (1x-4)\": -4,\r\n  \"-8 (2x-4)\": -8,\r\n  \"0 (0x-3)\": 0,\r\n  \"-3 (1x-3)\": -3,\r\n  \"-6 (2x-3)\": -6,\r\n  \"0 (0x-2)\": 0,\r\n  \"-2 (1x-2)\": -2,\r\n  \"-4 (2x-2)\": -4,\r\n  \"0 (0x-1)\": 0,\r\n  \"-1 (1x-1)\": -1,\r\n  \"-2 (2x-1)\": -2,\r\n};\r\n\r\nexport const damageTypes = {\r\n  NONE: \"None\",\r\n  B: \"bludgeoning\",\r\n  P: \"piercing\",\r\n  S: \"slashing\",\r\n  FIRE: \"fire\",\r\n};\r\n\r\nexport const materials = {\r\n  NONE: \"none\",\r\n  COLD_IRON: \"cold iron\",\r\n  SILVER: \"silver\",\r\n  ADAMANTINE: \"adamantine\",\r\n};\r\n\r\nexport const conditions = {\r\n  ALWAYS: \"Always\",\r\n  CRIT: \"On Crit\",\r\n  SUCC: \"On Success\",\r\n  FAIL: \"On Failure\",\r\n  CRIF: \"On Crit Fail\",\r\n  AT_LEAST_SUCC: \"Success or better\",\r\n  AT_LEAST_FAIL: \"Failure or better\",\r\n  FAIL_WORSE: \"Failure or worse\",\r\n  SUCC_WORSE: \"Success or worse\",\r\n};\r\n\r\nexport const dCond = {\r\n  STRIKE: \"x1 hit, x2 crit\",\r\n  BASIC: \"Basic save\",\r\n  ALWAYS: \"Always\",\r\n  CRIT: \"On Crit\",\r\n  SUCC: \"On Success\",\r\n  FAIL: \"On Failure\",\r\n  CRIF: \"On Crit Fail\",\r\n  AT_LEAST_SUCC: \"Success or better\",\r\n  AT_LEAST_FAIL: \"Failure or better\",\r\n  FAIL_WORSE: \"Failure or worse\",\r\n  SUCC_WORSE: \"Success or worse\",\r\n};\r\n\r\nexport const diceNums = {\r\n  0: 0,\r\n  1: 1,\r\n  2: 2,\r\n  3: 3,\r\n  4: 4,\r\n  5: 5,\r\n  6: 6,\r\n  7: 7,\r\n  8: 8,\r\n  9: 9,\r\n  10: 10,\r\n  11: 11,\r\n  12: 12,\r\n  13: 13,\r\n  14: 14,\r\n  15: 15,\r\n  16: 16,\r\n  17: 17,\r\n  18: 18,\r\n  19: 19,\r\n  20: 20,\r\n};\r\n\r\nexport const diceSizes = {\r\n  4: 4,\r\n  6: 6,\r\n  8: 8,\r\n  10: 10,\r\n  12: 12,\r\n};\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const weaknessAdapter = createEntityAdapter();\r\n\r\nlet weakness = 0;\r\n\r\nexport const weaknessesSlice = createSlice({\r\n  name: \"weaknesses\",\r\n  initialState: weaknessAdapter.getInitialState(),\r\n  reducers: {\r\n    weaknessAdded: weaknessAdapter.addOne,\r\n    weaknessUpdated: weaknessAdapter.updateOne,\r\n    weaknessCreated: {\r\n      reducer: (state, action) => {\r\n        const { id, type, value } = action.payload;\r\n        weaknessAdapter.addOne(state, { id, type, value });\r\n      },\r\n      prepare: ({ parentId, type, value }) => {\r\n        const id = ++weakness;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n            type,\r\n            value,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    weaknessRemoved: weaknessAdapter.removeOne,\r\n  },\r\n});\r\n\r\nexport const {\r\n  weaknessRemoved,\r\n  weaknessCreated,\r\n  weaknessAdded,\r\n  weaknessUpdated,\r\n} = weaknessesSlice.actions;\r\n\r\nexport default weaknessesSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selectweaknessById,\r\n  selectIds: selectweaknessIds,\r\n  selectEntities: selectweaknessEntities,\r\n  selectAll: selectAllweaknesses,\r\n  selectTotal: selectTotalweaknesses,\r\n} = weaknessAdapter.getSelectors((state) => state.weaknesses);\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\nimport { defaultACs, defaultSaves } from \"../defaults\";\r\nimport { defenses } from \"../types\";\r\nimport { weaknessCreated, weaknessRemoved } from \"./weaknessSlice\";\r\n\r\nexport const targetAdapter = createEntityAdapter();\r\n\r\nexport const targetsSlice = createSlice({\r\n  name: \"targets\",\r\n  initialState: targetAdapter.getInitialState(),\r\n  reducers: {\r\n    targetAdded: targetAdapter.addOne,\r\n    targetUpdated: (state, action) => {\r\n      targetAdapter.updateOne(state, action.payload);\r\n      const target = state.entities[action.payload.id];\r\n      if (!target.level) target.level = 0;\r\n      if (target.level < -1) target.level = -1;\r\n      if (target.level > 24) target.level = 24;\r\n      if (target.useDefaultAC) {\r\n        target[defenses.AC] = defaultACs[target.defaultAC][target.level];\r\n      }\r\n      if (target.useDefaultFort) {\r\n        target[defenses.FORT] = defaultSaves[target.defaultFort][target.level];\r\n      }\r\n      if (target.useDefaultRef) {\r\n        target[defenses.REF] = defaultSaves[target.defaultRef][target.level];\r\n      }\r\n      if (target.useDefaultWill) {\r\n        target[defenses.WILL] = defaultSaves[target.defaultWill][target.level];\r\n      }\r\n      if (target.useDefaultPer) {\r\n        target[defenses.PER] = defaultSaves[target.defaultPer][target.level];\r\n      }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(weaknessCreated, (state, action) => {\r\n        const { parentId: id, id: weaknessId } = action.payload;\r\n        state.entities[id].weaknesses.push(weaknessId);\r\n        // targetAdded.updateOne(state, { id, changes: { weaknesses: [...weaknesses, weaknessId] }});\r\n      })\r\n      .addCase(weaknessRemoved, (state, action) => {\r\n        const { parentId: id, id: weaknessId } = action.payload;\r\n        state.entities[id].weaknesses = state.entities[id].weaknesses.filter(\r\n          (wid) => wid !== weaknessId\r\n        );\r\n      });\r\n  },\r\n});\r\n\r\nexport const { targetAdded, targetUpdated } = targetsSlice.actions;\r\n\r\nexport default targetsSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selecttargetById,\r\n  selectIds: selecttargetIds,\r\n  selectEntities: selecttargetEntities,\r\n  selectAll: selectAlltargets,\r\n  selectTotal: selectTotaltargets,\r\n} = targetAdapter.getSelectors((state) => state.targets);\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { selecttargetById, targetUpdated } from \"./targetSlice\";\r\nimport {\r\n  damageTypes,\r\n  defaultValuesAC,\r\n  defaultValuesSaves,\r\n  defenses,\r\n  materials,\r\n} from \"../types\";\r\nimport {\r\n  selectweaknessById,\r\n  weaknessCreated,\r\n  weaknessRemoved,\r\n  weaknessUpdated,\r\n} from \"./weaknessSlice\";\r\n\r\nfunction TargetInput({ id }) {\r\n  const {\r\n    name,\r\n    level,\r\n    [defenses.AC]: AC,\r\n    defaultAC,\r\n    useDefaultAC,\r\n    [defenses.FORT]: Fort,\r\n    defaultFort,\r\n    useDefaultFort,\r\n    [defenses.REF]: Ref,\r\n    defaultRef,\r\n    useDefaultRef,\r\n    [defenses.WILL]: Will,\r\n    defaultWill,\r\n    useDefaultWill,\r\n    [defenses.PER]: Perception,\r\n    defaultPer,\r\n    useDefaultPer,\r\n    flatfooted,\r\n    weaknesses,\r\n  } = useSelector((state) => selecttargetById(state, 0));\r\n  const dispatch = useDispatch();\r\n\r\n  const ACOptions = [];\r\n  for (let dv in defaultValuesAC) {\r\n    ACOptions.push(<option key={dv}>{defaultValuesAC[dv]}</option>);\r\n  }\r\n  const SaveOptions = [];\r\n  for (let dv in defaultValuesSaves) {\r\n    SaveOptions.push(<option key={dv}>{defaultValuesSaves[dv]}</option>);\r\n  }\r\n\r\n  // name, level, ac, fort, ref, will, perception, resistances/weaknesses\r\n  return (\r\n    <div className=\"box flexbox\">\r\n      <span className=\"input\">\r\n        <label htmlFor=\"targetName\">{\"Target Name: \"}</label>\r\n        <input\r\n          id=\"targetName\"\r\n          type=\"text\"\r\n          placeholder=\"Enter Target name\"\r\n          value={name}\r\n          onChange={(e) =>\r\n            dispatch(targetUpdated({ id, changes: { name: e.target.value } }))\r\n          }\r\n        />\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"Level\">{\" Level: \"}</label>\r\n        <input\r\n          id=\"Level\"\r\n          type=\"number\"\r\n          value={level}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: {\r\n                  level: parseInt(e.target.value),\r\n                },\r\n              })\r\n            )\r\n          }\r\n        />\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"AC\">{\" AC: \"}</label>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={useDefaultAC}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { useDefaultAC: e.target.checked } })\r\n            )\r\n          }\r\n        />\r\n        <select\r\n          value={defaultAC}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { defaultAC: e.target.value } })\r\n            )\r\n          }\r\n        >\r\n          {ACOptions}\r\n        </select>\r\n        <input\r\n          id=\"AC\"\r\n          type=\"number\"\r\n          value={AC}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: {\r\n                  useDefaultAC: false,\r\n                  [defenses.AC]: parseInt(e.target.value),\r\n                },\r\n              })\r\n            )\r\n          }\r\n        />\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"Fort\">{\" Fort: \"}</label>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={useDefaultFort}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { useDefaultFort: e.target.checked },\r\n              })\r\n            )\r\n          }\r\n        />\r\n        <select\r\n          value={defaultFort}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { defaultFort: e.target.value } })\r\n            )\r\n          }\r\n        >\r\n          {SaveOptions}\r\n        </select>\r\n        <input\r\n          id=\"Fort\"\r\n          type=\"number\"\r\n          value={Fort}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { [defenses.FORT]: parseInt(e.target.value) },\r\n              })\r\n            )\r\n          }\r\n        />\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"Ref\">{\" Ref: \"}</label>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={useDefaultRef}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { useDefaultRef: e.target.checked },\r\n              })\r\n            )\r\n          }\r\n        />\r\n        <select\r\n          value={defaultRef}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { defaultRef: e.target.value } })\r\n            )\r\n          }\r\n        >\r\n          {SaveOptions}\r\n        </select>\r\n        <input\r\n          id=\"Ref\"\r\n          type=\"number\"\r\n          value={Ref}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { [defenses.REF]: parseInt(e.target.value) },\r\n              })\r\n            )\r\n          }\r\n        />\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"Will\">{\" Will: \"}</label>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={useDefaultWill}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { useDefaultWill: e.target.checked },\r\n              })\r\n            )\r\n          }\r\n        />\r\n        <select\r\n          value={defaultWill}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { defaultWill: e.target.value } })\r\n            )\r\n          }\r\n        >\r\n          {SaveOptions}\r\n        </select>\r\n        <input\r\n          id=\"Will\"\r\n          type=\"number\"\r\n          value={Will}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { [defenses.WILL]: parseInt(e.target.value) },\r\n              })\r\n            )\r\n          }\r\n        />\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"Perception\">{\" Perception: \"}</label>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={useDefaultPer}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { useDefaultPer: e.target.checked },\r\n              })\r\n            )\r\n          }\r\n        />\r\n        <select\r\n          value={defaultPer}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { defaultPer: e.target.value } })\r\n            )\r\n          }\r\n        >\r\n          {SaveOptions}\r\n        </select>\r\n        <input\r\n          id=\"Perception\"\r\n          type=\"number\"\r\n          value={Perception}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { [defenses.PER]: parseInt(e.target.value) },\r\n              })\r\n            )\r\n          }\r\n        />\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"Flatfooted\">{\" Flatfooted: \"}</label>\r\n        <input\r\n          id=\"Flatfooted\"\r\n          type=\"checkbox\"\r\n          checked={flatfooted}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { flatfooted: e.target.checked } })\r\n            )\r\n          }\r\n        />\r\n      </span>\r\n\r\n      <div className=\"box flexbox\">\r\n        {\" Resistance/Weakness: \"}\r\n        {weaknesses.map((weaknessId) => (\r\n          <Weakness parentId={id} id={weaknessId} key={weaknessId} />\r\n        ))}\r\n        <AddWeakness parentId={id} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// const TargetInfo = ({ id }) => {\r\n//   const { overrideDefault, type, value, weaknesses } = useSelector((state) =>\r\n//     selecttargetInfoById(state, id)\r\n//   );\r\n//   const dispatch = useDispatch();\r\n\r\n//   const defenseOptions = [];\r\n//   for (let d in defenses) {\r\n//     defenseOptions.push(<option key={d}>{defenses[d]}</option>);\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"box\">\r\n//       {\"Override Target: \"}\r\n//       <input\r\n//         type=\"checkbox\"\r\n//         checked={overrideDefault}\r\n//         onChange={(e) =>\r\n//           dispatch(\r\n//             targetInfoUpdated({\r\n//               id,\r\n//               changes: { overrideDefault: e.target.checked },\r\n//             })\r\n//           )\r\n//         }\r\n//       />\r\n\r\n// {/* <Weaknesses parentId={id} weaknessIds={weaknesses} /> */}\r\n\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const Weaknesses = ({ parentId, weaknessIds }) => {\r\n//   return (\r\n//     <span>\r\n//       {weaknessIds.map((weaknessId) => (\r\n//         <Weakness id={weaknessId} key={weaknessId} />\r\n//       ))}\r\n//       <AddWeakness id={parentId} />\r\n//     </span>\r\n//   );\r\n// };\r\n\r\nconst Weakness = ({ id, parentId }) => {\r\n  // needs to have parent id to remove weakness\r\n  const { type, value } = useSelector((state) => selectweaknessById(state, id));\r\n  const dispatch = useDispatch();\r\n\r\n  const updateOrRemoveWeakness = (e) => {\r\n    if (e.target.value === damageTypes.NONE) {\r\n      // remove this weakness\r\n      dispatch(weaknessRemoved({ id, parentId }));\r\n    } else {\r\n      dispatch(weaknessUpdated({ id, changes: { type: e.target.value } }));\r\n    }\r\n  };\r\n  const updateWeaknessValue = (e) => {\r\n    if (!isNaN(e.target.value)) {\r\n      dispatch(\r\n        weaknessUpdated({ id, changes: { value: parseInt(e.target.value) } })\r\n      );\r\n    }\r\n  };\r\n  return (\r\n    <span className=\"input\">\r\n      <WeaknessSelect value={type} onChange={updateOrRemoveWeakness} />\r\n      <input type=\"number\" value={value} onChange={updateWeaknessValue} />\r\n    </span>\r\n  );\r\n};\r\n\r\nlet weaknessId = 0;\r\n\r\nconst AddWeakness = ({ parentId }) => {\r\n  const dispatch = useDispatch();\r\n  let [weaknessValue, setWeaknessValue] = useState(0);\r\n\r\n  // add a Weakness to TargetInfo id\r\n  const addWeakness = (e) => {\r\n    if (e.target.value !== damageTypes.NONE) {\r\n      // need to create a new weakness\r\n      weaknessId++;\r\n      dispatch(\r\n        weaknessCreated({\r\n          id: weaknessId,\r\n          type: e.target.value,\r\n          value: weaknessValue,\r\n          parentId: parentId,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <span className=\"input\">\r\n      <WeaknessSelect value={damageTypes.NONE} onChange={addWeakness} />\r\n      <input\r\n        type=\"number\"\r\n        value={weaknessValue}\r\n        onChange={(e) => setWeaknessValue(parseInt(e.target.value))}\r\n      />\r\n    </span>\r\n  );\r\n};\r\n\r\nconst WeaknessSelect = ({ value, onChange }) => {\r\n  const options = [];\r\n  for (let dt in damageTypes) {\r\n    options.push(<option key={dt}>{damageTypes[dt]}</option>);\r\n  }\r\n  for (let m in materials) {\r\n    if (materials[m] === materials.NONE) continue;\r\n    options.push(<option key={m}>{materials[m]}</option>);\r\n  }\r\n  return (\r\n    <span>\r\n      <select value={value} onChange={(e) => onChange(e)}>\r\n        {options}\r\n      </select>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default TargetInput;\r\n","export const convolve = (vec1, vec2) => {\r\n  if (vec1.length === 0 || vec2.length === 0) {\r\n    throw new Error(\"Vectors can not be empty!\");\r\n  }\r\n  const volume = vec1;\r\n  const kernel = vec2;\r\n  let displacement = 0;\r\n  const convVec = [];\r\n\r\n  for (let i = 0; i < volume.length; i++) {\r\n    for (let j = 0; j < kernel.length; j++) {\r\n      if (displacement + j !== convVec.length) {\r\n        convVec[displacement + j] =\r\n          convVec[displacement + j] + volume[i] * kernel[j];\r\n      } else {\r\n        convVec.push(volume[i] * kernel[j]);\r\n      }\r\n    }\r\n    displacement++;\r\n  }\r\n\r\n  return convVec;\r\n};\r\n\r\nexport const multiplyDist = (dam, dist, multiplier) => {\r\n  if (multiplier === 0) return [0, [1]];\r\n  if (multiplier === 1) return [dam, dist];\r\n\r\n  const newDist = [0];\r\n  let index = 0;\r\n  const newDam = Math.floor(dam * multiplier);\r\n\r\n  let i = 0;\r\n  let oldValue = newDam;\r\n  for (let chance of dist) {\r\n    let newValue = Math.floor((dam + i) * multiplier);\r\n    if (newValue === oldValue) {\r\n      // console.log(`adding ${newValue} at ${index} with ${chance}`);\r\n      newDist[index] += chance;\r\n    } else {\r\n      if (newValue > oldValue + 1) {\r\n        for (let diff = 0; diff < newValue - (oldValue + 1); diff++) {\r\n          index++;\r\n          // console.log(`adding ${newValue} at ${index} with ${0}`);\r\n          newDist[index] = 0;\r\n        }\r\n      }\r\n      index++;\r\n      // console.log(`adding ${newValue} at ${index} with ${chance}`);\r\n      newDist[index] = chance;\r\n    }\r\n    oldValue = newValue;\r\n    i++;\r\n  }\r\n\r\n  return [newDam, newDist];\r\n};\r\n\r\nexport const consolidateDists = (...dists) => {\r\n  // dists = [[{staticDamage, damageDist}, chance]]...]\r\n  // console.log(dists);\r\n  let maxDamage = 0;\r\n  for (let dist of dists) {\r\n    // console.log(`chance is ${dist[1]}`);\r\n    maxDamage = Math.max(\r\n      maxDamage,\r\n      dist[0].staticDamage + dist[0].damageDist.length\r\n    );\r\n  }\r\n  let damageDist = [];\r\n  for (let i = 0; i < maxDamage; i++) {\r\n    damageDist.push(0);\r\n    // console.log(`i is ${i}`);\r\n    for (let dist of dists) {\r\n      if (dist[0].staticDamage <= i) {\r\n        let index = i - dist[0].staticDamage;\r\n        // console.log(`val ${dist[0].damageDist[index]} at index ${index}`);\r\n        if (index < dist[0].damageDist.length)\r\n          damageDist[i] += dist[0].damageDist[index] * dist[1];\r\n      }\r\n    }\r\n  }\r\n  // console.log([staticDamage, damageDist]);\r\n  return damageDist;\r\n};\r\n\r\nexport const applyMin = (staticDamage, damageDist, min) => {\r\n  // TODO: implement applyMin\r\n  while (staticDamage < min) {\r\n    if (damageDist.length >= 2) {\r\n      damageDist[1] += damageDist[0];\r\n      damageDist.shift();\r\n    }\r\n    staticDamage++;\r\n  }\r\n  return [staticDamage, damageDist];\r\n};\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\nimport { damageTypes, dCond, materials } from \"../types\";\r\n\r\nexport const damageAdapter = createEntityAdapter();\r\n\r\n// damageAdded({\r\n//   id: 0,\r\n//   condition: dCond.STRIKE,\r\n//   diceNum: 1,\r\n//   diceSize: 8,\r\n//   staticDamage: 6,\r\n//   type: damageTypes.PIERCE,\r\n//   material: materials.COLD_IRON,\r\n// });\r\n\r\nlet damageId = 1;\r\nexport const damagesSlice = createSlice({\r\n  name: \"damages\",\r\n  initialState: damageAdapter.getInitialState(),\r\n  reducers: {\r\n    damageAdded: damageAdapter.addOne,\r\n    damageUpdated: damageAdapter.updateOne,\r\n    damageCreated: {\r\n      reducer: (state, action) => {\r\n        const {\r\n          id,\r\n          damageCondition,\r\n          diceNum,\r\n          diceSize,\r\n          staticDamage,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n        } = action.payload;\r\n        damageAdapter.addOne(state, {\r\n          id,\r\n          damageCondition,\r\n          diceNum,\r\n          diceSize,\r\n          staticDamage,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n        });\r\n      },\r\n      prepare: ({ parentId }) => {\r\n        const id = ++damageId;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n            damageCondition: dCond.STRIKE,\r\n            diceNum: 0,\r\n            diceSize: 8,\r\n            staticDamage: 0,\r\n            damageType: damageTypes.B,\r\n            material: materials.NONE,\r\n            persistent: false,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    damageRemoved: (state, action) => {\r\n      damageAdapter.removeOne(state, action.payload.id);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { damageRemoved, damageCreated, damageAdded, damageUpdated } =\r\n  damagesSlice.actions;\r\n\r\nexport default damagesSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selectdamageById,\r\n  selectIds: selectdamageIds,\r\n  selectEntities: selectdamageEntities,\r\n  selectAll: selectAlldamages,\r\n  selectTotal: selectTotaldamages,\r\n} = damageAdapter.getSelectors((state) => state.damages);\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\nimport {\r\n  defaultDamageConditions,\r\n  defaultDiceNum,\r\n  defaultStatic,\r\n  defaultTargetTypes,\r\n  defaultTypes,\r\n  defaultValues,\r\n} from \"../defaults\";\r\nimport {\r\n  activityTypes,\r\n  conditions,\r\n  damageTypes,\r\n  dCond,\r\n  defaultActivities,\r\n  defenses,\r\n  MAPs,\r\n  materials,\r\n  nextMAPs,\r\n} from \"../types\";\r\nimport { damageCreated, damageRemoved } from \"./damageSlice\";\r\n\r\nfunction setDefault(state, apId) {\r\n  function applyDefault(apId) {\r\n    const ap = state.entities[apId];\r\n    if (ap.override) {\r\n      return;\r\n    }\r\n    const defaultActivity = ap.defaultActivity;\r\n    ap.type = defaultTypes[defaultActivity];\r\n    ap.targetType = defaultTargetTypes[defaultActivity];\r\n    ap.value = defaultValues[defaultActivity][ap.level];\r\n    ap.damageCondition = defaultDamageConditions[defaultActivity];\r\n    ap.diceNum = defaultDiceNum[defaultActivity][ap.level];\r\n    ap.staticDamage = defaultStatic[defaultActivity][ap.level];\r\n    for (let apId of ap.apIds) {\r\n      state.entities[apId].level = ap.level;\r\n      applyDefault(apId);\r\n    }\r\n  }\r\n  applyDefault(apId);\r\n}\r\nexport const activityPathAdapter = createEntityAdapter();\r\n\r\nlet activityPathId = 1;\r\nconst defaultParentActivity = {\r\n  level: 1,\r\n  useDefault: false,\r\n  defaultActivity: defaultActivities.FIGHTER,\r\n  type: activityTypes.STRIKE,\r\n  targetType: defenses.AC,\r\n  value: 9,\r\n  MAP: MAPs.N1,\r\n  damageCondition: dCond.STRIKE,\r\n  diceNum: 1,\r\n  diceSize: 8,\r\n  staticDamage: 4,\r\n  damageType: damageTypes.S,\r\n  material: materials.NONE,\r\n};\r\n\r\nexport const activityPathsSlice = createSlice({\r\n  name: \"activityPaths\",\r\n  initialState: activityPathAdapter.getInitialState(),\r\n  reducers: {\r\n    activityPathAdded: activityPathAdapter.addOne,\r\n    activityPathUpdated: (state, action) => {\r\n      activityPathAdapter.updateOne(state, action.payload);\r\n      setDefault(state, action.payload.id);\r\n    },\r\n    activityPathRemoved: (state, action) => {\r\n      const { id, parentId } = action.payload;\r\n      activityPathAdapter.removeOne(state, id);\r\n      if (parentId !== undefined) {\r\n        state.entities[parentId].apIds = state.entities[parentId].apIds.filter(\r\n          (apId) => apId !== id\r\n        );\r\n      }\r\n    },\r\n    activityPathCreated: {\r\n      reducer: (state, action) => {\r\n        const { id, parentId, applyMAP } = action.payload;\r\n\r\n        let parentAP;\r\n        if (parentId !== undefined) {\r\n          parentAP = state.entities[parentId];\r\n        } else {\r\n          parentAP = defaultParentActivity;\r\n        }\r\n\r\n        activityPathAdapter.addOne(state, {\r\n          id,\r\n          condition: conditions.ALWAYS,\r\n          override: false,\r\n          level: parentAP.level,\r\n          useDefault: parentAP.useDefault,\r\n          defaultActivity: parentAP.defaultActivity,\r\n          type: parentAP.type,\r\n          targetType: parentAP.targetType,\r\n          targetInfoId: 0,\r\n          value: parentAP.value,\r\n          MAP: applyMAP ? nextMAPs[parentAP.MAP] : parentAP.MAP,\r\n          damageCondition: parentAP.damageCondition,\r\n          diceNum: parentAP.diceNum,\r\n          diceSize: parentAP.diceSize,\r\n          staticDamage: parentAP.staticDamage,\r\n          damageType: parentAP.damageType,\r\n          material: parentAP.material,\r\n          damages: [],\r\n          effects: [],\r\n          apIds: [],\r\n        });\r\n\r\n        if (parentId !== undefined) state.entities[parentId].apIds.push(id);\r\n      },\r\n      prepare: ({ parentId, routineId, applyMAP }) => {\r\n        const id = ++activityPathId;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n            routineId,\r\n            applyMAP,\r\n          },\r\n        };\r\n      },\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(damageCreated, (state, action) => {\r\n        const { parentId: id, id: damageId } = action.payload;\r\n        state.entities[id].damages.push(damageId);\r\n      })\r\n      .addCase(damageRemoved, (state, action) => {\r\n        const { parentId: id, id: damageId } = action.payload;\r\n        state.entities[id].damages = state.entities[id].damages.filter(\r\n          (did) => did !== damageId\r\n        );\r\n      });\r\n  },\r\n});\r\n\r\nexport const {\r\n  activityPathCreated,\r\n  activityPathAdded,\r\n  activityPathUpdated,\r\n  activityPathRemoved,\r\n} = activityPathsSlice.actions;\r\n\r\nexport default activityPathsSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selectactivityPathById,\r\n  selectIds: selectactivityPathIds,\r\n  selectEntities: selectactivityPathEntities,\r\n  selectAll: selectAllactivityPaths,\r\n  selectTotal: selectTotalactivityPaths,\r\n} = activityPathAdapter.getSelectors((state) => state.activityPaths);\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\nimport { activityPathCreated, activityPathRemoved } from \"./activityPathSlice\";\r\n\r\nexport const routinesAdapter = createEntityAdapter();\r\n\r\nlet routineId = 1;\r\nexport const routinesSlice = createSlice({\r\n  name: \"routines\",\r\n  initialState: routinesAdapter.getInitialState({ selectedRoutine: 0 }),\r\n  reducers: {\r\n    setRoutine: (state, action) => {\r\n      state.selectedRoutine = action.payload || 0;\r\n    },\r\n    routineAdded: routinesAdapter.addOne,\r\n    routineUpdated: routinesAdapter.updateOne,\r\n    routineCreated: {\r\n      reducer: (state, action) => {\r\n        const { id, name, apIds } = action.payload;\r\n        state.selectedRoutine = id;\r\n        routinesAdapter.addOne(state, { id, name, apIds });\r\n      },\r\n      prepare: () => {\r\n        const id = ++routineId;\r\n        return { payload: { id, name: \"New Routine\", apIds: [] } };\r\n      },\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(activityPathCreated, (state, action) => {\r\n        const { routineId: id, id: apId } = action.payload;\r\n        if (id !== undefined) state.entities[id].apIds.push(apId);\r\n      })\r\n      .addCase(activityPathRemoved, (state, action) => {\r\n        const { routineId, id } = action.payload;\r\n        if (routineId !== undefined) {\r\n          state.entities[routineId].apIds = state.entities[\r\n            routineId\r\n          ].apIds.filter((apId) => apId !== id);\r\n        }\r\n      });\r\n  },\r\n});\r\n\r\nexport const {\r\n  routineCreated,\r\n  setRoutine,\r\n  updateSelected,\r\n  routineAdded,\r\n  routineUpdated,\r\n} = routinesSlice.actions;\r\n\r\nexport default routinesSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selectRoutineById,\r\n  selectIds: selectRoutineIds,\r\n  selectEntities: selectRoutineEntities,\r\n  selectAll: selectAllRoutines,\r\n  selectTotal: selectTotalRoutines,\r\n} = routinesAdapter.getSelectors((state) => state.routines);\r\n\r\nexport const selectSelectedRoutine = (state) => state.routines.selectedRoutine;\r\n","import { activityTypes, dCond, defenses, MAPvalues, materials } from \"../types\";\r\nimport { applyMin, convolve, multiplyDist } from \"./Distribution\";\r\n\r\nfunction getCritSuccessPercent(bonus, DC, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -20) {\r\n    chance = 0;\r\n  } else if (dif === -20) {\r\n    chance = 5;\r\n  } else if (dif < -9) {\r\n    chance = keen ? 10 : 5;\r\n  } else if (dif < 8) {\r\n    chance = (11 + dif) * 5;\r\n  } else {\r\n    chance = 95;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nfunction getSuccessPercent(bonus, DC, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -29) {\r\n    chance = 0;\r\n  } else if (dif < -20) {\r\n    chance = 5;\r\n  } else if (dif === -20) {\r\n    chance = 0;\r\n  } else if (dif < -9) {\r\n    chance = (keen ? 19 : 20 + dif) * 5;\r\n  } else if (dif < -1) {\r\n    chance = 50;\r\n  } else if (dif < 9) {\r\n    chance = (8 - dif) * 5;\r\n  } else {\r\n    chance = 5;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nfunction getFailurePercent(bonus, DC, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -29) {\r\n    chance = 5;\r\n  } else if (dif < -20) {\r\n    chance = (29 + dif) * 5;\r\n  } else if (dif < -10) {\r\n    chance = 45;\r\n  } else if (dif < -1) {\r\n    chance = (-2 - dif) * 5;\r\n  } else if (dif < 9) {\r\n    chance = 5;\r\n  } else {\r\n    chance = 0;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nfunction getCritFailurePercent(bonus, DC, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -29) {\r\n    chance = 95;\r\n  } else if (dif < -10) {\r\n    chance = (-10 - dif) * 5;\r\n  } else if (dif < -1) {\r\n    chance = 5;\r\n  } else {\r\n    chance = 0;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nconst addDamage = (\r\n  context,\r\n  type,\r\n  material,\r\n  persistent,\r\n  staticDamage,\r\n  damageDist,\r\n  multiplier\r\n) => {\r\n  if (persistent) {\r\n    context = context.persistent;\r\n  } else {\r\n    context = context.normal;\r\n  }\r\n  [staticDamage, damageDist] = multiplyDist(\r\n    staticDamage,\r\n    damageDist,\r\n    multiplier\r\n  );\r\n  if (!(type in context)) {\r\n    context[type] = { material, staticDamage, damageDist };\r\n  } else {\r\n    context[type].staticDamage += staticDamage;\r\n    context[type].damageDist = convolve(context[type].damageDist, damageDist);\r\n    if (material !== materials.NONE) context[type].material = material;\r\n  }\r\n};\r\n\r\nfunction calculateExpectedDamage(activity, damages, target, weaknesses) {\r\n  let bonus;\r\n  let DC;\r\n  switch (activity.type) {\r\n    case activityTypes.STRIKE:\r\n      bonus = activity.value;\r\n      bonus += MAPvalues[activity.MAP];\r\n      DC = target[activity.targetType];\r\n      if (activity.targetType === defenses.AC) {\r\n        if (target.flatfooted) DC -= 2;\r\n      } else {\r\n        DC += 10;\r\n      }\r\n      break;\r\n\r\n    case activityTypes.SAVE:\r\n      bonus = target[activity.targetType];\r\n      DC = activity.value;\r\n      if (activity.targetType === defenses.AC) {\r\n        bonus -= 10;\r\n      }\r\n      break;\r\n\r\n    default:\r\n      console.log(`Activity type ${activity.type} not implemented`);\r\n  }\r\n\r\n  const critPercent = getCritSuccessPercent(bonus, DC);\r\n  const succPercent = getSuccessPercent(bonus, DC);\r\n  const failPercent = getFailurePercent(bonus, DC);\r\n  const crfaPercent = getCritFailurePercent(bonus, DC);\r\n  const chances = [\r\n    critPercent / 100,\r\n    succPercent / 100,\r\n    failPercent / 100,\r\n    crfaPercent / 100,\r\n  ];\r\n  const critDamages = { normal: {}, persistent: {} };\r\n  const succDamages = { normal: {}, persistent: {} };\r\n  const failDamages = { normal: {}, persistent: {} };\r\n  const crfaDamages = { normal: {}, persistent: {} };\r\n  const damageTrees = [critDamages, succDamages, failDamages, crfaDamages];\r\n\r\n  // go through each damage and evaluate it, put damage types together\r\n  damages.forEach((damage) => {\r\n    let {\r\n      damageCondition,\r\n      diceNum,\r\n      diceSize,\r\n      staticDamage,\r\n      damageType,\r\n      material,\r\n      persistent,\r\n    } = damage;\r\n    if (!staticDamage) staticDamage = 0;\r\n\r\n    let damageDist = [1];\r\n    const diceArray = [];\r\n    for (let i = 0; i < diceSize; i++) {\r\n      diceArray.push(1 / diceSize);\r\n    }\r\n    for (let i = 0; i < diceNum; i++) {\r\n      damageDist = convolve(damageDist, diceArray);\r\n    }\r\n    staticDamage += diceNum;\r\n\r\n    switch (damageCondition) {\r\n      case dCond.STRIKE:\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        addDamage(\r\n          critDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          2\r\n        );\r\n        break;\r\n\r\n      case dCond.BASIC:\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          0.5\r\n        );\r\n        addDamage(\r\n          failDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        addDamage(\r\n          crfaDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          2\r\n        );\r\n        break;\r\n\r\n      case dCond.CRIF:\r\n        addDamage(\r\n          crfaDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        break;\r\n\r\n      case dCond.FAIL:\r\n        addDamage(\r\n          failDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        break;\r\n\r\n      case dCond.SUCC:\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        break;\r\n\r\n      case dCond.CRIT:\r\n        addDamage(\r\n          critDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        break;\r\n\r\n      case dCond.AT_LEAST_SUCC:\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        addDamage(\r\n          critDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        break;\r\n\r\n      case dCond.AT_LEAST_FAIL:\r\n        addDamage(\r\n          failDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        addDamage(\r\n          critDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        break;\r\n\r\n      case dCond.FAIL_WORSE:\r\n        addDamage(\r\n          crfaDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        addDamage(\r\n          failDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        break;\r\n\r\n      case dCond.SUCC_WORSE:\r\n        addDamage(\r\n          crfaDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        addDamage(\r\n          failDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n\r\n        break;\r\n\r\n      case dCond.ALWAYS:\r\n        addDamage(\r\n          crfaDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        addDamage(\r\n          failDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        addDamage(\r\n          critDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        break;\r\n\r\n      default:\r\n        console.log(\r\n          `Damage condition ${damage.condition} not implemented yet.`\r\n        );\r\n    }\r\n  });\r\n\r\n  // for each damage group\r\n  // console.log(damageTrees);\r\n  for (let damageTree of damageTrees) {\r\n    for (let damageQuality of [\"normal\", \"persistent\"]) {\r\n      let totalStaticDamage = 0;\r\n      let totalDamageDist = [1];\r\n      for (let type in damageTree[damageQuality]) {\r\n        let { material, staticDamage, damageDist } =\r\n          damageTree[damageQuality][type];\r\n        // console.log(type);\r\n        // make min damage 1 before resistances\r\n        if (staticDamage < 0)\r\n          [staticDamage, damageDist] = applyMin(staticDamage, damageDist, 1);\r\n\r\n        // find max weakness and resistance, weaknesses are negative numbers\r\n        let maxW = 0;\r\n        let maxR = 0;\r\n        weaknesses.forEach((weakness) => {\r\n          if (weakness.type === type || weakness.type === material) {\r\n            if (weakness.value < 0) {\r\n              maxW = Math.min(maxW, weakness.value);\r\n            } else if (weakness.value > 0) {\r\n              maxR = Math.max(maxR, weakness.value);\r\n            }\r\n          }\r\n        });\r\n        staticDamage = staticDamage - (maxR + maxW);\r\n\r\n        // make min damage 0 after resistances\r\n        [staticDamage, damageDist] = applyMin(staticDamage, damageDist, 0);\r\n\r\n        // console.log([staticDamage, damageDist]);\r\n\r\n        // damageTree[damageQuality][type].staticDamage = staticDamage;\r\n        // damageTree[damageQuality][type].damageDist = damageDist;\r\n        totalStaticDamage += staticDamage;\r\n        totalDamageDist = convolve(totalDamageDist, damageDist);\r\n      }\r\n      damageTree[damageQuality].staticDamage = totalStaticDamage;\r\n      damageTree[damageQuality].damageDist = totalDamageDist;\r\n    }\r\n  }\r\n\r\n  return [damageTrees, chances];\r\n}\r\n\r\nexport { calculateExpectedDamage };\r\n","import { convolve, consolidateDists } from \"./Distribution\";\r\nimport { calculateExpectedDamage } from \"./Calculation\";\r\nimport { conditions } from \"../types\";\r\n\r\nclass ActivityPathEvaluator {\r\n  constructor(activityPaths, targets, damages, weaknesses) {\r\n    this.activityPaths = activityPaths;\r\n    this.targets = targets;\r\n    this.damages = damages;\r\n    this.weaknesses = weaknesses;\r\n  }\r\n\r\n  evalPath(activityPath) {\r\n    let currentTarget = this.targets[0];\r\n    let currentDamages = activityPath.damages.map(\r\n      (damageId) => this.damages[damageId]\r\n    );\r\n    currentDamages.push(activityPath);\r\n    let currentWeaknesses = currentTarget.weaknesses.map(\r\n      (weaknessId) => this.weaknesses[weaknessId]\r\n    );\r\n\r\n    // damage tress = [critDamages, succDamages, failDamages, crfaDamages]\r\n    // critDamages = {normal, persistent}\r\n    // normal = {fire..., staticDamage, damageDist}\r\n    let [damageTrees, chances] = calculateExpectedDamage(\r\n      activityPath,\r\n      currentDamages,\r\n      currentTarget,\r\n      currentWeaknesses\r\n    );\r\n    // console.log(`chances are ${chances}`);\r\n\r\n    // go through each activity path, depending on its condition add its damage distributions to this activities appropriately\r\n    activityPath.apIds.forEach((apId) => {\r\n      let ap = this.activityPaths[apId];\r\n      let [pathDist, pathPDist] = this.evalPath(ap);\r\n\r\n      let indicies = [];\r\n      // console.log(`cond is: ${ap.condition}`);\r\n      switch (ap.condition) {\r\n        case conditions.ALWAYS:\r\n          indicies = [0, 1, 2, 3];\r\n          break;\r\n\r\n        case conditions.AT_LEAST_FAIL:\r\n          indicies = [0, 1, 2];\r\n          break;\r\n\r\n        case conditions.AT_LEAST_SUCC:\r\n          indicies = [0, 1];\r\n          break;\r\n\r\n        case conditions.CRIF:\r\n          indicies = [3];\r\n          break;\r\n\r\n        case conditions.CRIT:\r\n          indicies = [0];\r\n          break;\r\n\r\n        case conditions.FAIL:\r\n          indicies = [2];\r\n          break;\r\n\r\n        case conditions.FAIL_WORSE:\r\n          indicies = [2, 3];\r\n          break;\r\n\r\n        case conditions.SUCC:\r\n          indicies = [1];\r\n          break;\r\n\r\n        case conditions.SUCC_WORSE:\r\n          indicies = [1, 2, 3];\r\n          break;\r\n\r\n        default:\r\n      }\r\n      // console.log(`indies are: ${indicies}`);\r\n      for (let index of indicies) {\r\n        // console.log(\r\n        //   `adding damage to index ${index} w/ chance ${chances[index]}`\r\n        // );\r\n        // damageTrees[index].normal.staticDamage += pathSD;\r\n        damageTrees[index].normal.damageDist = convolve(\r\n          damageTrees[index].normal.damageDist,\r\n          pathDist\r\n        );\r\n        // damageTrees[index].persistent.staticDamage += pathPSD;\r\n        damageTrees[index].persistent.damageDist = convolve(\r\n          damageTrees[index].persistent.damageDist,\r\n          pathPDist\r\n        );\r\n      }\r\n      // console.log(pathChance);\r\n    });\r\n\r\n    let damageDist = consolidateDists(\r\n      [damageTrees[0].normal, chances[0]],\r\n      [damageTrees[1].normal, chances[1]],\r\n      [damageTrees[2].normal, chances[2]],\r\n      [damageTrees[3].normal, chances[3]]\r\n    );\r\n    let PdamageDist = consolidateDists(\r\n      [damageTrees[0].persistent, chances[0]],\r\n      [damageTrees[1].persistent, chances[1]],\r\n      [damageTrees[2].persistent, chances[2]],\r\n      [damageTrees[3].persistent, chances[3]]\r\n    );\r\n\r\n    return [damageDist, PdamageDist];\r\n  }\r\n}\r\n\r\nexport default ActivityPathEvaluator;\r\n","import React, { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { convolve } from \"./Calculation/Distribution\";\r\nimport { selectactivityPathEntities } from \"./Routine/activityPathSlice\";\r\nimport { selectdamageEntities } from \"./Routine/damageSlice\";\r\nimport { selectRoutineEntities } from \"./Routine/routineSlice\";\r\nimport { selecttargetEntities } from \"./Target/targetSlice\";\r\nimport { selectweaknessEntities } from \"./Target/weaknessSlice\";\r\n\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport ActivityPathEvaluator from \"./Calculation/EvaluateActivityPath\";\r\n\r\nconst Display = () => {\r\n  const [addPersistent, setAddPersistent] = useState(false);\r\n  const [perMulti, setPerMulti] = useState(2);\r\n\r\n  const routines = useSelector(selectRoutineEntities);\r\n  const activityPaths = useSelector(selectactivityPathEntities);\r\n  const targets = useSelector(selecttargetEntities);\r\n  const damages = useSelector(selectdamageEntities);\r\n  const weaknesses = useSelector(selectweaknessEntities);\r\n\r\n  // const selectedRoutine = routines[useSelector(selectSelectedRoutine)];\r\n  const evaluator = new ActivityPathEvaluator(\r\n    activityPaths,\r\n    targets,\r\n    damages,\r\n    weaknesses\r\n  );\r\n\r\n  let maxDamage = 0;\r\n  let maxPDamage = 0;\r\n  const datasets = [];\r\n  const expectedDamages = [];\r\n  const expectedPersistentDamages = [];\r\n  // TODO: use distribution\r\n  for (let id in routines) {\r\n    let routine = routines[id];\r\n    let expD = 0;\r\n    let expP = 0;\r\n    let routineDDist = [1];\r\n    let routinePDDist = [1];\r\n    for (let i = 0; i < routine.apIds.length; i++) {\r\n      let activityPath = activityPaths[routine.apIds[i]];\r\n      let [damageDist, PdamageDist] = evaluator.evalPath(activityPath);\r\n      routineDDist = convolve(routineDDist, damageDist);\r\n      routinePDDist = convolve(routinePDDist, PdamageDist);\r\n    }\r\n    maxDamage = Math.max(maxDamage, routineDDist.length - 1);\r\n    maxPDamage = Math.max(maxPDamage, routinePDDist.length - 1);\r\n    const dataArray = [];\r\n    for (let i = 0; i < routineDDist.length; i++) {\r\n      dataArray.push({ x: i, y: routineDDist[i] });\r\n      expD += routineDDist[i] * i;\r\n    }\r\n    datasets.push({\r\n      fill: \"origin\",\r\n      label: routine.name,\r\n      data: dataArray,\r\n      xAxisID: \"damage\",\r\n      yAxisID: \"chance\",\r\n      spanGaps: false,\r\n    });\r\n    // }\r\n    // maxDamage += damageDist.length-1;\r\n\r\n    // routine.apIds.forEach((apId) => {\r\n    //   let activityPath = activityPaths[apId];\r\n    //   let [damageDist, PdamageDist] = evaluateActivityPath(activityPath);\r\n    //   maxDamage = Math.max(maxDamage, damageDist.length);\r\n\r\n    //   const dataArray = [];\r\n    //   const labels = [];\r\n    //   for (let i = 0; i < damageDist.length; i++) {\r\n\r\n    //     labels.push(i);\r\n    //     dataArray.push({ x: i, y: damageDist[i] });\r\n    //   }\r\n    //   const data = {\r\n    //     labels,\r\n    //     datasets: [\r\n    //       {\r\n    //         fill: \"origin\",\r\n    //         label: \"Chance\",\r\n    //         data: dataArray,\r\n    //         xAxisID: \"damage\",\r\n    //         yAxisID: \"chance\",\r\n    //         spanGaps: false,\r\n    //       },\r\n    //     ],\r\n    //   };\r\n\r\n    //   // expectedDamages.push(\r\n    //   //   <Bar key={routine.id} data={data} />\r\n    //   //   // <p key={routine.id}>\r\n    //   //   //   {routine.name}\r\n    //   //   //   {\": \"}\r\n    //   //   //   {addPersistent ? expD + expP * perMulti : expD}\r\n    //   //   // </p>\r\n    //   // );\r\n    // });\r\n\r\n    expectedDamages.push(\r\n      <div key={routine.id}>\r\n        {routine.name}\r\n        {\": \"}\r\n        {expD.toFixed(2)}\r\n      </div>\r\n    );\r\n    // expectedDamages.push(\r\n    //   <Bar key={routine.id} data={data} />\r\n    //   // <p key={routine.id}>\r\n    //   //   {routine.name}\r\n    //   //   {\": \"}\r\n    //   //   {addPersistent ? expD + expP * perMulti : expD}\r\n    //   // </p>\r\n    // );\r\n    expectedPersistentDamages.push(\r\n      <div key={routine.id}>\r\n        {routine.name}\r\n        {\": \"}\r\n        {expP.toFixed(2)}\r\n      </div>\r\n    );\r\n  }\r\n  const labels = [];\r\n  for (let i = 0; i <= maxDamage; i++) {\r\n    labels.push(i);\r\n  }\r\n  const data = {\r\n    labels,\r\n    datasets,\r\n  };\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      Add persistent damage:\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={addPersistent}\r\n        onChange={(e) => setAddPersistent(e.target.checked)}\r\n      />\r\n      , persistent damage multiplier:\r\n      <input\r\n        type=\"number\"\r\n        value={perMulti ? perMulti : 0}\r\n        onChange={(e) => setPerMulti(e.target.valueAsNumber)}\r\n      />\r\n      <div>\r\n        Expected Damage:\r\n        {expectedDamages}\r\n      </div>\r\n      <Bar data={data} />\r\n      {addPersistent ? (\r\n        \"\"\r\n      ) : (\r\n        <div>\r\n          Expected Persistent Damage:\r\n          {expectedPersistentDamages}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Display;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  activityTypes,\r\n  conditions,\r\n  damageTypes,\r\n  dCond,\r\n  defaultActivities,\r\n  defenses,\r\n  diceNums,\r\n  diceSizes,\r\n  MAPs,\r\n  materials,\r\n} from \"../types\";\r\nimport {\r\n  activityPathCreated,\r\n  activityPathUpdated,\r\n  activityPathRemoved,\r\n  selectactivityPathById,\r\n} from \"./activityPathSlice\";\r\n\r\nimport {\r\n  damageCreated,\r\n  damageRemoved,\r\n  damageUpdated,\r\n  selectdamageById,\r\n} from \"./damageSlice\";\r\nimport {\r\n  routineUpdated,\r\n  selectRoutineById,\r\n  selectSelectedRoutine,\r\n} from \"./routineSlice\";\r\n\r\nconst conditionOptions = [];\r\nfor (let c in conditions) {\r\n  conditionOptions.push(<option key={c}>{conditions[c]}</option>);\r\n}\r\nconst defaultActivityOptions = [];\r\nfor (let da in defaultActivities) {\r\n  defaultActivityOptions.push(\r\n    <option key={da}>{defaultActivities[da]}</option>\r\n  );\r\n}\r\n\r\nconst activityTypeOptions = [];\r\nfor (let at in activityTypes) {\r\n  activityTypeOptions.push(<option key={at}>{activityTypes[at]}</option>);\r\n}\r\nconst MAPOptions = [];\r\nfor (let m in MAPs) {\r\n  MAPOptions.push(<option key={m}>{MAPs[m]}</option>);\r\n}\r\nconst defenseOptions = [];\r\nfor (let d in defenses) {\r\n  defenseOptions.push(<option key={d}>{defenses[d]}</option>);\r\n}\r\n\r\nconst damageConditionOptions = [];\r\nfor (let dc in dCond) {\r\n  damageConditionOptions.push(<option key={dc}>{dCond[dc]}</option>);\r\n}\r\nconst diceNumOptions = [];\r\nfor (let dn in diceNums) {\r\n  diceNumOptions.push(<option key={dn}>{dn}</option>);\r\n}\r\nconst diceSizeOptions = [];\r\nfor (let ds in diceSizes) {\r\n  diceSizeOptions.push(<option key={ds}>{ds}</option>);\r\n}\r\nconst damageTypeOptions = [];\r\nfor (let dt in damageTypes) {\r\n  damageTypeOptions.push(<option key={dt}>{damageTypes[dt]}</option>);\r\n}\r\nconst materialOptions = [];\r\nfor (let m in materials) {\r\n  materialOptions.push(<option key={m}>{materials[m]}</option>);\r\n}\r\n\r\nfunction SelectedRoutine() {\r\n  const selectedRoutine = useSelector(selectSelectedRoutine);\r\n  const apIds = useSelector((state) =>\r\n    selectRoutineById(state, selectedRoutine)\r\n  ).apIds;\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className=\"selectedRoutine\">\r\n      <NameInput id={selectedRoutine} />\r\n      {apIds.map((apId) => (\r\n        <ActivityPath\r\n          id={apId}\r\n          routineId={selectedRoutine}\r\n          key={apId}\r\n          displayCondition={false}\r\n        />\r\n      ))}\r\n      <button\r\n        className=\"add\"\r\n        onClick={() =>\r\n          dispatch(activityPathCreated({ routineId: selectedRoutine }))\r\n        }\r\n      >\r\n        +\r\n      </button>\r\n      {/* <EffectInput /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst NameInput = ({ id }) => {\r\n  const dispatch = useDispatch();\r\n  const name = useSelector((state) => selectRoutineById(state, id)).name;\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      <label htmlFor=\"routineName\">Routine Name:</label>\r\n      <input\r\n        id=\"routineName\"\r\n        type=\"text\"\r\n        placeholder=\"Enter routine name\"\r\n        value={name}\r\n        onChange={(e) =>\r\n          dispatch(routineUpdated({ id, changes: { name: e.target.value } }))\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ActivityPath = ({ id, parentId, routineId, displayCondition = true }) => {\r\n  const {\r\n    condition,\r\n    level,\r\n    override,\r\n    defaultActivity,\r\n    type,\r\n    targetType,\r\n    value,\r\n    MAP,\r\n    damageCondition,\r\n    diceNum,\r\n    diceSize,\r\n    staticDamage,\r\n    damageType,\r\n    material,\r\n    damages,\r\n    effects,\r\n    apIds,\r\n  } = useSelector((state) => selectactivityPathById(state, id));\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      {displayCondition ? (\r\n        <div>\r\n          {\"Condition: \"}\r\n          <select\r\n            value={condition}\r\n            onChange={(e) =>\r\n              dispatch(\r\n                activityPathUpdated({\r\n                  id,\r\n                  changes: { condition: e.target.value },\r\n                })\r\n              )\r\n            }\r\n          >\r\n            {conditionOptions}\r\n          </select>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n\r\n      <div className=\"\">\r\n        <div className=\"flexbox\">\r\n          <button\r\n            className=\"delete\"\r\n            onClick={(e) => {\r\n              dispatch(activityPathRemoved({ id, parentId, routineId }));\r\n            }}\r\n          >\r\n            -\r\n          </button>\r\n          <span className=\"input\">\r\n            <label htmlFor=\"override\">{\"Override: \"}</label>\r\n            <input\r\n              id=\"override\"\r\n              type=\"checkbox\"\r\n              checked={override}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { override: e.target.checked },\r\n                  })\r\n                )\r\n              }\r\n            />\r\n          </span>\r\n          <span className=\"input\">\r\n            <label htmlFor=\"Level\">{\" Level: \"}</label>\r\n            <input\r\n              id=\"Level\"\r\n              type=\"number\"\r\n              value={level}\r\n              min={1}\r\n              max={20}\r\n              onChange={(e) => {\r\n                let level = parseInt(e.target.value) || 1;\r\n                if (level > 20) level = 20;\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: {\r\n                      level,\r\n                    },\r\n                  })\r\n                );\r\n              }}\r\n            />\r\n          </span>\r\n\r\n          <span className=\"input\">\r\n            {/* <input\r\n              type=\"checkbox\"\r\n              checked={useDefault}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { useDefault: e.target.checked },\r\n                  })\r\n                )\r\n              }\r\n            /> */}\r\n            <select\r\n              value={defaultActivity}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { defaultActivity: e.target.value },\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              {defaultActivityOptions}\r\n            </select>\r\n          </span>\r\n\r\n          <span className=\"input\">\r\n            <select\r\n              value={type}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  activityPathUpdated({ id, changes: { type: e.target.value } })\r\n                )\r\n              }\r\n            >\r\n              {activityTypeOptions}\r\n            </select>\r\n            {type === activityTypes.STRIKE ? \" +\" : \" DC: \"}\r\n            <input\r\n              type=\"number\"\r\n              value={value ? value : 0}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { value: parseInt(e.target.value) },\r\n                  })\r\n                )\r\n              }\r\n            />\r\n          </span>\r\n          <span className=\"input\">\r\n            {\" MAP: \"}\r\n            <select\r\n              value={MAP}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  activityPathUpdated({ id, changes: { MAP: e.target.value } })\r\n                )\r\n              }\r\n            >\r\n              {MAPOptions}\r\n            </select>\r\n          </span>\r\n          <span className=\"input\">\r\n            {\" VS: \"}\r\n            <select\r\n              value={targetType}\r\n              onChange={(e) => {\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { targetType: e.target.value },\r\n                  })\r\n                );\r\n              }}\r\n            >\r\n              {defenseOptions}\r\n            </select>\r\n          </span>\r\n        </div>\r\n        <div className=\"flexbox\">\r\n          Damage:\r\n          <select\r\n            value={damageCondition}\r\n            onChange={(e) =>\r\n              dispatch(\r\n                damageUpdated({\r\n                  id,\r\n                  changes: { damageCondition: e.target.value },\r\n                })\r\n              )\r\n            }\r\n          >\r\n            {damageConditionOptions}\r\n          </select>\r\n          <select\r\n            value={diceNum}\r\n            onChange={(e) =>\r\n              dispatch(\r\n                damageUpdated({\r\n                  id,\r\n                  changes: { diceNum: parseInt(e.target.value) },\r\n                })\r\n              )\r\n            }\r\n          >\r\n            {diceNumOptions}\r\n          </select>\r\n          d\r\n          <select\r\n            value={diceSize}\r\n            onChange={(e) =>\r\n              dispatch(\r\n                damageUpdated({\r\n                  id,\r\n                  changes: { diceSize: parseInt(e.target.value) },\r\n                })\r\n              )\r\n            }\r\n          >\r\n            {diceSizeOptions}\r\n          </select>\r\n          {\" + \"}\r\n          <input\r\n            type=\"number\"\r\n            value={staticDamage}\r\n            onChange={(e) =>\r\n              dispatch(\r\n                damageUpdated({\r\n                  id,\r\n                  changes: { staticDamage: parseInt(e.target.value) },\r\n                })\r\n              )\r\n            }\r\n          />\r\n          <select\r\n            value={damageType}\r\n            onChange={(e) => {\r\n              dispatch(\r\n                damageUpdated({ id, changes: { damageType: e.target.value } })\r\n              );\r\n            }}\r\n          >\r\n            {damageTypeOptions}\r\n          </select>\r\n          <select\r\n            value={material}\r\n            onChange={(e) => {\r\n              dispatch(\r\n                damageUpdated({ id, changes: { material: e.target.value } })\r\n              );\r\n            }}\r\n          >\r\n            {materialOptions}\r\n          </select>\r\n        </div>\r\n        <div className=\"box\">\r\n          {\"Additional Damage: \"}\r\n          {damages.map((damageId) => (\r\n            <Damage parentId={id} id={damageId} key={damageId} />\r\n          ))}\r\n          <button\r\n            className=\"add\"\r\n            onClick={() => dispatch(damageCreated({ parentId: id }))}\r\n          >\r\n            +\r\n          </button>\r\n        </div>\r\n        <div className=\"box\">Effects: {effects}</div>\r\n      </div>\r\n\r\n      <div className=\"box\">\r\n        {apIds.map((apId) => (\r\n          <ActivityPath id={apId} parentId={id} key={apId} />\r\n        ))}\r\n        <button\r\n          className=\"add\"\r\n          onClick={() => dispatch(activityPathCreated({ parentId: id }))}\r\n        >\r\n          +\r\n        </button>\r\n        <button\r\n          className=\"add\"\r\n          onClick={() =>\r\n            dispatch(activityPathCreated({ parentId: id, applyMAP: true }))\r\n          }\r\n        >\r\n          +MAP\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Damage = ({ parentId, id }) => {\r\n  const {\r\n    damageCondition,\r\n    diceNum,\r\n    diceSize,\r\n    staticDamage,\r\n    damageType,\r\n    material,\r\n    persistent,\r\n  } = useSelector((state) => selectdamageById(state, id));\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      <button\r\n        className=\"delete\"\r\n        onClick={(e) => {\r\n          dispatch(damageRemoved({ id, parentId }));\r\n        }}\r\n      >\r\n        -\r\n      </button>\r\n      <select\r\n        value={damageCondition}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            damageUpdated({ id, changes: { damageCondition: e.target.value } })\r\n          )\r\n        }\r\n      >\r\n        {damageConditionOptions}\r\n      </select>\r\n      <select\r\n        value={diceNum}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            damageUpdated({\r\n              id,\r\n              changes: { diceNum: parseInt(e.target.value) },\r\n            })\r\n          )\r\n        }\r\n      >\r\n        {diceNumOptions}\r\n      </select>\r\n      d\r\n      <select\r\n        value={diceSize}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            damageUpdated({\r\n              id,\r\n              changes: { diceSize: parseInt(e.target.value) },\r\n            })\r\n          )\r\n        }\r\n      >\r\n        {diceSizeOptions}\r\n      </select>\r\n      {\" + \"}\r\n      <input\r\n        type=\"number\"\r\n        value={staticDamage}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            damageUpdated({\r\n              id,\r\n              changes: { staticDamage: parseInt(e.target.value) },\r\n            })\r\n          )\r\n        }\r\n      />\r\n      <select\r\n        value={damageType}\r\n        onChange={(e) => {\r\n          dispatch(\r\n            damageUpdated({ id, changes: { damageType: e.target.value } })\r\n          );\r\n        }}\r\n      >\r\n        {damageTypeOptions}\r\n      </select>\r\n      <select\r\n        value={material}\r\n        onChange={(e) => {\r\n          dispatch(\r\n            damageUpdated({ id, changes: { material: e.target.value } })\r\n          );\r\n        }}\r\n      >\r\n        {materialOptions}\r\n      </select>\r\n      {\" Persistent: \"}\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={persistent}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            damageUpdated({\r\n              id,\r\n              changes: { persistent: e.target.checked },\r\n            })\r\n          )\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectedRoutine;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  routineCreated,\r\n  selectAllRoutines,\r\n  selectSelectedRoutine,\r\n  setRoutine,\r\n} from \"./Routine/routineSlice\";\r\n\r\nconst Routines = () => {\r\n  const routines = useSelector(selectAllRoutines);\r\n  const selectedRoutine = useSelector(selectSelectedRoutine);\r\n  const dispatch = useDispatch();\r\n\r\n  const routineOptions = [];\r\n  routines.forEach((routine) => {\r\n    routineOptions.push(\r\n      <option value={routine.id} key={routine.id}>\r\n        {routine.name}\r\n      </option>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      Selected Routine:\r\n      <select\r\n        value={selectedRoutine}\r\n        onChange={(e) => dispatch(setRoutine(e.target.value))}\r\n      >\r\n        {routineOptions}\r\n      </select>\r\n      <button className=\"add\" onClick={() => dispatch(routineCreated())}>\r\n        +\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Routines;\r\n","import React from \"react\";\r\n// import { useSelector } from \"react-redux\";\r\n\r\nconst ImportExport = () => {\r\n  return <div className=\"box\">Import and Export Here</div>;\r\n};\r\n\r\nexport default ImportExport;\r\n","import React from \"react\";\r\n// import { useSelector } from \"react-redux\";\r\n// import update from \"immutability-helper\";\r\n\r\n// //import { useSelector, useDispatch } from 'react-redux';\r\n// import { selectCurrentEffect } from \"./Effect/effectSlice\";\r\n\r\n// import {\r\n//   CheckboxInput,\r\n//   CollapsableInput,\r\n//   ByLevelInput,\r\n// } from \"./Effect/Inputs/CommonInputs.js\";\r\n\r\n// import MAP from \"./Effect/Model/MAP.js\";\r\n// import Proficiency from \"./Effect/Model/Proficiency.js\";\r\n// import AbilityScore from \"./Effect/Model/AbilityScore.js\";\r\n// import Modifier from \"./Effect/Model/Modifier.js\";\r\n// import AdditionalEffectArray from \"./Effect/Model/AdditionalEffectArray.js\";\r\n\r\n// import {\r\n//   totalBonusDescription,\r\n//   attackBonusDescription,\r\n//   totalDamageDescription,\r\n//   calculateExpectedDamage,\r\n// } from \"./Calculation.js\";\r\n\r\nimport TargetInput from \"./Target/TargetInput\";\r\nimport Display from \"./Display\";\r\n// import { selectTarget, selectLevel } from \"./Target/targetSlice\";\r\n\r\nimport SelectedRoutine from \"./Routine/SelectedRoutine\";\r\nimport Routines from \"./Routines\";\r\nimport Export from \"./Export\";\r\n\r\nimport \"./PF2App.css\";\r\n\r\n// function DisplayOutput(props) {\r\n//   // props: effect, target\r\n//   const target = useSelector(selectTarget);\r\n//   const effect = useSelector(selectCurrentEffect);\r\n//   return (\r\n//     <div className=\"Display\">\r\n//       <CollapsableInput\r\n//         description={\r\n//           \"Expected Damage: \" + calculateExpectedDamage(effect, target)\r\n//         }\r\n//         listInput=\"\"\r\n//       />\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nfunction PF2App(props) {\r\n  return (\r\n    <div className=\"PF2App\">\r\n      <TargetInput id={0} />\r\n      <Display />\r\n      <SelectedRoutine />\r\n      <Routines />\r\n      <Export />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PF2App;\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const effectAdapter = createEntityAdapter();\r\n\r\nexport const effectsSlice = createSlice({\r\n  name: \"effects\",\r\n  initialState: effectAdapter.getInitialState(),\r\n  reducers: {\r\n    effectAdded: effectAdapter.addOne,\r\n    effectUpdated: effectAdapter.updateOne,\r\n  },\r\n});\r\n\r\nexport const { effectAdded, effectUpdated } = effectsSlice.actions;\r\n\r\nexport default effectsSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selecteffectById,\r\n  selectIds: selecteffectIds,\r\n  selectEntities: selecteffectEntities,\r\n  selectAll: selectAlleffects,\r\n  selectTotal: selectTotaleffects,\r\n} = effectAdapter.getSelectors((state) => state.effects);\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport routineReducer, { routineAdded } from \"./Routine/routineSlice\";\r\nimport activityPathReducer, {\r\n  activityPathAdded,\r\n} from \"./Routine/activityPathSlice\";\r\nimport damageReducer, { damageAdded } from \"./Routine/damageSlice\";\r\nimport effectReducer from \"./Routine/effectSlice\";\r\nimport targetReducer, { targetAdded } from \"./Target/targetSlice\";\r\nimport weaknessReducer, { weaknessAdded } from \"./Target/weaknessSlice\";\r\nimport {\r\n  activityTypes,\r\n  conditions,\r\n  damageTypes,\r\n  dCond,\r\n  defaultActivities,\r\n  defaultValuesAC,\r\n  defaultValuesSaves,\r\n  defenses,\r\n  MAPs,\r\n  materials,\r\n} from \"./types\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    routines: routineReducer,\r\n    activityPaths: activityPathReducer,\r\n    damages: damageReducer,\r\n    effects: effectReducer,\r\n    weaknesses: weaknessReducer,\r\n    targets: targetReducer,\r\n  },\r\n});\r\n\r\nstore.dispatch(routineAdded({ id: 0, name: \"Fighter\", apIds: [0] }));\r\n\r\nstore.dispatch(\r\n  activityPathAdded({\r\n    id: 0,\r\n    condition: conditions.ALWAYS,\r\n    override: false,\r\n    level: 1,\r\n    useDefault: false,\r\n    defaultActivity: defaultActivities.FIGHTER,\r\n    type: activityTypes.STRIKE,\r\n    targetType: defenses.AC,\r\n    targetInfoId: 0,\r\n    value: 9,\r\n    MAP: MAPs.N1,\r\n    damageCondition: dCond.STRIKE,\r\n    diceNum: 1,\r\n    diceSize: 8,\r\n    staticDamage: 4,\r\n    damageType: damageTypes.S,\r\n    material: materials.NONE,\r\n    damages: [],\r\n    effects: [],\r\n    apIds: [],\r\n  })\r\n);\r\n\r\nstore.dispatch(\r\n  targetAdded({\r\n    id: 0,\r\n    name: \"Custom Target\",\r\n    overrideDefault: true,\r\n    addMods: false,\r\n    level: 1,\r\n    useDefaultAC: true,\r\n    defaultAC: defaultValuesAC.HIGH,\r\n    [defenses.AC]: 16,\r\n    useDefaultFort: true,\r\n    defaultFort: defaultValuesSaves.MODERATE,\r\n    [defenses.FORT]: 7,\r\n    useDefaultRef: true,\r\n    defaultRef: defaultValuesSaves.MODERATE,\r\n    [defenses.REF]: 7,\r\n    useDefaultWill: true,\r\n    defaultWill: defaultValuesSaves.MODERATE,\r\n    [defenses.WILL]: 7,\r\n    useDefaultPer: true,\r\n    defaultPer: defaultValuesSaves.MODERATE,\r\n    [defenses.PER]: 7,\r\n    flatfooted: false,\r\n    weaknesses: [],\r\n  })\r\n);\r\n// store.dispatch(weaknessAdded({ id: 0, type: damageTypes.FIRE, value: 10 }));\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 0,\r\n//     damageCondition: dCond.STRIKE,\r\n//     diceNum: 1,\r\n//     diceSize: 8,\r\n//     staticDamage: 4,\r\n//     damageType: damageTypes.B,\r\n//     material: materials.COLD_IRON,\r\n//     persistent: false,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 1,\r\n//     condition: dCond.CRIT,\r\n//     diceNum: 0,\r\n//     diceSize: 8,\r\n//     staticDamage: 10,\r\n//     type: damageTypes.FIRE,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//   })\r\n// );\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport PF2App from './PF2App';\r\nimport store from './store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <PF2App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}