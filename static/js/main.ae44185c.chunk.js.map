{"version":3,"sources":["Model/defaults.ts","Model/types.ts","App/hooks.ts","Display/weaknessSlice.ts","Model/options.tsx","Display/targetSlice.ts","Display/ByLevelInput.tsx","Model/newActivityInfo.ts","Routines/RoutineSlice/RoutineTypes.ts","Routines/RoutineSlice/routineSlice.ts","Calculation/Distribution.ts","Calculation/Calculation.ts","Calculation/EvaluateActivityPath.ts","Display/useGenerateGraphs.tsx","Display/SingleLevelInput.tsx","Display/JointInput.tsx","Display/Display.tsx","Routines/ActivityPathStub.tsx","Routines/SelectedRoutine.tsx","Routines/Routines.tsx","Model/exampleRoutines.ts","Sharing/Export.tsx","TooltipSelect.tsx","Routines/Activity/LevelList.tsx","Routines/Activity/Damage.tsx","Routines/Activity/Effect.tsx","Routines/Activity/ActivityPath.tsx","Routines/NewActivity/NewActivity.tsx","App/PF2App.tsx","App/store.ts","serviceWorker.js","App/theme.ts","index.js"],"names":["graphTypes","DISTRIBUTION","PMDEFENSE","PMRES","importStates","ACTrends","LOW","MODERATE","HIGH","EXTREME","SaveTrends","TERRIBLE","conditions","ALWAYS","CRIT","SUCC","FAIL","CRIF","AT_LEAST_SUCC","AT_LEAST_FAIL","FAIL_WORSE","SUCC_WORSE","rollTypes","NORMAL","ADVANTAGE","DISADVANTAGE","activityTypes","STRIKE","SAVE","SKILL","SPELLATTACK","profTrends","TRAINED","FIGHTERWEAPON","MARTIALWEAPON","CASTERWEAPON","ALCHWEAPON","CASTERSPELL","CLASSDC1","CLASSDC2","MCSPELL","MAXSKILL","statTrends","AS10","AS18a","AS16a","AS16pp","AS16p","AS14pp","AS14p","itemTrends","NONE","WEAPON","MAPs","N1","N2","N3","A1","A2","A3","R1","R2","R3","RA1","RA2","RA3","RAA1","RAA2","RAA3","nextMAPs","defenses","AC","FORT","REF","WILL","PER","selfDC","targetDC","dCond","BASIC","dieTrends","SPELLLEVEL1","SPELLLEVEL2","LEVEL","HALFLEVEL","RUNE","RUNE2","DEADLY","SNEAK","STRATEGIC","PRECISE","PRECISIONEDGE","PRECISIONEDGE2","PRECISIONEDGE3","damageTrends","FIGHTERWEAPONSPEC","MARTIALWEAPONSPEC","CASTERWEAPONSPEC","RAGE","ANIMALRAGE","DRAGONRAGE","GIANTRAGE","SPIRITRAGE","OVERDRIVES","OVERDRIVEC","IMPLEMENT","damageTypes","B","P","S","FIRE","PRECISION","materials","COLD_IRON","SILVER","ADAMANTINE","effectStateTypes","FLATFOOT","PRONE","GRAPPLED","RESTRAINED","effectValueTypes","FRIGHTENED","CLUMSY","effectTypes","whenConditions","Always","diceSizes","useAppDispatch","useDispatch","useAppSelector","useSelector","weaknessAdapter","createEntityAdapter","weakness","weaknessesSlice","createSlice","name","initialState","getInitialState","reducers","weaknessAdded","addOne","weaknessUpdated","updateOne","weaknessCreated","reducer","state","action","payload","id","type","value","prepare","parentId","weaknessRemoved","removeOne","actions","getSelectors","weaknesses","selectweaknessById","selectById","selectweaknessEntities","selectIds","selectEntities","selectAll","selectTotal","zero","level","halfLevel","trained","maxSkill","maxScore","score16pp","score16p","score16","score14p","score14","martialProf","alchProf","casterProf","spellProf","weaponItem","skillItem","weaponDice","spellDice","spellDice2","i","Math","floor","runes","runes2","deadly","sneak","strategic","precise","preEdge1","preEdge2","preEdge3","martialSpec","casterSpec","rage","animalrage","dragonrage","giantrage","spiritrage","overdriveSuccess","overdriveCritical","implementEmpower","fighterAB","martialAB","casterAB","alchAB","casterSpellAttack","casterSaveDC","classdc1","classdc2","mcspell","fighterStatic","fighterRanged","martialStatic","martialRanged","casterStatic","casterRanged","profTrendValues","statTrendValues","itemTrendValues","MAPvalues","dieTrendValues","damageTrendValues","extremeAC","highAC","moderateAC","lowAC","gt","defaultACs","defaultSaves","standardDC","targetAdapter","targetsSlice","targetAdded","targetUpdated","changes","updateTargetLevel","targetLevel","extraReducers","builder","addCase","weaknessId","entities","push","filter","wid","targets","selecttargetById","selecttargetEntities","overrideAC","ACTrend","overrideFort","FortTrend","overrideRef","RefTrend","overrideWill","WillTrend","overridePer","PerTrend","makeOptions","options","element","optionElements","graphTypeOptions","c","levelOptions","rt","conditionOptions","at","rollOptions","pt","activityTypeOptions","st","profTrendOptions","it","statTrendOptions","m","itemBTrendOptions","d","MAPOptions","act","defenseOptions","svt","ACOptions","dc","SaveOptions","dieT","damageConditionOptions","ds","dieTrendOptions","damT","diceSizeOptions","dt","damageTrendOptions","mat","damageTypeOptions","materialOptions","weaknessOptions","multiplierOptions","est","evt","effectTypeOptions","ByLevelInput","levelDiff","useState","tempName","setTempName","dispatch","container","spacing","xs","sm","sx","my","py","item","md","lg","fullWidth","label","placeholder","onChange","e","target","onBlur","step","min","max","marks","nv","labelId","Strike","Skill","Cantrip","Spell","runeTrends","classes","noOptions","cantrips","strikeActivities","classOptions","Alchemist","Barbarian","Bard","Champion","Cleric","Druid","Fighter","Gunslinger","Inventor","Investigator","Magus","Monk","Oracle","Ranger","Rogue","Sorcerer","Summoner","Swashbuckler","Witch","Wizard","weaponTraits","critSpecs","classAdjustments","strikeInfo","strikeNumber","adjustments","currentValue","cClass","activityWeaponDiceAdjustments","activity","classWeaponDamageTrends","trends","traits","damageScore","includes","classOption","classDamageAdjustments","bonus","cantripScore","hasDeadly","hasFatal","hasPickCritSpec","critSpec","critSpecType","hasSwordCritSpec","hasHammerCritSpec","hasSpearCritSpec","critSpecDice","critSpecLevel","critSpecDamage","isRoutineObject","routine","display","description","isActivityPaths","apIds","startLevel","endLevel","Array","isArray","apId","Object","values","condition","rollType","profTrend","statTrend","itemTrend","isAdjustment","bonusAdjustments","MAP","targetType","isDamages","damages","isEffects","effects","damage","damageTrend","damageWhen","dw","damageCondition","dieTrend","dieAdjustments","diceSize","fatal","fatalDie","damageAdjustments","damageType","material","persistent","multiplier","effect","effectCondition","effectType","routinesAdapter","activityPathAdapter","damageAdapter","effectAdapter","routineId","activityPathId","damageId","effectId","empty","one","selectedRoutine","selectedActivityPath","undefined","parentRoutine","parentActivity","routines","activityPaths","importRoutine","defaultActivity","defaultStrikeParent","defaultSaveParent","defaultDamage","defaultEffect","effectValue","routinesSlice","setRoutine","setActivityPath","routineAdded","routineUpdated","activityPathAdded","activityPathUpdated","damageAdded","damageUpdated","effectAdded","effectUpdated","routineCreated","copy","copyActivityPaths","routineRemoved","childrenIds","removeActivityPaths","setNewActivityParent","emptyActivityPathCreated","activityType","ap","copyDamages","copyEffects","activityPathCreated","ids","createStrikeActivity","activityPathContinued","parentAP","newDamages","newEffects","activityPathRemoved","damageCreated","damageRemoved","did","effectCreated","effectRemoved","eid","routineObject","JSON","parse","insertRoutine","error","console","log","selectRoutineById","selectRoutineEntities","selectAllRoutines","selectactivityPathById","selectactivityPathEntities","selectdamageById","selectdamageEntities","selecteffectById","selecteffectEntities","selectSelectedRoutine","selectSelectedActivityPath","selectParentActivityId","selectCreateNewActivity","selectSelectedRoutineObject","getActivityPaths","selectImportState","index","length","removeMany","numStrikes","className","createStrikeDamages","createStrikeEffects","classWeaponMAP","attackScore","weaponDamage","dieSize","fatalSize","runeDamage","hasClassDamageDice","classDamageDice","classDamage","critDamage","deadlySize","hasKnifeCritSpec","hasCritSpecEffect","critSpecEffect","newApIds","newAps","aps","getDamages","getEffects","insertActivityPaths","insertDamages","insertEffects","convolve","vec1","vec2","Error","volume","kernel","displacement","convVec","j","multiplyDist","dam","dist","staticDamage","damageDist","newDist","newDam","oldValue","chance","newValue","diff","consolidateDists","maxDamage","dists","distribution","applyMin","shift","damageQualities","normal","addDamage","baseContext","context","validateCondition","degreeOfSuccess","indicies","ActivityPathEvaluator","this","routineLevel","ACBonus","resBonus","initialTargetState","Flatfooted","flatfooted","dataArray","cumulative","PdataArray","Pcumulative","expD","expP","routineDDist","routinePDDist","activityPath","evalPath","PdamageDist","currentSum","targetState","defenseBonus","resistanceBonus","currentTarget","currentDamages","map","currentEffects","currentWeaknesses","targetValue","DC","targetPenalty","Frightened","Clumsy","critPercent","dif","getCritSuccessPercent","succPercent","getSuccessPercent","failPercent","getFailurePercent","crfaPercent","getCritFailurePercent","notcrit","nothit","notfail","notcrfa","notsucc","chances","critDamagesByType","succDamagesByType","failDamagesByType","crfaDamagesByType","damageTreesByType","damageTrees","forEach","shouldAddThisDamage","val","diceNum","fatalDist","diceArray","damageTreeIndex","damageTree","finalTree","damageQuality","totalStaticDamage","totalDamageDist","maxW","maxR","persistentMultiplier","calculateExpectedDamage","targetStates","shouldAddThisEffect","Restrained","Grappled","Prone","evaluations","Map","has","pathDist","pathPDist","set","get","Plot","createPlotlyComponent","Plotly","evaluateByLevel","evaluator","datasets","perDatasets","selectedRoutineDamage","selectedRoutinePDamage","percentSelectedRoutine","canEvaluate","evalRoutine","levelArray","expDbyLevel","expPDbyLevel","x","y","yaxis","evaluatePM","defense","expectedDamages","expectedPersistentDamages","canEvaluateSingleLevel","bonusArray","expDbyBonus","expPDbyBonus","toFixed","evaluateDistribution","useGenerateGraphs","graphType","title","byLevelTile","xtitle","ytitle","byLeveldatasets","byLevelperDatasets","damageChart","data","layout","autosize","xaxis","legend","xanchor","margin","l","r","useResizeHandler","style","width","height","persistentDamageChart","byLevelDamageChart","byLevelPerDamageChart","SingleLevelInput","toString","setAC","Fort","setFort","Ref","setRef","Will","setWill","Per","setPer","useEffect","columns","p","px","focus","newVal","parseInt","alignItems","WeaknessInput","tempVal","setTempVal","size","AddWeakness","WeaknessSelect","JointInput","perMul","setPerMul","control","checked","parseFloat","Display","showByLevel","setShowByLevel","showSingleLevel","setShowSingleLevel","setGraphType","Fragment","in","ActivityPathStub","displayChildren","parentActivityId","icon","selected","pl","onClick","primary","secondary","SelectedRoutine","tempDescription","setTempDescription","validLevels","setValidLevels","align","getAriaLabel","valueLabelDisplay","getAriaValueText","v","multiline","subheader","justifyContent","variant","Routines","routineOptions","routineDisplays","component","color","onDelete","flexWrap","listStyle","exampleRoutines","ImportExport","importState","textValue","setTextValue","stringify","TooltipSelect","children","open","setOpen","onFocus","onMouseEnter","onMouseLeave","generateAdjustments","entries","total","currentIndex","adjustmentsFromLevelChange","newLevel","sort","a","b","adjustmentsFromNewEntry","lastValue","LevelList","baseEntries","generateEntries","setEntries","be","levelList","Number","newEntries","slice","ni","Damage","dieLevelList","damageLevelList","damageTrendList","newdt","splice","mt","mb","bgcolor","Divider","textAlign","multiple","renderValue","join","Effect","setValue","ActivityPath","bonusLevelList","startIcon","gutterBottom","window","location","href","event","NewActivity","setActivityType","StrikeSelection","SkillSelection","CantripSelection","SpellSelection","setRunes","setCClass","setActivity","cantrip","setClassOption","setAttackScore","setDamageScore","setCantripScore","setDieSize","setNumStrikes","fromEntries","trait","setTraits","setDeadlySize","setFatalSize","setCritSpec","setCritSpecLevel","setCritSpecType","traitName","newTraits","ReactGA","initialize","PF2App","createNewActivity","isBigEnough","useMediaQuery","theme","breakpoints","up","send","maxWidth","columnSpacing","xl","overflow","client","slot","Export","pickCritSpec","store","configureStore","routineReducer","weaknessReducer","targetReducer","Boolean","hostname","match","createTheme","palette","main","red","background","default","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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OAHAjF,GAAgB+E,EAGR1N,GACN,KAAK9V,EAAMnD,OACT4iB,GACEuD,EACA3M,EACAC,EACAC,EACAkI,EACAC,EACa,EAAblI,GAEFiJ,GACEsD,EACA1M,EACAC,EACAC,EACAkI,EACAvI,EAAQuN,EAAY/E,EACP,EAAblI,GAEF,MAEF,KAAKxW,EAAMC,MACTwf,GACEuD,EACA3M,EACAC,EACAC,EACAkI,EACAC,EACa,GAAblI,GAEFiJ,GACEwD,EACA5M,EACAC,EACAC,EACAkI,EACAC,EACa,EAAblI,GAEFiJ,GACEyD,EACA7M,EACAC,EACAC,EACAkI,EACAC,EACa,EAAblI,GAEF,MAEF,KAAKxW,EAAM7D,KACTsjB,GACEyD,EACA7M,EACAC,EACAC,EACAkI,EACAC,EACa,EAAblI,GAEF,MAEF,KAAKxW,EAAM9D,KACTujB,GACEwD,EACA5M,EACAC,EACAC,EACAkI,EACAC,EACa,EAAblI,GAEF,MAEF,KAAKxW,EAAM/D,KACTwjB,GACEuD,EACA3M,EACAC,EACAC,EACAkI,EACAC,EACa,EAAblI,GAEF,MAEF,KAAKxW,EAAMhE,KACTyjB,GACEsD,EACA1M,EACAC,EACAC,EACAkI,EACAC,EACa,EAAblI,GAEF,MAEF,KAAKxW,EAAM5D,cACTqjB,GACEuD,EACA3M,EACAC,EACAC,EACAkI,EACAC,EACa,EAAblI,GAEFiJ,GACEsD,EACA1M,EACAC,EACAC,EACAkI,EACAC,EACa,EAAblI,GAEF,MAEF,KAAKxW,EAAM3D,cACTojB,GACEwD,EACA5M,EACAC,EACAC,EACAkI,EACAC,EACa,EAAblI,GAEFiJ,GACEuD,EACA3M,EACAC,EACAC,EACAkI,EACAC,EACa,EAAblI,GAEFiJ,GACEsD,EACA1M,EACAC,EACAC,EACAkI,EACAC,EACa,EAAblI,GAEF,MAEF,KAAKxW,EAAM1D,WACTmjB,GACEyD,EACA7M,EACAC,EACAC,EACAkI,EACAC,EACa,EAAblI,GAEFiJ,GACEwD,EACA5M,EACAC,EACAC,EACAkI,EACAC,EACa,EAAblI,GAEF,MAEF,KAAKxW,EAAMzD,WACTkjB,GACEyD,EACA7M,EACAC,EACAC,EACAkI,EACAC,EACa,EAAblI,GAEFiJ,GACEwD,EACA5M,EACAC,EACAC,EACAkI,EACAC,EACa,EAAblI,GAEFiJ,GACEuD,EACA3M,EACAC,EACAC,EACAkI,EACAC,EACa,EAAblI,GAGF,MAEF,KAAKxW,EAAMjE,OACT0jB,GACEyD,EACA7M,EACAC,EACAC,EACAkI,EACAC,EACa,EAAblI,GAEFiJ,GACEwD,EACA5M,EACAC,EACAC,EACAkI,EACAC,EACa,EAAblI,GAEFiJ,GACEuD,EACA3M,EACAC,EACAC,EACAkI,EACAC,EACa,EAAblI,GAEFiJ,GACEsD,EACA1M,EACAC,EACAC,EACAkI,EACAC,EACa,EAAblI,GAEF,MAEF,QACEsE,QAAQC,IAAR,2BAAgCjF,EAAhC,+BAMN,IAAK,IAAI6N,EAAkB,EAAGA,EAAkB,EAAGA,IAAmB,CACpE,IAAIC,EAAaT,EAAkBQ,GAC/BE,EAAYT,EAAYO,GACxBG,OAA4B,EAChC,IAAKA,KAAiBvE,GAAiB,CACrC,IAAIwE,EAAoB,EACpBC,EAAkB,CAAC,GACnBvf,OAAgB,EACpB,IAAKA,KAAQmf,EAAWE,GAAgB,CACtC,MACEF,EAAWE,GAAerf,GADtB6R,EAAN,EAAMA,SAAUmI,EAAhB,EAAgBA,aAAcC,EAA9B,EAA8BA,WAI9B,KAA0B,IAAtBA,EAAWzC,QAAgBwC,GAAgB,GAA/C,CALsC,MAQNY,GAASZ,EAAcC,EAAY,GAAhED,EARmC,EAQnCA,aAAcC,EARqB,EAQrBA,WAGjB,IAXsC,EAWlCuF,EAAO,EACPC,EAAO,EAZ2B,eAajBjf,GAbiB,IAatC,2BAAiC,CAAC,IAAzBzB,EAAwB,QAC3BA,EAASiB,OAASA,GAAQjB,EAASiB,OAAS6R,IAC1C9S,EAASkB,MAAQ2c,EAAkB,EACrC4C,EAAOnd,KAAKiJ,IAAIkU,EAAMzgB,EAASkB,MAAQ2c,GAC9B7d,EAASkB,MAAQ2c,EAAkB,IAC5C6C,EAAOpd,KAAKkJ,IAAIkU,EAAM1gB,EAASkB,MAAQ2c,MAlBP,sCAyBNhC,GAHhCZ,GAA+ByF,EAAOD,EAGiBvF,EAAY,GAAhED,EAzBmC,EAyBnCA,aAAcC,EAzBqB,EAyBrBA,WAEjBqF,GAAqBtF,EACrBuF,EAAkBnG,GAASmG,EAAiBtF,IAE9CmF,EAAUC,GAAerF,aAAesF,EACxCF,EAAUC,GAAepF,WAAasF,EAGxC,MAAmC1F,GACjCuF,EAAS,WAAepF,aACxBoF,EAAS,WAAenF,WACxB9O,EAAOuU,sBAHH1F,GAAN,EAAMA,aAAcC,GAApB,EAAoBA,WAKpBmF,EAAS,OAAWpF,cAAgBA,GACpCoF,EAAS,OAAWnF,WAAab,GAC/BgG,EAAS,OAAWnF,WACpBA,IAKJ,MAAO,CAAE0E,cAAaN,WC5hBWsB,CAC7BrD,EACAQ,EACAD,EACAH,EACAO,EACAN,EACAC,EACA3b,GARI0d,EAAN,EAAMA,YAAaN,EAAnB,EAAmBA,QAWbuB,EAAe,CAAClD,EAAaA,EAAaA,EAAaA,GA1B7D,WA4BSta,GAEP4a,EAAe4B,SAAQ,SAAC5M,GACtB,IACEC,EAMED,EANFC,gBACAC,EAKEF,EALFE,WACAwB,EAIE1B,EAJF0B,YACA7D,EAGEmC,EAHFnC,WACAC,EAEEkC,EAFFlC,SACAqB,EACEa,EADFb,WAEF,QAAc4B,IAAV9R,GACF,GAAIA,EAAQ4O,GAAc5O,EAAQ6O,EAAU,YAE5C,GACE,EAAK3E,OAAOqQ,aAAe3L,GAC3B,EAAK1E,OAAOqQ,aAAe1L,EAE3B,OAEJ,IAlBiC,EAkB7B+P,GAAsB,EAlBO,eAmBf1O,GAnBe,IAmBjC,2BAA8B,CAAC,IAAtBvR,EAAqB,QAC5B,GAAIA,IAAUtB,EAAeC,OAAQ,CACnCshB,GAAsB,EACtB,MAEF,IAAIf,EAAMc,EAAaxd,GAAGxC,GAC1B,GAAIkf,GAAOA,EAAM,EAAG,CAClBe,GAAsB,EACtB,QA3B6B,8BA8BjC,GAAKA,GAED1E,GAAkBlJ,EAAiB7P,GACrC,OAAQ8P,GACN,KAAK7T,EAAYJ,YACoB,IAA/B2hB,EAAaxd,GAAG0d,aAClBF,EAAaxd,GAAb,2BACKwd,EAAaxd,IADlB,IAEEwZ,YAAY,EACZmE,UAAU,EACVD,YAAY,KAEhB,MAEF,KAAKzhB,EAAYL,UACkB,IAA7B4hB,EAAaxd,GAAG2d,WAClBH,EAAaxd,GAAb,2BACKwd,EAAaxd,IADlB,IAEEwZ,YAAY,EACZmE,UAAU,KAEd,MAEF,KAAK1hB,EAAYN,OACe,IAA1B6hB,EAAaxd,GAAG4d,QAClBJ,EAAaxd,GAAb,2BACKwd,EAAaxd,IADlB,IAEEwZ,YAAY,EACZoE,OAAO,KAEX,MAEF,KAAK3hB,EAAYP,UACoB,IAA/B8hB,EAAaxd,GAAGwZ,aAClBgE,EAAaxd,GAAb,2BAAuBwd,EAAaxd,IAApC,IAAwCwZ,YAAY,KACtD,MAEF,KAAKvd,EAAYF,WACXuV,GAAekM,EAAaxd,GAAGib,WAAa3J,IAC9CkM,EAAaxd,GAAb,2BACKwd,EAAaxd,IADlB,IAEEib,WAAY3J,KAEhB,MAEF,KAAKrV,EAAYD,OACXsV,GAAekM,EAAaxd,GAAGkb,OAAS5J,IAC1CkM,EAAaxd,GAAb,2BACKwd,EAAaxd,IADlB,IAEEkb,OAAQ5J,KAEZ,MAEF,QACE2C,QAAQC,IAAR,sBAA2BpE,EAA3B,0BAtFD9P,EAAI,EAAGA,EAAI,EAAGA,IAAM,EAApBA,GA2IT,OA9CAka,EAAa1M,MAAMgP,SAAQ,SAAC3O,GAK1B,IAJA,IAAI8E,EAAK,EAAK5B,cAAclD,GAEtBgQ,EAAc,IAAIC,IAEf9d,EAAI,EAAGA,EAAI,EAAGA,IAErB,GAAI+Y,GAAkBpG,EAAG3E,UAAWhO,GAAI,CACtC,GAAI6d,EAAYE,IAAIP,EAAaxd,SAE1B,CACL,MAA4B,EAAKma,SAC/BxH,EACA6K,EAAaxd,GACbua,EACAC,EACA3b,GALF,mBAAKmf,EAAL,KAAeC,EAAf,KAOAJ,EAAYK,IAAIV,EAAaxd,GAAI,CAAEge,WAAUC,cAE/C1B,EAAYvc,GAAG2Y,OAAOd,WAAab,GACjCuF,EAAYvc,GAAG2Y,OAAOd,WACtBgG,EAAYM,IAAIX,EAAaxd,IAAIge,UAEnCzB,EAAYvc,GAAG0P,WAAWmI,WAAab,GACrCuF,EAAYvc,GAAG0P,WAAWmI,WAC1BgG,EAAYM,IAAIX,EAAaxd,IAAIie,eAoBlC,CAdU7F,GACf,CAAEG,aAAcgE,EAAY,GAAG5D,OAAQV,OAAQgE,EAAQ,IACvD,CAAE1D,aAAcgE,EAAY,GAAG5D,OAAQV,OAAQgE,EAAQ,IACvD,CAAE1D,aAAcgE,EAAY,GAAG5D,OAAQV,OAAQgE,EAAQ,IACvD,CAAE1D,aAAcgE,EAAY,GAAG5D,OAAQV,OAAQgE,EAAQ,KAEvC7D,GAChB,CAAEG,aAAcgE,EAAY,GAAG7M,WAAYuI,OAAQgE,EAAQ,IAC3D,CAAE1D,aAAcgE,EAAY,GAAG7M,WAAYuI,OAAQgE,EAAQ,IAC3D,CAAE1D,aAAcgE,EAAY,GAAG7M,WAAYuI,OAAQgE,EAAQ,IAC3D,CAAE1D,aAAcgE,EAAY,GAAG7M,WAAYuI,OAAQgE,EAAQ,U,oCCxU3DmC,G,OAAOC,GAAsBC,MAgL7BC,GAAkB,SACtBzN,EACA0N,GAEA,IAAIC,EAAW,GACXC,EAAc,GAGZC,EAAmD,GACnDC,EAAoD,GAC1D,GACEJ,EAAUzV,OAAO8V,6BACalO,IAA9B6N,EAAU/N,gBAGV,IADA,IAAIrD,EAAU0D,EAAS0N,EAAU/N,iBACxB5R,EAAQ,EAAGA,GAAS,GAAIA,IAC/B,GAAK2f,EAAUM,YAAYjgB,EAAOuO,GAAlC,CACA,MAAqBoR,EAAUO,YAAY3R,EAAS,EAAG,EAAGvO,GAApDib,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,KACZ4E,EAAsB9f,GAASib,EAC/B8E,EAAuB/f,GAASkb,EAIpC,IAAK,IAAIpc,KAAMmT,EAAU,CACvB,IAAI1D,EAAU0D,EAASnT,GACvB,GAAKyP,EAAQC,QAAb,CAKA,IAHA,IAAM2R,EAAa,GACbC,EAAc,GACdC,EAAe,GACZrgB,EAAQ,EAAGA,GAAS,GAAIA,IAC/B,GAAK2f,EAAUM,YAAYjgB,EAAOuO,GAAlC,CAEA,MAAqBoR,EAAUO,YAAY3R,EAAS,EAAG,EAAGvO,GAApDib,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,KACRyE,EAAUzV,OAAO8V,uBACfhgB,KAAS8f,IACXK,EAAWjb,KAAKlF,GAChBogB,EAAYlb,KAAK+V,EAAO6E,EAAsB9f,IAC9CqgB,EAAanb,KAAKgW,EAAO6E,EAAuB/f,MAGlDmgB,EAAWjb,KAAKlF,GAChBogB,EAAYlb,KAAK+V,GACjBoF,EAAanb,KAAKgW,IAGtB0E,EAAS1a,KAAK,CACZnG,KAAM,UACNd,KAAMsQ,EAAQtQ,KACdqiB,EAAGH,EACHI,EAAGH,EACHI,MAAO,MAETX,EAAY3a,KAAK,CACfnG,KAAM,UACNd,KAAMsQ,EAAQtQ,KACdqiB,EAAGH,EACHI,EAAGF,EACHG,MAAO,OAIX,MAAO,CAAEZ,WAAUC,gBAGfY,GAAa,SACjBxO,EACA0N,GAEI,IADJe,IACG,yDACCd,EAAW,GACXC,EAAc,GACdc,EAAkB,GAClBC,EAA4B,GAShC,IAAK,IAAI9hB,KAAMmT,EAAU,CACvB,IAAI1D,EAAU0D,EAASnT,GACvB,GAAKyP,EAAQC,SACRmR,EAAUkB,uBAAuBtS,GAAtC,CAMA,IAJA,IAAMuS,EAAa,GACbC,EAAc,GACdC,EAAe,GAEZvT,GAAS,EAAGA,GAAS,EAAGA,IAAS,CACxCqT,EAAW5b,KAAKuI,GAChB,MAAqBkS,EAAUO,YAC7B3R,EACAmS,EAAUjT,EAAQ,EAClBiT,EAAU,EAAIjT,GAHVwN,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,KAME,IAAVzN,IACFkT,EAAgBzb,KACd,iCACGqJ,EAAQtQ,KACR,KACAgd,EAAKgG,QAAQ,KAHN1S,EAAQzP,KAMpB8hB,EAA0B1b,KACxB,iCACGqJ,EAAQtQ,KACR,KACAid,EAAK+F,QAAQ,KAHN1S,EAAQzP,MAQtBiiB,EAAY7b,KAAK+V,GACjB+F,EAAa9b,KAAKgW,GAGpB0E,EAAS1a,KAAK,CACZnG,KAAM,UACNd,KAAMsQ,EAAQtQ,KACdqiB,EAAGQ,EACHP,EAAGQ,EACHP,MAAO,MAETX,EAAY3a,KAAK,CACfnG,KAAM,UACNd,KAAMsQ,EAAQtQ,KACdqiB,EAAGQ,EACHP,EAAGS,EACHR,MAAO,OAGX,MAAO,CAAEG,kBAAiBC,4BAA2BhB,WAAUC,gBAG3DqB,GAAuB,SAC3BjP,EACA0N,GAEA,IAAIC,EAAW,GACXC,EAAc,GACdc,EAAkB,GAClBC,EAA4B,GAUhC,IAAK,IAAI9hB,KAAMmT,EAAU,CACvB,IAAI1D,EAAU0D,EAASnT,GACvB,GAAKyP,EAAQC,SACRmR,EAAUkB,uBAAuBtS,GAAtC,CACA,MASIoR,EAAUO,YAAY3R,EAAS,EAAG,GARpC0M,EADF,EACEA,KACAC,EAFF,EAEEA,KACAL,EAHF,EAGEA,UACAM,EAJF,EAIEA,aACAL,EALF,EAKEA,WACAC,EANF,EAMEA,WACAK,EAPF,EAOEA,cACAJ,EARF,EAQEA,YAEF2F,EAAgBzb,KACd,iCACGqJ,EAAQtQ,KACR,KACAgd,EAAKgG,QAAQ,KAHN1S,EAAQzP,KAMpB8hB,EAA0B1b,KACxB,iCACGqJ,EAAQtQ,KACR,KACAid,EAAK+F,QAAQ,KAHN1S,EAAQzP,KAMpB8gB,EAAS1a,KAAK,CACZnG,KAAM,UACNd,KAAMsQ,EAAQtQ,KACdqiB,EAAGzF,EACH0F,EAAGzF,EACH0F,MAAO,MAETZ,EAAS1a,KAAK,CACZnG,KAAM,MACNd,KAAMgd,EAAKgG,QAAQ,GACnBX,EAAGzF,EACH0F,EAAGpF,IAEL0E,EAAY3a,KAAK,CACfnG,KAAM,UACNd,KAAMsQ,EAAQtQ,KACdqiB,EAAGvF,EACHwF,EAAGvF,IAEL6E,EAAY3a,KAAK,CACfnG,KAAM,MACNd,KAAMid,EAAK+F,QAAQ,GACnBX,EAAGvF,EACHwF,EAAGnF,KAGP,MAAO,CAAEuF,kBAAiBC,4BAA2BhB,WAAUC,gBAGlDsB,GAlYW,SAACC,GACzB,IAAMnP,EAAWvU,GAAe6X,IAC1BrD,EAAgBxU,GAAegY,IAC/BrQ,EAAU3H,GAAe6H,IACzBsK,EAAUnS,GAAekY,IACzB7F,EAAUrS,GAAeoY,IACzBvW,EAAa7B,GAAegC,IAC5BkS,EAAkBlU,GAAeqY,IAEjC4J,EAAY,IAAItF,GACpBnI,EACA7M,EACAwK,EACAE,EACAxQ,EACAqS,GAGIgK,EAAgBvW,EAAQ,GAC1Bgc,EAAQ,IAAMzF,EAAcrB,aAC5B+G,EAAc1F,EAAc3d,KAEhCojB,GAAS,OACTA,GAAS,QACTA,GAAS,UACTA,GAAS,SACTA,GAAS,UACTA,GAAS,SAST,IAEIV,EACAC,EAHAhB,EAA0B,GAC1BC,EAA6B,GAGjC,OAAQuB,GACN,KAAK5rB,EAAWC,aAAhB,MAEIyrB,GAAqBjP,EAAU0N,GAD9BgB,EADL,EACKA,gBAAiBC,EADtB,EACsBA,0BAA2BhB,EADjD,EACiDA,SAAUC,EAD3D,EAC2DA,YAEzD,MACF,KAAKrqB,EAAWE,UAAhB,MAEI+qB,GAAWxO,EAAU0N,GAAW,GAD/BgB,EADL,EACKA,gBAAiBC,EADtB,EACsBA,0BAA2BhB,EADjD,EACiDA,SAAUC,EAD3D,EAC2DA,YAEzD,MACF,KAAKrqB,EAAWG,MAAhB,MAEI8qB,GAAWxO,EAAU0N,GAAW,GAD/BgB,EADL,EACKA,gBAAiBC,EADtB,EACsBA,0BAA2BhB,EADjD,EACiDA,SAAUC,EAD3D,EAC2DA,YAM7D,IAGI0B,EACAC,EAJJ,EACE9B,GAAgBzN,EAAU0N,GADZ8B,EAAhB,EAAM7B,SAAwC8B,EAA9C,EAAiC7B,YA4GjC,OAvGIuB,IAAc5rB,EAAWC,cAC3B8rB,EAAS,SACTC,EAAS,UACAJ,IAAc5rB,EAAWE,WAClC6rB,EAAS,oBACTC,EAAS,mBACAJ,IAAc5rB,EAAWG,QAClC4rB,EAAS,0BACTC,EAAS,mBA+FJ,CACLb,kBACAC,4BACAe,YA9FA,eAACpC,GAAD,CACE7I,UAAU,OACVkL,KAAMhC,EACNiC,OAAQ,CACNR,MAAOA,EACPS,UAAU,EACVC,MAAO,CAAEV,MAAOE,GAChBf,MAAO,CAAEa,MAAOG,GAChBQ,OAAQ,CACN1B,EAAG,EACHC,EAAG,EACH0B,QAAS,SAEXC,OAAQ,CACNC,EAAG,GACHC,EAAG,KAGPC,kBAAkB,EAClBC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,UA4ElCC,sBAxEA,eAAClD,GAAD,CACE7I,UAAU,OACVkL,KAAM/B,EACNgC,OAAQ,CACNR,MAAO,6BACPS,UAAU,EACVC,MAAO,CAAEV,MAAO,qBAChBb,MAAO,CAAEa,MAAO,UAChBW,OAAQ,CACN1B,EAAG,EACHC,EAAG,EACH0B,QAAS,SAEXC,OAAQ,CACNC,EAAG,GACHC,EAAG,KAGPC,kBAAkB,EAClBC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,UAsDlCE,mBAlDA,eAACnD,GAAD,CACE7I,UAAU,OACVkL,KAAMH,EACNI,OAAQ,CACNR,MAAOC,EACPQ,UAAU,EACVC,MAAO,CAAEV,MAAO,SAChBb,MAAO,CAAEa,MAAO,mBAChBW,OAAQ,CACN1B,EAAG,EACHC,EAAG,EACH0B,QAAS,QAEXC,OAAQ,CACNC,EAAG,GACHC,EAAG,KAGPC,kBAAkB,EAClBC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,UAgClCG,sBA5BA,eAACpD,GAAD,CACE7I,UAAU,OACVkL,KAAMF,EACNG,OAAQ,CACNR,MAAOC,EACPQ,UAAU,EACVC,MAAO,CAAEV,MAAO,SAChBb,MAAO,CAAEa,MAAO,8BAChBW,OAAQ,CACN1B,EAAG,EACHC,EAAG,EACH0B,QAAS,SAEXC,OAAQ,CACNC,EAAG,GACHC,EAAG,KAGPC,kBAAkB,EAClBC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,Y,UC7IhCI,GAAmB,WACvB,IACA,EAeIllB,IAAe,SAACiB,GAAD,OAAsB2G,GAAiB3G,EAhB/C,MAOT4b,GANF,EACEkE,qBADF,EAEE7D,WAFF,EAGEoF,uBAHF,EAKEoB,UALF,EAME7G,cACA3V,EAPF,EAOEA,YACAY,EARF,EAQEA,WACAE,EATF,EASEA,aACAE,EAVF,EAUEA,YACAE,EAXF,EAWEA,aACAE,EAZF,EAYEA,YAEAzG,EAdF,EAcEA,WAGF,EAAoBwJ,mBAASvD,EAAWqd,YAAxC,mBAAO9oB,EAAP,KAAW+oB,EAAX,KACA,EAAwB/Z,mBAASrD,EAAamd,YAA9C,mBAAOE,EAAP,KAAaC,EAAb,KACA,EAAsBja,mBAASnD,EAAYid,YAA3C,mBAAOI,EAAP,KAAYC,EAAZ,KACA,EAAwBna,mBAASjD,EAAa+c,YAA9C,mBAAOM,EAAP,KAAaC,EAAb,KACA,EAAsBra,mBAAS/C,EAAY6c,YAA3C,mBAAOQ,EAAP,KAAYC,EAAZ,KAEAC,qBAAU,WACRT,EAAMtd,EAAWqd,YACjBG,EAAQtd,EAAamd,YACrBK,EAAOtd,EAAYid,YACnBO,EAAQtd,EAAa+c,YACrBS,EAAOtd,EAAY6c,cAClB,CAACrd,IAEJ,IAAM0D,EAAW1L,KAEjB,OACE,qBACE2L,WAAS,EACTqa,QAAS,CAAEna,GAAI,IACfD,QAAS,CAAEC,GAAI,EAAGC,GAAI,GACtBC,GAAI,CAAEC,GAAI,EAAGia,EAAG,GAJlB,UAME,oBAAM/Z,MAAI,EAACL,GAAI,EAAf,SACE,gBAAC,KAAD,CAAKE,GAAI,CAAEma,GAAI,GAAf,UACE,yCAAoBnJ,KACpB,qBAEEvb,MAAOub,EAGPnQ,KAAM,EACNC,IAAK,EACLC,IAAK,GACLC,OAAK,EACLP,SAAU,SAACC,EAAGO,GACZtB,EACEzE,GAAc,CACZ3F,GAxDL,EAyDK4F,QAAS,CACP6V,aAAc/P,cAS5B,oBAAMd,MAAI,EAACL,GAAI,EAAf,SACE,gBAAC,KAAD,CAAKE,GAAI,CAAEma,GAAI,GAAf,UACE,gDAA2B9e,KAC3B,qBAEE5F,MAAO4F,EAGPwF,KAAM,EACNC,KAAM,EACNC,IAAK,GACLC,OAAK,EACLP,SAAU,SAACC,EAAGO,GACZtB,EACEzE,GAAc,CACZ3F,GAlFL,EAmFK4F,QAAS,CACPE,YAAa4F,cAS3B,oBAAMd,MAAI,EAACL,GAAI,EAAf,SACE,qBACEQ,WAAS,EACTC,MAAM,KACN9K,MAAOjF,EACPiQ,SAAU,SAACC,GACT6Y,EAAM7Y,EAAEC,OAAOlL,OACfiL,EAAEC,OAAOyZ,SAEXxZ,OAAQ,WACN,IAAIyZ,EAASC,SAAS9pB,GACtB+oB,EAAMc,EAAOf,YACb3Z,EACEzE,GAAc,CACZ3F,GA3GH,EA4GG4F,QAAS,CACPc,WAAYoe,WAOxB,oBAAMla,MAAI,EAACL,GAAI,EAAf,SACE,qBACEQ,WAAS,EACTC,MAAM,OACN9K,MAAO+jB,EACP/Y,SAAU,SAACC,GACT+Y,EAAQ/Y,EAAEC,OAAOlL,OACjBiL,EAAEC,OAAOyZ,SAEXxZ,OAAQ,WACN,IAAIyZ,EAASC,SAASd,GACtBC,EAAQY,EAAOf,YACf3Z,EACEzE,GAAc,CACZ3F,GAlIH,EAmIG4F,QAAS,CACPgB,aAAcke,WAO1B,oBAAMla,MAAI,EAACL,GAAI,EAAf,SACE,qBACEQ,WAAS,EACTC,MAAM,MACN9K,MAAOikB,EACPjZ,SAAU,SAACC,GACTiZ,EAAOjZ,EAAEC,OAAOlL,OAChBiL,EAAEC,OAAOyZ,SAEXxZ,OAAQ,WACN,IAAIyZ,EAASC,SAASZ,GACtBC,EAAOU,EAAOf,YACd3Z,EACEzE,GAAc,CACZ3F,GAzJH,EA0JG4F,QAAS,CACPkB,YAAage,WAOzB,oBAAMla,MAAI,EAACL,GAAI,EAAf,SACE,qBACEQ,WAAS,EACTC,MAAM,OACN9K,MAAOmkB,EACPnZ,SAAU,SAACC,GACTmZ,EAAQnZ,EAAEC,OAAOlL,OACjBiL,EAAEC,OAAOyZ,SAEXxZ,OAAQ,WACN,IAAIyZ,EAASC,SAASV,GACtBC,EAAQQ,EAAOf,YACf3Z,EACEzE,GAAc,CACZ3F,GAhLH,EAiLG4F,QAAS,CACPoB,aAAc8d,WAO1B,oBAAMla,MAAI,EAACL,GAAI,EAAf,SACE,qBACEQ,WAAS,EACTC,MAAM,aACN9K,MAAOqkB,EACPrZ,SAAU,SAACC,GACTqZ,EAAOrZ,EAAEC,OAAOlL,OAChBiL,EAAEC,OAAOyZ,SAEXxZ,OAAQ,WACN,IAAIyZ,EAASC,SAASR,GACtBC,EAAOM,EAAOf,YACd3Z,EACEzE,GAAc,CACZ3F,GAvMH,EAwMG4F,QAAS,CACPsB,YAAa4d,WAOzB,oBAAMla,MAAI,EAACP,WAAS,EAAC2a,WAAW,SAAhC,SACE,yDAEDvkB,EAAWuc,KAAI,SAAC9W,GAAD,OACd,eAAC,GAAD,CAAe9F,SApNV,EAoNwBJ,GAAIkG,GAAiBA,MAEpD,eAAC,GAAD,CAAa9F,SAtNN,QA6NP6kB,GAAgB,SAAC,GAAwD,IAAtDjlB,EAAqD,EAArDA,GAAII,EAAiD,EAAjDA,SAE3B,EAAwBxB,IAAe,SAACiB,GAAD,OACrCa,GAAmBb,EAAOG,MADpBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAGd,EAA8B+J,mBAAS/J,EAAM6jB,YAA7C,mBAAOmB,EAAP,KAAgBC,EAAhB,KACM/a,EAAW1L,KAgBjB,OACE,qBAAMkM,MAAI,EAAV,UACE,eAAC,GAAD,CAAgB1K,MAAOD,EAAMiL,SAhBF,SAACC,GAA0B,IAAD,GAClD,OAADA,QAAC,IAADA,GAAA,UAAAA,EAAGC,cAAH,eAAWlL,SAAU9C,EAAYvD,KAEnCuQ,EAAS/J,GAAgB,CAAEL,KAAII,cAE/BgK,EACE3K,GAAgB,CACdO,KACA4F,QAAS,CAAE3F,KAAMkL,EAAEC,OAAOlL,aAS9B,qBACEklB,KAAK,QACLpa,MAAM,QACN9K,MAAOglB,EACPza,GAAI,CAAEgZ,MAAO,OACbvY,SAAU,SAACC,GACTga,EAAWha,EAAEC,OAAOlL,OACpBiL,EAAEC,OAAOyZ,SAEXxZ,OAAQ,WACN,IAAIyZ,EAASC,SAASG,GACtBC,EAAWL,EAAOf,YAClB3Z,EAAS3K,GAAgB,CAAEO,KAAI4F,QAAS,CAAE1F,MAAO4kB,aAOrDO,GAAc,SAAC,GAAwC,IAAtCjlB,EAAqC,EAArCA,SACfgK,EAAW1L,KACjB,EAA4BuL,mBAAS,KAArC,mBAAKib,EAAL,KAAcC,EAAd,KAgBA,OACE,qBAAMva,MAAI,EAAV,UACE,eAAC,GAAD,CAAgB1K,MAAO9C,EAAYvD,KAAMqR,SAfzB,SAACC,GACfA,EAAEC,OAAOlL,QAAU9C,EAAYvD,MAEjCuQ,EACEzK,GAAgB,CACdM,KAAMkL,EAAEC,OAAOlL,MACfA,MAAOglB,EACP9kB,SAAUA,QASd,qBACEglB,KAAK,QACLpa,MAAM,QACN9K,MAAOglB,EACPza,GAAI,CAAEgZ,MAAO,OACbvY,SAAU,SAACC,GACTga,EAAWha,EAAEC,OAAOlL,OACpBiL,EAAEC,OAAOyZ,eAObS,GAAiB,SAAC,GAMjB,IALLplB,EAKI,EALJA,MACAgL,EAII,EAJJA,SAKA,OACE,sBAAaka,KAAK,QAAlB,UACE,uCACA,oBAAQpa,MAAM,OAAO9K,MAAOA,EAAOgL,SAAU,SAACC,GAAD,OAAOD,EAASC,IAA7D,SACGzB,SCvUH6b,GAAa,WACjB,IACA,EAKI3mB,IAAe,SAACiB,GAAD,OAAsB2G,GAAiB3G,EAN/C,MAET8f,EADF,EACEA,qBACA7D,EAFF,EAEEA,WACAoF,EAHF,EAGEA,uBAGF,EAA4BjX,mBAAS0V,EAAqBoE,YAA1D,mBAAOyB,EAAP,KAAeC,EAAf,KACMrb,EAAW1L,KAEjB,OACE,qBAAM2L,WAAS,EAACC,QAAS,CAAEC,GAAI,EAAGC,GAAI,GAAtC,UACE,oBAAMI,MAAI,EAACL,GAAI,EAAGC,GAAI,EAAGK,GAAI,EAAGC,GAAI,EAApC,SACE,oBACE4a,QACE,oBACEC,QAAS7J,EACT5Q,SAAU,SAACC,GAAD,OACRf,EACEzE,GAAc,CACZ3F,GApBP,EAqBO4F,QAAS,CAAEkW,WAAY3Q,EAAEC,OAAOua,eAM1C3a,MAAM,iBAIV,oBAAMJ,MAAI,EAACL,GAAI,EAAGC,GAAI,EAAGK,GAAI,EAAGC,GAAI,EAApC,SACE,qBACEC,WAAS,EACTC,MAAM,+BACN9K,MAAOslB,EACPta,SAAU,SAACC,GACTsa,EAAUta,EAAEC,OAAOlL,OACnBiL,EAAEC,OAAOyZ,SAEXxZ,OAAQ,WACN,IAAIyZ,EAASc,WAAWJ,GACxBC,EAAUX,EAAOf,YACjB3Z,EACEzE,GAAc,CACZ3F,GA7CH,EA8CG4F,QAAS,CACP+Z,qBAAsBmF,WAQlC,oBAAMla,MAAI,EAACL,GAAI,GAAIC,GAAI,EAAGK,GAAI,GAAIC,GAAI,EAAtC,SACE,oBACE4a,QACE,oBACEC,QAASzE,EACThW,SAAU,SAACC,GAAD,OACRf,EACEzE,GAAc,CACZ3F,GA/DP,EAgEO4F,QAAS,CAAEsb,uBAAwB/V,EAAEC,OAAOua,eAMtD3a,MAAM,gCCiCD6a,GAhHC,WAEd,MAAsC5b,oBAAkB,GAAxD,mBAAO6b,EAAP,KAAoBC,EAApB,KACA,EAA8C9b,oBAAkB,GAAhE,mBAAO+b,EAAP,KAAwBC,EAAxB,KAEA,EAAkChc,mBAAiBvT,EAAWC,cAA9D,mBAAO2rB,EAAP,KAAkB4D,EAAlB,KAEA,EAOI7D,GAAkBC,GANpBT,EADF,EACEA,gBAEAgB,EAHF,EAGEA,YAEAe,EALF,EAKEA,mBAKF,OACE,gBAAC,IAAMuC,SAAP,WACE,qBAAO1b,GAAI,CAAEka,EAAG,EAAGja,GAAI,GAAvB,UACE,oBACEgb,QACE,oBACEC,QAASG,EACT5a,SAAU,kBAAM6a,GAAgBD,MAGpC9a,MAAM,2BAGR,qBAAUob,GAAIN,EAAd,UACE,eAAC/b,GAAD,IACA,eAAC,GAAD,IACA,eAAC,KAAD,UAAM6Z,UAIV,qBAAOnZ,GAAI,CAAEka,EAAG,EAAGja,GAAI,GAAvB,UACE,oBACEgb,QACE,oBACEC,QAASK,EACT9a,SAAU,kBAAM+a,GAAoBD,MAGxChb,MAAM,+BAER,qBAAUob,GAAIJ,EAAd,UACE,eAAC,GAAD,IAEA,mDACCnE,EACD,oBACE3hB,MAAOoiB,EACPpX,SAAU,SAACC,GAAD,OAAO+a,EAAa/a,EAAEC,OAAOlL,QAFzC,SAIGkH,GAAY1Q,KAGf,eAAC,KAAD,UAAMmsB,c,sGC7DHwD,GAAmB,SAAnBA,EAAoB,GAQ1B,IAPLrmB,EAOI,EAPJA,GACAkB,EAMI,EANJA,MAMI,IALJolB,uBAKI,SACJ,EAA6C1nB,IAC3C,SAACiB,GAAD,OAAsB8W,GAAuB9W,EAAOG,MADpCqQ,GAAlB,EAAQjQ,SAAR,EAAkBiQ,WAAWpQ,EAA7B,EAA6BA,KAAM4P,EAAnC,EAAmCA,MAG7BkD,EAAuBnU,GAAesY,IACtCqP,EAAmB3nB,GAAeuY,IAElC/M,EAAW1L,KAEb8nB,EAAO,eAAC,KAAD,IACX,GAAQvmB,IACD7H,EAAcE,KACjBkuB,EAAO,eAAC,KAAD,IAMX,OACE,gBAAC,IAAML,SAAP,WACE,sBACEM,SAAU1T,IAAyB/S,GAAMumB,IAAqBvmB,EAC9DyK,GAAI,CAAEic,GAAI,EAAIxlB,EAAQ,GACtBylB,QAAS,kBAAMvc,EAAS0J,GAAgB9T,KAH1C,UAME,8BAAewmB,IACf,qBAAcI,QAAS3mB,EAAM4mB,UAAW3lB,EAAQ,EAAImP,EAAY,QAEjEiW,EACGzW,EAAMmN,KAAI,SAAC9M,GAAD,OACR,eAACmW,EAAD,CAA6BrmB,GAAIkQ,EAAMhP,MAAOA,EAAQ,GAA/BgP,MAEzB,OCiNK4W,OApPf,YAAgE,IAArCtU,EAAoC,EAApCA,UAEzB,EAA2D5T,IACzD,SAACiB,GAAD,OAAsB2W,GAAkB3W,EAAO2S,MADzCrT,EAAR,EAAQA,KAAM2Q,EAAd,EAAcA,WAAYC,EAA1B,EAA0BA,SAAUJ,EAApC,EAAoCA,YAAaE,EAAjD,EAAiDA,MAG3CzF,EAAW1L,KACjB,EAA8BuL,mBAAS9K,GAAvC,mBAAK+K,EAAL,KAAeC,EAAf,KACA,EAA8CF,mBAAS0F,GAAvD,mBAAOoX,EAAP,KAAwBC,EAAxB,KACA,EAAoC/c,mBAAS,CAAC6F,EAAYC,IAA1D,mBAAKkX,EAAL,KAAkBC,EAAlB,KAQA,OAPAzC,qBAAU,kBAAMta,EAAYhL,KAAO,CAACA,IACpCslB,qBAAU,kBAAMuC,EAAmBrX,KAAc,CAACA,IAClD8U,qBACE,kBAAMyC,EAAe,CAACpX,EAAYC,MAClC,CAACD,EAAYC,IAIb,qBAAOtF,GAAI,CAAEC,GAAI,EAAGia,EAAG,GAAvB,UACE,qBAAMta,WAAS,EAACC,QAAS,CAAEC,GAAI,EAAGC,GAAI,GAAKC,GAAI,CAAEka,EAAG,GAApD,UACE,oBAAM/Z,MAAI,EAACL,GAAI,GAAIC,GAAI,EAAGK,GAAI,GAAIC,GAAI,EAAtC,SACE,qBACEC,WAAS,EACTC,MAAM,eACNC,YAAY,uBACZ/K,MAAOgK,EACPgB,SAAU,SAACC,GACThB,EAAYgB,EAAEC,OAAOlL,QAEvBmL,OAAQ,kBACNjB,EACE4J,GAAe,CAAEhU,GAAIwS,EAAW5M,QAAS,CAAEzG,KAAM+K,WAKzD,qBAAMU,MAAI,EAACL,GAAI,GAAIC,GAAI,EAAGK,GAAI,GAAIC,GAAI,EAAtC,UACE,qBAAYqc,MAAM,SAAlB,2BACiBrX,EADjB,OACiCC,KAEjC,eAAC,KAAD,CAAKtF,GAAI,CAAEma,GAAI,GAAf,SACE,qBACEwC,aAAc,iBAAM,gBACpBlnB,MAAO+mB,EACP1b,IAAK,EACLC,IAAK,GACLC,OAAK,EAELP,SAAU,SAACC,EAAGO,GAAJ,OAAqBwb,EAAexb,IAC9CL,OAAQ,kBACNjB,EACE4J,GAAe,CACbhU,GAAIwS,EACJ5M,QAAS,CACPkK,WAAYmX,EAAY,GACxBlX,SAAUkX,EAAY,QAK9BI,kBAAkB,OAClBC,iBAAkB,SAACC,GAAD,gBAAUA,WAIlC,oBAAM3c,MAAI,EAACL,GAAI,GAAf,SACE,qBACEQ,WAAS,EACTyc,WAAS,EACTxc,MAAM,sBACNC,YAAY,sGACZ/K,MAAO6mB,EACP7b,SAAU,SAACC,GACT6b,EAAmB7b,EAAEC,OAAOlL,QAE9BmL,OAAQ,kBACNjB,EACE4J,GAAe,CACbhU,GAAIwS,EACJ5M,QAAS,CAAE+J,YAAaoX,cAQpC,qBACE/mB,GAAG,wBACHynB,UAAW,6CAFb,SAIG5X,EAAMmN,KAAI,SAAC9M,GAAD,OACT,eAAC,GAAD,CAA6BlQ,GAAIkQ,EAAMhP,MAAO,GAAvBgP,QAI3B,qBAAM7F,WAAS,EAACC,QAAS,CAAEC,GAAI,GAAKE,GAAI,CAAEC,GAAI,EAAGia,EAAG,GAApD,UACE,oBACE/Z,MAAI,EACJP,WAAS,EACTE,GAAI,EACJC,GAAI,EACJK,GAAI,EACJC,GAAI,EACJ4c,eAAe,SAPjB,SASE,qBACEtC,KAAK,QACLra,WAAS,EACT4c,QAAQ,YACRhB,QAAS,kBAAMvc,EAASyK,GAAqB,CAAErC,gBAJjD,mCASF,oBACE5H,MAAI,EACJP,WAAS,EACTE,GAAI,EACJC,GAAI,EACJK,GAAI,EACJC,GAAI,EACJ4c,eAAe,SAPjB,SASE,qBACEtC,KAAK,QACLra,WAAS,EACT4c,QAAQ,WACRhB,QAAS,kBAAMvc,EAAS0K,GAAyB,CAAEtC,gBAJrD,kCASF,oBACE5H,MAAI,EACJP,WAAS,EACTE,GAAI,EACJC,GAAI,EACJK,GAAI,EACJC,GAAI,EACJ4c,eAAe,SAPjB,SASE,qBACEtC,KAAK,QACLra,WAAS,EACT4c,QAAQ,WACRhB,QAAS,kBACPvc,EACE0K,GAAyB,CACvBtC,YACAuC,aAAc3c,EAAcC,WARpC,kCAgBF,oBACEuS,MAAI,EACJP,WAAS,EACTE,GAAI,EACJC,GAAI,EACJK,GAAI,EACJC,GAAI,EACJ4c,eAAe,SAPjB,SASE,qBACEtC,KAAK,QACLra,WAAS,EACT4c,QAAQ,WACRhB,QAAS,kBACPvc,EACE0K,GAAyB,CACvBtC,YACAuC,aAAc3c,EAAcE,SARpC,sC,UC7DKsvB,GAzGE,WACf,IAAMzU,EAAWvU,GAAe8X,IAC1B5D,EAAkBlU,GAAeqY,IACjC7M,EAAW1L,KAEXmpB,EAAgC,GAChCC,EAAiC,GA6BvC,OA5BA3U,EAAS0L,SAAQ,SAACpP,GAChBoY,EAAezhB,KACb,qBAAUlG,MAAOuP,EAAQzP,GAAzB,SACGyP,EAAQtQ,MADuBsQ,EAAQzP,KAI5C8nB,EAAgB1hB,KACd,eAAC,KAAD,CAAK2hB,UAAU,KAAsBtd,GAAI,CAAE2Y,OAAQ,IAAnD,SACE,qBACEpY,MAAOyE,EAAQtQ,KACfwoB,QAASlY,EAAQC,QAAU,SAAW,WACtC0V,KAAK,QACL4C,MAAM,YACNrB,QAAS,WACPvc,EACE4J,GAAe,CACbhU,GAAIyP,EAAQzP,GACZ4F,QAAS,CAAE8J,SAAUD,EAAQC,YAGjCtF,EAASyJ,GAAWpE,EAAQzP,MAE9BioB,SAAU,kBAAM7d,EAASsK,GAAejF,EAAQzP,SAf3ByP,EAAQzP,QAsBnC,gBAAC,IAAMmmB,SAAP,WACE,oBACEwB,QAAQ,WACRld,GAAI,CACFiF,QAAS,OACTwY,SAAU,OACVR,eAAgB,SAChBS,UAAW,OACXxD,EAAG,GACHja,GAAI,GAENqd,UAAU,KAVZ,SAYGD,IAEH,oBAAOrd,GAAI,CAAEC,GAAI,EAAGia,EAAG,GAAvB,SACE,qBAAMta,WAAS,EAACC,QAAS,EAAzB,UACE,oBAAMM,MAAI,EAACL,GAAI,GAAIC,GAAI,EAAGK,GAAI,GAAIC,GAAI,EAAtC,SACE,sBAAaC,WAAS,EAAtB,UACE,qBAAY/K,GAAG,uBAAf,4BACA,oBACE2L,QAAQ,uBACR3L,GAAG,iBACHE,MAAO4S,EACP9H,MAAM,iBACNE,SAAU,SAACC,GAAD,OAAOf,EAASyJ,GAAW1I,EAAEC,OAAOlL,SALhD,SAOG2nB,SAIP,oBACEjd,MAAI,EACJP,WAAS,EACTE,GAAI,EACJC,GAAI,EACJK,GAAI,EACJC,GAAI,EACJ4c,eAAe,SAPjB,SASE,qBACEC,QAAQ,YACRhB,QAAS,kBAAMvc,EAASmK,GAAe,CAAEC,MAAM,MAFjD,kCAOF,oBACE5J,MAAI,EACJP,WAAS,EACTE,GAAI,EACJC,GAAI,EACJK,GAAI,EACJC,GAAI,EACJ4c,eAAe,SAPjB,SASE,qBACEC,QAAQ,WACRhB,QAAS,kBAAMvc,EAASmK,GAAe,CAAEC,MAAM,MAFjD,8CCxGC4T,GAAkB,CAZf,k0GACA,wmIACF,yhCACK,08IACD,qyGACF,k3JACG,25MACG,q7RACH,qwJACA,k0oCACA,4kPCoFJC,GA5EM,WACnB,IAAM5Y,EAAU7Q,GAAeyY,IACzBiR,EAAc1pB,GAAe2Y,IAEnC,EAAkCtN,mBAAS,IAA3C,mBAAOse,EAAP,KAAkBC,EAAlB,KACMpe,EAAW1L,KACjB+lB,qBAAU,WACJ6D,IAAgBxxB,EAClB0xB,EAAa,iBACJF,IAAgBxxB,GACzB0xB,EAAa,uBAEd,CAACF,IA8BJ,OACE,qBAAO7d,GAAI,CAAEka,EAAG,GAAhB,UACE,oBAAYgD,QAAQ,KAApB,qCACA,qBAAMtd,WAAS,EAAf,UACE,oBAAMO,MAAI,EAAV,SACE,qBAAQ+b,QAjCQ,WACtBvc,EAASiJ,GAAckV,KAgCjB,sBAEF,oBAAM3d,MAAI,EAAV,SACE,qBAAQ+b,QAjCF,WACZ6B,EAAatS,KAAKuS,UAAUhZ,KAgCtB,sBAQF,oBAAM7E,MAAI,EAAV,SACE,qBAAQ+b,QA9BW,WAAO,IAAD,iBACjByB,IADiB,IAC/B,2BAA+B,CAAC,IAAvB9E,EAAsB,QAC7BlZ,EAASiJ,GAAciQ,KAFM,gCA8BzB,oCAEF,oBAAM1Y,MAAI,EAACL,GAAI,GAAf,SACE,qBACEQ,WAAS,EACTyc,WAAS,EACTxc,MAAM,eACNC,YAAY,qCACZ/K,MAAOqoB,EACPrd,SAAU,SAACC,GAAD,OAAOqd,EAAard,EAAEC,OAAOlL,mB,4DC/D7CwoB,GAAgB,SAAC,GAAwD,IAAtDnG,EAAqD,EAArDA,MAAOvX,EAA8C,EAA9CA,MAAO9K,EAAuC,EAAvCA,MAAOgL,EAAgC,EAAhCA,SAAUyd,EAAsB,EAAtBA,SACtD,EAAwB1e,oBAAS,GAAjC,mBAAO2e,EAAP,KAAaC,EAAb,KAEA,OACE,qBACEtG,MAAOA,EACPqG,KAAMA,EACNE,QAAS,WACPxS,QAAQC,IAAI,UACZsS,GAAQ,IALZ,SAQE,sBACEzD,KAAK,QACL2D,aAAc,kBAAMF,GAAQ,IAC5BG,aAAc,kBAAMH,GAAQ,IAC5BC,QAAS,kBAAMD,GAAQ,IAJzB,UAME,8BAAa7d,IACb,oBAAQA,MAAOA,EAAO9K,MAAOA,EAAOgL,SAAUA,EAA9C,SACGyd,UCPLM,GAAsB,SAACC,GAM3B,IALA,IAAMnb,EAA2B,GAC7BC,EAAe,EACfmb,EAAQ,EACRC,EAAe,EAEVloB,EAAQ,EAAGA,GAAS,GAAIA,IAC3BgoB,EAAQE,IAAiBF,EAAQE,GAAc,KAAOloB,KAExD8M,EAAe+W,SAASmE,EAAQE,GAAc,OAC3Bpb,EAAe,GAClCob,IACAD,GAASnb,GAEXD,EAAY7M,GAASioB,EAEvB,OAAOpb,GAGIsb,GAA6B,SACxCH,EACA1R,EACA8R,GAIA,OAFAJ,EAAQ1R,GAAS,CAAC8R,EAAUJ,EAAQ1R,GAAO,IAC3C0R,EAAQK,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE,GAAKC,EAAE,MACzBR,GAAoBC,IAYhBQ,GAA0B,SAACR,GACtC,IAAIS,EACFT,EAAQzR,OAAS,EAAIyR,EAAQA,EAAQzR,OAAS,GAAK,CAAC,EAAG,KAEzD,OADAyR,EAAQ9iB,KAAK,CAACujB,EAAU,GAAK,GAAI,GAAG5F,aAC7BkF,GAAoBC,IAGhBU,GAAY,SACvBzqB,EACAiL,EACAtK,EACAE,EACA+N,GAEA,IAAM8b,EAhEuB,SAAC9b,GAG9B,IAFA,IAAIC,EAAe,EACbkb,EAAmB,GAChBhoB,EAAQ,EAAGA,GAAS,GAAIA,IAC3B8M,IAAiBD,EAAY7M,KAC/BgoB,EAAQ9iB,KAAK,CAAClF,GAAQ6M,EAAY7M,GAAS8M,GAAc+V,aACzD/V,EAAeD,EAAY7M,IAG/B,OAAOgoB,EAuDaY,CAAgB/b,GACpC,EAA4B9D,mBAAS4f,GAArC,mBAAKX,EAAL,KAAca,EAAd,KACIC,EAAK9T,KAAKuS,UAAUoB,GAExBpF,qBAAU,kBAAMsF,EAAWF,KAAc,CAACG,IAG1C,IAFA,IAAIC,EAAY,GANb,WAQM5nB,GACP4nB,EAAU7jB,KACR,qBAAMwE,MAAI,EAAV,UACE,eAAC,GAAD,CACE2X,MAAM,iJACNvX,MAAM,QACN9K,MAAOgpB,EAAQ7mB,GAAG,GAClB6I,SAAU,SAACC,GAAD,OACRf,EACEtK,EAAO,CACLE,KACA4F,QAAQ,gBACLzG,EAAOkqB,GACNH,EACA7mB,EACA6nB,OAAO/e,EAAEC,OAAOlL,aAZ5B,SAmBGwH,KAGH,qBACE0d,KAAK,QACLpa,MAAM,QACNP,GAAI,CAAEgZ,MAAO,OACbvjB,MAAOgpB,EAAQ7mB,GAAG,GAClB6I,SAAU,SAACC,GACT,IAAIgf,EAAajB,EAAQkB,QACzBD,EAAW9nB,GAAK,CAAC8nB,EAAW9nB,GAAG,GAAI8I,EAAEC,OAAOlL,OAC5C6pB,EAAWI,GACXhf,EAAEC,OAAOyZ,SAEXxZ,OAAQ,WAEN,IADA,IAAI8e,EAAajB,EAAQkB,QAChBC,EAAK,EAAGA,EAAKnB,EAAQzR,OAAQ4S,IACpCF,EAAWE,GAAM,CACfF,EAAWE,GAAI,GACftF,SAASoF,EAAWE,GAAI,IAAItG,YAGhCgG,EAAWI,GACX/f,EACEtK,EAAO,CACLE,KACA4F,QAAQ,gBACLzG,EAAO8pB,GAAoBC,YA/CxB7mB,KAFXA,EAAI,EAAGA,EAAI6mB,EAAQzR,OAAQpV,IAAM,EAAjCA,GAoGT,OAtBA4nB,EAAU7jB,KACR,oBAAMwE,MAAI,EAAV,SACE,qBAAS2X,MAAM,oCAAf,SACE,qBACEyF,MAAM,UACN,aAAW,aACXrB,QAAS,kBACPvc,EACEtK,EAAO,CACLE,KACA4F,QAAQ,gBACLzG,EAAOuqB,GAAwBR,QAR1C,SAcE,eAAC,KAAD,SAhBS,cAqBVe,G,wCCtJIK,GAAS,SAAC,GAAwD,IAAtDlqB,EAAqD,EAArDA,SAAUJ,EAA2C,EAA3CA,GACjC,EAeIpB,IAAe,SAACiB,GAAD,OAAsBgX,GAAiBhX,EAAOG,MAd/DsR,EADF,EACEA,gBACAO,EAFF,EAEEA,WACAC,EAHF,EAGEA,SACAC,EAJF,EAIEA,WACAC,EALF,EAKEA,WACAZ,EANF,EAMEA,WAEAG,EARF,EAQEA,SACAC,EATF,EASEA,eACAC,EAVF,EAUEA,SACAC,EAXF,EAWEA,MACAC,EAZF,EAYEA,SACAR,EAbF,EAaEA,YACAS,EAdF,EAcEA,kBAEIxH,EAAW1L,KAEX6rB,EAAeX,GACnB,iBACAxf,EACAgK,GACApU,EACAwR,GAGIgZ,EAAkBZ,GACtB,oBACAxf,EACAgK,GACApU,EACA4R,GAGI6Y,EAAkBtZ,EAAY6L,KAAI,SAAC3T,EAAImO,GAC3C,OACE,oBAAM5M,MAAI,EAAV,SACE,oBAEEwa,KAAK,QACLllB,MAAOmJ,EACP6B,SAAU,SAACC,GACT,IAAIuf,EAAQvZ,EAAYiZ,QACpBjf,EAAEC,OAAOlL,QAAU1D,EAAa3C,KAClC6wB,EAAMC,OAAOnT,EAAO,GAEpBkT,EAAMlT,GAASrM,EAAEC,OAAOlL,MAE1BkK,EACEgK,GAAc,CACZpU,KACA4F,QAAS,CAAEuL,YAAauZ,OAdhC,SAmBGphB,MApBWkO,MA0BpB,OACE,gBAAC,KAAD,CACE/M,GAAI,CACFmgB,GAAI,EACJC,GAAI,EACJ,UAAW,CAAEC,QAAS,qBAJ1B,UAOE,eAACC,GAAA,EAAD,CAASC,UAAU,OAAOvgB,GAAI,CAAEmgB,GAAI,EAAGC,GAAI,KAC3C,qBAAMxgB,WAAS,EAACC,QAAS,CAAEC,GAAI,EAAGC,GAAI,GAAKC,GAAI,CAAEC,GAAI,GAArD,UACE,oBAAME,MAAI,EAACL,GAAG,OAAd,SACE,qBACEyd,MAAM,UACN5C,KAAK,QACLuB,QAAS,SAACxb,GACRf,EAASwL,GAAc,CAAE5V,KAAII,eAJjC,SAOE,eAAC,KAAD,QAIJ,oBAAMwK,MAAI,EAACL,IAAE,EAAb,SACE,sBAAa6a,KAAK,QAAQra,WAAS,EAAnC,UACE,qBAAY/K,GAAG,yBAAf,uBACA,oBACE2L,QAAQ,yBACR3L,GAAG,mBACHE,MAAOoR,EACPtG,MAAM,YACNE,SAAU,SAACC,GAAD,OACRf,EACEgK,GAAc,CACZpU,KACA4F,QAAS,CAAE0L,gBAAiBnG,EAAEC,OAAOlL,WAT7C,SAcG8I,UAMP,oBAAM4B,MAAI,EAAV,SACE,sBAAawa,KAAK,QAAlB,UACE,qBAAYplB,GAAG,0BAAf,wBACA,oBACE2L,QAAQ,0BACR3L,GAAG,oBACHE,MAAO8R,EACPhH,MAAM,aACNE,SAAU,SAACC,GAAD,OACRf,EACEgK,GAAc,CACZpU,KACA4F,QAAS,CAAEoM,WAAYkY,OAAO/e,EAAEC,OAAOlL,YAT/C,SAcGyJ,UAIP,oBAAMiB,MAAI,EAAV,SACE,sBAAawa,KAAK,QAAlB,UACE,qBAAYplB,GAAG,oBAAf,kBACA,oBACE2L,QAAQ,oBACR3L,GAAG,cACHE,MAAO2R,EACP7G,MAAM,OACNE,SAAU,SAACC,GAAD,OACRf,EACEgK,GAAc,CACZpU,KACA4F,QAAS,CAAEiM,WAAY1G,EAAEC,OAAOlL,WATxC,SAcGsJ,UAIP,oBAAMoB,MAAI,EAAV,SACE,sBAAawa,KAAK,QAAlB,UACE,qBAAYplB,GAAG,wBAAf,sBACA,oBACE2L,QAAQ,wBACR3L,GAAG,kBACHE,MAAO4R,EACP9G,MAAM,WACNE,SAAU,SAACC,GAAD,OACRf,EACEgK,GAAc,CACZpU,KACA4F,QAAS,CAAEkM,SAAU3G,EAAEC,OAAOlL,WATtC,SAcGuJ,UAIP,oBAAMmB,MAAI,EAAV,SACE,oBACE8a,QACE,qBACEC,QAAS5T,EACT7G,SAAU,SAACC,GAAD,OACRf,EACEgK,GAAc,CACZpU,KACA4F,QAAS,CAAEmM,WAAY5G,EAAEC,OAAOua,eAM1C3a,MAAM,iBAGV,oBAAMJ,MAAI,EAAV,SACE,sBAAawa,KAAK,QAAlB,UACE,qBAAYplB,GAAG,oBAAf,yBACA,oBACE2L,QAAQ,oBACR3L,GAAG,cACHirB,UAAQ,EACR/qB,MAAOkR,EACPpG,MAAM,cACNkgB,YAAa,SAACzE,GAAD,OAAcA,EAAS0E,KAAK,SACzCjgB,SAAU,SAACC,GAAD,OACRf,EACEgK,GAAc,CACZpU,KACA4F,QAAS,CAAEwL,WAAYjG,EAAEC,OAAOlL,WAXxC,SAgBGkH,GAAY7I,aAKrB,eAACwsB,GAAA,EAAD,CAASC,UAAU,OAAOvgB,GAAI,CAAEmgB,GAAI,EAAGC,GAAI,GAA3C,kBAGA,qBAAMxgB,WAAS,EAACC,QAAS,CAAEC,GAAI,EAAGC,GAAI,GAAtC,UACE,oBAAMI,MAAI,EAAV,SACE,sBAAawa,KAAK,QAAlB,UACE,qBAAYplB,GAAG,aAAf,yBACA,oBACE2L,QAAQ,aACR3L,GAAG,OACHE,MAAOqR,EACPvG,MAAM,cACNE,SAAU,SAACC,GAAD,OACRf,EACEgK,GAAc,CACZpU,KACA4F,QAAS,CAAE2L,SAAUpG,EAAEC,OAAOlL,WATtC,SAcGgJ,UAINqhB,EACD,oBAAM3f,MAAI,EAAV,SACE,sBAAawa,KAAK,QAAlB,UACE,qBAAYplB,GAAG,kBAAf,sBACA,oBACE2L,QAAQ,kBACR3L,GAAG,YACHE,MAAOuR,EACPzG,MAAM,WACNE,SAAU,SAACC,GAAD,OACRf,EACEgK,GAAc,CACZpU,KACA4F,QAAS,CAAE6L,SAAUtG,EAAEC,OAAOlL,WATtC,SAcGkJ,UAIP,oBAAMwB,MAAI,EAAV,SACE,oBACE8a,QACE,oBACEC,QAASjU,EACTxG,SAAU,SAACC,GAAD,OACRf,EACEgK,GAAc,CACZpU,KACA4F,QAAS,CAAE8L,MAAOvG,EAAEC,OAAOua,eAMrC3a,MAAM,kBAGT0G,EACC,oBAAM9G,MAAI,EAAV,SACE,sBAAawa,KAAK,QAAlB,UACE,qBAAYplB,GAAG,mBAAf,sBACA,oBACE2L,QAAQ,mBACR3L,GAAG,aACHE,MAAOyR,EACP3G,MAAM,WACNE,SAAU,SAACC,GAAD,OACRf,EACEgK,GAAc,CACZpU,KACA4F,QAAS,CAAE+L,SAAUxG,EAAEC,OAAOlL,WATtC,SAcGkJ,UAKP,MAGJ,eAAC2hB,GAAA,EAAD,CAASC,UAAU,OAAOvgB,GAAI,CAAEmgB,GAAI,EAAGC,GAAI,GAA3C,2BAGA,qBAAMxgB,WAAS,EAACC,QAAS,CAAEC,GAAI,EAAGC,GAAI,GAAtC,UACGigB,EACD,oBAAM7f,MAAI,EAAV,SACE,qBACE+b,QAAS,WACP,IAAI+D,EAAQvZ,EAAYiZ,QACxBM,EAAMtkB,KAAK5J,EAAa3C,MACxBuQ,EACEgK,GAAc,CACZpU,KACA4F,QAAS,CACPuL,YAAauZ,OARvB,kCAiBDF,KAEH,eAACO,GAAA,EAAD,CAASC,UAAU,OAAOvgB,GAAI,CAAEmgB,GAAI,EAAGC,GAAI,SCvVpCO,GAAS,SAAC,GAAwD,IAAtDhrB,EAAqD,EAArDA,SAAUJ,EAA2C,EAA3CA,GACjC,EAOIpB,IAAe,SAACiB,GAAD,OAAsBkX,GAAiBlX,EAAOG,MAN/DkS,EADF,EACEA,gBACAC,EAFF,EAEEA,WACAwB,EAHF,EAGEA,YACA7D,EAJF,EAIEA,WACAC,EALF,EAKEA,SACAqB,EANF,EAMEA,WAEIhH,EAAW1L,KACjB,EAAwBuL,mBAAS0J,EAAcA,EAAYoQ,WAAa,KAAxE,mBAAK7jB,EAAL,KAAYmrB,EAAZ,KACA,EAAoCphB,mBAAS,CAAC6F,EAAYC,IAA1D,mBAAKkX,EAAL,KAAkBC,EAAlB,KAMA,OALAzC,qBACE,kBAAMyC,EAAe,CAACpX,EAAYC,MAClC,CAACD,EAAYC,IAIb,eAAC,KAAD,CAAKtF,GAAI,CAAEmgB,GAAI,EAAGC,GAAI,EAAG,UAAW,CAAEC,QAAS,qBAA/C,SACE,qBAAMzgB,WAAS,EAACC,QAAS,CAAEC,GAAI,EAAGC,GAAI,GAAKC,GAAI,CAAEC,GAAI,GAArD,UACE,oBAAME,MAAI,EAACL,GAAG,OAAd,SACE,qBACE,aAAW,SACXyd,MAAM,UACNrB,QAAS,SAACxb,GACRf,EAAS2L,GAAc,CAAE/V,KAAII,eAJjC,SAOE,eAAC,KAAD,QAGJ,oBAAMwK,MAAI,EAAV,SACE,sBAAawa,KAAK,QAAQra,WAAS,EAAnC,UACE,qBAAY/K,GAAG,yBAAf,uBACA,oBACE2L,QAAQ,yBACR3L,GAAG,mBACHE,MAAOgS,EACPlH,MAAM,YACNE,SAAU,SAACC,GAAD,OACRf,EACEkK,GAAc,CACZtU,KACA4F,QAAS,CAAEsM,gBAAiB/G,EAAEC,OAAOlL,WAT7C,SAcG0H,UAIP,oBAAMgD,MAAI,EAAV,SACE,sBAAawa,KAAK,QAAQra,WAAS,EAAnC,UACE,qBAAY/K,GAAG,oBAAf,oBACA,oBACE2L,QAAQ,oBACR3L,GAAG,cACHE,MAAOiS,EACPnH,MAAM,SACNE,SAAU,SAACC,GAAD,OACRf,EACEkK,GAAc,CACZtU,KACA4F,QAAS,CAAEuM,WAAYhH,EAAEC,OAAOlL,WATxC,SAcG4J,UAOLqG,OAAOC,OAAOjS,GAAkBqQ,SAAS2D,GACvC,oBAAMvH,MAAI,EAAV,SACE,qBACEwa,KAAK,QACLpa,MAAM,QACNP,GAAI,CAAEgZ,MAAO,OACbvjB,MAAOA,EACPgL,SAAU,SAACC,GACTkgB,EAASlgB,EAAEC,OAAOlL,OAClBiL,EAAEC,OAAOyZ,SAEXxZ,OAAQ,WACN,IAAIyZ,EAASC,SAAS7kB,GACtBmrB,EAASvG,EAAOf,YAChB3Z,EACEkK,GAAc,CACZtU,KACA4F,QAAS,CACP+N,YAAamR,WAQzB,GAIJ,qBAAMla,MAAI,EAACH,GAAI,CAAEma,GAAI,GAArB,UACE,qBAAYuC,MAAM,SAAlB,2BACiBrX,EADjB,OACiCC,KAEjC,qBACEqV,KAAK,QACLgC,aAAc,iBAAM,gBACpBlnB,MAAO+mB,EACP1b,IAAK,EACLC,IAAK,GACLC,OAAK,EAELP,SAAU,SAACC,EAAGO,GAAJ,OAAqBwb,EAAexb,IAC9CL,OAAQ,kBACNjB,EACEkK,GAAc,CACZtU,KACA4F,QAAS,CACPkK,WAAYmX,EAAY,GACxBlX,SAAUkX,EAAY,QAK9BI,kBAAkB,OAClBC,iBAAkB,SAACC,GAAD,gBAAUA,SAGhC,oBAAM3c,MAAI,EAAV,SACE,sBAAawa,KAAK,QAAlB,UACE,qBAAYplB,GAAG,oBAAf,yBACA,oBACE2L,QAAQ,oBACR3L,GAAG,cACHirB,UAAQ,EACR/qB,MAAOkR,EACPpG,MAAM,cACNkgB,YAAa,SAACzE,GAAD,OAAcA,EAAS0E,KAAK,SACzCjgB,SAAU,SAACC,GAAD,OACRf,EACEkK,GAAc,CACZtU,KACA4F,QAAS,CAAEwL,WAAYjG,EAAEC,OAAOlL,WAXxC,SAgBGkH,GAAY7I,gBC1Id+sB,GAAe,SAAC,GAA4B,IAA1BtrB,EAAyB,EAAzBA,GAC7B,EAiBIpB,IAAe,SAACiB,GAAD,OAAsB8W,GAAuB9W,EAAOG,MAhBrEI,EADF,EACEA,SACAoS,EAFF,EAEEA,UACAnC,EAHF,EAGEA,UAEAC,EALF,EAKEA,SACArQ,EANF,EAMEA,KACAsQ,EAPF,EAOEA,UACAC,EARF,EAQEA,UACAC,EATF,EASEA,UACAE,EAVF,EAUEA,iBACAC,EAXF,EAWEA,IACAC,EAZF,EAYEA,WAEAE,EAdF,EAcEA,QACAE,EAfF,EAeEA,QACApB,EAhBF,EAgBEA,MAEIzF,EAAW1L,KAEX6sB,EAAiB3B,GACrB,mBACAxf,EACA8J,GACAlU,EACA2Q,GAGF,OACE,qBAAOlG,GAAI,CAAEC,GAAI,EAAGia,EAAG,GAAvB,UACE,qBAAMta,WAAS,EAACC,QAAS,CAAEC,GAAI,EAAGC,GAAI,GAAKC,GAAI,CAAEC,GAAI,GAArD,UACE,oBAAME,MAAI,EAACL,GAAG,OAAd,SACE,qBACEod,QAAQ,WACRvC,KAAK,QACLoG,UAAW,eAAC,KAAD,IACX7E,QAAS,SAACxb,GACRf,EAASsL,GAAoB,CAAE1V,KAAII,WAAUoS,gBALjD,2BAWYQ,IAAb5S,EACC,oBAAMwK,MAAI,EAACL,IAAE,EAAb,SACE,eAAC,GAAD,CACEgY,MAAM,+OACNriB,MAAOmQ,EACPrF,MAAM,YACNE,SAAU,SAACC,GAAD,OACRf,EACE8J,GAAoB,CAClBlU,KACA4F,QAAS,CAAEyK,UAAWlF,EAAEC,OAAOlL,WARvC,SAaG0H,OAIL,MAGJ,oBAAY+f,QAAQ,KAAK8D,cAAY,EAArC,kBAGA,qBACEphB,WAAS,EACTC,QAAS,CAAEC,GAAI,EAAGC,GAAI,GACtBC,GAAI,CAAEC,GAAI,EAAG,UAAW,CAAEogB,QAAS,qBAHrC,UAKE,oBAAMlgB,MAAI,EAAV,SACE,eAAC,GAAD,CACE2X,MAAM,0FACNvX,MAAM,YACN9K,MAAOoQ,EACPpF,SAAU,SAACC,GACTf,EACE8J,GAAoB,CAClBlU,KACA4F,QAAS,CAAE0K,SAAUnF,EAAEC,OAAOlL,WARtC,SAaG4H,OAGL,oBAAM8C,MAAI,EAAV,SACE,sBAAawa,KAAK,QAAlB,UACE,qBAAYplB,GAAG,sBAAf,2BACA,oBACE2L,QAAQ,sBACRX,MAAM,gBACN9K,MAAOD,EACPiL,SAAU,SAACC,GACTf,EACE8J,GAAoB,CAClBlU,KACA4F,QAAS,CAAE3F,KAAMkL,EAAEC,OAAOlL,WARlC,SAaG8H,UAIP,oBAAM4C,MAAI,EAAV,SACE,eAAC,GAAD,CACE2X,MAAM,iEACNvX,MAAM,cACN9K,MAAOqQ,EACPrF,SAAU,SAACC,GACTf,EACE8J,GAAoB,CAClBlU,KACA4F,QAAS,CAAE2K,UAAWpF,EAAEC,OAAOlL,WARvC,SAaGgI,OAGL,oBAAM0C,MAAI,EAAV,SACE,eAAC,GAAD,CACE2X,MAAM,qSACNvX,MAAM,gBACN9K,MAAOsQ,EACPtF,SAAU,SAACC,GACTf,EACE8J,GAAoB,CAClBlU,KACA4F,QAAS,CAAE4K,UAAWrF,EAAEC,OAAOlL,WARvC,SAaGkI,OAGL,oBAAMwC,MAAI,EAAV,SACE,eAAC,GAAD,CACE2X,MAAM,gDACNvX,MAAM,aACN9K,MAAOuQ,EACPvF,SAAU,SAACC,GACTf,EACE8J,GAAoB,CAClBlU,KACA4F,QAAS,CAAE6K,UAAWtF,EAAEC,OAAOlL,WARvC,SAaGoI,OAGJijB,EACAtrB,IAAS7H,EAAcE,KACtB,oBAAMsS,MAAI,EAAV,SACE,eAAC,GAAD,CACE2X,MAAM,8DACNvX,MAAM,MACN9K,MAAO0Q,EACP1F,SAAU,SAACC,GACTf,EACE8J,GAAoB,CAClBlU,KACA4F,QAAS,CAAEgL,IAAKzF,EAAEC,OAAOlL,WARjC,SAaGsI,OAIL,GAEF,oBAAMoC,MAAI,EAAV,SACE,eAAC,GAAD,CACE2X,MAAM,2BACNvX,MAAM,iBACN9K,MAAO2Q,EACP3F,SAAU,SAACC,GACTf,EACE8J,GAAoB,CAClBlU,KACA4F,QAAS,CAAEiL,WAAY1F,EAAEC,OAAOlL,WARxC,SAaGwI,UAMP,oBAAYif,QAAQ,KAAK8D,cAAY,EAArC,qBAGC1a,EAAQiM,KAAI,SAACtK,GAAD,OACX,eAAC,GAAD,CAAQtS,SAAUJ,EAAIA,GAAI0S,GAAeA,MAG3C,qBACEjI,GAAI,CAAEogB,GAAI,GACVlD,QAAQ,WACRvC,KAAK,QACLuB,QAAS,kBAAMvc,EAASuL,GAAc,CAAEvV,SAAUJ,MAJpD,wBAQA,oBAAY2nB,QAAQ,KAAK8D,cAAY,EAArC,qBAGCxa,EAAQ+L,KAAI,SAACrK,GAAD,OACX,eAAC,GAAD,CAAQvS,SAAUJ,EAAIA,GAAI2S,GAAeA,MAE3C,qBACElI,GAAI,CAAEogB,GAAI,GACVlD,QAAQ,WACRvC,KAAK,QACLuB,QAAS,kBAAMvc,EAAS0L,GAAc,CAAE1V,SAAUJ,MAJpD,wBASA,qBAAMynB,UAAW,mDAAjB,SACG5X,EAAMmN,KAAI,SAAC9M,GAAD,OACT,eAAC,GAAD,CAEElQ,GAAIkQ,EACJhP,MAAO,EACPolB,iBAAiB,GAHZpW,QAQVjQ,IAAS7H,EAAcC,OACtB,qBACEsvB,QAAQ,YACRhB,QAAS,WACP+E,OAAOC,SAASC,KAAO,yBACvBxhB,EACEkL,GAAsB,CACpBlV,SAAUJ,MANlB,6BAcA,GAEF,qBACE2nB,QAAQ,WACRhB,QAAS,SAACkF,GACRH,OAAOC,SAASC,KAAO,yBACvBxhB,EAASyK,GAAqB,CAAEzU,SAAUJ,MAJ9C,oCCnQS,SAAS8rB,GAAT,GAMC,EALdtZ,UAKc,EAJdpS,SAIe,IACf,EAAwC6J,mBACtC7R,GAAcwT,QADhB,mBAAOmJ,EAAP,KAAqBgX,EAArB,KAIA,OACE,oBAAOthB,GAAI,CAAEC,GAAI,EAAGia,EAAG,GAAvB,SACE,qBAAMta,WAAS,EAACC,QAAS,CAAEC,GAAI,EAAGC,GAAI,GAAKC,GAAI,CAAEpC,EAAG,EAAGsc,EAAG,GAA1D,UACE,oBAAM/Z,MAAI,EAAV,SACE,8DAEF,oBAAMA,MAAI,EAAV,SACE,gCACE,gDACA,oBACE1K,MAAO6U,EACP/J,MAAM,gBACNE,SAAU,SAACC,GACT4gB,EAAgB5gB,EAAEC,OAAOlL,QAJ7B,SAOGkH,GAAYhP,WAInB,oBAAMwS,MAAI,EAAV,SACGxS,GAAcwT,SAAWmJ,EACxB,eAACiX,GAAD,IACE5zB,GAAcyT,QAAUkJ,EAC1B,eAACkX,GAAD,IACE7zB,GAAc0T,UAAYiJ,EAC5B,eAACmX,GAAD,IACE9zB,GAAc2T,QAAUgJ,EAC1B,eAACoX,GAAD,IAEA,UAQZ,SAASH,KACP,MAA0B/hB,mBAAmBvO,EAAUK,MAAvD,mBAAOyG,EAAP,KAAc4pB,EAAd,KACA,EAA4BniB,mBAAiCgC,GAAQ,IAArE,mBAAOgC,EAAP,KAAeoe,EAAf,KACA,EAAgCpiB,mBAAiB,UAAjD,mBAAOkE,EAAP,KAAiBme,EAAjB,KACA,EAA8BriB,mBAAiBkC,GAAS,IAAxD,mBAAOogB,EAAP,KACA,GADA,KACsCtiB,mBAAiB,KAAvD,mBAAOwE,EAAP,KAAoB+d,EAApB,KACA,EAAsCviB,mBAAoB7Q,EAAWE,OAArE,mBAAO0e,EAAP,KAAoByU,EAApB,KACA,EAAsCxiB,mBAAoB7Q,EAAWE,OAArE,mBAAOiV,EAAP,KAAoBme,EAApB,KACA,EAAwCziB,mBACtC7Q,EAAWI,QADb,mBAAOoV,EAAP,KAAqB+d,EAArB,KAGA,EAA8B1iB,mBAAiBxL,GAAU,IAAzD,mBAAOyZ,EAAP,KAAgB0U,EAAhB,KACA,EAAoC3iB,mBAAiB,GAArD,mBAAO0N,EAAP,KAAmBkV,EAAnB,KACA,EAA4B5iB,mBAE1BkG,OAAO2c,YAAYpf,GAAasP,KAAI,SAAC+P,GAAD,MAAW,CAACA,GAAO,QAFzD,mBAAOze,EAAP,KAAe0e,GAAf,KAIA,GAAoC/iB,mBAAiBxL,GAAU,IAA/D,qBAAOga,GAAP,MAAmBwU,GAAnB,MACA,GAAkChjB,mBAAiBxL,GAAU,KAA7D,qBAAO0Z,GAAP,MAAkB+U,GAAlB,MACA,GAAgCjjB,oBAAkB,GAAlD,qBAAO+E,GAAP,MAAiBme,GAAjB,MACA,GAA0CljB,mBAAiB,GAA3D,qBAAOqF,GAAP,MAAsB8d,GAAtB,MACA,GAAwCnjB,mBAAiB0D,GAAU,IAAnE,qBAAOsB,GAAP,MAAqBoe,GAArB,MAEMxf,GAAyB,CAC7BrL,QACAyL,SACAQ,cACAN,WACAoe,UACAvU,cACAzJ,cACAK,eACAsJ,UACAP,aACArJ,SACAmK,cACAN,aACAnJ,YACAM,iBACAL,iBAGI7E,GAAW1L,KAqBjB,OACE,qBAAM2L,WAAS,EAACC,QAAS,CAAEC,GAAI,EAAGC,GAAI,GAAtC,UACE,oBAAMI,MAAI,EAAV,SACE,gCACE,qDACA,oBACE1K,MAAOsC,EACPwI,MAAM,qBACNE,SAAU,SAACC,GACTihB,EAASjhB,EAAEC,OAAOlL,QAJtB,SAOGkH,GAAY4E,WAInB,oBAAMpB,MAAI,EAAV,SACE,gCACE,wCACA,oBACE1K,MAAO+N,EACPjD,MAAM,QACNE,SAAU,SAACC,GAzCJ,IAACyM,IA0CGzM,EAAEC,OAAOlL,MAzC5BmsB,EAAUzU,GACNvL,GAAauL,GAAWH,OAAS,EACnC+U,EAAengB,GAAauL,GAAW,IAEvC4U,EAAe,KAiCX,SAOGplB,GAAY6E,WApCdI,GAAa4B,GAAQwJ,OAAS,EA0CjC,oBAAM7M,MAAI,EAAV,SACE,gCACE,+CACA,oBACE1K,MAAOuO,EACPzD,MAAM,eACNE,SAAU,SAACC,GACTqhB,EAAerhB,EAAEC,OAAOlL,QAJ5B,SAOGkH,GAAYiF,GAAa4B,WAKhC,GAGF,oBAAMrD,MAAI,EAAV,SACE,gCACE,2CACA,oBACE1K,MAAOiO,EACPnD,MAAM,WACNE,SAAU,SAACC,GACTmhB,EAAYnhB,EAAEC,OAAOlL,QAJzB,SASIkH,GAAYgF,WAqBlB,GAEF,oBAAMxB,MAAI,EAAV,SACE,gCACE,wDACA,oBACE1K,MAAO8X,EACPhN,MAAM,wBACNE,SAAU,SAACC,GACTshB,EAAethB,EAAEC,OAAOlL,QAJ5B,SASIkH,GAAYhO,UAKpB,oBAAMwR,MAAI,EAAV,SACE,gCACE,wDACA,oBACE1K,MAAOqO,EACPvD,MAAM,wBACNE,SAAU,SAACC,GACTuhB,EAAevhB,EAAEC,OAAOlL,QAJ5B,SASIkH,GAAYhO,UAtHP,aAAX6U,EA4HA,oBAAMrD,MAAI,EAAV,SACE,gCACE,wDACA,oBACE1K,MAAO0O,EACP5D,MAAM,yBACNE,SAAU,SAACC,GACTwhB,EAAgBxhB,EAAEC,OAAOlL,QAJ7B,SASIkH,GAAYhO,UAMpB,GAEF,oBAAMwR,MAAI,EAAV,SACE,gCACE,6CACA,oBACE1K,MAAOgY,EACPlN,MAAM,aACNE,SAAU,SAACC,GACTyhB,EAAW1C,OAAO/e,EAAEC,OAAOlL,SAJ/B,SAOGkJ,UAMP,oBAAMwB,MAAI,EAAV,SACE,oBACE+c,QAAQ,WACRld,GAAI,CACFiF,QAAS,OACTwY,SAAU,OACVR,eAAgB,SAChBS,UAAW,OACXxD,EAAG,GACHja,GAAI,GAENqd,UAAU,KAVZ,SAYGra,GAAasP,KAAI,SAACsQ,EAAW9V,GAAZ,OAChB,oBAAKuQ,UAAU,KAAqBtd,GAAI,CAAE2Y,OAAQ,IAAlD,SACE,qBACEpY,MAAOsiB,EACPlI,KAAK,QACL4C,MAAM,YACNL,QAASrZ,EAAOgf,GAAa,SAAW,WACxC3G,QAAS,WACP,IAAM4G,EAAS,2BACVjf,GADU,mBAEZgf,GAAahf,EAAOgf,KAGvBN,GAAUO,OAZSD,UAmB9Bhf,EAAM,OACL,oBAAM1D,MAAI,EAAV,SACE,gCACE,6CACA,oBACE1K,MAAOuY,GACPzN,MAAM,aACNE,SAAU,SAACC,GACT8hB,GAAc/C,OAAO/e,EAAEC,OAAOlL,SAJlC,SAOGkJ,UAKP,GAEDkF,EAAM,MACL,oBAAM1D,MAAI,EAAV,SACE,gCACE,4CACA,oBACE1K,MAAOiY,GACPnN,MAAM,YACNE,SAAU,SAACC,GACT+hB,GAAahD,OAAO/e,EAAEC,OAAOlL,SAJjC,SAOGkJ,UAKP,GAGF,oBAAMwB,MAAI,EAAV,SACE,oBACE8a,QACE,oBACEC,QAAS3W,GACT9D,SAAU,SAACC,GAAD,OAAOgiB,GAAYhiB,EAAEC,OAAOua,YAG1C3a,MAAM,8BAITgE,GACC,qBAAMpE,MAAI,EAAV,UACE,qBAAYuc,MAAM,SAAlB,sBAAqC7X,MACrC,qBACEpP,MAAOoP,GACP/D,IAAK,EACLC,IAAK,GACLC,OAAK,EACLP,SAAU,SAACC,EAAGO,GAAJ,OAAW0hB,GAAiBlD,OAAOxe,UAIjD,GAEDsD,GACC,oBAAMpE,MAAI,EAAV,SACE,gCACE,+CACA,oBACE1K,MAAO+O,GACPjE,MAAM,eACNE,SAAU,SAACC,GAAD,OAAOkiB,GAAgBliB,EAAEC,OAAOlL,QAH5C,SAKGkH,GAAYuG,WAKnB,GAGF,oBAAM/C,MAAI,EAACL,GAAI,EAAGC,GAAI,EAAGK,GAAI,EAAGC,GAAI,EAApC,SACE,sBAAaC,WAAS,EAAtB,UACE,oDACA,oBACE7K,MAAOyX,EACP3M,MAAM,oBACNE,SAAU,SAACC,GACT0hB,EAAc3C,OAAO/e,EAAEC,OAAOlL,SAJlC,SAOGkH,GAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,WAMtC,oBAAMwD,MAAI,EAAV,SACE,qBACE+c,QAAQ,YACRhB,QAAS,kBAAMvc,GAAS+K,GAAoB,CAAEtH,kBAFhD,qCAWR,SAASoe,KACP,OAAO,eAAC,IAAM9F,SAAP,0BAGT,SAAS+F,KACP,OAAO,eAAC,IAAM/F,SAAP,gDAGT,SAASgG,KACP,OAAO,eAAC,IAAMhG,SAAP,uCC1bTqH,IAAQC,WAAW,gBCCnB,IDwFeC,OAvFf,WACE,IAAM5a,EAAkBlU,GAAeqY,IACjClE,EAAuBnU,GAAesY,IACtCyW,EAAoB/uB,GAAewY,IAEnCwW,EAAcC,cAAc,SAACC,GAEjC,OADAxX,QAAQC,IAAR,mBAAwBuX,IACjBA,EAAMC,YAAYC,GAAG,SAK9B,OAFAR,IAAQS,KAAK,YAGX,eAAC,IAAM9H,SAAP,UAEE,oBAAW+H,SAAS,KAApB,SACGN,EACC,qBACEvjB,WAAS,EACT8jB,cAAe,CAAE5jB,GAAI,EAAGM,GAAI,EAAGC,GAAI,EAAGsjB,GAAI,GAC1C3jB,GAAI,CAAEiZ,OAAQ,SAHhB,UAKE,oBACE1jB,GAAG,YACH4K,MAAI,EACJL,GAAI,GACJM,GAAI,EACJJ,GAAI,CAAEiZ,OAAQ,OAAQ2K,SAAU,QALlC,SAOE,qBAAK5jB,GAAI,GAAT,UAEE,eAAC,IAAD,CAAS6jB,OAAO,0BAA0BC,KAAK,eAC/C,eAAC,GAAD,SACqBvb,IAApBF,EACC,eAAC,GAAD,CAAiBN,UAAWM,IAE5B,QAEwBE,IAAzBD,EACC,eAAC,GAAD,CAAc/S,GAAI+S,IAChB4a,EACF,eAAC7B,GAAD,IAEA,GAEF,eAAC0C,GAAD,IACA,eAAC,IAAD,CAASF,OAAO,0BAA0BC,KAAK,oBAGnD,oBACE3jB,MAAI,EACJL,GAAI,GACJM,GAAI,EACJJ,GAAI,CAAEmgB,GAAI,EAAGlH,OAAQ,EAAG2K,SAAU,eAJpC,SAOE,eAAC,GAAD,SAKJ,gBAAC,IAAMlI,SAAP,WAEE,eAAC,IAAD,CAASmI,OAAO,0BAA0BC,KAAK,eAC/C,eAAC,GAAD,IACA,eAAC,GAAD,SACqBvb,IAApBF,EACC,eAAC,GAAD,CAAiBN,UAAWM,IAE5B,QAEwBE,IAAzBD,EACC,eAAC,GAAD,CAAc/S,GAAI+S,IAChB4a,EACF,eAAC7B,GAAD,IAEA,GAEF,eAAC0C,GAAD,IACA,eAAC,IAAD,CAASF,OAAO,0BAA0BC,KAAK,uBCnFrD3b,GAAmC,GACnC6b,GAA0C,GAC1C5b,GAAiC,GAC9BxQ,GAAI,EAAGA,IAAK,GAAIA,KACvBuQ,GAAMvQ,IAAK,EACXwQ,GAAIxQ,IAAK,EACTosB,GAAapsB,IAAK,EACdA,IAAK,IACPosB,GAAapsB,IAAK,GAEhBA,IAAK,KACPosB,GAAapsB,IAAK,GAEhBA,IAAK,KACPosB,GAAapsB,IAAK,GAqBf,IAAMqsB,GAAQC,aAAe,CAClC/uB,QAAS,CACPuT,SAAUyb,GACVnuB,WAAYouB,GACZtoB,QAASuoB,MASbJ,GAAMtkB,SACJ+J,GAAY,CACVnU,GAAI,EACJsR,gBAAiB9V,EAAMnD,OAEvBkZ,SAAU7V,EAAU5B,OACpB0X,eAAe,eAAMoB,IACrBnB,SAAU,EACVC,OAAO,EACPC,SAAU,GACVR,YAAa,CAAC3U,EAAalD,MAAOkD,EAAaE,mBAC/CkV,kBAAkB,eAAMgB,IAExBf,WAAYzU,EAAYG,EACxBuU,SAAUpU,EAAU7D,KACpBkY,YAAY,EACZC,WAAY,EACZZ,WAAY,CAAC7S,EAAeC,WAGhCkwB,GAAMtkB,SACJ+J,GAAY,CACVnU,GAAI,EACJsR,gBAAiB9V,EAAMnD,OAEvBkZ,SAAU7V,EAAUK,KACpByV,eAAe,eAAMoB,IACrBnB,SAAU,EACVC,OAAO,EACPC,SAAU,GACVR,YAAa,GACbS,kBAAkB,eAAMgB,IAExBf,WAAYzU,EAAYI,KACxBsU,SAAUpU,EAAU7D,KACpBkY,YAAY,EACZC,WAAY,EACZZ,WAAY,CAAC7S,EAAeC,WAGhCkwB,GAAMtkB,SACJ+J,GAAY,CACVnU,GAAI,EACJsR,gBAAiB9V,EAAMC,MAEvB8V,SAAU7V,EAAUE,YACpB4V,eAAe,eAAMoB,IACrBnB,SAAU,EACVC,OAAO,EACPC,SAAU,GACVR,YAAa,GACbS,kBAAkB,eAAMgB,IAExBf,WAAYzU,EAAYI,KACxBsU,SAAUpU,EAAU7D,KACpBkY,YAAY,EACZC,WAAY,EACZZ,WAAY,CAAC7S,EAAeC,WAGhCkwB,GAAMtkB,SACJiK,GAAY,CACVrU,GAAI,EACJkS,gBAAiB5a,EAAWE,KAC5B2a,WAAY7T,EAAYP,SACxB+R,WAAY,EACZC,SAAU,GACVqB,WAAY,CAAC7S,EAAeC,WAIhCkwB,GAAMtkB,SACJ1E,GAAY,CACV1F,GAAI,EACJb,KAAM,4BAEN6K,UAAW,EACX2V,qBAAsB,EAEtBhZ,QAAS5P,EAASG,KAClB2P,UAAWzP,EAAWH,SACtB8P,SAAU3P,EAAWH,SACrBgQ,UAAW7P,EAAWH,SACtBkQ,SAAU/P,EAAWH,SAErB6kB,YAAY,EACZoF,wBAAwB,EACxBzgB,WAAY,GAEZ6hB,UAAW5rB,EAAWC,aACtB8kB,aAAc,EACd3V,YAAa,EACbY,WAAY,GACZE,aAAc,EACdE,YAAa,EACbE,aAAc,EACdE,YAAa,KAKjBwnB,GAAMtkB,SACJ2J,GAAa,CACX/T,GAAI,EACJb,KAAM,WACNuQ,SAAS,EACTG,MAAO,GACP7F,UAAW,EACX2F,YAAa,yDACbG,WAAY,EACZC,SAAU,MA8Xd2e,GAAMtkB,SAASyJ,GAAW,IAeX6a,UCtjBKK,QACW,cAA7BrD,OAAOC,SAASqD,UAEe,UAA7BtD,OAAOC,SAASqD,UAEhBtD,OAAOC,SAASqD,SAASC,MACvB,2D,uBCHSnB,GAXDoB,aAAY,CACxBC,QAAS,CACPvI,QAAS,CACPwI,KAAMC,KAAI,MAEZC,WAAY,CACVC,QAAS,c,UCCfC,IAASC,OACP,eAAC,IAAMC,WAAP,UACE,eAAC,KAAD,CAAUhB,MAAOA,GAAjB,SACE,gBAACiB,GAAA,EAAD,CAAe7B,MAAOA,GAAtB,UACE,uBACA,eAAC,GAAD,WAIN8B,SAASC,eAAe,SF+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA/Z,GACLC,QAAQD,MAAMA,EAAMga,c","file":"static/js/main.ae44185c.chunk.js","sourcesContent":["import {\r\n  ACTrends,\r\n  profTrends,\r\n  damageTrends,\r\n  dieTrends,\r\n  SaveTrends,\r\n  statTrends,\r\n  itemTrends,\r\n} from \"./types\";\r\n\r\ninterface defaultValue {\r\n  [x: number]: number;\r\n}\r\nconst zero: defaultValue = {};\r\nconst level: defaultValue = {};\r\nconst halfLevel: defaultValue = {};\r\n\r\nconst trained: defaultValue = {};\r\nconst maxSkill: defaultValue = {};\r\n\r\nconst maxScore: defaultValue = {};\r\nconst score16pp: defaultValue = {};\r\nconst score16p: defaultValue = {};\r\nconst score16: defaultValue = {};\r\nconst score14p: defaultValue = {};\r\nconst score14: defaultValue = {};\r\n\r\nconst martialProf: defaultValue = {};\r\nconst alchProf: defaultValue = {};\r\nconst casterProf: defaultValue = {};\r\n\r\nconst spellProf: defaultValue = {};\r\n\r\nconst weaponItem: defaultValue = {};\r\nconst skillItem: defaultValue = {};\r\n\r\nconst weaponDice: defaultValue = {};\r\nconst spellDice: defaultValue = {};\r\nconst spellDice2: defaultValue = {};\r\nfor (let i = 1; i <= 20; i++) {\r\n  spellDice[i] = Math.floor((i + 1) / 2);\r\n  spellDice2[i] = 2 * Math.floor((i + 1) / 2);\r\n}\r\nconst runes: defaultValue = {};\r\nconst runes2: defaultValue = {};\r\nconst deadly: defaultValue = {};\r\n\r\nconst sneak: defaultValue = {};\r\nconst strategic: defaultValue = {};\r\nconst precise: defaultValue = {};\r\n\r\nconst preEdge1: defaultValue = {};\r\nconst preEdge2: defaultValue = {};\r\nconst preEdge3: defaultValue = {};\r\n\r\nconst martialSpec: defaultValue = {};\r\nconst casterSpec: defaultValue = {};\r\n\r\nconst rage: defaultValue = {};\r\nconst animalrage: defaultValue = {};\r\nconst dragonrage: defaultValue = {};\r\nconst giantrage: defaultValue = {};\r\nconst spiritrage: defaultValue = {};\r\n\r\nconst overdriveSuccess: defaultValue = {};\r\nconst overdriveCritical: defaultValue = {};\r\n\r\nconst implementEmpower: defaultValue = {};\r\n\r\nconst fighterAB: defaultValue = {};\r\nconst martialAB: defaultValue = {};\r\nconst casterAB: defaultValue = {};\r\nconst alchAB: defaultValue = {};\r\n\r\nconst casterSpellAttack: defaultValue = {};\r\nconst casterSaveDC: defaultValue = {};\r\nconst classdc1: defaultValue = {};\r\nconst classdc2: defaultValue = {};\r\nconst mcspell: defaultValue = {};\r\n\r\nconst fighterStatic: defaultValue = {};\r\nconst fighterRanged: defaultValue = {};\r\nconst martialStatic: defaultValue = {};\r\nconst martialRanged: defaultValue = {};\r\nconst casterStatic: defaultValue = {};\r\nconst casterRanged: defaultValue = {};\r\n\r\nfor (let i = 1; i <= 20; i++) {\r\n  zero[i] = 0;\r\n  level[i] = i;\r\n  halfLevel[i] = Math.floor(i / 2);\r\n  trained[i] = i + 2;\r\n  maxSkill[i] = i + 2;\r\n\r\n  maxScore[i] = 4;\r\n  score16pp[i] = 3;\r\n  score16p[i] = 3;\r\n  score16[i] = 3;\r\n  score14p[i] = 2;\r\n  score14[i] = 2;\r\n\r\n  martialProf[i] = 2;\r\n  alchProf[i] = 2;\r\n  casterProf[i] = 2;\r\n\r\n  spellProf[i] = 2;\r\n  classdc1[i] = i + 2;\r\n  classdc2[i] = i + 2;\r\n  mcspell[i] = i + 2;\r\n\r\n  weaponItem[i] = 0;\r\n  skillItem[i] = 0;\r\n  weaponDice[i] = 1;\r\n  runes[i] = 0;\r\n  runes2[i] = 0;\r\n  deadly[i] = 1;\r\n\r\n  sneak[i] = 1;\r\n  strategic[i] = 1;\r\n  precise[i] = 2;\r\n\r\n  preEdge1[i] = 1;\r\n  preEdge2[i] = 0;\r\n  preEdge3[i] = 0;\r\n\r\n  martialSpec[i] = 0;\r\n  casterSpec[i] = 0;\r\n\r\n  rage[i] = 2;\r\n  animalrage[i] = 2;\r\n  dragonrage[i] = 4;\r\n  giantrage[i] = 6;\r\n  spiritrage[i] = 3;\r\n\r\n  overdriveSuccess[i] = 2;\r\n  overdriveCritical[i] = 4;\r\n\r\n  implementEmpower[i] = 2;\r\n\r\n  if (i >= 2) {\r\n    weaponItem[i] = 1;\r\n  }\r\n  if (i >= 3) {\r\n    maxSkill[i] = i + 4;\r\n    skillItem[i] = 1;\r\n\r\n    overdriveSuccess[i] = 3;\r\n    overdriveCritical[i] = 5;\r\n\r\n    implementEmpower[i] = 4;\r\n  }\r\n  if (i >= 4) {\r\n    weaponDice[i] = 2;\r\n  }\r\n  if (i >= 5) {\r\n    martialProf[i] = 4;\r\n    score16pp[i] = 4;\r\n    score16p[i] = 4;\r\n    score16[i] = 4;\r\n    score14p[i] = 3;\r\n    score14[i] = 3;\r\n\r\n    sneak[i] = 2;\r\n    strategic[i] = 2;\r\n    precise[i] = 3;\r\n  }\r\n  if (i >= 7) {\r\n    alchProf[i] = 4;\r\n    martialSpec[i] = 1;\r\n    spellProf[i] = 4;\r\n    maxSkill[i] = i + 6;\r\n\r\n    rage[i] = 6;\r\n    animalrage[i] = 5;\r\n    dragonrage[i] = 8;\r\n    giantrage[i] = 10;\r\n    spiritrage[i] = 7;\r\n\r\n    overdriveSuccess[i] = 4;\r\n    overdriveCritical[i] = 6;\r\n  }\r\n  if (i >= 8) {\r\n    runes[i] = 1;\r\n    runes2[i] = 1;\r\n  }\r\n  if (i >= 9) {\r\n    skillItem[i] = 2;\r\n    classdc1[i] = i + 4;\r\n\r\n    strategic[i] = 3;\r\n    precise[i] = 4;\r\n  }\r\n  if (i >= 10) {\r\n    weaponItem[i] = 2;\r\n    maxScore[i] = 5;\r\n    score14p[i] = 4;\r\n    score14[i] = 4;\r\n    runes2[i] = 2;\r\n\r\n    overdriveCritical[i] = 7;\r\n  }\r\n  if (i >= 11) {\r\n    casterProf[i] = 4;\r\n    classdc2[i] = i + 4;\r\n\r\n    sneak[i] = 3;\r\n    implementEmpower[i] = 6;\r\n\r\n    preEdge1[i] = 2;\r\n  }\r\n  if (i >= 12) {\r\n    weaponDice[i] = 3;\r\n    mcspell[i] = i + 4;\r\n    deadly[i] = 2;\r\n  }\r\n  if (i >= 13) {\r\n    martialProf[i] = 6;\r\n    casterSpec[i] = 1;\r\n\r\n    strategic[i] = 4;\r\n    precise[i] = 5;\r\n  }\r\n  if (i >= 15) {\r\n    martialSpec[i] = 2;\r\n    score16pp[i] = 5;\r\n    score16p[i] = 5;\r\n    spellProf[i] = 6;\r\n    maxSkill[i] = i + 8;\r\n    runes[i] = 2;\r\n\r\n    rage[i] = 12;\r\n    animalrage[i] = 12;\r\n    dragonrage[i] = 16;\r\n    giantrage[i] = 18;\r\n    spiritrage[i] = 13;\r\n\r\n    overdriveSuccess[i] = 5;\r\n    overdriveCritical[i] = 8;\r\n  }\r\n  if (i >= 16) {\r\n    weaponItem[i] = 3;\r\n    runes2[i] = 3;\r\n  }\r\n  if (i >= 17) {\r\n    score16pp[i] = 6;\r\n    maxScore[i] = 6;\r\n    skillItem[i] = 3;\r\n    classdc1[i] = i + 6;\r\n\r\n    sneak[i] = 4;\r\n    strategic[i] = 5;\r\n    precise[i] = 6;\r\n\r\n    preEdge2[i] = 1;\r\n\r\n    overdriveSuccess[i] = 6;\r\n    overdriveCritical[i] = 9;\r\n  }\r\n  if (i >= 18) {\r\n    mcspell[i] = i + 6;\r\n  }\r\n  if (i >= 19) {\r\n    weaponDice[i] = 4;\r\n    spellProf[i] = 8;\r\n    classdc2[i] = i + 6;\r\n    deadly[i] = 3;\r\n\r\n    implementEmpower[i] = 8;\r\n\r\n    preEdge1[i] = 3;\r\n    preEdge2[i] = 2;\r\n    preEdge3[i] = 1;\r\n  }\r\n  if (i >= 20) {\r\n    maxScore[i] = 7;\r\n\r\n    overdriveCritical[i] = 10;\r\n  }\r\n\r\n  fighterAB[i] = i + martialProf[i] + 2;\r\n  martialAB[i] = i + martialProf[i];\r\n  casterAB[i] = i + casterProf[i];\r\n  alchAB[i] = i + alchProf[i];\r\n  casterSpellAttack[i] = i + spellProf[i];\r\n  casterSaveDC[i] = 10 + i + spellProf[i] + maxScore[i];\r\n\r\n  fighterStatic[i] = maxScore[i] + (martialSpec[i] * (martialProf[i] + 2)) / 2;\r\n  fighterRanged[i] = (martialSpec[i] * (martialProf[i] + 2)) / 2;\r\n  martialStatic[i] = maxScore[i] + (martialSpec[i] * martialProf[i]) / 2;\r\n  martialRanged[i] = (martialSpec[i] * martialProf[i]) / 2;\r\n  casterStatic[i] = score16[i] + (casterSpec[i] * casterProf[i]) / 2;\r\n  casterRanged[i] = (casterSpec[i] * casterProf[i]) / 2;\r\n}\r\nexport const profTrendValues = {\r\n  [profTrends.TRAINED]: trained,\r\n  [profTrends.FIGHTERWEAPON]: fighterAB,\r\n  [profTrends.MARTIALWEAPON]: martialAB,\r\n  [profTrends.CASTERWEAPON]: casterAB,\r\n  [profTrends.ALCHWEAPON]: alchAB,\r\n  [profTrends.CASTERSPELL]: casterSpellAttack,\r\n  [profTrends.CLASSDC1]: classdc1,\r\n  [profTrends.CLASSDC2]: classdc2,\r\n  [profTrends.MCSPELL]: mcspell,\r\n  [profTrends.MAXSKILL]: maxSkill,\r\n};\r\nexport const statTrendValues = {\r\n  [statTrends.AS10]: zero,\r\n  [statTrends.AS18a]: maxScore,\r\n  [statTrends.AS16a]: score16pp,\r\n  [statTrends.AS16pp]: score16p,\r\n  [statTrends.AS16p]: score16,\r\n  [statTrends.AS14pp]: score14p,\r\n  [statTrends.AS14p]: score14,\r\n};\r\nexport const itemTrendValues = {\r\n  [itemTrends.NONE]: zero,\r\n  [itemTrends.WEAPON]: weaponItem,\r\n  [itemTrends.SKILL]: skillItem,\r\n};\r\n\r\nexport const MAPvalues = {\r\n  \"0 (0x-5)\": 0,\r\n  \"-5 (1x-5)\": -5,\r\n  \"-10 (2x-5)\": -10,\r\n  \"0 (0x-4)\": 0,\r\n  \"-4 (1x-4)\": -4,\r\n  \"-8 (2x-4)\": -8,\r\n  \"0 (0x-3)\": 0,\r\n  \"-3 (1x-3)\": -3,\r\n  \"-6 (2x-3)\": -6,\r\n  \"0 (0x-2)\": 0,\r\n  \"-2 (1x-2)\": -2,\r\n  \"-4 (2x-2)\": -4,\r\n  \"0 (0x-1)\": 0,\r\n  \"-1 (1x-1)\": -1,\r\n  \"-2 (2x-1)\": -2,\r\n};\r\n\r\nexport const dieTrendValues = {\r\n  [dieTrends.NONE]: zero,\r\n  [dieTrends.WEAPON]: weaponDice,\r\n  [dieTrends.SPELLLEVEL1]: spellDice,\r\n  [dieTrends.SPELLLEVEL2]: spellDice2,\r\n  [dieTrends.LEVEL]: level,\r\n  [dieTrends.HALFLEVEL]: halfLevel,\r\n  [dieTrends.RUNE]: runes,\r\n  [dieTrends.RUNE2]: runes2,\r\n  [dieTrends.DEADLY]: deadly,\r\n  [dieTrends.SNEAK]: sneak,\r\n  [dieTrends.STRATEGIC]: strategic,\r\n  [dieTrends.PRECISE]: precise,\r\n  [dieTrends.PRECISIONEDGE]: preEdge1,\r\n  [dieTrends.PRECISIONEDGE2]: preEdge2,\r\n  [dieTrends.PRECISIONEDGE3]: preEdge3,\r\n};\r\n\r\nexport const damageTrendValues = {\r\n  ...statTrendValues,\r\n  [damageTrends.NONE]: zero,\r\n  [damageTrends.FIGHTERWEAPONSPEC]: fighterRanged,\r\n  [damageTrends.MARTIALWEAPONSPEC]: martialRanged,\r\n  [damageTrends.CASTERWEAPONSPEC]: casterRanged,\r\n  [damageTrends.WEAPON]: weaponDice,\r\n  [damageTrends.SPELLLEVEL1]: spellDice,\r\n  [damageTrends.LEVEL]: level,\r\n  [damageTrends.HALFLEVEL]: halfLevel,\r\n  [damageTrends.RAGE]: rage,\r\n  [damageTrends.ANIMALRAGE]: animalrage,\r\n  [damageTrends.DRAGONRAGE]: dragonrage,\r\n  [damageTrends.GIANTRAGE]: giantrage,\r\n  [damageTrends.SPIRITRAGE]: spiritrage,\r\n  [damageTrends.PRECISE]: precise,\r\n  [damageTrends.OVERDRIVES]: overdriveSuccess,\r\n  [damageTrends.OVERDRIVEC]: overdriveCritical,\r\n  [damageTrends.IMPLEMENT]: implementEmpower,\r\n};\r\n\r\nconst extremeAC: defaultValue = {\r\n  \"-1\": 18,\r\n  0: 19,\r\n  1: 19,\r\n  2: 21,\r\n  3: 22,\r\n  4: 24,\r\n  5: 25,\r\n  6: 27,\r\n  7: 28,\r\n  8: 30,\r\n  9: 31,\r\n  10: 33,\r\n  11: 34,\r\n  12: 36,\r\n  13: 37,\r\n  14: 39,\r\n  15: 40,\r\n  16: 42,\r\n  17: 43,\r\n  18: 45,\r\n  19: 46,\r\n  20: 48,\r\n  21: 49,\r\n  22: 51,\r\n  23: 52,\r\n  24: 54,\r\n};\r\nconst highAC = { ...extremeAC };\r\nfor (let level in highAC) highAC[level] -= 3;\r\n\r\nconst moderateAC = { ...extremeAC };\r\nfor (let level in moderateAC) moderateAC[level] -= 4;\r\n\r\nconst lowAC = { ...extremeAC };\r\nfor (let level in lowAC) lowAC[level] -= 6;\r\n\r\nexport const defaultACs = {\r\n  [ACTrends.EXTREME]: extremeAC,\r\n  [ACTrends.HIGH]: highAC,\r\n  [ACTrends.MODERATE]: moderateAC,\r\n  [ACTrends.LOW]: lowAC,\r\n};\r\n\r\nconst extremeSaves: defaultValue = {\r\n  \"-1\": 9,\r\n  0: 10,\r\n  1: 11,\r\n  2: 12,\r\n  3: 14,\r\n  4: 15,\r\n  5: 17,\r\n  6: 18,\r\n  7: 20,\r\n  8: 21,\r\n  9: 23,\r\n  10: 24,\r\n  11: 26,\r\n  12: 27,\r\n  13: 29,\r\n  14: 30,\r\n  15: 32,\r\n  16: 33,\r\n  17: 35,\r\n  18: 36,\r\n  19: 38,\r\n  20: 39,\r\n  21: 41,\r\n  22: 43,\r\n  23: 44,\r\n  24: 46,\r\n};\r\nconst highSaves: defaultValue = {\r\n  \"-1\": 8,\r\n  0: 9,\r\n  1: 10,\r\n  2: 11,\r\n  3: 12,\r\n  4: 14,\r\n  5: 15,\r\n  6: 17,\r\n  7: 18,\r\n  8: 19,\r\n  9: 21,\r\n  10: 22,\r\n  11: 24,\r\n  12: 25,\r\n  13: 26,\r\n  14: 28,\r\n  15: 29,\r\n  16: 30,\r\n  17: 32,\r\n  18: 33,\r\n  19: 35,\r\n  20: 36,\r\n  21: 38,\r\n  22: 39,\r\n  23: 40,\r\n  24: 42,\r\n};\r\nconst moderateSaves: defaultValue = {\r\n  \"-1\": 5,\r\n  0: 6,\r\n  1: 7,\r\n  2: 8,\r\n  3: 9,\r\n  4: 11,\r\n  5: 12,\r\n  6: 14,\r\n  7: 15,\r\n  8: 16,\r\n  9: 18,\r\n  10: 19,\r\n  11: 21,\r\n  12: 22,\r\n  13: 23,\r\n  14: 25,\r\n  15: 26,\r\n  16: 28,\r\n  17: 29,\r\n  18: 30,\r\n  19: 32,\r\n  20: 33,\r\n  21: 35,\r\n  22: 36,\r\n  23: 37,\r\n  24: 38,\r\n};\r\nconst lowSaves: defaultValue = {\r\n  \"-1\": 2,\r\n  0: 3,\r\n  1: 4,\r\n  2: 5,\r\n  3: 6,\r\n  4: 8,\r\n  5: 9,\r\n  6: 11,\r\n  7: 12,\r\n  8: 13,\r\n  9: 15,\r\n  10: 16,\r\n  11: 18,\r\n  12: 19,\r\n  13: 20,\r\n  14: 22,\r\n  15: 23,\r\n  16: 25,\r\n  17: 26,\r\n  18: 27,\r\n  19: 29,\r\n  20: 30,\r\n  21: 32,\r\n  22: 33,\r\n  23: 34,\r\n  24: 36,\r\n};\r\nconst terribleSaves: defaultValue = {\r\n  \"-1\": 0,\r\n  0: 1,\r\n  1: 2,\r\n  2: 3,\r\n  3: 4,\r\n  4: 6,\r\n  5: 7,\r\n  6: 8,\r\n  7: 10,\r\n  8: 11,\r\n  9: 12,\r\n  10: 14,\r\n  11: 15,\r\n  12: 16,\r\n  13: 18,\r\n  14: 19,\r\n  15: 20,\r\n  16: 22,\r\n  17: 23,\r\n  18: 24,\r\n  19: 26,\r\n  20: 27,\r\n  21: 28,\r\n  22: 30,\r\n  23: 31,\r\n  24: 32,\r\n};\r\nexport const defaultSaves = {\r\n  [SaveTrends.EXTREME]: extremeSaves,\r\n  [SaveTrends.HIGH]: highSaves,\r\n  [SaveTrends.MODERATE]: moderateSaves,\r\n  [SaveTrends.LOW]: lowSaves,\r\n  [SaveTrends.TERRIBLE]: terribleSaves,\r\n};\r\nexport const standardDC: defaultValue = {\r\n  \"-1\": 12,\r\n  0: 14,\r\n  1: 15,\r\n  2: 16,\r\n  3: 18,\r\n  4: 19,\r\n  5: 20,\r\n  6: 22,\r\n  7: 23,\r\n  8: 24,\r\n  9: 26,\r\n  10: 27,\r\n  11: 28,\r\n  12: 30,\r\n  13: 31,\r\n  14: 32,\r\n  15: 34,\r\n  16: 35,\r\n  17: 36,\r\n  18: 38,\r\n  19: 39,\r\n  20: 40,\r\n  21: 42,\r\n  22: 44,\r\n  23: 46,\r\n  24: 48,\r\n  25: 50,\r\n} as const;\r\n","export const graphTypes = {\r\n  DISTRIBUTION: \"Damage Distribution\",\r\n  PMDEFENSE: \"+/- AC/Save Bonus\",\r\n  PMRES: \"+/- Resistance/Weakness\",\r\n} as const;\r\nexport type GraphType = typeof graphTypes[keyof typeof graphTypes];\r\n\r\nexport const importStates = {\r\n  Importing: \"Importing\",\r\n  Successful: \"Successful\",\r\n  Failure: \"Failure\",\r\n  MessageSeen: \"Message Seen\",\r\n} as const;\r\nexport type ImportStates = typeof importStates[keyof typeof importStates];\r\n\r\nexport const ACTrends = {\r\n  LOW: \"Low\",\r\n  MODERATE: \"Moderate\",\r\n  HIGH: \"High\",\r\n  EXTREME: \"Extreme\",\r\n} as const;\r\nexport type ACTrend = typeof ACTrends[keyof typeof ACTrends];\r\n\r\nexport const SaveTrends = {\r\n  TERRIBLE: \"Terrible\",\r\n  LOW: \"Low\",\r\n  MODERATE: \"Moderate\",\r\n  HIGH: \"High\",\r\n  EXTREME: \"Extreme\",\r\n} as const;\r\nexport type SaveTrend = typeof SaveTrends[keyof typeof SaveTrends];\r\n\r\nexport const conditions = {\r\n  ALWAYS: \"Always\",\r\n  CRIT: \"On Crit\",\r\n  SUCC: \"On Success\",\r\n  FAIL: \"On Failure\",\r\n  CRIF: \"On Crit Fail\",\r\n  AT_LEAST_SUCC: \"Success or better\",\r\n  AT_LEAST_FAIL: \"Failure or better\",\r\n  FAIL_WORSE: \"Failure or worse\",\r\n  SUCC_WORSE: \"Success or worse\",\r\n} as const;\r\nexport type Condition = typeof conditions[keyof typeof conditions];\r\n\r\nexport const rollTypes = {\r\n  NORMAL: \"Normal\",\r\n  ADVANTAGE: \"Advantage\",\r\n  DISADVANTAGE: \"Disadvantage\",\r\n} as const;\r\nexport type RollType = typeof rollTypes[keyof typeof rollTypes];\r\n\r\nexport const activityTypes = {\r\n  STRIKE: \"Strike\",\r\n  SAVE: \"Save\",\r\n  SKILL: \"Skill Check\",\r\n  SPELLATTACK: \"Spell Attack\",\r\n} as const;\r\nexport type ActivityType = typeof activityTypes[keyof typeof activityTypes];\r\n\r\nexport const profTrends = {\r\n  TRAINED: \"Trained Proficiency\",\r\n  FIGHTERWEAPON: \"Fighter Weapon (1, 5, 13)\",\r\n  MARTIALWEAPON: \"Martial Weapon (5, 13)\",\r\n  CASTERWEAPON: \"Caster Weapon (11)\",\r\n  ALCHWEAPON: \"Alchemist Weapon (7)\",\r\n  CASTERSPELL: \"Caster Spell (7, 15, 19)\",\r\n  CLASSDC1: \"Class/Spell (9, 17)\",\r\n  CLASSDC2: \"Class/Spell (11, 19)\",\r\n  MCSPELL: \"MC Spell (12, 18)\",\r\n  MAXSKILL: \"Max skill (3, 7, 15)\",\r\n} as const;\r\nexport type ProfTrend = typeof profTrends[keyof typeof profTrends];\r\n\r\nexport const statTrends = {\r\n  AS10: \"10\",\r\n  AS18a: \"18 to 24 apex(17)\",\r\n  AS16a: \"16 to 22 apex(17)\",\r\n  AS16pp: \"16 to 20\",\r\n  AS16p: \"16 to 18\",\r\n  AS14pp: \"14 to 20\",\r\n  AS14p: \"14 to 18\",\r\n} as const;\r\nexport type StatTrend = typeof statTrends[keyof typeof statTrends];\r\n\r\nexport const itemTrends = {\r\n  NONE: \"None\",\r\n  WEAPON: \"Weapon (2, 10, 16)\",\r\n  SKILL: \"Skill (3, 9, 17)\",\r\n} as const;\r\nexport type ItemTrend = typeof itemTrends[keyof typeof itemTrends];\r\n\r\nexport const MAPs = {\r\n  N1: \"0 (0x-5)\",\r\n  N2: \"-5 (1x-5)\",\r\n  N3: \"-10 (2x-5)\",\r\n  A1: \"0 (0x-4)\",\r\n  A2: \"-4 (1x-4)\",\r\n  A3: \"-8 (2x-4)\",\r\n  R1: \"0 (0x-3)\",\r\n  R2: \"-3 (1x-3)\",\r\n  R3: \"-6 (2x-3)\",\r\n  RA1: \"0 (0x-2)\",\r\n  RA2: \"-2 (1x-2)\",\r\n  RA3: \"-4 (2x-2)\",\r\n  RAA1: \"0 (0x-1)\",\r\n  RAA2: \"-1 (1x-1)\",\r\n  RAA3: \"-2 (2x-1)\",\r\n} as const;\r\nexport type MAP = typeof MAPs[keyof typeof MAPs];\r\n\r\nexport const nextMAPs = {\r\n  \"0 (0x-5)\": \"-5 (1x-5)\",\r\n  \"-5 (1x-5)\": \"-10 (2x-5)\",\r\n  \"-10 (2x-5)\": \"-10 (2x-5)\",\r\n  \"0 (0x-4)\": \"-4 (1x-4)\",\r\n  \"-4 (1x-4)\": \"-8 (2x-4)\",\r\n  \"-8 (2x-4)\": \"-8 (2x-4)\",\r\n  \"0 (0x-3)\": \"-3 (1x-3)\",\r\n  \"-3 (1x-3)\": \"-6 (2x-3)\",\r\n  \"-6 (2x-3)\": \"-6 (2x-3)\",\r\n  \"0 (0x-2)\": \"-2 (1x-2)\",\r\n  \"-2 (1x-2)\": \"-4 (2x-2)\",\r\n  \"-4 (2x-2)\": \"-4 (2x-2)\",\r\n  \"0 (0x-1)\": \"-1 (1x-1)\",\r\n  \"-1 (1x-1)\": \"-2 (2x-1)\",\r\n  \"-2 (2x-1)\": \"-2 (2x-1)\",\r\n} as const;\r\n\r\nexport const defenses = {\r\n  AC: \"AC\",\r\n  FORT: \"Fort\",\r\n  REF: \"Ref\",\r\n  WILL: \"Will\",\r\n  PER: \"Perception\",\r\n  selfDC: \"Self Standard DC\",\r\n  targetDC: \"Target Standard DC\",\r\n} as const;\r\nexport type Defense = typeof defenses[keyof typeof defenses];\r\n\r\nexport const dCond = {\r\n  STRIKE: \"x1 hit, x2 crit\",\r\n  BASIC: \"Basic save\",\r\n  ALWAYS: \"Always\",\r\n  CRIT: \"On Crit\",\r\n  SUCC: \"On Success\",\r\n  FAIL: \"On Failure\",\r\n  CRIF: \"On Crit Fail\",\r\n  AT_LEAST_SUCC: \"Success or better\",\r\n  AT_LEAST_FAIL: \"Failure or better\",\r\n  FAIL_WORSE: \"Failure or worse\",\r\n  SUCC_WORSE: \"Success or worse\",\r\n} as const;\r\nexport type DamageCond = typeof dCond[keyof typeof dCond];\r\n\r\nexport const dieTrends = {\r\n  NONE: \"None\",\r\n  WEAPON: \"Weapon (1, 4, 12, 19)\",\r\n  SPELLLEVEL1: \"1 x Spell Level\",\r\n  SPELLLEVEL2: \"2 x Spell Level\",\r\n  LEVEL: \"Level\",\r\n  HALFLEVEL: \"1/2 Level\",\r\n  RUNE: \"Runes (8, 15)\",\r\n  RUNE2: \"Runes (8, 10, 16)\",\r\n  DEADLY: \"Deadly (1, 12, 19)\",\r\n  SNEAK: \"Sneak Attack (1, 5, 11, 17)\",\r\n  STRATEGIC: \"Strategic Strike (1, 5, 9, 13, 17)\",\r\n  PRECISE: \"Precise Strike (1, 1, 5, 9, 13, 17)\",\r\n  PRECISIONEDGE: \"Precision Edge 1(1, 11, 19)\",\r\n  PRECISIONEDGE2: \"Precision Edge 2(17, 19)\",\r\n  PRECISIONEDGE3: \"Precision Edge 3(19)\",\r\n} as const;\r\nexport type DieTrend = typeof dieTrends[keyof typeof dieTrends];\r\n\r\nexport const damageTrends = {\r\n  NONE: \"None\",\r\n  FIGHTERWEAPONSPEC: \"Fighter Weapon Specialization\",\r\n  MARTIALWEAPONSPEC: \"Martial Weapon Specializaton\",\r\n  CASTERWEAPONSPEC: \"Caster Weapon Specializaton\",\r\n  ...statTrends,\r\n  WEAPON: \"Weapon (1, 4, 12, 19)\",\r\n  SPELLLEVEL1: \"1 x Spell Level\",\r\n  LEVEL: \"Level\",\r\n  HALFLEVEL: \"1/2 Level\",\r\n  RAGE: \"Rage\",\r\n  ANIMALRAGE: \"Animal Rage\",\r\n  DRAGONRAGE: \"Dragon Rage\",\r\n  GIANTRAGE: \"Giant Rage\",\r\n  SPIRITRAGE: \"Spirit Rage\",\r\n  PRECISE: \"Precise Strike (1, 1, 5, 9, 13, 17)\",\r\n  OVERDRIVES: \"Overdrive Success\",\r\n  OVERDRIVEC: \"Overdrive Critical\",\r\n  IMPLEMENT: \"Implement's Empowerment\",\r\n} as const;\r\nexport type DamageTrend = typeof damageTrends[keyof typeof damageTrends];\r\n\r\nexport const damageTypes = {\r\n  NONE: \"None\",\r\n  B: \"bludgeoning\",\r\n  P: \"piercing\",\r\n  S: \"slashing\",\r\n  FIRE: \"fire\",\r\n  PRECISION: \"precision\",\r\n} as const;\r\nexport type DamageType = typeof damageTypes[keyof typeof damageTypes];\r\n\r\nexport const materials = {\r\n  NONE: \"none\",\r\n  COLD_IRON: \"cold iron\",\r\n  SILVER: \"silver\",\r\n  ADAMANTINE: \"adamantine\",\r\n} as const;\r\nexport type Material = typeof materials[keyof typeof materials];\r\n\r\nexport const effectStateTypes = {\r\n  FLATFOOT: \"Flatfooted\",\r\n  PRONE: \"Prone\",\r\n  GRAPPLED: \"Grappled\",\r\n  RESTRAINED: \"Restrained\",\r\n} as const;\r\nexport type EffectStateType =\r\n  typeof effectStateTypes[keyof typeof effectStateTypes];\r\nexport const effectValueTypes = {\r\n  FRIGHTENED: \"Frightened\",\r\n  CLUMSY: \"Clumsy\",\r\n} as const;\r\nexport type EffectValueType =\r\n  typeof effectValueTypes[keyof typeof effectValueTypes];\r\nexport const effectTypes = {\r\n  ...effectStateTypes,\r\n  ...effectValueTypes,\r\n} as const;\r\nexport type EffectType = EffectStateType | EffectValueType;\r\n\r\nexport const whenConditions = {\r\n  Always: \"Always\",\r\n\r\n  ...effectStateTypes,\r\n  ...effectValueTypes,\r\n} as const;\r\nexport type WhenConditions = typeof whenConditions[keyof typeof whenConditions];\r\n\r\nexport type TargetState = {\r\n  [key in EffectValueType]: number;\r\n} & {\r\n  [key in EffectStateType]: boolean;\r\n};\r\n\r\nexport const diceNums = {\r\n  0: 0,\r\n  1: 1,\r\n  2: 2,\r\n  3: 3,\r\n  4: 4,\r\n  5: 5,\r\n  6: 6,\r\n  7: 7,\r\n  8: 8,\r\n  9: 9,\r\n  10: 10,\r\n  11: 11,\r\n  12: 12,\r\n  13: 13,\r\n  14: 14,\r\n  15: 15,\r\n  16: 16,\r\n  17: 17,\r\n  18: 18,\r\n  19: 19,\r\n  20: 20,\r\n} as const;\r\n\r\nexport const diceSizes = {\r\n  \"4\": 4,\r\n  \"6\": 6,\r\n  \"8\": 8,\r\n  \"10\": 10,\r\n  \"12\": 12,\r\n} as const;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport type { RootState, AppDispatch } from \"./store\";\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import {\r\n  createEntityAdapter,\r\n  createSlice,\r\n  EntityId,\r\n  PayloadAction,\r\n} from \"@reduxjs/toolkit\";\r\nimport { damageTypes, materials } from \"../Model/types\";\r\nimport { RootState } from \"../App/store\";\r\n\r\nexport interface Weakness {\r\n  id: number;\r\n  type:\r\n    | typeof damageTypes[keyof typeof damageTypes]\r\n    | typeof materials[keyof typeof materials];\r\n  value: number;\r\n}\r\nexport const weaknessAdapter = createEntityAdapter<Weakness>();\r\n\r\nlet weakness = 0;\r\n\r\nexport const weaknessesSlice = createSlice({\r\n  name: \"weaknesses\",\r\n  initialState: weaknessAdapter.getInitialState(),\r\n  reducers: {\r\n    weaknessAdded: weaknessAdapter.addOne,\r\n    weaknessUpdated: weaknessAdapter.updateOne,\r\n    weaknessCreated: {\r\n      reducer(state, action: PayloadAction<Weakness>) {\r\n        const { id, type, value } = action.payload;\r\n        weaknessAdapter.addOne(state, { id, type, value });\r\n      },\r\n      prepare({ parentId, type, value }) {\r\n        const id = ++weakness;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n            type,\r\n            value,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    weaknessRemoved(\r\n      state,\r\n      action: PayloadAction<{ parentId: EntityId; id: EntityId }>\r\n    ) {\r\n      weaknessAdapter.removeOne(state, action.payload.id);\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  weaknessRemoved,\r\n  weaknessCreated,\r\n  weaknessAdded,\r\n  weaknessUpdated,\r\n} = weaknessesSlice.actions;\r\n\r\nexport default weaknessesSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selectweaknessById,\r\n  selectIds: selectweaknessIds,\r\n  selectEntities: selectweaknessEntities,\r\n  selectAll: selectAllweaknesses,\r\n  selectTotal: selectTotalweaknesses,\r\n} = weaknessAdapter.getSelectors((state: RootState) => state.weaknesses);\r\n","import { MenuItem } from \"@mui/material\";\r\nimport React from \"react\";\r\n\r\nimport {\r\n  activityTypes,\r\n  profTrends,\r\n  conditions,\r\n  damageTrends,\r\n  damageTypes,\r\n  dCond,\r\n  defenses,\r\n  diceSizes,\r\n  dieTrends,\r\n  effectStateTypes,\r\n  effectValueTypes,\r\n  MAPs,\r\n  materials,\r\n  rollTypes,\r\n  statTrends,\r\n  itemTrends,\r\n  ACTrends,\r\n  SaveTrends,\r\n  graphTypes,\r\n} from \"./types\";\r\n\r\nexport const makeOptions = (options: object): JSX.Element[] => {\r\n  let element: keyof typeof options;\r\n  const optionElements: JSX.Element[] = [];\r\n  // @ts-ignore\r\n  for (element in options) {\r\n    optionElements.push(\r\n      <MenuItem key={element} value={options[element]}>\r\n        {options[element]}\r\n      </MenuItem>\r\n    );\r\n  }\r\n  return optionElements;\r\n};\r\n\r\nexport const arrayOptions = (options: string[]): JSX.Element[] => {\r\n  const optionElements: JSX.Element[] = [];\r\n  for (let element of options) {\r\n    optionElements.push(\r\n      <MenuItem key={element} value={element}>\r\n        {element}\r\n      </MenuItem>\r\n    );\r\n  }\r\n  return optionElements;\r\n};\r\n\r\nlet gt: keyof typeof graphTypes;\r\nexport const graphTypeOptions: JSX.Element[] = [];\r\nfor (gt in graphTypes) {\r\n  graphTypeOptions.push(<option key={gt}>{graphTypes[gt]}</option>);\r\n}\r\n\r\nexport const levelOptions: JSX.Element[] = [];\r\nfor (let level = 1; level <= 20; level++) {\r\n  levelOptions.push(\r\n    <MenuItem key={level} value={level}>\r\n      {level}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nlet c: keyof typeof conditions;\r\nexport const conditionOptions: JSX.Element[] = [];\r\nfor (c in conditions) {\r\n  conditionOptions.push(\r\n    <MenuItem key={c} value={conditions[c]}>\r\n      {conditions[c]}\r\n    </MenuItem>\r\n  );\r\n}\r\nlet rt: keyof typeof rollTypes;\r\nexport const rollOptions: JSX.Element[] = [];\r\nfor (rt in rollTypes) {\r\n  rollOptions.push(\r\n    <MenuItem key={rt} value={rollTypes[rt]}>\r\n      {rollTypes[rt]}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nlet at: keyof typeof activityTypes;\r\nexport const activityTypeOptions: JSX.Element[] = [];\r\nfor (at in activityTypes) {\r\n  activityTypeOptions.push(\r\n    <MenuItem key={at} value={activityTypes[at]}>\r\n      {activityTypes[at]}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nlet pt: keyof typeof profTrends;\r\nexport const profTrendOptions: JSX.Element[] = [];\r\nfor (pt in profTrends) {\r\n  profTrendOptions.push(\r\n    <MenuItem key={pt} value={profTrends[pt]}>\r\n      {profTrends[pt]}\r\n    </MenuItem>\r\n  );\r\n}\r\nlet st: keyof typeof statTrends;\r\nexport const statTrendOptions: JSX.Element[] = [];\r\nfor (st in statTrends) {\r\n  statTrendOptions.push(\r\n    <MenuItem key={st} value={statTrends[st]}>\r\n      {statTrends[st]}\r\n    </MenuItem>\r\n  );\r\n}\r\nlet it: keyof typeof itemTrends;\r\nexport const itemBTrendOptions: JSX.Element[] = [];\r\nfor (it in itemTrends) {\r\n  itemBTrendOptions.push(\r\n    <MenuItem key={it} value={itemTrends[it]}>\r\n      {itemTrends[it]}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nlet m: keyof typeof MAPs;\r\nexport const MAPOptions: JSX.Element[] = [];\r\nfor (m in MAPs) {\r\n  MAPOptions.push(\r\n    <MenuItem key={m} value={MAPs[m]}>\r\n      {MAPs[m]}\r\n    </MenuItem>\r\n  );\r\n}\r\nlet d: keyof typeof defenses;\r\nexport const defenseOptions: JSX.Element[] = [];\r\nfor (d in defenses) {\r\n  defenseOptions.push(\r\n    <MenuItem key={d} value={defenses[d]}>\r\n      {defenses[d]}\r\n    </MenuItem>\r\n  );\r\n}\r\nlet act: keyof typeof ACTrends;\r\nexport const ACOptions: JSX.Element[] = [];\r\nfor (act in ACTrends) {\r\n  ACOptions.push(\r\n    <MenuItem key={act} value={ACTrends[act]}>\r\n      {ACTrends[act]}\r\n    </MenuItem>\r\n  );\r\n}\r\nlet svt: keyof typeof SaveTrends;\r\nexport const SaveOptions: JSX.Element[] = [];\r\nfor (svt in SaveTrends) {\r\n  SaveOptions.push(\r\n    <MenuItem key={svt} value={SaveTrends[svt]}>\r\n      {SaveTrends[svt]}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nlet dc: keyof typeof dCond;\r\nexport const damageConditionOptions: JSX.Element[] = [];\r\nfor (dc in dCond) {\r\n  damageConditionOptions.push(\r\n    <MenuItem key={dc} value={dCond[dc]}>\r\n      {dCond[dc]}\r\n    </MenuItem>\r\n  );\r\n}\r\nlet dieT: keyof typeof dieTrends;\r\nexport const dieTrendOptions: JSX.Element[] = [];\r\nfor (dieT in dieTrends) {\r\n  dieTrendOptions.push(\r\n    <MenuItem key={dieT} value={dieTrends[dieT]}>\r\n      {dieTrends[dieT]}\r\n    </MenuItem>\r\n  );\r\n}\r\nlet ds: keyof typeof diceSizes;\r\nexport const diceSizeOptions: JSX.Element[] = [];\r\nfor (ds in diceSizes) {\r\n  diceSizeOptions.push(\r\n    <MenuItem key={ds} value={ds}>\r\n      {\"d\" + ds}\r\n    </MenuItem>\r\n  );\r\n}\r\nlet damT: keyof typeof damageTrends;\r\nexport const damageTrendOptions: JSX.Element[] = [];\r\nfor (damT in damageTrends) {\r\n  damageTrendOptions.push(\r\n    <MenuItem key={damT} value={damageTrends[damT]}>\r\n      {damageTrends[damT]}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nlet dt: keyof typeof damageTypes;\r\nexport const damageTypeOptions: JSX.Element[] = [];\r\nfor (dt in damageTypes) {\r\n  damageTypeOptions.push(\r\n    <MenuItem key={dt} value={damageTypes[dt]}>\r\n      {damageTypes[dt]}\r\n    </MenuItem>\r\n  );\r\n}\r\nlet mat: keyof typeof materials;\r\nexport const materialOptions: JSX.Element[] = [];\r\nfor (mat in materials) {\r\n  materialOptions.push(\r\n    <MenuItem key={mat} value={materials[mat]}>\r\n      {materials[mat]}\r\n    </MenuItem>\r\n  );\r\n}\r\nexport const weaknessOptions: JSX.Element[] = [];\r\nfor (dt in damageTypes) {\r\n  weaknessOptions.push(\r\n    <MenuItem key={dt} value={damageTypes[dt]}>\r\n      {damageTypes[dt]}\r\n    </MenuItem>\r\n  );\r\n}\r\nfor (mat in materials) {\r\n  if (materials[mat] === materials.NONE) continue;\r\n  weaknessOptions.push(\r\n    <MenuItem key={mat} value={materials[mat]}>\r\n      {materials[mat]}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nexport const multiplierOptions: JSX.Element[] = [];\r\nfor (let m of [0.5, 1, 2]) {\r\n  multiplierOptions.push(\r\n    <MenuItem key={m} value={m}>\r\n      {m}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nexport const effectTypeOptions: JSX.Element[] = [];\r\nlet est: keyof typeof effectStateTypes;\r\nfor (est in effectStateTypes) {\r\n  effectTypeOptions.push(\r\n    <MenuItem key={est} value={effectStateTypes[est]}>\r\n      {effectStateTypes[est]}\r\n    </MenuItem>\r\n  );\r\n}\r\nlet evt: keyof typeof effectValueTypes;\r\nfor (evt in effectValueTypes) {\r\n  effectTypeOptions.push(\r\n    <MenuItem key={evt} value={effectValueTypes[evt]}>\r\n      {effectValueTypes[evt]}\r\n    </MenuItem>\r\n  );\r\n}\r\n","import {\r\n  createEntityAdapter,\r\n  createSlice,\r\n  EntityId,\r\n  EntityState,\r\n} from \"@reduxjs/toolkit\";\r\nimport { ACTrends, GraphType, SaveTrends } from \"../Model/types\";\r\nimport type { RootState } from \"../App/store\";\r\n// import { defaultACs, defaultSaves } from \"../defaults\";\r\n// import { defenses } from \"../types\";\r\nimport { weaknessCreated, weaknessRemoved } from \"./weaknessSlice\";\r\nimport { defaultACs, defaultSaves } from \"../Model/defaults\";\r\n\r\n// interface limited<Type> { typeof Type[keyof typeof Type] }\r\n// Define a type for the slice state\r\n// interface TargetState {  }\r\nconst id = 0;\r\nexport interface Target {\r\n  id: EntityId;\r\n  name: string;\r\n  levelDiff: number;\r\n  persistentMultiplier: number;\r\n  ACTrend: typeof ACTrends[keyof typeof ACTrends];\r\n  FortTrend: typeof SaveTrends[keyof typeof SaveTrends];\r\n  RefTrend: typeof SaveTrends[keyof typeof SaveTrends];\r\n  WillTrend: typeof SaveTrends[keyof typeof SaveTrends];\r\n  PerTrend: typeof SaveTrends[keyof typeof SaveTrends];\r\n  flatfooted: boolean;\r\n  percentSelectedRoutine: boolean;\r\n  weaknesses: number[];\r\n\r\n  graphType: GraphType;\r\n  routineLevel: number;\r\n  targetLevel: number;\r\n  overrideAC: number;\r\n  overrideFort: number;\r\n  overrideRef: number;\r\n  overrideWill: number;\r\n  overridePer: number;\r\n}\r\n\r\nexport const targetAdapter = createEntityAdapter<Target>();\r\n\r\nexport const targetsSlice = createSlice({\r\n  name: \"targets\",\r\n  initialState: targetAdapter.getInitialState(),\r\n  reducers: {\r\n    targetAdded: targetAdapter.addOne,\r\n    targetUpdated: (state, action) => {\r\n      targetAdapter.updateOne(state, action.payload);\r\n      if (\"targetLevel\" in action.payload.changes) {\r\n        updateTargetLevel(state, action.payload.changes.targetLevel);\r\n      }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(weaknessCreated, (state, action) => {\r\n        const { parentId: id, id: weaknessId } = action.payload;\r\n        state.entities[id]!.weaknesses.push(weaknessId);\r\n        // targetAdded.updateOne(state, { id, changes: { weaknesses: [...weaknesses, weaknessId] }});\r\n      })\r\n      .addCase(weaknessRemoved, (state, action) => {\r\n        const { parentId: id, id: weaknessId } = action.payload;\r\n        state.entities[id]!.weaknesses = state.entities[id]!.weaknesses.filter(\r\n          (wid) => wid !== weaknessId\r\n        );\r\n      });\r\n  },\r\n});\r\n\r\nexport const { targetAdded, targetUpdated } = targetsSlice.actions;\r\n\r\nexport default targetsSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selecttargetById,\r\n  selectIds: selecttargetIds,\r\n  selectEntities: selecttargetEntities,\r\n  selectAll: selectAlltargets,\r\n  selectTotal: selectTotaltargets,\r\n} = targetAdapter.getSelectors((state: RootState) => state.targets);\r\n\r\nconst updateTargetLevel = (state: EntityState<Target>, targetLevel: number) => {\r\n  state.entities[id]!.overrideAC =\r\n    defaultACs[state.entities[id]!.ACTrend][targetLevel];\r\n  state.entities[id]!.overrideFort =\r\n    defaultSaves[state.entities[id]!.FortTrend][targetLevel];\r\n  state.entities[id]!.overrideRef =\r\n    defaultSaves[state.entities[id]!.RefTrend][targetLevel];\r\n  state.entities[id]!.overrideWill =\r\n    defaultSaves[state.entities[id]!.WillTrend][targetLevel];\r\n  state.entities[id]!.overridePer =\r\n    defaultSaves[state.entities[id]!.PerTrend][targetLevel];\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../App/hooks\";\r\nimport { selecttargetById, targetUpdated } from \"./targetSlice\";\r\nimport { RootState } from \"../App/store\";\r\nimport { ACOptions, SaveOptions } from \"../Model/options\";\r\nimport {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  Grid,\r\n  TextField,\r\n  Slider,\r\n  Typography,\r\n} from \"@mui/material\";\r\n\r\nfunction ByLevelInput() {\r\n  const id = 0;\r\n  const {\r\n    name,\r\n    levelDiff,\r\n    ACTrend,\r\n    FortTrend,\r\n    RefTrend,\r\n    WillTrend,\r\n    PerTrend,\r\n    // weaknesses,\r\n  } = useAppSelector((state: RootState) => selecttargetById(state, id)!);\r\n\r\n  const [tempName, setTempName] = useState(name);\r\n\r\n  // const [tempLevelDiff, setTempLevelDiff] = useState(levelDiff.toString());\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    // <Paper sx={{ my: 1, p: 1 }}>\r\n    <Grid container spacing={{ xs: 1, sm: 2 }} sx={{ my: 0, py: 1 }}>\r\n      <Grid item xs={12} sm={6} md={12} lg={6}>\r\n        <TextField\r\n          fullWidth\r\n          label=\"Graph Name\"\r\n          placeholder=\"Enter the name that will display on the graph\"\r\n          value={tempName}\r\n          onChange={(e) => {\r\n            setTempName(e.target.value);\r\n          }}\r\n          onBlur={() =>\r\n            dispatch(targetUpdated({ id, changes: { name: tempName } }))\r\n          }\r\n        />\r\n      </Grid>\r\n      <Grid item xs={6} sm={3} md={6} lg={3}>\r\n        <Typography>Level Diff: {levelDiff}</Typography>\r\n        <Slider\r\n          // aria-label=\"Always visible\"\r\n          value={levelDiff}\r\n          // getAriaValueText={(v) => `${v}`}\r\n          // valueLabelDisplay=\"on\"\r\n          step={1}\r\n          min={-5}\r\n          max={5}\r\n          marks\r\n          onChange={(e, nv) => {\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: {\r\n                  levelDiff: nv,\r\n                },\r\n              })\r\n            );\r\n          }}\r\n        />\r\n      </Grid>\r\n\r\n      <Grid item xs={6} sm={3} md={6} lg={3}>\r\n        <FormControl fullWidth>\r\n          <InputLabel id=\"AC-input\">AC</InputLabel>\r\n          <Select\r\n            labelId=\"AC-input\"\r\n            id=\"AC\"\r\n            value={ACTrend}\r\n            label=\"AC\"\r\n            onChange={(e) =>\r\n              dispatch(\r\n                targetUpdated({ id, changes: { ACTrend: e.target.value } })\r\n              )\r\n            }\r\n          >\r\n            {ACOptions}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item xs={3} sm={3} md={3} lg={3}>\r\n        <FormControl fullWidth>\r\n          <InputLabel id=\"Fort-input\">Fort</InputLabel>\r\n          <Select\r\n            labelId=\"Fort-input\"\r\n            id=\"Fort\"\r\n            value={FortTrend}\r\n            label=\"Fort\"\r\n            onChange={(e) =>\r\n              dispatch(\r\n                targetUpdated({ id, changes: { FortTrend: e.target.value } })\r\n              )\r\n            }\r\n          >\r\n            {SaveOptions}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item xs={3} sm={3} md={3} lg={3}>\r\n        <FormControl fullWidth>\r\n          <InputLabel id=\"Ref-input\">Reflex</InputLabel>\r\n          <Select\r\n            labelId=\"Ref-input\"\r\n            id=\"Ref\"\r\n            value={RefTrend}\r\n            label=\"Reflex\"\r\n            onChange={(e) =>\r\n              dispatch(\r\n                targetUpdated({ id, changes: { RefTrend: e.target.value } })\r\n              )\r\n            }\r\n          >\r\n            {SaveOptions}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item xs={3} sm={3} md={3} lg={3}>\r\n        <FormControl fullWidth>\r\n          <InputLabel id=\"Will-input\">Will</InputLabel>\r\n          <Select\r\n            labelId=\"Will-input\"\r\n            id=\"Will\"\r\n            value={WillTrend}\r\n            label=\"Will\"\r\n            onChange={(e) =>\r\n              dispatch(\r\n                targetUpdated({ id, changes: { WillTrend: e.target.value } })\r\n              )\r\n            }\r\n          >\r\n            {SaveOptions}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item xs={3} sm={3} md={3} lg={3}>\r\n        <FormControl fullWidth>\r\n          <InputLabel id=\"Per-input\">Perception</InputLabel>\r\n          <Select\r\n            labelId=\"Per-input\"\r\n            id=\"Per\"\r\n            value={PerTrend}\r\n            label=\"Perception\"\r\n            onChange={(e) =>\r\n              dispatch(\r\n                targetUpdated({ id, changes: { PerTrend: e.target.value } })\r\n              )\r\n            }\r\n          >\r\n            {SaveOptions}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n\r\n      {/* \r\n        <div className=\"box flexbox\">\r\n          {\" Resistance/Weakness: \"}\r\n          {weaknesses.map((weaknessId) => (\r\n            <WeaknessInput parentId={id} id={weaknessId} key={weaknessId} />\r\n          ))}\r\n          <AddWeakness parentId={id} />\r\n        </div> */}\r\n    </Grid>\r\n    // </Paper>\r\n  );\r\n}\r\n\r\n// const TargetInfo = ({ id }) => {\r\n//   const { overrideDefault, type, value, weaknesses } = useSelector((state) =>\r\n//     selecttargetInfoById(state, id)\r\n//   );\r\n//   const dispatch = useDispatch();\r\n\r\n//   const defenseOptions = [];\r\n//   for (let d in defenses) {\r\n//     defenseOptions.push(<option key={d}>{defenses[d]}</option>);\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"box\">\r\n//       {\"Override Target: \"}\r\n//       <input\r\n//         type=\"checkbox\"\r\n//         checked={overrideDefault}\r\n//         onChange={(e) =>\r\n//           dispatch(\r\n//             targetInfoUpdated({\r\n//               id,\r\n//               changes: { overrideDefault: e.target.checked },\r\n//             })\r\n//           )\r\n//         }\r\n//       />\r\n\r\n// {/* <Weaknesses parentId={id} weaknessIds={weaknesses} /> */}\r\n\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const Weaknesses = ({ parentId, weaknessIds }) => {\r\n//   return (\r\n//     <span>\r\n//       {weaknessIds.map((weaknessId) => (\r\n//         <Weakness id={weaknessId} key={weaknessId} />\r\n//       ))}\r\n//       <AddWeakness id={parentId} />\r\n//     </span>\r\n//   );\r\n// };\r\n\r\n// const WeaknessInput = ({\r\n//   id,\r\n//   parentId,\r\n// }: {\r\n//   id: EntityId;\r\n//   parentId: EntityId;\r\n// }) => {\r\n//   // needs to have parent id to remove weakness\r\n//   const { type, value } = useSelector((state: RootState) =>\r\n//     selectweaknessById(state, id)\r\n//   ) as Weakness;\r\n//   const dispatch = useDispatch();\r\n\r\n//   const updateOrRemoveWeakness = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n//     if (e?.target?.value === damageTypes.NONE) {\r\n//       // remove this weakness\r\n//       dispatch(weaknessRemoved({ id, parentId }));\r\n//     } else {\r\n//       dispatch(\r\n//         weaknessUpdated({\r\n//           id,\r\n//           changes: { type: e.target.value as Weakness[\"type\"] },\r\n//         })\r\n//       );\r\n//     }\r\n//   };\r\n//   const updateWeaknessValue = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n//     if (!isNaN(parseInt(e.target.value))) {\r\n//       dispatch(\r\n//         weaknessUpdated({ id, changes: { value: parseInt(e.target.value) } })\r\n//       );\r\n//     }\r\n//   };\r\n//   return (\r\n//     <span className=\"input\">\r\n//       <WeaknessSelect value={type} onChange={updateOrRemoveWeakness} />\r\n//       <input type=\"number\" value={value} onChange={updateWeaknessValue} />\r\n//     </span>\r\n//   );\r\n// };\r\n\r\n// let weaknessId = 0;\r\n\r\n// const AddWeakness = ({ parentId }: { parentId: EntityId }) => {\r\n//   const dispatch = useDispatch();\r\n//   let [weaknessValue, setWeaknessValue] = useState(0);\r\n\r\n//   // add a Weakness to TargetInfo id\r\n//   const addWeakness = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n//     if (e.target.value !== damageTypes.NONE) {\r\n//       // need to create a new weakness\r\n//       weaknessId++;\r\n//       dispatch(\r\n//         weaknessCreated({\r\n//           id: weaknessId,\r\n//           type: e.target.value,\r\n//           value: weaknessValue,\r\n//           parentId: parentId,\r\n//         })\r\n//       );\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <span className=\"input\">\r\n//       <WeaknessSelect value={damageTypes.NONE} onChange={addWeakness} />\r\n//       <input\r\n//         type=\"number\"\r\n//         value={weaknessValue}\r\n//         onChange={(e) => setWeaknessValue(parseInt(e.target.value))}\r\n//       />\r\n//     </span>\r\n//   );\r\n// };\r\n\r\n// const WeaknessSelect = ({\r\n//   value,\r\n//   onChange,\r\n// }: {\r\n//   value: Weakness[\"type\"];\r\n//   onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\r\n// }) => {\r\n//   return (\r\n//     <span>\r\n//       <select value={value} onChange={(e) => onChange(e)}>\r\n//         {weaknessOptions}\r\n//       </select>\r\n//     </span>\r\n//   );\r\n// };\r\n\r\nexport { ByLevelInput };\r\n","import { statTrendValues } from \"./defaults\";\r\nimport {\r\n  DamageTrend,\r\n  damageTrends,\r\n  damageTypes,\r\n  diceSizes,\r\n  DieTrend,\r\n  dieTrends,\r\n  MAPs,\r\n  profTrends,\r\n  StatTrend,\r\n  whenConditions,\r\n} from \"./types\";\r\n\r\nexport type StrikeInfo = {\r\n  runes: DieTrend;\r\n  cClass: string;\r\n  classOption: string;\r\n  activity: string;\r\n  cantrip: string;\r\n  attackScore: StatTrend;\r\n  damageScore: StatTrend;\r\n  cantripScore: StatTrend;\r\n  dieSize: number;\r\n  numStrikes: number;\r\n  traits: {\r\n    [k: string]: boolean;\r\n  };\r\n  deadlySize: number;\r\n  fatalSize: number;\r\n  critSpec: boolean;\r\n  critSpecLevel: number;\r\n  critSpecType: string;\r\n};\r\n\r\nexport const activityTypes = {\r\n  Strike: \"Strike\",\r\n  Skill: \"Skill Action\",\r\n  Cantrip: \"Cantrip\",\r\n  Spell: \"Spell\",\r\n} as const;\r\n// const activityOptions: JSX.Element[] = [];\r\n// let actType: keyof typeof activityTypes;\r\n// for (actType in activityTypes) {\r\n//   activityOptions.push(\r\n//     <MenuItem key={actType} value={activityTypes[actType]}>\r\n//       {activityTypes[actType]}\r\n//     </MenuItem>\r\n//   );\r\n// }\r\n// export const classes = {\r\n//   Alchemist: \"Alchemist\",\r\n//   Barbarian: \"Barbarian\",\r\n//   Bard: \"Bard\",\r\n//   Champion: \"Champion\",\r\n//   Cleric: \"Cleric\",\r\n//   Druid: \"Druid\",\r\n//   Fighter: \"Fighter\",\r\n//   Gunslinger: \"Gunslinger\",\r\n//   Inventor: \"Inventor\",\r\n//   Investigator: \"Investigator\",\r\n//   Magus: \"Magus\",\r\n//   Monk: \"Monk\",\r\n//   Oracle: \"Oracle\",\r\n//   Ranger: \"Ranger\",\r\n//   Rogue: \"Rogue\",\r\n//   Sorcerer: \"Sorcerer\",\r\n//   Summoner: \"Summoner\",\r\n//   Swashbuckler: \"Swashbuckler\",\r\n//   Witch: \"Witch\",\r\n//   Wizard: \"Wizard\",\r\n// } as const;\r\nexport const runeTrends = [dieTrends.NONE, dieTrends.RUNE, dieTrends.RUNE2];\r\nexport const classes = [\r\n  \"Alchemist\",\r\n  \"Barbarian\",\r\n  \"Bard\",\r\n  \"Champion\",\r\n  \"Cleric\",\r\n  \"Druid\",\r\n  \"Fighter\",\r\n  \"Gunslinger\",\r\n  \"Inventor\",\r\n  \"Investigator\",\r\n  \"Magus\",\r\n  \"Monk\",\r\n  \"Oracle\",\r\n  \"Ranger\",\r\n  \"Rogue\",\r\n  \"Sorcerer\",\r\n  \"Summoner\",\r\n  \"Swashbuckler\",\r\n  \"Witch\",\r\n  \"Wizard\",\r\n] as const;\r\n\r\n// const classOptions: JSX.Element[] = [];\r\n// let cls: keyof typeof classes;\r\n// for (cls in classes) {\r\n//   classOptions.push(\r\n//     <MenuItem key={cls} value={classes[cls]}>\r\n//       {classes[cls]}\r\n//     </MenuItem>\r\n//   );\r\n// }\r\nconst noOptions = [] as const;\r\nconst barbarianOptions = [\r\n  \"Normal\",\r\n  \"animal rage\",\r\n  \"dragon rage\",\r\n  \"rage\",\r\n  \"giant rage\",\r\n  \"spirit rage\",\r\n] as const;\r\nconst clericOptions = [\"Cloistered\", \"Warpriest\"] as const;\r\nconst rangerOptions = [\"Flurry Edge\"] as const;\r\nconst inventorOptions = [\r\n  \"Normal\",\r\n  \"Overdrive Success\",\r\n  \"Overdrive Critical\",\r\n] as const;\r\nconst investigatorOptions = [\"Normal\", \"Strategic Strike\"] as const;\r\nconst rogueOptions = [\"Normal\", \"Sneak Attack\"] as const;\r\nconst swashbucklerOptions = [\r\n  \"Normal\",\r\n  \"Precise Strike\",\r\n  \"Precise Finisher\",\r\n] as const;\r\nexport const cantrips = [\"Telekinetic Projectile\"] as const;\r\n\r\nexport const strikeActivities = [\"Strike\", \"Power Attack\"] as const;\r\ntype ClassOptions = { [key in typeof classes[number]]: readonly string[] };\r\nexport const classOptions: ClassOptions = {\r\n  Alchemist: noOptions,\r\n  Barbarian: barbarianOptions,\r\n  Bard: noOptions,\r\n  Champion: noOptions,\r\n  Cleric: clericOptions,\r\n  Druid: noOptions,\r\n  Fighter: noOptions,\r\n  Gunslinger: noOptions,\r\n  Inventor: inventorOptions,\r\n  Investigator: investigatorOptions,\r\n  Magus: noOptions,\r\n  Monk: noOptions,\r\n  Oracle: noOptions,\r\n  Ranger: rangerOptions,\r\n  Rogue: rogueOptions,\r\n  Sorcerer: noOptions,\r\n  Summoner: noOptions,\r\n  Swashbuckler: swashbucklerOptions,\r\n  Witch: noOptions,\r\n  Wizard: noOptions,\r\n} as const;\r\n\r\nexport const weaponTraits = [\r\n  \"agile\",\r\n  \"deadly\",\r\n  \"fatal\",\r\n  \"forceful\",\r\n  \"ranged\",\r\n  \"propulsive\",\r\n] as const;\r\n\r\nexport const critSpecs = [\r\n  \"Sword\",\r\n  \"Hammer\",\r\n  \"Spear\",\r\n  \"Other\",\r\n  \"Pick\",\r\n  \"Knife\",\r\n] as const;\r\n\r\nexport const classWeaponProf = (className: string, classOption: string) => {\r\n  if ([\"Fighter\", \"Gunslinger\"].includes(className))\r\n    return profTrends.FIGHTERWEAPON;\r\n  if (\r\n    [\r\n      \"Bard\",\r\n      \"Druid\",\r\n      \"Oracle\",\r\n      \"Sorcerer\",\r\n      \"Summoner\",\r\n      \"Witch\",\r\n      \"Wizard\",\r\n    ].includes(className)\r\n  )\r\n    return profTrends.CASTERWEAPON;\r\n  if ([\"Alchemist\"].includes(className)) return profTrends.ALCHWEAPON;\r\n  if (className === \"Cleric\") {\r\n    if (classOption === \"Warpriest\") return profTrends.ALCHWEAPON;\r\n    return profTrends.CASTERWEAPON;\r\n  }\r\n  return profTrends.MARTIALWEAPON;\r\n};\r\n\r\nexport const classWeaponMAP = (strikeInfo: StrikeInfo) => {\r\n  if (\r\n    strikeInfo.cClass === \"Ranger\" &&\r\n    strikeInfo.classOption === \"Flurry Edge\"\r\n  ) {\r\n    if (strikeInfo.traits[\"agile\"]) return MAPs.RA1;\r\n    else return MAPs.R1;\r\n  } else {\r\n    if (strikeInfo.traits[\"agile\"]) return MAPs.A1;\r\n    else return MAPs.N1;\r\n  }\r\n};\r\n\r\nexport const classAdjustments = (\r\n  strikeInfo: StrikeInfo,\r\n  strikeNumber: number\r\n) => {\r\n  const adjustments: { [key: number]: number } = {};\r\n  let currentValue = 0;\r\n  for (let i = 1; i <= 20; i++) {\r\n    if (strikeInfo.cClass === \"Ranger (Flurry)\" && i === 17)\r\n      currentValue = Math.min(strikeNumber, 2);\r\n    adjustments[i] = currentValue;\r\n  }\r\n  return adjustments;\r\n};\r\n\r\nexport const activityWeaponDiceAdjustments = (strikeInfo: StrikeInfo) => {\r\n  const adjustments: { [key: number]: number } = {};\r\n  let currentValue = 0;\r\n  for (let i = 1; i <= 20; i++) {\r\n    if (strikeInfo.activity === \"Power Attack\" && i === 1) currentValue = 1;\r\n    if (strikeInfo.activity === \"Power Attack\" && i === 10) currentValue = 2;\r\n    if (strikeInfo.activity === \"Power Attack\" && i === 18) currentValue = 3;\r\n    adjustments[i] = currentValue;\r\n  }\r\n  return adjustments;\r\n};\r\n\r\nexport const hasClassDamageDice = (strikeInfo: StrikeInfo) => {\r\n  if (\r\n    strikeInfo.cClass === \"Rogue\" &&\r\n    strikeInfo.classOption === \"Sneak Attack\"\r\n  ) {\r\n    return true;\r\n  }\r\n  if (\r\n    strikeInfo.cClass === \"Investigator\" &&\r\n    strikeInfo.classOption === \"Strategic Strike\"\r\n  ) {\r\n    return true;\r\n  }\r\n  if (\r\n    strikeInfo.cClass === \"Swashbuckler\" &&\r\n    strikeInfo.classOption === \"Precise Finisher\"\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const classDamageDice = (strikeInfo: StrikeInfo) => {\r\n  if (\r\n    strikeInfo.cClass === \"Rogue\" &&\r\n    strikeInfo.classOption === \"Sneak Attack\"\r\n  ) {\r\n    return {\r\n      dieTrend: dieTrends.SNEAK,\r\n      diceSize: diceSizes[6],\r\n      damageType: damageTypes.PRECISION,\r\n      damageWhen: [whenConditions.FLATFOOT],\r\n    };\r\n  }\r\n  if (\r\n    strikeInfo.cClass === \"Investigator\" &&\r\n    strikeInfo.classOption === \"Strategic Strike\"\r\n  ) {\r\n    return {\r\n      dieTrend: dieTrends.STRATEGIC,\r\n      diceSize: diceSizes[6],\r\n      damageType: damageTypes.PRECISION,\r\n      damageWhen: [whenConditions.Always],\r\n    };\r\n  }\r\n  if (\r\n    strikeInfo.cClass === \"Swashbuckler\" &&\r\n    strikeInfo.classOption === \"Precise Finisher\"\r\n  ) {\r\n    return {\r\n      dieTrend: dieTrends.PRECISE,\r\n      diceSize: diceSizes[6],\r\n      damageType: damageTypes.PRECISION,\r\n      damageWhen: [whenConditions.Always],\r\n    };\r\n  }\r\n  return {\r\n    dieTrend: dieTrends.NONE,\r\n    diceSize: diceSizes[6],\r\n    damageType: damageTypes.PRECISION,\r\n    damageWhen: [whenConditions.Always],\r\n  };\r\n};\r\n\r\nexport const classWeaponDamageTrends = (\r\n  strikeInfo: StrikeInfo,\r\n  strikeNumber: number\r\n) => {\r\n  const trends: DamageTrend[] = [];\r\n\r\n  if (!strikeInfo.traits[\"propulsive\"] && !strikeInfo.traits[\"ranged\"]) {\r\n    trends.push(strikeInfo.damageScore);\r\n  }\r\n\r\n  if ([\"Fighter\", \"Gunslinger\"].includes(strikeInfo.cClass)) {\r\n    trends.push(damageTrends.FIGHTERWEAPONSPEC);\r\n  } else if (\r\n    [\r\n      \"Bard\",\r\n      \"Cleric\",\r\n      \"Druid\",\r\n      \"Oracle\",\r\n      \"Sorcerer\",\r\n      \"Summoner\",\r\n      \"Witch\",\r\n      \"Wizard\",\r\n    ].includes(strikeInfo.cClass)\r\n  ) {\r\n    trends.push(damageTrends.CASTERWEAPONSPEC);\r\n  } else if ([\"Alchemist\"].includes(strikeInfo.cClass)) {\r\n    trends.push(damageTrends.CASTERWEAPONSPEC);\r\n  } else {\r\n    trends.push(damageTrends.MARTIALWEAPONSPEC);\r\n  }\r\n\r\n  if (strikeInfo.traits[\"forceful\"]) {\r\n    if (strikeNumber === 1) {\r\n      trends.push(damageTrends.WEAPON);\r\n    } else if (strikeNumber >= 2) {\r\n      trends.push(damageTrends.WEAPON);\r\n      trends.push(damageTrends.WEAPON);\r\n    }\r\n  }\r\n\r\n  if (strikeInfo.cClass === \"Barbarian\") {\r\n    switch (strikeInfo.classOption) {\r\n      case \"animal rage\":\r\n        trends.push(damageTrends.ANIMALRAGE);\r\n        break;\r\n      case \"dragon rage\":\r\n        trends.push(damageTrends.DRAGONRAGE);\r\n        break;\r\n      case \"rage\":\r\n        trends.push(damageTrends.RAGE);\r\n        break;\r\n      case \"giant rage\":\r\n        trends.push(damageTrends.GIANTRAGE);\r\n        break;\r\n      case \"spirit rage\":\r\n        trends.push(damageTrends.SPIRITRAGE);\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n\r\n  if (\r\n    strikeInfo.cClass === \"Swashbuckler\" &&\r\n    strikeInfo.classOption === \"Precise Strike\"\r\n  ) {\r\n    trends.push(damageTrends.PRECISE);\r\n  }\r\n  // if (strikeInfo.cClass === \"Inventor\") {\r\n  //   switch (strikeInfo.classOption) {\r\n  //     case \"Overdrive Success\":\r\n  //       trends.push(damageTrends.OVERDRIVES);\r\n  //       break;\r\n  //     case \"Overdrive Critical\":\r\n  //       trends.push(damageTrends.OVERDRIVEC);\r\n  //       break;\r\n  //     default:\r\n  //   }\r\n  // }\r\n\r\n  return trends;\r\n};\r\n\r\nexport const classDamageAdjustments = (strikeInfo: StrikeInfo) => {\r\n  const adjustments: { [key: number]: number } = {};\r\n  let currentValue = 0;\r\n  for (let i = 1; i <= 20; i++) {\r\n    currentValue = 0;\r\n\r\n    if (strikeInfo.traits[\"propulsive\"]) {\r\n      currentValue += Math.floor(\r\n        statTrendValues[strikeInfo.damageScore][i] / 2\r\n      );\r\n    }\r\n\r\n    if (strikeInfo.cClass === \"Gunslinger\") currentValue += 1;\r\n\r\n    if (strikeInfo.cClass === \"Inventor\") {\r\n      let bonus = 0;\r\n      if (i >= 3) bonus = 1;\r\n      if (i >= 7) bonus = 2;\r\n      if (i >= 15) bonus = 3;\r\n      switch (strikeInfo.classOption) {\r\n        case \"Overdrive Success\":\r\n          currentValue +=\r\n            Math.floor(statTrendValues[strikeInfo.cantripScore][i] / 2) + bonus;\r\n          break;\r\n        case \"Overdrive Critical\":\r\n          currentValue += statTrendValues[strikeInfo.cantripScore][i] + bonus;\r\n          break;\r\n        default:\r\n      }\r\n    }\r\n\r\n    adjustments[i] = currentValue;\r\n  }\r\n  return adjustments;\r\n};\r\n\r\nexport const hasDeadly = (strikeInfo: StrikeInfo) => {\r\n  return strikeInfo.traits[\"deadly\"];\r\n};\r\nexport const hasFatal = (strikeInfo: StrikeInfo) => {\r\n  return strikeInfo.traits[\"fatal\"];\r\n};\r\nexport const hasPickCritSpec = (strikeInfo: StrikeInfo) => {\r\n  return strikeInfo.critSpec && strikeInfo.critSpecType === \"Pick\";\r\n};\r\nexport const hasKnifeCritSpec = (strikeInfo: StrikeInfo) => {\r\n  return strikeInfo.critSpec && strikeInfo.critSpecType === \"Knife\";\r\n};\r\nexport const hasCritSpecEffect = (strikeInfo: StrikeInfo) => {\r\n  return (\r\n    hasSwordCritSpec(strikeInfo) ||\r\n    hasHammerCritSpec(strikeInfo) ||\r\n    hasSpearCritSpec(strikeInfo)\r\n  );\r\n};\r\nexport const hasSwordCritSpec = (strikeInfo: StrikeInfo) => {\r\n  return strikeInfo.critSpec && strikeInfo.critSpecType === \"Sword\";\r\n};\r\nexport const hasHammerCritSpec = (strikeInfo: StrikeInfo) => {\r\n  return strikeInfo.critSpec && strikeInfo.critSpecType === \"Hammer\";\r\n};\r\nexport const hasSpearCritSpec = (strikeInfo: StrikeInfo) => {\r\n  return strikeInfo.critSpec && strikeInfo.critSpecType === \"Hammer\";\r\n};\r\nexport const critSpecDice = (strikeInfo: StrikeInfo) => {\r\n  const adjustments: { [key: number]: number } = {};\r\n  let currentValue = 0;\r\n  for (let i = 1; i <= 20; i++) {\r\n    if (i >= strikeInfo.critSpecLevel) {\r\n      if (strikeInfo.critSpec && strikeInfo.critSpecType === \"Knife\") {\r\n        if (i >= 1) currentValue = 1;\r\n      }\r\n    }\r\n    adjustments[i] = currentValue;\r\n  }\r\n  return adjustments;\r\n};\r\nexport const critSpecDamage = (strikeInfo: StrikeInfo) => {\r\n  const adjustments: { [key: number]: number } = {};\r\n  let currentValue = 0;\r\n  for (let i = 1; i <= 20; i++) {\r\n    if (i >= strikeInfo.critSpecLevel) {\r\n      if (strikeInfo.critSpec && strikeInfo.critSpecType === \"Pick\") {\r\n        if (i >= 1) currentValue = 2;\r\n        if (i >= 4) currentValue = 4;\r\n        if (i >= 12) currentValue = 6;\r\n        if (i >= 19) currentValue = 8;\r\n      }\r\n      if (strikeInfo.critSpec && strikeInfo.critSpecType === \"Knife\") {\r\n        if (i >= 2) currentValue = 1;\r\n        if (i >= 10) currentValue = 2;\r\n        if (i >= 16) currentValue = 3;\r\n      }\r\n    }\r\n    adjustments[i] = currentValue;\r\n  }\r\n  return adjustments;\r\n};\r\n","import { EntityState } from \"@reduxjs/toolkit\";\r\nimport {\r\n  activityTypes,\r\n  conditions,\r\n  profTrends,\r\n  defenses,\r\n  MAPs,\r\n  rollTypes,\r\n  statTrends,\r\n  itemTrends,\r\n  effectTypes,\r\n  damageTrends,\r\n  Condition,\r\n  RollType,\r\n  ActivityType,\r\n  ProfTrend,\r\n  StatTrend,\r\n  ItemTrend,\r\n  MAP,\r\n  Defense,\r\n  DamageCond,\r\n  DieTrend,\r\n  DamageTrend,\r\n  DamageType,\r\n  Material,\r\n  EffectType,\r\n  damageTypes,\r\n  dCond,\r\n  dieTrends,\r\n  materials,\r\n  WhenConditions,\r\n  ImportStates,\r\n  whenConditions,\r\n} from \"../../Model/types\";\r\n\r\nexport type State = {\r\n  selectedRoutine: number | undefined;\r\n  selectedActivityPath: number | undefined;\r\n  parentRoutine: number | undefined;\r\n  parentActivity: number | undefined;\r\n  routines: EntityState<Routine>;\r\n  activityPaths: EntityState<ActivityPath>;\r\n  damages: EntityState<Damage>;\r\n  effects: EntityState<Effect>;\r\n\r\n  importRoutine: ImportStates;\r\n};\r\n\r\nexport interface Adjustment {\r\n  [key: number]: number;\r\n}\r\nexport interface Routine {\r\n  id: number;\r\n  name: string;\r\n  display: boolean;\r\n  apIds: number[];\r\n  levelDiff: number;\r\n  description: string;\r\n  startLevel: number;\r\n  endLevel: number;\r\n}\r\nexport interface RoutineObject {\r\n  id: number;\r\n  name: string;\r\n  display: boolean;\r\n  apIds: ActivityPathObject[];\r\n  levelDiff: number;\r\n  description: string;\r\n  startLevel: number;\r\n  endLevel: number;\r\n}\r\nexport interface ActivityPath {\r\n  id: number;\r\n  parentId?: number;\r\n  routineId?: number;\r\n  condition: Condition;\r\n\r\n  rollType: RollType;\r\n  type: ActivityType;\r\n  profTrend: ProfTrend;\r\n  statTrend: StatTrend;\r\n  itemTrend: ItemTrend;\r\n  bonusAdjustments: Adjustment;\r\n  MAP: MAP;\r\n\r\n  targetType: Defense;\r\n  damages: number[];\r\n  effects: number[];\r\n  apIds: number[];\r\n}\r\nexport interface ActivityPathObject {\r\n  id: number;\r\n  parentId?: number;\r\n  routineId?: number;\r\n  condition: Condition;\r\n\r\n  rollType: RollType;\r\n  type: ActivityType;\r\n  profTrend: ProfTrend;\r\n  statTrend: StatTrend;\r\n  itemTrend: ItemTrend;\r\n  bonusAdjustments: Adjustment;\r\n  MAP: MAP;\r\n\r\n  targetType: Defense;\r\n  damages: Damage[];\r\n  effects: Effect[];\r\n  apIds: ActivityPathObject[];\r\n}\r\nexport interface Damage {\r\n  id: number;\r\n  damageCondition: DamageCond;\r\n\r\n  dieTrend: DieTrend;\r\n  dieAdjustments: Adjustment;\r\n  diceSize: number;\r\n  fatal: boolean;\r\n  fatalDie: number;\r\n  damageTrend: DamageTrend[];\r\n  damageAdjustments: Adjustment;\r\n\r\n  damageType: DamageType;\r\n  material: Material;\r\n  persistent: boolean;\r\n  multiplier: number;\r\n  damageWhen: WhenConditions[];\r\n}\r\nexport interface Effect {\r\n  id: number;\r\n  effectCondition: Condition;\r\n  effectType: EffectType;\r\n  effectValue: number | undefined;\r\n  startLevel: number;\r\n  endLevel: number;\r\n  damageWhen: WhenConditions[];\r\n}\r\n\r\nexport function isRoutineObject(routine: any): routine is RoutineObject {\r\n  return (\r\n    typeof routine === \"object\" &&\r\n    typeof routine.name === \"string\" &&\r\n    typeof routine.display === \"boolean\" &&\r\n    typeof routine.levelDiff === \"number\" &&\r\n    typeof routine.description === \"string\" &&\r\n    isActivityPaths(routine.apIds) &&\r\n    typeof routine.startLevel === \"number\" &&\r\n    typeof routine.endLevel === \"number\"\r\n  );\r\n}\r\nfunction isActivityPaths(apIds: unknown): apIds is ActivityPathObject[] {\r\n  if (Array.isArray(apIds)) {\r\n    for (let apId of apIds) {\r\n      if (\r\n        !(\r\n          Object.values(conditions).includes(apId.condition) &&\r\n          Object.values(rollTypes).includes(apId.rollType) &&\r\n          Object.values(activityTypes).includes(apId.type) &&\r\n          Object.values(profTrends).includes(apId.profTrend) &&\r\n          Object.values(statTrends).includes(apId.statTrend) &&\r\n          Object.values(itemTrends).includes(apId.itemTrend) &&\r\n          isAdjustment(apId.bonusAdjustments) &&\r\n          Object.values(MAPs).includes(apId.MAP) &&\r\n          Object.values(defenses).includes(apId.targetType) &&\r\n          isActivityPaths(apId.apIds) &&\r\n          isDamages(apId.damages) &&\r\n          isEffects(apId.effects)\r\n        )\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  // console.log(\"6\");\r\n  return false;\r\n}\r\nfunction isAdjustment(adjustments: any): adjustments is Adjustment {\r\n  if (typeof adjustments !== \"object\") {\r\n    return false;\r\n  }\r\n  for (let i = 1; i <= 20; i++) {\r\n    if (typeof adjustments[i] !== \"number\") {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\nfunction isDamages(damages: unknown): damages is Damage[] {\r\n  if (Array.isArray(damages)) {\r\n    for (let damage of damages) {\r\n      if (Array.isArray(damage.damageTrend)) {\r\n        for (let dt of damage.damageTrend) {\r\n          if (!Object.values(damageTrends).includes(dt)) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (Array.isArray(damage.damageWhen)) {\r\n        for (let dw of damage.damageWhen) {\r\n          if (!Object.values(whenConditions).includes(dw)) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (\r\n        !(\r\n          Object.values(dCond).includes(damage.damageCondition) &&\r\n          Object.values(dieTrends).includes(damage.dieTrend) &&\r\n          isAdjustment(damage.dieAdjustments) &&\r\n          typeof damage.diceSize === \"number\" &&\r\n          typeof damage.fatal === \"boolean\" &&\r\n          typeof damage.fatalDie === \"number\" &&\r\n          isAdjustment(damage.damageAdjustments) &&\r\n          Object.values(damageTypes).includes(damage.damageType) &&\r\n          Object.values(materials).includes(damage.material) &&\r\n          typeof damage.persistent === \"boolean\" &&\r\n          [0.5, 1, 2].includes(damage.multiplier)\r\n        )\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\nfunction isEffects(effects: unknown): effects is Effect[] {\r\n  if (Array.isArray(effects)) {\r\n    for (let effect of effects) {\r\n      if (Array.isArray(effect.damageWhen)) {\r\n        for (let dw of effect.damageWhen) {\r\n          if (!Object.values(whenConditions).includes(dw)) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (\r\n        !(\r\n          Object.values(conditions).includes(effect.effectCondition) &&\r\n          Object.values(effectTypes).includes(effect.effectType) &&\r\n          typeof effect.startLevel === \"number\" &&\r\n          typeof effect.endLevel === \"number\"\r\n        )\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n","import {\r\n  createEntityAdapter,\r\n  createSlice,\r\n  EntityState,\r\n  PayloadAction,\r\n  Update,\r\n} from \"@reduxjs/toolkit\";\r\nimport { WritableDraft } from \"immer/dist/internal\";\r\nimport {\r\n  classWeaponMAP,\r\n  classWeaponProf,\r\n  classAdjustments,\r\n  StrikeInfo,\r\n  activityWeaponDiceAdjustments,\r\n  classWeaponDamageTrends,\r\n  hasDeadly,\r\n  hasFatal,\r\n  hasPickCritSpec,\r\n  critSpecDamage,\r\n  hasKnifeCritSpec,\r\n  critSpecDice,\r\n  classDamageAdjustments,\r\n  hasCritSpecEffect,\r\n  hasSwordCritSpec,\r\n  hasHammerCritSpec,\r\n  hasSpearCritSpec,\r\n  hasClassDamageDice,\r\n  classDamageDice,\r\n} from \"../../Model/newActivityInfo\";\r\nimport {\r\n  activityTypes,\r\n  conditions,\r\n  profTrends,\r\n  defenses,\r\n  MAPs,\r\n  nextMAPs,\r\n  rollTypes,\r\n  statTrends,\r\n  itemTrends,\r\n  effectTypes,\r\n  EffectType,\r\n  diceSizes,\r\n  damageTypes,\r\n  dCond,\r\n  dieTrends,\r\n  materials,\r\n  effectStateTypes,\r\n  effectValueTypes,\r\n  whenConditions,\r\n  importStates,\r\n  ActivityType,\r\n} from \"../../Model/types\";\r\nimport { RootState } from \"../../App/store\";\r\nimport {\r\n  ActivityPath,\r\n  ActivityPathObject,\r\n  Damage,\r\n  Effect,\r\n  isRoutineObject,\r\n  Routine,\r\n  RoutineObject,\r\n  State,\r\n} from \"./RoutineTypes\";\r\n\r\nexport const routinesAdapter = createEntityAdapter<Routine>();\r\nexport const activityPathAdapter = createEntityAdapter<ActivityPath>();\r\nexport const damageAdapter = createEntityAdapter<Damage>();\r\nexport const effectAdapter = createEntityAdapter<Effect>();\r\n\r\nlet routineId = 100;\r\nlet activityPathId = 1000;\r\nlet damageId = 1000;\r\nlet effectId = 1000;\r\n\r\nconst empty: { [key: number]: number } = {};\r\nconst one: { [key: number]: number } = {};\r\nfor (let i = 1; i <= 20; i++) {\r\n  empty[i] = 0;\r\n  one[i] = 1;\r\n}\r\n\r\nconst initialState: State = {\r\n  selectedRoutine: 0,\r\n  selectedActivityPath: undefined,\r\n  parentRoutine: 0,\r\n  parentActivity: undefined,\r\n  routines: routinesAdapter.getInitialState(),\r\n  activityPaths: activityPathAdapter.getInitialState(),\r\n  damages: damageAdapter.getInitialState(),\r\n  effects: effectAdapter.getInitialState(),\r\n  importRoutine: importStates.MessageSeen,\r\n};\r\n\r\nconst defaultActivity = {\r\n  type: activityTypes.STRIKE,\r\n  condition: conditions.ALWAYS,\r\n  rollType: rollTypes.NORMAL,\r\n  profTrend: profTrends.TRAINED,\r\n  statTrend: statTrends.AS10,\r\n  itemTrend: itemTrends.NONE,\r\n  bonusAdjustments: empty,\r\n  MAP: MAPs.N1,\r\n  targetType: defenses.AC,\r\n  damages: [],\r\n  effects: [],\r\n  apIds: [],\r\n};\r\nconst defaultStrikeParent = {\r\n  profTrend: profTrends.MARTIALWEAPON,\r\n  statTrend: statTrends.AS18a,\r\n  itemTrend: itemTrends.WEAPON,\r\n  damages: [0, 1],\r\n  effects: [0],\r\n};\r\nconst defaultSaveParent = {\r\n  type: activityTypes.SAVE,\r\n  profTrend: profTrends.CASTERSPELL,\r\n  statTrend: statTrends.AS18a,\r\n  targetType: defenses.REF,\r\n  damages: [2],\r\n  effects: [],\r\n};\r\nconst defaultDamage = {\r\n  damageCondition: dCond.STRIKE,\r\n  damageType: damageTypes.B,\r\n  material: materials.NONE,\r\n  persistent: false,\r\n  multiplier: 1,\r\n  damageWhen: [whenConditions.Always],\r\n\r\n  dieTrend: dieTrends.NONE,\r\n  dieAdjustments: empty,\r\n  diceSize: 6,\r\n  fatal: false,\r\n  fatalDie: 10,\r\n  damageTrend: [],\r\n  damageAdjustments: empty,\r\n};\r\nconst defaultEffect = {\r\n  effectCondition: conditions.ALWAYS,\r\n  effectType: effectTypes.FLATFOOT,\r\n  effectValue: 0,\r\n  startLevel: 1,\r\n  endLevel: 20,\r\n  damageWhen: [whenConditions.Always],\r\n};\r\n\r\nexport const routinesSlice = createSlice({\r\n  name: \"routines\",\r\n  initialState,\r\n  reducers: {\r\n    setRoutine: (state, action) => {\r\n      state.selectedRoutine = action.payload;\r\n      state.selectedActivityPath = undefined;\r\n      state.parentActivity = undefined;\r\n      state.parentRoutine = undefined;\r\n    },\r\n    setActivityPath: (state, action) => {\r\n      state.selectedActivityPath = action.payload;\r\n      state.parentActivity = undefined;\r\n      state.parentRoutine = undefined;\r\n    },\r\n\r\n    routineAdded: (state, action) => {\r\n      routinesAdapter.addOne(state.routines, action);\r\n    },\r\n    routineUpdated: (state, action: PayloadAction<Update<Routine>>) => {\r\n      routinesAdapter.updateOne(state.routines, action);\r\n    },\r\n    activityPathAdded: (state, action) => {\r\n      activityPathAdapter.addOne(state.activityPaths, action);\r\n    },\r\n    activityPathUpdated: (state, action) => {\r\n      activityPathAdapter.updateOne(state.activityPaths, action);\r\n    },\r\n    damageAdded: (state, action) => {\r\n      damageAdapter.addOne(state.damages, action);\r\n    },\r\n    damageUpdated: (state, action) => {\r\n      damageAdapter.updateOne(state.damages, action);\r\n    },\r\n    effectAdded: (state, action) => {\r\n      effectAdapter.addOne(state.effects, action);\r\n    },\r\n    effectUpdated: (state, action) => {\r\n      effectAdapter.updateOne(state.effects, action);\r\n    },\r\n\r\n    routineCreated: {\r\n      reducer: (\r\n        state,\r\n        action: PayloadAction<{ id: number; copy: boolean }>\r\n      ) => {\r\n        const { id, copy } = action.payload;\r\n        if (copy && state.selectedRoutine !== undefined) {\r\n          const routine = state.routines.entities[state.selectedRoutine]!;\r\n          const name = \"Copy of \" + routine.name;\r\n          const apIds = copyActivityPaths(state, routine.apIds, undefined, id);\r\n          routinesAdapter.addOne(state.routines, {\r\n            ...routine,\r\n            id,\r\n            name,\r\n            apIds,\r\n          });\r\n        } else {\r\n          routinesAdapter.addOne(state.routines, {\r\n            id,\r\n            name: \"New Routine\",\r\n            display: true,\r\n            apIds: [],\r\n            levelDiff: 0,\r\n            description: \"Enter a description here.\",\r\n            startLevel: 1,\r\n            endLevel: 20,\r\n          });\r\n        }\r\n        state.selectedRoutine = id;\r\n        state.selectedActivityPath = undefined;\r\n        state.parentActivity = undefined;\r\n        state.parentRoutine = undefined;\r\n      },\r\n      prepare: ({ copy = false }) => {\r\n        const id = ++routineId;\r\n        return { payload: { id, copy } };\r\n      },\r\n    },\r\n    routineRemoved: (state, action) => {\r\n      // recursively remove all children\r\n      const routineId = action.payload;\r\n      let childrenIds = state.routines.entities[routineId]!.apIds;\r\n      removeActivityPaths(state, childrenIds);\r\n\r\n      routinesAdapter.removeOne(state.routines, routineId);\r\n      if (routineId === state.selectedRoutine) {\r\n        state.selectedRoutine = undefined;\r\n        state.selectedActivityPath = undefined;\r\n        state.parentActivity = undefined;\r\n        state.parentRoutine = undefined;\r\n      }\r\n    },\r\n    setNewActivityParent: (\r\n      state,\r\n      action: PayloadAction<{\r\n        parentId?: number;\r\n        routineId?: number;\r\n      }>\r\n    ) => {\r\n      state.parentRoutine = action.payload.routineId;\r\n      state.parentActivity = action.payload.parentId;\r\n      state.selectedActivityPath = undefined;\r\n    },\r\n    emptyActivityPathCreated: {\r\n      reducer: (\r\n        state,\r\n        action: PayloadAction<{\r\n          id: number;\r\n          routineId: number;\r\n          activityType?: ActivityType;\r\n        }>\r\n      ) => {\r\n        const { id, routineId, activityType } = action.payload;\r\n        let ap = {\r\n          ...defaultActivity,\r\n          id,\r\n          routineId,\r\n        } as ActivityPath;\r\n        if (activityType !== undefined) {\r\n          if (activityType === activityTypes.STRIKE) {\r\n            let damages = copyDamages(state, defaultStrikeParent.damages);\r\n            let effects = copyEffects(state, defaultStrikeParent.effects);\r\n            ap = {\r\n              ...defaultActivity,\r\n              ...defaultStrikeParent,\r\n              id,\r\n              routineId,\r\n              damages,\r\n              effects,\r\n            };\r\n          }\r\n          if (activityType === activityTypes.SAVE) {\r\n            let damages = copyDamages(state, defaultSaveParent.damages);\r\n            let effects = copyEffects(state, defaultSaveParent.effects);\r\n            ap = {\r\n              ...defaultActivity,\r\n              ...defaultSaveParent,\r\n              id,\r\n              routineId,\r\n              damages,\r\n              effects,\r\n            };\r\n          }\r\n        }\r\n\r\n        state.routines.entities[routineId]!.apIds.push(id);\r\n        activityPathAdapter.addOne(state.activityPaths, ap);\r\n        state.selectedActivityPath = id;\r\n        state.parentActivity = undefined;\r\n        state.parentRoutine = undefined;\r\n      },\r\n      prepare: ({\r\n        routineId,\r\n        activityType,\r\n      }: {\r\n        routineId: number;\r\n        activityType?: ActivityType;\r\n      }) => {\r\n        const id = ++activityPathId;\r\n        return {\r\n          payload: {\r\n            id,\r\n            routineId,\r\n            activityType,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    activityPathCreated: (\r\n      state,\r\n      action: PayloadAction<{\r\n        strikeInfo: StrikeInfo;\r\n      }>\r\n    ) => {\r\n      const { strikeInfo } = action.payload;\r\n      const { parentActivity: parentId, parentRoutine: routineId } = state;\r\n\r\n      let ids = createStrikeActivity(state, parentId, routineId, strikeInfo, 0);\r\n\r\n      if (routineId !== undefined) {\r\n        state.routines.entities[routineId]!.apIds.push(...ids);\r\n      }\r\n      if (parentId !== undefined) {\r\n        state.activityPaths.entities[parentId]!.apIds.push(...ids);\r\n      }\r\n\r\n      state.selectedActivityPath = ids[0];\r\n      state.parentActivity = undefined;\r\n      state.parentRoutine = undefined;\r\n    },\r\n    activityPathContinued: {\r\n      reducer: (\r\n        state,\r\n        action: PayloadAction<{\r\n          id: number;\r\n          parentId: number;\r\n        }>\r\n      ) => {\r\n        const { id, parentId } = action.payload;\r\n        state.activityPaths.entities[parentId]!.apIds.push(id);\r\n        const parentAP = state.activityPaths.entities[parentId]!;\r\n        // copy parent damages and effects\r\n        let newDamages = copyDamages(state, parentAP.damages);\r\n        let newEffects = copyEffects(state, parentAP.effects);\r\n\r\n        activityPathAdapter.addOne(state.activityPaths, {\r\n          ...parentAP,\r\n          id,\r\n          parentId,\r\n          routineId: undefined,\r\n          MAP: nextMAPs[parentAP.MAP],\r\n          damages: newDamages,\r\n          effects: newEffects,\r\n          apIds: [],\r\n        });\r\n        state.selectedActivityPath = id;\r\n      },\r\n      prepare: ({ parentId }: { parentId: number }) => {\r\n        const id = ++activityPathId;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    activityPathRemoved: (state, action) => {\r\n      const { id, parentId, routineId } = action.payload;\r\n\r\n      // recursively remove all children\r\n      let childrenIds = [id];\r\n      removeActivityPaths(state, childrenIds);\r\n\r\n      if (parentId !== undefined) {\r\n        state.activityPaths.entities[parentId]!.apIds =\r\n          state.activityPaths.entities[parentId]!.apIds.filter(\r\n            (apId) => apId !== id\r\n          );\r\n      }\r\n      if (routineId !== undefined) {\r\n        state.routines.entities[routineId]!.apIds = state.routines.entities[\r\n          routineId\r\n        ]!.apIds.filter((apId) => apId !== id);\r\n      }\r\n      state.selectedActivityPath = undefined;\r\n    },\r\n\r\n    damageCreated: {\r\n      reducer: (\r\n        state,\r\n        action: PayloadAction<{\r\n          id: number;\r\n          parentId: number;\r\n        }>\r\n      ) => {\r\n        const { id, parentId } = action.payload;\r\n        state.activityPaths.entities[parentId]!.damages.push(id);\r\n        damageAdapter.addOne(state.damages, { id, ...defaultDamage });\r\n      },\r\n      prepare: ({ parentId }) => {\r\n        const id = ++damageId;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    damageRemoved: (\r\n      state,\r\n      action: PayloadAction<{\r\n        id: number;\r\n        parentId: number;\r\n      }>\r\n    ) => {\r\n      const { id, parentId } = action.payload;\r\n      state.activityPaths.entities[parentId]!.damages =\r\n        state.activityPaths.entities[parentId]!.damages.filter(\r\n          (did) => did !== id\r\n        );\r\n      damageAdapter.removeOne(state.damages, id);\r\n    },\r\n    effectCreated: {\r\n      reducer: (\r\n        state,\r\n        action: PayloadAction<{\r\n          id: number;\r\n          parentId: number;\r\n        }>\r\n      ) => {\r\n        const { id, parentId } = action.payload;\r\n        state.activityPaths.entities[parentId]!.effects.push(id);\r\n        effectAdapter.addOne(state.effects, {\r\n          ...defaultEffect,\r\n          id,\r\n        });\r\n      },\r\n      prepare: ({ parentId }) => {\r\n        const id = ++effectId;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    effectRemoved: (state, action) => {\r\n      const { id, parentId } = action.payload;\r\n      state.activityPaths.entities[parentId]!.effects =\r\n        state.activityPaths.entities[parentId]!.effects.filter(\r\n          (eid) => eid !== id\r\n        );\r\n      effectAdapter.removeOne(state.effects, id);\r\n    },\r\n    importRoutine: (state, action) => {\r\n      try {\r\n        state.importRoutine = importStates.Importing;\r\n        const routineObject = JSON.parse(action.payload);\r\n        if (isRoutineObject(routineObject)) {\r\n          state.selectedRoutine = insertRoutine(state, routineObject);\r\n          state.selectedActivityPath = undefined;\r\n          state.parentActivity = undefined;\r\n          state.parentRoutine = undefined;\r\n          state.importRoutine = importStates.Successful;\r\n        } else {\r\n          state.importRoutine = importStates.Failure;\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n        console.log(\"Parsing failed\");\r\n        state.importRoutine = importStates.Failure;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setRoutine,\r\n  setActivityPath,\r\n  setNewActivityParent,\r\n\r\n  routineAdded,\r\n  routineUpdated,\r\n  routineCreated,\r\n  routineRemoved,\r\n\r\n  activityPathAdded,\r\n  activityPathUpdated,\r\n  emptyActivityPathCreated,\r\n  activityPathCreated,\r\n  activityPathContinued,\r\n  activityPathRemoved,\r\n\r\n  damageAdded,\r\n  damageUpdated,\r\n  damageCreated,\r\n  damageRemoved,\r\n\r\n  effectAdded,\r\n  effectUpdated,\r\n  effectCreated,\r\n  effectRemoved,\r\n\r\n  importRoutine,\r\n} = routinesSlice.actions;\r\n\r\nexport default routinesSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selectRoutineById,\r\n  selectIds: selectRoutineIds,\r\n  selectEntities: selectRoutineEntities,\r\n  selectAll: selectAllRoutines,\r\n  selectTotal: selectTotalRoutines,\r\n} = routinesAdapter.getSelectors((state: RootState) => state.routines.routines);\r\n\r\nexport const {\r\n  selectById: selectactivityPathById,\r\n  selectIds: selectactivityPathIds,\r\n  selectEntities: selectactivityPathEntities,\r\n  selectAll: selectAllactivityPaths,\r\n  selectTotal: selectTotalactivityPaths,\r\n} = activityPathAdapter.getSelectors(\r\n  (state: RootState) => state.routines.activityPaths\r\n);\r\n\r\nexport const {\r\n  selectById: selectdamageById,\r\n  selectIds: selectdamageIds,\r\n  selectEntities: selectdamageEntities,\r\n  selectAll: selectAlldamages,\r\n  selectTotal: selectTotaldamages,\r\n} = damageAdapter.getSelectors((state: RootState) => state.routines.damages);\r\n\r\nexport const {\r\n  selectById: selecteffectById,\r\n  selectIds: selecteffectIds,\r\n  selectEntities: selecteffectEntities,\r\n  selectAll: selectAlleffects,\r\n  selectTotal: selectTotaleffects,\r\n} = effectAdapter.getSelectors((state: RootState) => state.routines.effects);\r\n\r\nexport const selectSelectedRoutine = (state: RootState) =>\r\n  state.routines.selectedRoutine;\r\nexport const selectSelectedActivityPath = (state: RootState) =>\r\n  state.routines.selectedActivityPath;\r\nexport const selectParentActivityId = (state: RootState) =>\r\n  state.routines.parentActivity;\r\nexport const selectCreateNewActivity = (state: RootState) =>\r\n  state.routines.selectedActivityPath === undefined &&\r\n  (state.routines.parentRoutine !== undefined ||\r\n    state.routines.parentActivity !== undefined);\r\nexport const selectSelectedRoutineObject = (state: RootState) => {\r\n  if (state.routines.selectedRoutine) {\r\n    const routine =\r\n      state.routines.routines.entities[state.routines.selectedRoutine]!;\r\n    const routineObject = {\r\n      ...routine,\r\n      apIds: getActivityPaths(state.routines, routine.apIds),\r\n    };\r\n    return routineObject;\r\n  }\r\n  return undefined;\r\n};\r\n\r\nexport const selectImportState = (state: RootState) => {\r\n  return state.routines.importRoutine;\r\n};\r\n\r\nconst removeActivityPaths = (state: WritableDraft<State>, ids: number[]) => {\r\n  let index = 0;\r\n  while (index < ids.length) {\r\n    let ap = state.activityPaths.entities[ids[index]]!;\r\n    ids.push(...ap!.apIds);\r\n    damageAdapter.removeMany(state.damages, ap.damages);\r\n    effectAdapter.removeMany(state.effects, ap.effects);\r\n    activityPathAdapter.removeOne(state.activityPaths, ap.id);\r\n    index += 1;\r\n  }\r\n};\r\n\r\nconst createStrikeActivity = (\r\n  state: WritableDraft<State>,\r\n  parentId: number | undefined,\r\n  routineId: number | undefined,\r\n  strikeInfo: StrikeInfo,\r\n  strikeNumber: number\r\n) => {\r\n  const id = ++activityPathId;\r\n  let apIds: number[] = [];\r\n  if (strikeNumber < strikeInfo.numStrikes - 1) {\r\n    apIds = createStrikeActivity(\r\n      state,\r\n      id,\r\n      undefined,\r\n      strikeInfo,\r\n      strikeNumber + 1\r\n    );\r\n  }\r\n  let damages = createStrikeDamages(state, strikeInfo, strikeNumber);\r\n  let effects = createStrikeEffects(state, strikeInfo, strikeNumber);\r\n  let MAP = classWeaponMAP(strikeInfo);\r\n\r\n  activityPathAdapter.addOne(state.activityPaths, {\r\n    ...defaultActivity,\r\n    id,\r\n    parentId,\r\n    routineId,\r\n    type: activityTypes.STRIKE,\r\n    profTrend: classWeaponProf(strikeInfo.cClass, strikeInfo.classOption),\r\n    statTrend: strikeInfo.attackScore,\r\n    itemTrend: itemTrends.WEAPON,\r\n    bonusAdjustments: classAdjustments(strikeInfo, strikeNumber),\r\n    MAP:\r\n      strikeNumber === 0\r\n        ? MAP\r\n        : strikeNumber === 1\r\n        ? nextMAPs[MAP]\r\n        : nextMAPs[nextMAPs[MAP]],\r\n\r\n    damages,\r\n    effects,\r\n    apIds,\r\n  });\r\n  return [id];\r\n};\r\nconst createStrikeDamages = (\r\n  state: WritableDraft<State>,\r\n  strikeInfo: StrikeInfo,\r\n  strikeNumber: number\r\n) => {\r\n  const newDamages: number[] = [];\r\n\r\n  let id = ++damageId;\r\n  const weaponDamage: Damage = {\r\n    ...defaultDamage,\r\n    id,\r\n    dieTrend: dieTrends.WEAPON,\r\n    dieAdjustments: activityWeaponDiceAdjustments(strikeInfo),\r\n    diceSize: strikeInfo.dieSize,\r\n    fatal: hasFatal(strikeInfo),\r\n    fatalDie: strikeInfo.fatalSize,\r\n    damageTrend: classWeaponDamageTrends(strikeInfo, strikeNumber),\r\n    damageAdjustments: classDamageAdjustments(strikeInfo),\r\n  };\r\n  damageAdapter.addOne(state.damages, weaponDamage);\r\n  newDamages.push(id);\r\n\r\n  id = ++damageId;\r\n  const runeDamage: Damage = {\r\n    ...defaultDamage,\r\n    id,\r\n    dieTrend: strikeInfo.runes,\r\n    diceSize: diceSizes[6],\r\n    damageType: damageTypes.FIRE,\r\n  };\r\n  damageAdapter.addOne(state.damages, runeDamage);\r\n  newDamages.push(id);\r\n\r\n  if (hasClassDamageDice(strikeInfo)) {\r\n    let { dieTrend, diceSize, damageType, damageWhen } =\r\n      classDamageDice(strikeInfo);\r\n    id = ++damageId;\r\n    const classDamage: Damage = {\r\n      ...defaultDamage,\r\n      id,\r\n      dieTrend,\r\n      diceSize,\r\n      damageType,\r\n      damageWhen,\r\n    };\r\n    damageAdapter.addOne(state.damages, classDamage);\r\n    newDamages.push(id);\r\n  }\r\n\r\n  if (hasDeadly(strikeInfo)) {\r\n    let damageAdjustments = empty;\r\n    if (!hasFatal(strikeInfo) && hasPickCritSpec(strikeInfo))\r\n      damageAdjustments = critSpecDamage(strikeInfo);\r\n    id = ++damageId;\r\n    const critDamage: Damage = {\r\n      ...defaultDamage,\r\n      id,\r\n      damageCondition: dCond.CRIT,\r\n      dieTrend: dieTrends.DEADLY,\r\n      diceSize: strikeInfo.deadlySize,\r\n      damageAdjustments,\r\n    };\r\n    damageAdapter.addOne(state.damages, critDamage);\r\n    newDamages.push(id);\r\n  }\r\n  if (hasFatal(strikeInfo)) {\r\n    let damageAdjustments = empty;\r\n    if (hasPickCritSpec(strikeInfo))\r\n      damageAdjustments = critSpecDamage(strikeInfo);\r\n    id = ++damageId;\r\n    const critDamage: Damage = {\r\n      ...defaultDamage,\r\n      id,\r\n      damageCondition: dCond.CRIT,\r\n      dieAdjustments: one,\r\n      diceSize: strikeInfo.fatalSize,\r\n      damageAdjustments,\r\n    };\r\n    damageAdapter.addOne(state.damages, critDamage);\r\n    newDamages.push(id);\r\n  }\r\n  if (\r\n    !hasDeadly(strikeInfo) &&\r\n    !hasFatal(strikeInfo) &&\r\n    hasPickCritSpec(strikeInfo)\r\n  ) {\r\n    let damageAdjustments = critSpecDamage(strikeInfo);\r\n    id = ++damageId;\r\n    const critDamage: Damage = {\r\n      ...defaultDamage,\r\n      id,\r\n      damageCondition: dCond.CRIT,\r\n      diceSize: strikeInfo.fatalSize,\r\n      damageAdjustments,\r\n    };\r\n    damageAdapter.addOne(state.damages, critDamage);\r\n    newDamages.push(id);\r\n  }\r\n  if (hasKnifeCritSpec(strikeInfo)) {\r\n    let damageAdjustments = critSpecDamage(strikeInfo);\r\n    id = ++damageId;\r\n    const critDamage: Damage = {\r\n      ...defaultDamage,\r\n      id,\r\n      damageCondition: dCond.CRIT,\r\n      dieAdjustments: critSpecDice(strikeInfo),\r\n      diceSize: diceSizes[6],\r\n      damageAdjustments,\r\n      persistent: true,\r\n    };\r\n    damageAdapter.addOne(state.damages, critDamage);\r\n    newDamages.push(id);\r\n  }\r\n\r\n  return newDamages;\r\n};\r\nconst createStrikeEffects = (\r\n  state: WritableDraft<State>,\r\n  strikeInfo: StrikeInfo,\r\n  strikeNumber: number\r\n) => {\r\n  const newEffects: number[] = [];\r\n  let id;\r\n\r\n  if (hasCritSpecEffect(strikeInfo)) {\r\n    let effectType: EffectType = effectStateTypes.FLATFOOT;\r\n    if (hasSwordCritSpec(strikeInfo)) effectType = effectStateTypes.FLATFOOT;\r\n    if (hasHammerCritSpec(strikeInfo)) effectType = effectStateTypes.PRONE;\r\n    if (hasSpearCritSpec(strikeInfo)) effectType = effectValueTypes.CLUMSY;\r\n\r\n    id = ++effectId;\r\n    const critSpecEffect: Effect = {\r\n      ...defaultEffect,\r\n      id,\r\n      effectCondition: conditions.CRIT,\r\n      effectType,\r\n      effectValue: 1,\r\n      startLevel: strikeInfo.critSpecLevel,\r\n    };\r\n    newEffects.push(id);\r\n    effectAdapter.addOne(state.effects, critSpecEffect);\r\n  }\r\n  return newEffects;\r\n};\r\n\r\nconst copyActivityPaths = (\r\n  state: WritableDraft<State>,\r\n  apIds: number[],\r\n  parentId?: number,\r\n  routineId?: number\r\n) => {\r\n  let newApIds = [];\r\n  for (let apId of apIds) {\r\n    const id = ++activityPathId;\r\n    const ap = state.activityPaths.entities[apId]!;\r\n    const apIds = copyActivityPaths(state, ap.apIds, id);\r\n    const damages = copyDamages(state, ap.damages);\r\n    const effects = copyEffects(state, ap.effects);\r\n\r\n    activityPathAdapter.addOne(state.activityPaths, {\r\n      ...ap,\r\n      id,\r\n      parentId,\r\n      routineId,\r\n      damages,\r\n      effects,\r\n      apIds,\r\n    });\r\n    newApIds.push(id);\r\n  }\r\n  return newApIds;\r\n};\r\nconst copyDamages = (state: WritableDraft<State>, damages: number[]) => {\r\n  const newDamages = [];\r\n  for (let did of damages) {\r\n    let damage = state.damages.entities[did]!;\r\n    // create a new damage entity and add it's id to newDamages\r\n    const id = ++damageId;\r\n    damageAdapter.addOne(state.damages, { ...damage, id });\r\n    newDamages.push(id);\r\n  }\r\n  return newDamages;\r\n};\r\nconst copyEffects = (state: WritableDraft<State>, effects: number[]) => {\r\n  const newEffects = [];\r\n  for (let eid of effects) {\r\n    let effect = state.effects.entities[eid]!;\r\n    // create a new effect entity and add it's id to newEffects\r\n    const id = ++effectId;\r\n    effectAdapter.addOne(state.effects, { ...effect, id });\r\n    newEffects.push(id);\r\n  }\r\n  return newEffects;\r\n};\r\n\r\nconst getActivityPaths = (state: WritableDraft<State>, apIds: number[]) => {\r\n  let newAps: ActivityPathObject[] = [];\r\n  for (let apId of apIds) {\r\n    const ap = state.activityPaths.entities[apId]!;\r\n    const aps = getActivityPaths(state, ap.apIds);\r\n    const damages = getDamages(state, ap.damages);\r\n    const effects = getEffects(state, ap.effects);\r\n    newAps.push({ ...ap, apIds: aps, damages, effects });\r\n  }\r\n  return newAps;\r\n};\r\nconst getDamages = (state: WritableDraft<State>, damages: number[]) => {\r\n  let newDamages = [];\r\n  for (let did of damages) {\r\n    const damage = state.damages.entities[did]!;\r\n    newDamages.push({ ...damage });\r\n  }\r\n  return newDamages;\r\n};\r\nconst getEffects = (state: WritableDraft<State>, effects: number[]) => {\r\n  let newEffects = [];\r\n  for (let eid of effects) {\r\n    const effect = state.effects.entities[eid]!;\r\n    newEffects.push({ ...effect });\r\n  }\r\n  return newEffects;\r\n};\r\n\r\nconst insertRoutine = (state: WritableDraft<State>, routine: RoutineObject) => {\r\n  const id = ++routineId;\r\n  const apIds = insertActivityPaths(state, routine.apIds, undefined, id);\r\n\r\n  routinesAdapter.addOne(state.routines, { ...routine, id, apIds });\r\n  return id;\r\n};\r\nconst insertActivityPaths = (\r\n  state: WritableDraft<State>,\r\n  aps: ActivityPathObject[],\r\n  parentId?: number,\r\n  routineId?: number\r\n) => {\r\n  let newApIds = [];\r\n  for (let ap of aps) {\r\n    const id = ++activityPathId;\r\n    const apIds = insertActivityPaths(state, ap.apIds, id);\r\n    const damages = insertDamages(state, ap.damages);\r\n    const effects = insertEffects(state, ap.effects);\r\n\r\n    activityPathAdapter.addOne(state.activityPaths, {\r\n      ...ap,\r\n      id,\r\n      parentId,\r\n      routineId,\r\n      damages,\r\n      effects,\r\n      apIds,\r\n    });\r\n    newApIds.push(id);\r\n  }\r\n  return newApIds;\r\n};\r\nconst insertDamages = (state: WritableDraft<State>, damages: Damage[]) => {\r\n  const newDamages = [];\r\n  for (let damage of damages) {\r\n    // create a new damage entity and add it's id to newDamages\r\n    const id = ++damageId;\r\n    damageAdapter.addOne(state.damages, { ...defaultDamage, ...damage, id });\r\n    newDamages.push(id);\r\n  }\r\n  return newDamages;\r\n};\r\nconst insertEffects = (state: WritableDraft<State>, effects: Effect[]) => {\r\n  const newEffects = [];\r\n  for (let effect of effects) {\r\n    // create a new effect entity and add it's id to newEffects\r\n    const id = ++effectId;\r\n    effectAdapter.addOne(state.effects, { ...defaultEffect, ...effect, id });\r\n    newEffects.push(id);\r\n  }\r\n  return newEffects;\r\n};\r\n","export const convolve = (vec1: number[], vec2: number[]) => {\r\n  if (vec1.length === 0 || vec2.length === 0) {\r\n    throw new Error(\"Vectors can not be empty!\");\r\n  }\r\n  const volume = vec1;\r\n  const kernel = vec2;\r\n  let displacement = 0;\r\n  const convVec: number[] = [];\r\n\r\n  for (let i = 0; i < volume.length; i++) {\r\n    for (let j = 0; j < kernel.length; j++) {\r\n      if (displacement + j !== convVec.length) {\r\n        convVec[displacement + j] =\r\n          convVec[displacement + j] + volume[i] * kernel[j];\r\n      } else {\r\n        convVec.push(volume[i] * kernel[j]);\r\n      }\r\n    }\r\n    displacement++;\r\n  }\r\n\r\n  return convVec;\r\n};\r\n\r\nexport const multiplyDist = (\r\n  dam: number,\r\n  dist: number[],\r\n  multiplier: number\r\n) => {\r\n  if (multiplier === 0) return { staticDamage: 0, damageDist: [1] };\r\n  if (multiplier === 1) return { staticDamage: dam, damageDist: [...dist] };\r\n\r\n  const newDist = [0];\r\n  let index = 0;\r\n  const newDam = Math.floor(dam * multiplier);\r\n\r\n  let i = 0;\r\n  let oldValue = newDam;\r\n  for (let chance of dist) {\r\n    let newValue = Math.floor((dam + i) * multiplier);\r\n    if (newValue === oldValue) {\r\n      newDist[index] += chance;\r\n    } else {\r\n      if (newValue > oldValue + 1) {\r\n        for (let diff = 0; diff < newValue - (oldValue + 1); diff++) {\r\n          index++;\r\n          newDist[index] = 0;\r\n        }\r\n      }\r\n      index++;\r\n      newDist[index] = chance;\r\n    }\r\n    oldValue = newValue;\r\n    i++;\r\n  }\r\n\r\n  return { staticDamage: newDam, damageDist: newDist };\r\n};\r\n\r\ntype Dist = {\r\n  distribution: { staticDamage: number; damageDist: number[] };\r\n  chance: number;\r\n};\r\n/**\r\n * Combine multiple distributions with their chances into one distribution starting from 0\r\n * @param  {...[{staticDamage, distribution}, chance]} dists\r\n * @returns\r\n */\r\nexport const consolidateDists = (...dists: Dist[]) => {\r\n  let maxDamage = 0;\r\n  for (let dist of dists) {\r\n    maxDamage = Math.max(\r\n      maxDamage,\r\n      dist.distribution.staticDamage + dist.distribution.damageDist.length\r\n    );\r\n  }\r\n  let damageDist = [];\r\n  for (let i = 0; i < maxDamage; i++) {\r\n    damageDist.push(0);\r\n    for (let dist of dists) {\r\n      if (dist.distribution.staticDamage <= i) {\r\n        let index = i - dist.distribution.staticDamage;\r\n        if (index < dist.distribution.damageDist.length)\r\n          damageDist[i] += dist.distribution.damageDist[index] * dist.chance;\r\n      }\r\n    }\r\n  }\r\n  return damageDist;\r\n};\r\n\r\n/**\r\n * apply a minimum to a distribution, like for damage penalties or resistances\r\n * @param {number} staticDamage\r\n * @param {[number]} damageDist\r\n * @param {number} min\r\n * @returns\r\n */\r\nexport const applyMin = (\r\n  staticDamage: number,\r\n  damageDist: number[],\r\n  min: number\r\n) => {\r\n  while (staticDamage < min) {\r\n    if (damageDist.length >= 2) {\r\n      damageDist[1] += damageDist[0];\r\n      damageDist.shift();\r\n    }\r\n    staticDamage++;\r\n  }\r\n  return { staticDamage, damageDist };\r\n};\r\n","import {\r\n  damageTrendValues,\r\n  dieTrendValues,\r\n  defaultACs,\r\n  defaultSaves,\r\n  profTrendValues,\r\n  statTrendValues,\r\n  itemTrendValues,\r\n  MAPvalues,\r\n  standardDC,\r\n} from \"../Model/defaults\";\r\nimport {\r\n  activityTypes,\r\n  DamageType,\r\n  dCond,\r\n  defenses,\r\n  Material,\r\n  materials,\r\n  rollTypes,\r\n  TargetState,\r\n  whenConditions,\r\n} from \"../Model/types\";\r\nimport { ActivityPath, Damage } from \"../Routines/RoutineSlice/RoutineTypes\";\r\nimport { Target } from \"../Display/targetSlice\";\r\nimport { Weakness } from \"../Display/weaknessSlice\";\r\nimport { applyMin, convolve, multiplyDist } from \"./Distribution\";\r\n\r\nfunction getCritSuccessPercent(bonus: number, DC: number, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -20) {\r\n    chance = 0;\r\n  } else if (dif === -20) {\r\n    chance = 5;\r\n  } else if (dif < -9) {\r\n    chance = keen ? 10 : 5;\r\n  } else if (dif < 8) {\r\n    chance = (11 + dif) * 5;\r\n  } else {\r\n    chance = 95;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nfunction getSuccessPercent(bonus: number, DC: number, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -29) {\r\n    chance = 0;\r\n  } else if (dif < -20) {\r\n    chance = 5;\r\n  } else if (dif === -20) {\r\n    chance = 0;\r\n  } else if (dif < -9) {\r\n    chance = (keen ? 19 : 20 + dif) * 5;\r\n  } else if (dif < -1) {\r\n    chance = 50;\r\n  } else if (dif < 9) {\r\n    chance = (8 - dif) * 5;\r\n  } else {\r\n    chance = 5;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nfunction getFailurePercent(bonus: number, DC: number, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -29) {\r\n    chance = 5;\r\n  } else if (dif < -20) {\r\n    chance = (29 + dif) * 5;\r\n  } else if (dif < -10) {\r\n    chance = 45;\r\n  } else if (dif < -1) {\r\n    chance = (-2 - dif) * 5;\r\n  } else if (dif < 9) {\r\n    chance = 5;\r\n  } else {\r\n    chance = 0;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nfunction getCritFailurePercent(bonus: number, DC: number, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -29) {\r\n    chance = 95;\r\n  } else if (dif < -10) {\r\n    chance = (-10 - dif) * 5;\r\n  } else if (dif < -1) {\r\n    chance = 5;\r\n  } else {\r\n    chance = 0;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\n// staticDamage?: number;\r\n// damageDist?: number[];\r\n\r\ntype PartialContext = {\r\n  [key in DamageType]?: {\r\n    material: Material;\r\n    staticDamage: number;\r\n    damageDist: number[];\r\n  };\r\n};\r\nexport interface DamageContext {\r\n  staticDamage: number;\r\n  damageDist: number[];\r\n}\r\ntype BaseContext = {\r\n  normal: PartialContext;\r\n  persistent: PartialContext;\r\n};\r\ntype FinalContext = {\r\n  normal: DamageContext;\r\n  persistent: DamageContext;\r\n};\r\nconst damageQualities = { normal: \"normal\", persistent: \"persistent\" } as const;\r\ntype DamageQuality = keyof typeof damageQualities;\r\n\r\n// combine the probability distributions of the given damages into context\r\nconst addDamage = (\r\n  baseContext: BaseContext,\r\n  type: DamageType,\r\n  material: Material,\r\n  persistent: boolean,\r\n  staticDamage: number,\r\n  damageDist: number[],\r\n  multiplier: number\r\n) => {\r\n  let context: PartialContext;\r\n\r\n  if (persistent) {\r\n    context = baseContext.persistent;\r\n  } else {\r\n    context = baseContext.normal;\r\n  }\r\n  ({ staticDamage, damageDist } = multiplyDist(\r\n    staticDamage,\r\n    damageDist,\r\n    multiplier\r\n  ));\r\n  if (!(type in context)) {\r\n    context[type] = { material, staticDamage, damageDist };\r\n  } else {\r\n    context[type]!.staticDamage += staticDamage;\r\n    context[type]!.damageDist = convolve(context[type]!.damageDist, damageDist);\r\n    if (material !== materials.NONE) context[type]!.material = material;\r\n  }\r\n};\r\n\r\n/**\r\n * Calculate the chance of each result and the appropriate damage\r\n * distributions for a given activity at level vs target with targetState\r\n * adds defenseBonus or resistanceBonus to target if given\r\n * @param {Number} level\r\n * @param {*} activity\r\n * @param {*} damages\r\n * @param {*} target\r\n * @param {*} targetState\r\n * @param {*} weaknesses\r\n * @param {*} defenseBonus\r\n * @param {*} resistanceBonus\r\n * @returns [damageTrees, chances];\r\n */\r\nfunction calculateExpectedDamage(\r\n  activity: ActivityPath,\r\n  damages: Damage[],\r\n  target: Target,\r\n  targetState: TargetState,\r\n  weaknesses: Weakness[],\r\n  defenseBonus: number,\r\n  resistanceBonus: number,\r\n  level?: number\r\n) {\r\n  /**\r\n   * Get the check bonus and DC\r\n   * Calculate the chance of each outcome\r\n   * Go through each damage and evaluate it, put damage types together\r\n   * Go through each damage type and apply weakness/resistance\r\n   * Return damage trees and chances\r\n   */\r\n  let bonus = 0;\r\n  let DC = 10;\r\n  let targetValue;\r\n  let targetLevel;\r\n  if (level === undefined) {\r\n    level = target.routineLevel;\r\n    targetLevel = target.targetLevel;\r\n    switch (activity.targetType) {\r\n      case defenses.AC:\r\n        targetValue = target.overrideAC;\r\n        break;\r\n      case defenses.FORT:\r\n        targetValue = target.overrideFort;\r\n        break;\r\n      case defenses.REF:\r\n        targetValue = target.overrideRef;\r\n        break;\r\n      case defenses.WILL:\r\n        targetValue = target.overrideWill;\r\n        break;\r\n      case defenses.PER:\r\n        targetValue = target.overridePer;\r\n        break;\r\n\r\n      default:\r\n        targetValue = target.overrideAC;\r\n        break;\r\n    }\r\n  } else {\r\n    targetLevel = level + target.levelDiff;\r\n    switch (activity.targetType) {\r\n      case defenses.AC:\r\n        targetValue = defaultACs[target.ACTrend];\r\n        break;\r\n      case defenses.FORT:\r\n        targetValue = defaultSaves[target.FortTrend];\r\n        break;\r\n      case defenses.REF:\r\n        targetValue = defaultSaves[target.RefTrend];\r\n        break;\r\n      case defenses.WILL:\r\n        targetValue = defaultSaves[target.WillTrend];\r\n        break;\r\n      case defenses.PER:\r\n        targetValue = defaultSaves[target.PerTrend];\r\n        break;\r\n\r\n      default:\r\n        targetValue = defaultACs[target.ACTrend];\r\n        break;\r\n    }\r\n\r\n    targetValue = targetValue[targetLevel];\r\n  }\r\n\r\n  let targetPenalty = targetState.Frightened;\r\n  if (\r\n    activity.targetType === defenses.AC ||\r\n    activity.targetType === defenses.REF\r\n  )\r\n    targetPenalty = Math.max(targetPenalty, targetState.Clumsy);\r\n  switch (activity.type) {\r\n    case activityTypes.STRIKE:\r\n    case activityTypes.SPELLATTACK:\r\n    case activityTypes.SKILL:\r\n      bonus = profTrendValues[activity.profTrend][level];\r\n      bonus += statTrendValues[activity.statTrend][level];\r\n      bonus += itemTrendValues[activity.itemTrend][level];\r\n      bonus += activity.bonusAdjustments[level];\r\n      bonus += MAPvalues[activity.MAP];\r\n      DC = targetValue + defenseBonus - targetPenalty;\r\n      if (activity.targetType === defenses.AC) {\r\n        if (targetState.Flatfooted) DC -= 2;\r\n      } else {\r\n        if (activity.targetType === defenses.selfDC) {\r\n          DC = standardDC[level];\r\n        } else if (activity.targetType === defenses.targetDC) {\r\n          DC = standardDC[targetLevel];\r\n        } else {\r\n          DC += 10;\r\n        }\r\n      }\r\n      break;\r\n\r\n    case activityTypes.SAVE:\r\n      bonus = targetValue + defenseBonus - targetPenalty;\r\n      DC = 10 + profTrendValues[activity.profTrend][level];\r\n      DC += statTrendValues[activity.statTrend][level];\r\n      DC += itemTrendValues[activity.itemTrend][level];\r\n      DC += activity.bonusAdjustments[level];\r\n      if (activity.targetType === defenses.AC) {\r\n        bonus -= 10;\r\n      } else if (activity.targetType === defenses.selfDC) {\r\n        bonus = standardDC[level] - 10;\r\n      } else if (activity.targetType === defenses.targetDC) {\r\n        bonus = standardDC[targetLevel] - 10;\r\n      }\r\n      break;\r\n\r\n    default:\r\n      console.log(`Activity type ${activity.type} not implemented`);\r\n  }\r\n\r\n  let critPercent = getCritSuccessPercent(bonus, DC);\r\n  let succPercent = getSuccessPercent(bonus, DC);\r\n  let failPercent = getFailurePercent(bonus, DC);\r\n  let crfaPercent = getCritFailurePercent(bonus, DC);\r\n  if (activity.rollType === rollTypes.ADVANTAGE) {\r\n    let notcrit = 100 - critPercent;\r\n    critPercent = 100 - (notcrit * notcrit) / 100;\r\n    let nothit = notcrit - succPercent;\r\n    succPercent = 100 - (nothit * nothit) / 100 - critPercent;\r\n    let notfail = nothit - failPercent;\r\n    failPercent = 100 - (notfail * notfail) / 100 - succPercent - critPercent;\r\n    crfaPercent = (crfaPercent * crfaPercent) / 100;\r\n  } else if (activity.rollType === rollTypes.DISADVANTAGE) {\r\n    let notcrfa = 100 - crfaPercent;\r\n    crfaPercent = 100 - (notcrfa * notcrfa) / 100;\r\n    let notfail = notcrfa - failPercent;\r\n    failPercent = 100 - (notfail * notfail) / 100 - crfaPercent;\r\n    let notsucc = notfail - succPercent;\r\n    succPercent = 100 - (notsucc * notsucc) / 100 - failPercent - crfaPercent;\r\n    critPercent = (critPercent * critPercent) / 100;\r\n  }\r\n  const chances = [\r\n    critPercent / 100,\r\n    succPercent / 100,\r\n    failPercent / 100,\r\n    crfaPercent / 100,\r\n  ];\r\n  const critDamagesByType: BaseContext = {\r\n    normal: {},\r\n    persistent: {},\r\n  };\r\n  const succDamagesByType: BaseContext = {\r\n    normal: {},\r\n    persistent: {},\r\n  };\r\n  const failDamagesByType: BaseContext = {\r\n    normal: {},\r\n    persistent: {},\r\n  };\r\n  const crfaDamagesByType: BaseContext = {\r\n    normal: {},\r\n    persistent: {},\r\n  };\r\n  const critDamages: FinalContext = {\r\n    normal: { staticDamage: 0, damageDist: [1] },\r\n    persistent: { staticDamage: 0, damageDist: [1] },\r\n  };\r\n  const succDamages: FinalContext = {\r\n    normal: { staticDamage: 0, damageDist: [1] },\r\n    persistent: { staticDamage: 0, damageDist: [1] },\r\n  };\r\n  const failDamages: FinalContext = {\r\n    normal: { staticDamage: 0, damageDist: [1] },\r\n    persistent: { staticDamage: 0, damageDist: [1] },\r\n  };\r\n  const crfaDamages: FinalContext = {\r\n    normal: { staticDamage: 0, damageDist: [1] },\r\n    persistent: { staticDamage: 0, damageDist: [1] },\r\n  };\r\n  // can't have dist here, need just damage types...\r\n  // need to make new objects for dists... TODO\r\n  const damageTreesByType: BaseContext[] = [\r\n    critDamagesByType,\r\n    succDamagesByType,\r\n    failDamagesByType,\r\n    crfaDamagesByType,\r\n  ];\r\n  const damageTrees: FinalContext[] = [\r\n    critDamages,\r\n    succDamages,\r\n    failDamages,\r\n    crfaDamages,\r\n  ];\r\n\r\n  // Start going through each damage and evaluate it, put damage types together\r\n  damages.forEach((damage) => {\r\n    let {\r\n      damageCondition,\r\n      diceSize,\r\n      fatal,\r\n      fatalDie,\r\n\r\n      damageTrend,\r\n      damageType,\r\n      material,\r\n      persistent,\r\n      multiplier,\r\n      damageWhen,\r\n    } = damage;\r\n    let shouldAddThisDamage = false;\r\n    for (let state of damageWhen) {\r\n      if (state === whenConditions.Always) {\r\n        shouldAddThisDamage = true;\r\n        break;\r\n      }\r\n      let val = targetState[state];\r\n      if (val && val > 0) {\r\n        shouldAddThisDamage = true;\r\n        break;\r\n      }\r\n    }\r\n    // if (typeof val === \"boolean\") {\r\n    //   if (val) {\r\n    //     shouldAddThisDamage = true;\r\n    //     break;\r\n    //   }\r\n    // } else {\r\n    //   if (val > 0) {\r\n    //     shouldAddThisDamage = true;\r\n    //     break;\r\n    //   }\r\n    // }\r\n\r\n    if (!shouldAddThisDamage) return;\r\n\r\n    let diceNum = dieTrendValues[damage.dieTrend][level as number];\r\n    diceNum += damage.dieAdjustments[level as number];\r\n    if (diceNum < 0) diceNum = 0;\r\n    let staticDamage = 0;\r\n    for (let i = 0; i < damageTrend.length; i++) {\r\n      staticDamage += damageTrendValues[damageTrend[i]][level as number];\r\n    }\r\n    staticDamage += damage.damageAdjustments[level as number];\r\n    let damageDist = [1];\r\n    let fatalDist = [1];\r\n    let diceArray = [];\r\n    for (let i = 0; i < diceSize; i++) {\r\n      diceArray.push(1 / diceSize);\r\n    }\r\n    for (let i = 0; i < diceNum; i++) {\r\n      damageDist = convolve(damageDist, diceArray);\r\n    }\r\n    if (fatal) {\r\n      let diceArray = [];\r\n      for (let i = 0; i < fatalDie; i++) {\r\n        diceArray.push(1 / fatalDie);\r\n      }\r\n      for (let i = 0; i < diceNum; i++) {\r\n        fatalDist = convolve(fatalDist, diceArray);\r\n      }\r\n    }\r\n    staticDamage += diceNum;\r\n\r\n    // Add damage to damage trees appropriately\r\n    switch (damageCondition) {\r\n      case dCond.STRIKE:\r\n        addDamage(\r\n          succDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          critDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          fatal ? fatalDist : damageDist,\r\n          multiplier * 2\r\n        );\r\n        break;\r\n\r\n      case dCond.BASIC:\r\n        addDamage(\r\n          succDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 0.5\r\n        );\r\n        addDamage(\r\n          failDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          crfaDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 2\r\n        );\r\n        break;\r\n\r\n      case dCond.CRIF:\r\n        addDamage(\r\n          crfaDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.FAIL:\r\n        addDamage(\r\n          failDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.SUCC:\r\n        addDamage(\r\n          succDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.CRIT:\r\n        addDamage(\r\n          critDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.AT_LEAST_SUCC:\r\n        addDamage(\r\n          succDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          critDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.AT_LEAST_FAIL:\r\n        addDamage(\r\n          failDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          succDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          critDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.FAIL_WORSE:\r\n        addDamage(\r\n          crfaDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          failDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.SUCC_WORSE:\r\n        addDamage(\r\n          crfaDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          failDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          succDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n\r\n        break;\r\n\r\n      case dCond.ALWAYS:\r\n        addDamage(\r\n          crfaDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          failDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          succDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          critDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      default:\r\n        console.log(`Damage condition ${damageCondition} not implemented yet.`);\r\n    }\r\n  });\r\n  // end going through each damage and evaluate it, put damage types together\r\n\r\n  // Start going through each damage type and apply weakness/resistance\r\n  for (let damageTreeIndex = 0; damageTreeIndex < 4; damageTreeIndex++) {\r\n    let damageTree = damageTreesByType[damageTreeIndex];\r\n    let finalTree = damageTrees[damageTreeIndex];\r\n    let damageQuality: DamageQuality;\r\n    for (damageQuality in damageQualities) {\r\n      let totalStaticDamage = 0;\r\n      let totalDamageDist = [1];\r\n      let type: DamageType;\r\n      for (type in damageTree[damageQuality]) {\r\n        let { material, staticDamage, damageDist } =\r\n          damageTree[damageQuality][type]!;\r\n\r\n        // ignore if there's 0 damage\r\n        if (damageDist.length === 1 && staticDamage <= 0) continue;\r\n\r\n        // make min damage 1 before resistances\r\n        ({ staticDamage, damageDist } = applyMin(staticDamage, damageDist, 1));\r\n\r\n        // find max weakness and resistance, weaknesses are negative numbers\r\n        let maxW = 0;\r\n        let maxR = 0;\r\n        for (let weakness of weaknesses) {\r\n          if (weakness.type === type || weakness.type === material) {\r\n            if (weakness.value + resistanceBonus < 0) {\r\n              maxW = Math.min(maxW, weakness.value + resistanceBonus);\r\n            } else if (weakness.value + resistanceBonus > 0) {\r\n              maxR = Math.max(maxR, weakness.value + resistanceBonus);\r\n            }\r\n          }\r\n        }\r\n        staticDamage = staticDamage - (maxR + maxW);\r\n\r\n        // make min damage 0 after resistances\r\n        ({ staticDamage, damageDist } = applyMin(staticDamage, damageDist, 0));\r\n\r\n        totalStaticDamage += staticDamage;\r\n        totalDamageDist = convolve(totalDamageDist, damageDist);\r\n      }\r\n      finalTree[damageQuality].staticDamage = totalStaticDamage;\r\n      finalTree[damageQuality].damageDist = totalDamageDist;\r\n    }\r\n    // Add persistent damage to normal damage with a multiplier\r\n    let { staticDamage, damageDist } = multiplyDist(\r\n      finalTree[\"persistent\"].staticDamage,\r\n      finalTree[\"persistent\"].damageDist,\r\n      target.persistentMultiplier\r\n    );\r\n    finalTree[\"normal\"].staticDamage += staticDamage;\r\n    finalTree[\"normal\"].damageDist = convolve(\r\n      finalTree[\"normal\"].damageDist,\r\n      damageDist\r\n    );\r\n  }\r\n  // End going through each damage type and apply weakness/resistance\r\n\r\n  return { damageTrees, chances };\r\n}\r\n\r\nexport { calculateExpectedDamage };\r\n","import { convolve, consolidateDists } from \"./Distribution\";\r\nimport { calculateExpectedDamage } from \"./Calculation\";\r\nimport {\r\n  Condition,\r\n  conditions,\r\n  effectStateTypes,\r\n  effectTypes,\r\n  effectValueTypes,\r\n  TargetState,\r\n  whenConditions,\r\n} from \"../Model/types\";\r\nimport {\r\n  ActivityPath,\r\n  Damage,\r\n  Effect,\r\n  Routine,\r\n} from \"../Routines/RoutineSlice/RoutineTypes\";\r\nimport { Dictionary } from \"@reduxjs/toolkit\";\r\nimport { Target } from \"../Display/targetSlice\";\r\nimport { Weakness } from \"../Display/weaknessSlice\";\r\n\r\n/**\r\n * Checks given degreeOfSuccess is in the condition\r\n * like Success is in Success or better\r\n * @param {*} condition\r\n * @param {*} degreeOfSuccess\r\n * @returns\r\n */\r\nfunction validateCondition(condition: Condition, degreeOfSuccess: number) {\r\n  let indicies: number[] = [];\r\n  // console.log(`cond is: ${ap.condition}`);\r\n  switch (condition) {\r\n    case conditions.ALWAYS:\r\n      indicies = [0, 1, 2, 3];\r\n      break;\r\n\r\n    case conditions.AT_LEAST_FAIL:\r\n      indicies = [0, 1, 2];\r\n      break;\r\n\r\n    case conditions.AT_LEAST_SUCC:\r\n      indicies = [0, 1];\r\n      break;\r\n\r\n    case conditions.CRIF:\r\n      indicies = [3];\r\n      break;\r\n\r\n    case conditions.CRIT:\r\n      indicies = [0];\r\n      break;\r\n\r\n    case conditions.FAIL:\r\n      indicies = [2];\r\n      break;\r\n\r\n    case conditions.FAIL_WORSE:\r\n      indicies = [2, 3];\r\n      break;\r\n\r\n    case conditions.SUCC:\r\n      indicies = [1];\r\n      break;\r\n\r\n    case conditions.SUCC_WORSE:\r\n      indicies = [1, 2, 3];\r\n      break;\r\n\r\n    default:\r\n  }\r\n  return indicies.includes(degreeOfSuccess);\r\n}\r\n\r\nclass ActivityPathEvaluator {\r\n  activityPaths: Dictionary<ActivityPath>;\r\n  target: Target;\r\n  damages: Dictionary<Damage>;\r\n  effects: Dictionary<Effect>;\r\n  weaknesses: Dictionary<Weakness>;\r\n  selectedRoutine?: number;\r\n  constructor(\r\n    activityPaths: Dictionary<ActivityPath>,\r\n    targets: Dictionary<Target>,\r\n    damages: Dictionary<Damage>,\r\n    effects: Dictionary<Effect>,\r\n    weaknesses: Dictionary<Weakness>,\r\n    selectedRoutine?: number\r\n  ) {\r\n    this.activityPaths = activityPaths;\r\n    this.target = targets[0]!;\r\n    this.damages = damages;\r\n    this.effects = effects;\r\n    this.weaknesses = weaknesses;\r\n    this.selectedRoutine = selectedRoutine;\r\n  }\r\n\r\n  canEvaluate(level: number, routine: Routine) {\r\n    const levelDiff = this.target.levelDiff;\r\n    // console.log(`level ${level}, levelDiff ${levelDiff}`);\r\n    if (level < routine.startLevel || level > routine.endLevel) return false;\r\n    if (level + levelDiff < -1 || level + levelDiff > 24) return false;\r\n    return true;\r\n  }\r\n  canEvaluateSingleLevel(routine: Routine) {\r\n    const level = this.target.routineLevel;\r\n    // console.log(`level ${level}, levelDiff ${levelDiff}`);\r\n    if (level < routine.startLevel || level > routine.endLevel) return false;\r\n    return true;\r\n  }\r\n\r\n  evalRoutine(\r\n    routine: Routine,\r\n    ACBonus: number,\r\n    resBonus: number,\r\n    level?: number\r\n  ) {\r\n    const initialTargetState = {\r\n      // flatfooted: this.target.flatfooted,\r\n      // prone: false,\r\n      // grappled: false,\r\n      // frightened: 0,\r\n      // clumsy: 0,\r\n    } as TargetState;\r\n    for (let effectState of Object.values(effectStateTypes)) {\r\n      initialTargetState[effectState] = false;\r\n    }\r\n    for (let effectValue of Object.values(effectValueTypes)) {\r\n      initialTargetState[effectValue] = 0;\r\n    }\r\n    initialTargetState.Flatfooted = this.target.flatfooted;\r\n\r\n    const dataArray = [];\r\n    const cumulative = [];\r\n    const PdataArray = [];\r\n    const Pcumulative = [];\r\n\r\n    let expD = 0;\r\n    let expP = 0;\r\n    let routineDDist = [1];\r\n    let routinePDDist = [1];\r\n    for (let i = 0; i < routine.apIds.length; i++) {\r\n      let activityPath = this.activityPaths[routine.apIds[i]]!;\r\n      let [damageDist, PdamageDist] = this.evalPath(\r\n        activityPath,\r\n        initialTargetState,\r\n        ACBonus,\r\n        resBonus,\r\n        level\r\n      );\r\n      routineDDist = convolve(routineDDist, damageDist);\r\n      routinePDDist = convolve(routinePDDist, PdamageDist);\r\n    }\r\n    let currentSum = 1;\r\n    for (let i = 0; i < routineDDist.length; i++) {\r\n      dataArray.push(i);\r\n      cumulative.push(currentSum);\r\n      currentSum -= routineDDist[i];\r\n\r\n      expD += routineDDist[i] * i;\r\n    }\r\n    currentSum = 1;\r\n    for (let i = 0; i < routinePDDist.length; i++) {\r\n      PdataArray.push(i);\r\n      Pcumulative.push(currentSum);\r\n      currentSum -= routinePDDist[i];\r\n\r\n      expP += routinePDDist[i] * i;\r\n    }\r\n    return {\r\n      expD,\r\n      expP,\r\n      dataArray,\r\n      routineDDist,\r\n      cumulative,\r\n      PdataArray,\r\n      routinePDDist,\r\n      Pcumulative,\r\n    };\r\n  }\r\n\r\n  evalPath(\r\n    activityPath: ActivityPath,\r\n    targetState: TargetState,\r\n    defenseBonus: number,\r\n    resistanceBonus: number,\r\n    level?: number\r\n  ) {\r\n    // evaluate this and all following APs\r\n    let currentTarget = this.target;\r\n    let currentDamages = activityPath.damages.map(\r\n      (damageId) => this.damages[damageId]!\r\n    );\r\n    //currentDamages.push(activityPath);\r\n    let currentEffects = activityPath.effects.map(\r\n      (effectId) => this.effects[effectId]!\r\n    );\r\n    let currentWeaknesses = currentTarget.weaknesses.map(\r\n      (weaknessId) => this.weaknesses[weaknessId]!\r\n    );\r\n\r\n    // calculate the expected damage for this activity\r\n    let { damageTrees, chances } = calculateExpectedDamage(\r\n      activityPath,\r\n      currentDamages,\r\n      currentTarget,\r\n      targetState,\r\n      currentWeaknesses,\r\n      defenseBonus,\r\n      resistanceBonus,\r\n      level\r\n    );\r\n\r\n    const targetStates = [targetState, targetState, targetState, targetState];\r\n    // go through each degree of success\r\n    for (let i = 0; i < 4; i++) {\r\n      // go though each valid effect and update targetStates\r\n      currentEffects.forEach((effect) => {\r\n        let {\r\n          effectCondition,\r\n          effectType,\r\n          effectValue,\r\n          startLevel,\r\n          endLevel,\r\n          damageWhen,\r\n        } = effect;\r\n        if (level !== undefined) {\r\n          if (level < startLevel || level > endLevel) return;\r\n        } else {\r\n          if (\r\n            this.target.routineLevel < startLevel ||\r\n            this.target.routineLevel > endLevel\r\n          )\r\n            return;\r\n        }\r\n        let shouldAddThisEffect = false;\r\n        for (let state of damageWhen) {\r\n          if (state === whenConditions.Always) {\r\n            shouldAddThisEffect = true;\r\n            break;\r\n          }\r\n          let val = targetStates[i][state];\r\n          if (val && val > 0) {\r\n            shouldAddThisEffect = true;\r\n            break;\r\n          }\r\n        }\r\n        if (!shouldAddThisEffect) return;\r\n\r\n        if (validateCondition(effectCondition, i)) {\r\n          switch (effectType) {\r\n            case effectTypes.RESTRAINED:\r\n              if (targetStates[i].Restrained !== true)\r\n                targetStates[i] = {\r\n                  ...targetStates[i],\r\n                  Flatfooted: true,\r\n                  Grappled: true,\r\n                  Restrained: true,\r\n                };\r\n              break;\r\n\r\n            case effectTypes.GRAPPLED:\r\n              if (targetStates[i].Grappled !== true)\r\n                targetStates[i] = {\r\n                  ...targetStates[i],\r\n                  Flatfooted: true,\r\n                  Grappled: true,\r\n                };\r\n              break;\r\n\r\n            case effectTypes.PRONE:\r\n              if (targetStates[i].Prone !== true)\r\n                targetStates[i] = {\r\n                  ...targetStates[i],\r\n                  Flatfooted: true,\r\n                  Prone: true,\r\n                };\r\n              break;\r\n\r\n            case effectTypes.FLATFOOT:\r\n              if (targetStates[i].Flatfooted !== true)\r\n                targetStates[i] = { ...targetStates[i], Flatfooted: true };\r\n              break;\r\n\r\n            case effectTypes.FRIGHTENED:\r\n              if (effectValue && targetStates[i].Frightened < effectValue)\r\n                targetStates[i] = {\r\n                  ...targetStates[i],\r\n                  Frightened: effectValue,\r\n                };\r\n              break;\r\n\r\n            case effectTypes.CLUMSY:\r\n              if (effectValue && targetStates[i].Clumsy < effectValue)\r\n                targetStates[i] = {\r\n                  ...targetStates[i],\r\n                  Clumsy: effectValue,\r\n                };\r\n              break;\r\n\r\n            default:\r\n              console.log(`Effect type ${effectType} not implemented`);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // go through each activity path, depending on its condition add its damage distributions to this activities appropriately\r\n    activityPath.apIds.forEach((apId) => {\r\n      let ap = this.activityPaths[apId]!;\r\n\r\n      const evaluations = new Map();\r\n      // go through each degree of success\r\n      for (let i = 0; i < 4; i++) {\r\n        // evaluate if necessary and add distribution to damageTrees\r\n        if (validateCondition(ap.condition, i)) {\r\n          if (evaluations.has(targetStates[i])) {\r\n            // already evaluated\r\n          } else {\r\n            let [pathDist, pathPDist] = this.evalPath(\r\n              ap,\r\n              targetStates[i],\r\n              defenseBonus,\r\n              resistanceBonus,\r\n              level\r\n            );\r\n            evaluations.set(targetStates[i], { pathDist, pathPDist });\r\n          }\r\n          damageTrees[i].normal.damageDist = convolve(\r\n            damageTrees[i].normal.damageDist,\r\n            evaluations.get(targetStates[i]).pathDist\r\n          );\r\n          damageTrees[i].persistent.damageDist = convolve(\r\n            damageTrees[i].persistent.damageDist,\r\n            evaluations.get(targetStates[i]).pathPDist\r\n          );\r\n        }\r\n      }\r\n    });\r\n\r\n    let damageDist = consolidateDists(\r\n      { distribution: damageTrees[0].normal, chance: chances[0] },\r\n      { distribution: damageTrees[1].normal, chance: chances[1] },\r\n      { distribution: damageTrees[2].normal, chance: chances[2] },\r\n      { distribution: damageTrees[3].normal, chance: chances[3] }\r\n    );\r\n    let PdamageDist = consolidateDists(\r\n      { distribution: damageTrees[0].persistent, chance: chances[0] },\r\n      { distribution: damageTrees[1].persistent, chance: chances[1] },\r\n      { distribution: damageTrees[2].persistent, chance: chances[2] },\r\n      { distribution: damageTrees[3].persistent, chance: chances[3] }\r\n    );\r\n    // console.log(damageDist);\r\n\r\n    return [damageDist, PdamageDist];\r\n  }\r\n}\r\n\r\nexport { ActivityPathEvaluator };\r\n","import React from \"react\";\r\n\r\nimport {\r\n  selectactivityPathEntities,\r\n  selectSelectedRoutine,\r\n} from \"../Routines/RoutineSlice/routineSlice\";\r\nimport { Routine } from \"../Routines/RoutineSlice/RoutineTypes\";\r\nimport { selectdamageEntities } from \"../Routines/RoutineSlice/routineSlice\";\r\nimport { selectRoutineEntities } from \"../Routines/RoutineSlice/routineSlice\";\r\nimport { selecttargetEntities } from \"./targetSlice\";\r\nimport { selectweaknessEntities } from \"./weaknessSlice\";\r\nimport { graphTypes } from \"../Model/types\";\r\nimport { selecteffectEntities } from \"../Routines/RoutineSlice/routineSlice\";\r\n\r\nimport { ActivityPathEvaluator } from \"../Calculation/EvaluateActivityPath\";\r\n\r\nimport Plotly from \"plotly.js-basic-dist\";\r\nimport createPlotlyComponent from \"react-plotly.js/factory\";\r\nimport { defaultACs, defaultSaves } from \"../Model/defaults\";\r\nimport { Dictionary } from \"@reduxjs/toolkit\";\r\nimport { useAppSelector } from \"../App/hooks\";\r\nconst Plot = createPlotlyComponent(Plotly);\r\n\r\nconst useGenerateGraphs = (graphType: string) => {\r\n  const routines = useAppSelector(selectRoutineEntities);\r\n  const activityPaths = useAppSelector(selectactivityPathEntities);\r\n  const targets = useAppSelector(selecttargetEntities);\r\n  const damages = useAppSelector(selectdamageEntities);\r\n  const effects = useAppSelector(selecteffectEntities);\r\n  const weaknesses = useAppSelector(selectweaknessEntities);\r\n  const selectedRoutine = useAppSelector(selectSelectedRoutine);\r\n\r\n  const evaluator = new ActivityPathEvaluator(\r\n    activityPaths,\r\n    targets,\r\n    damages,\r\n    effects,\r\n    weaknesses,\r\n    selectedRoutine\r\n  );\r\n\r\n  const currentTarget = targets[0]!;\r\n  let title = \"@\" + currentTarget.routineLevel;\r\n  let byLevelTile = currentTarget.name;\r\n\r\n  title += \" Vs \";\r\n  title += \" AC: \"; //+ defaultACs[currentTarget.ACTrend][displayLevel];\r\n  title += \" Fort: \"; //+ defaultSaves[currentTarget.FortTrend][displayLevel];\r\n  title += \" Ref: \"; //+ defaultSaves[currentTarget.RefTrend][displayLevel];\r\n  title += \" Will: \"; //+ defaultSaves[currentTarget.WillTrend][displayLevel];\r\n  title += \" Per: \"; //+ defaultSaves[currentTarget.PerTrend][displayLevel];\r\n\r\n  // byLevelTile += \" Vs \";\r\n  // byLevelTile += \" AC: \" + currentTarget.ACTrend;\r\n  // byLevelTile += \" Fort: \" + currentTarget.FortTrend;\r\n  // byLevelTile += \" Ref: \" + currentTarget.RefTrend;\r\n  // byLevelTile += \" Will: \" + currentTarget.WillTrend;\r\n  // byLevelTile += \" Per: \" + currentTarget.PerTrend;\r\n\r\n  let datasets: Plotly.Data[] = [];\r\n  let perDatasets: Plotly.Data[] = [];\r\n  let expectedDamages;\r\n  let expectedPersistentDamages;\r\n  switch (graphType) {\r\n    case graphTypes.DISTRIBUTION:\r\n      ({ expectedDamages, expectedPersistentDamages, datasets, perDatasets } =\r\n        evaluateDistribution(routines, evaluator));\r\n      break;\r\n    case graphTypes.PMDEFENSE:\r\n      ({ expectedDamages, expectedPersistentDamages, datasets, perDatasets } =\r\n        evaluatePM(routines, evaluator, true));\r\n      break;\r\n    case graphTypes.PMRES:\r\n      ({ expectedDamages, expectedPersistentDamages, datasets, perDatasets } =\r\n        evaluatePM(routines, evaluator, false));\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  let { datasets: byLeveldatasets, perDatasets: byLevelperDatasets } =\r\n    evaluateByLevel(routines, evaluator);\r\n\r\n  let xtitle;\r\n  let ytitle;\r\n  if (graphType === graphTypes.DISTRIBUTION) {\r\n    xtitle = \"damage\";\r\n    ytitle = \"chance\";\r\n  } else if (graphType === graphTypes.PMDEFENSE) {\r\n    xtitle = \"+/- AC/Save Bonus\";\r\n    ytitle = \"Expected Damage\";\r\n  } else if (graphType === graphTypes.PMRES) {\r\n    xtitle = \"+/- Resistance/Weakness\";\r\n    ytitle = \"Expected Damage\";\r\n  }\r\n\r\n  let damageChart = (\r\n    <Plot\r\n      className=\"plot\"\r\n      data={datasets}\r\n      layout={{\r\n        title: title,\r\n        autosize: true,\r\n        xaxis: { title: xtitle },\r\n        yaxis: { title: ytitle },\r\n        legend: {\r\n          x: 1,\r\n          y: 1,\r\n          xanchor: \"right\",\r\n        },\r\n        margin: {\r\n          l: 40,\r\n          r: 40,\r\n        },\r\n      }}\r\n      useResizeHandler={true}\r\n      style={{ width: \"100%\", height: \"100%\" }}\r\n    />\r\n  );\r\n  let persistentDamageChart = (\r\n    <Plot\r\n      className=\"plot\"\r\n      data={perDatasets}\r\n      layout={{\r\n        title: \"Expected Persistent Damage\",\r\n        autosize: true,\r\n        xaxis: { title: \"persistent damage\" },\r\n        yaxis: { title: \"chance\" },\r\n        legend: {\r\n          x: 1,\r\n          y: 1,\r\n          xanchor: \"right\",\r\n        },\r\n        margin: {\r\n          l: 40,\r\n          r: 40,\r\n        },\r\n      }}\r\n      useResizeHandler={true}\r\n      style={{ width: \"100%\", height: \"100%\" }}\r\n    />\r\n  );\r\n  let byLevelDamageChart = (\r\n    <Plot\r\n      className=\"plot\"\r\n      data={byLeveldatasets}\r\n      layout={{\r\n        title: byLevelTile,\r\n        autosize: true,\r\n        xaxis: { title: \"Level\" },\r\n        yaxis: { title: \"Expected Damage\" },\r\n        legend: {\r\n          x: 0,\r\n          y: 1,\r\n          xanchor: \"left\",\r\n        },\r\n        margin: {\r\n          l: 40,\r\n          r: 40,\r\n        },\r\n      }}\r\n      useResizeHandler={true}\r\n      style={{ width: \"100%\", height: \"100%\" }}\r\n    />\r\n  );\r\n  let byLevelPerDamageChart = (\r\n    <Plot\r\n      className=\"plot\"\r\n      data={byLevelperDatasets}\r\n      layout={{\r\n        title: byLevelTile,\r\n        autosize: true,\r\n        xaxis: { title: \"Level\" },\r\n        yaxis: { title: \"Expected Persistent Damage\" },\r\n        legend: {\r\n          x: 1,\r\n          y: 1,\r\n          xanchor: \"right\",\r\n        },\r\n        margin: {\r\n          l: 40,\r\n          r: 40,\r\n        },\r\n      }}\r\n      useResizeHandler={true}\r\n      style={{ width: \"100%\", height: \"100%\" }}\r\n    />\r\n  );\r\n  return {\r\n    expectedDamages,\r\n    expectedPersistentDamages,\r\n    damageChart,\r\n    persistentDamageChart,\r\n    byLevelDamageChart,\r\n    byLevelPerDamageChart,\r\n  };\r\n};\r\n\r\nconst evaluateByLevel = (\r\n  routines: Dictionary<Routine>,\r\n  evaluator: ActivityPathEvaluator\r\n) => {\r\n  let datasets = [];\r\n  let perDatasets = [];\r\n\r\n  // Evaluate the selected routine first so we can display other routines as a % of that\r\n  const selectedRoutineDamage: { [key: number]: number } = {};\r\n  const selectedRoutinePDamage: { [key: number]: number } = {};\r\n  if (\r\n    evaluator.target.percentSelectedRoutine &&\r\n    evaluator.selectedRoutine !== undefined\r\n  ) {\r\n    let routine = routines[evaluator.selectedRoutine]!;\r\n    for (let level = 1; level <= 20; level++) {\r\n      if (!evaluator.canEvaluate(level, routine)) continue;\r\n      let { expD, expP } = evaluator.evalRoutine(routine, 0, 0, level);\r\n      selectedRoutineDamage[level] = expD;\r\n      selectedRoutinePDamage[level] = expP;\r\n    }\r\n  }\r\n\r\n  for (let id in routines) {\r\n    let routine = routines[id]!;\r\n    if (!routine.display) continue;\r\n\r\n    const levelArray = [];\r\n    const expDbyLevel = [];\r\n    const expPDbyLevel = [];\r\n    for (let level = 1; level <= 20; level++) {\r\n      if (!evaluator.canEvaluate(level, routine)) continue;\r\n\r\n      let { expD, expP } = evaluator.evalRoutine(routine, 0, 0, level);\r\n      if (evaluator.target.percentSelectedRoutine) {\r\n        if (level in selectedRoutineDamage) {\r\n          levelArray.push(level);\r\n          expDbyLevel.push(expD / selectedRoutineDamage[level]);\r\n          expPDbyLevel.push(expP / selectedRoutinePDamage[level]);\r\n        }\r\n      } else {\r\n        levelArray.push(level);\r\n        expDbyLevel.push(expD);\r\n        expPDbyLevel.push(expP);\r\n      }\r\n    }\r\n    datasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: levelArray,\r\n      y: expDbyLevel,\r\n      yaxis: \"y\",\r\n    } as const);\r\n    perDatasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: levelArray,\r\n      y: expPDbyLevel,\r\n      yaxis: \"y\",\r\n    } as const);\r\n  }\r\n\r\n  return { datasets, perDatasets };\r\n};\r\n\r\nconst evaluatePM = (\r\n  routines: Dictionary<Routine>,\r\n  evaluator: ActivityPathEvaluator,\r\n  defense = true\r\n) => {\r\n  let datasets = [];\r\n  let perDatasets = [];\r\n  let expectedDamages = [];\r\n  let expectedPersistentDamages = [];\r\n\r\n  // return {\r\n  //   expectedDamages,\r\n  //   expectedPersistentDamages,\r\n  //   datasets,\r\n  //   perDatasets,\r\n  // };\r\n\r\n  for (let id in routines) {\r\n    let routine = routines[id]!;\r\n    if (!routine.display) continue;\r\n    if (!evaluator.canEvaluateSingleLevel(routine)) continue;\r\n\r\n    const bonusArray = [];\r\n    const expDbyBonus = [];\r\n    const expPDbyBonus = [];\r\n\r\n    for (let bonus = -5; bonus <= 5; bonus++) {\r\n      bonusArray.push(bonus);\r\n      let { expD, expP } = evaluator.evalRoutine(\r\n        routine,\r\n        defense ? bonus : 0,\r\n        defense ? 0 : bonus\r\n      );\r\n\r\n      if (bonus === 0) {\r\n        expectedDamages.push(\r\n          <div key={routine.id}>\r\n            {routine.name}\r\n            {\": \"}\r\n            {expD.toFixed(2)}\r\n          </div>\r\n        );\r\n        expectedPersistentDamages.push(\r\n          <div key={routine.id}>\r\n            {routine.name}\r\n            {\": \"}\r\n            {expP.toFixed(2)}\r\n          </div>\r\n        );\r\n      }\r\n\r\n      expDbyBonus.push(expD);\r\n      expPDbyBonus.push(expP);\r\n    }\r\n\r\n    datasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: bonusArray,\r\n      y: expDbyBonus,\r\n      yaxis: \"y\",\r\n    } as const);\r\n    perDatasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: bonusArray,\r\n      y: expPDbyBonus,\r\n      yaxis: \"y\",\r\n    } as const);\r\n  }\r\n  return { expectedDamages, expectedPersistentDamages, datasets, perDatasets };\r\n};\r\n\r\nconst evaluateDistribution = (\r\n  routines: Dictionary<Routine>,\r\n  evaluator: ActivityPathEvaluator\r\n) => {\r\n  let datasets = [];\r\n  let perDatasets = [];\r\n  let expectedDamages = [];\r\n  let expectedPersistentDamages = [];\r\n\r\n  // if (!evaluator.canEvaluate(displayLevel))\r\n  //   return {\r\n  //     expectedDamages,\r\n  //     expectedPersistentDamages,\r\n  //     datasets,\r\n  //     perDatasets,\r\n  //   };\r\n\r\n  for (let id in routines) {\r\n    let routine = routines[id]!;\r\n    if (!routine.display) continue;\r\n    if (!evaluator.canEvaluateSingleLevel(routine)) continue;\r\n    let {\r\n      expD,\r\n      expP,\r\n      dataArray,\r\n      routineDDist,\r\n      cumulative,\r\n      PdataArray,\r\n      routinePDDist,\r\n      Pcumulative,\r\n    } = evaluator.evalRoutine(routine, 0, 0);\r\n    expectedDamages.push(\r\n      <div key={routine.id}>\r\n        {routine.name}\r\n        {\": \"}\r\n        {expD.toFixed(2)}\r\n      </div>\r\n    );\r\n    expectedPersistentDamages.push(\r\n      <div key={routine.id}>\r\n        {routine.name}\r\n        {\": \"}\r\n        {expP.toFixed(2)}\r\n      </div>\r\n    );\r\n    datasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: dataArray,\r\n      y: cumulative,\r\n      yaxis: \"y\",\r\n    } as const);\r\n    datasets.push({\r\n      type: \"bar\",\r\n      name: expD.toFixed(2),\r\n      x: dataArray,\r\n      y: routineDDist,\r\n    } as const);\r\n    perDatasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: PdataArray,\r\n      y: Pcumulative,\r\n    } as const);\r\n    perDatasets.push({\r\n      type: \"bar\",\r\n      name: expP.toFixed(2),\r\n      x: PdataArray,\r\n      y: routinePDDist,\r\n    } as const);\r\n  }\r\n  return { expectedDamages, expectedPersistentDamages, datasets, perDatasets };\r\n};\r\n\r\nexport default useGenerateGraphs;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../App/hooks\";\r\nimport { selecttargetById, Target, targetUpdated } from \"./targetSlice\";\r\n// import { damageTypes } from \"../Model/types\";\r\n// import {\r\n//   selectweaknessById,\r\n//   Weakness,\r\n//   weaknessCreated,\r\n//   weaknessRemoved,\r\n//   weaknessUpdated,\r\n// } from \"./weaknessSlice\";\r\n// import { EntityId } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../App/store\";\r\nimport {\r\n  ACOptions,\r\n  makeOptions,\r\n  SaveOptions,\r\n  weaknessOptions,\r\n} from \"../Model/options\";\r\nimport {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  Grid,\r\n  Paper,\r\n  TextField,\r\n  FormControlLabel,\r\n  Switch,\r\n  Slider,\r\n  Typography,\r\n  SelectChangeEvent,\r\n} from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\nimport {\r\n  selectweaknessById,\r\n  Weakness,\r\n  weaknessCreated,\r\n  weaknessRemoved,\r\n  weaknessUpdated,\r\n} from \"./weaknessSlice\";\r\nimport { damageTypes } from \"../Model/types\";\r\n\r\nconst SingleLevelInput = () => {\r\n  const id = 0;\r\n  const {\r\n    persistentMultiplier,\r\n    flatfooted,\r\n    percentSelectedRoutine,\r\n\r\n    graphType,\r\n    routineLevel,\r\n    targetLevel,\r\n    overrideAC,\r\n    overrideFort,\r\n    overrideRef,\r\n    overrideWill,\r\n    overridePer,\r\n\r\n    weaknesses,\r\n  } = useAppSelector((state: RootState) => selecttargetById(state, id)!);\r\n\r\n  const [AC, setAC] = useState(overrideAC.toString());\r\n  const [Fort, setFort] = useState(overrideFort.toString());\r\n  const [Ref, setRef] = useState(overrideRef.toString());\r\n  const [Will, setWill] = useState(overrideWill.toString());\r\n  const [Per, setPer] = useState(overridePer.toString());\r\n\r\n  useEffect(() => {\r\n    setAC(overrideAC.toString());\r\n    setFort(overrideFort.toString());\r\n    setRef(overrideRef.toString());\r\n    setWill(overrideWill.toString());\r\n    setPer(overridePer.toString());\r\n  }, [overrideAC]);\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      columns={{ xs: 10 }}\r\n      spacing={{ xs: 1, sm: 2 }}\r\n      sx={{ my: 1, p: 1 }}\r\n    >\r\n      <Grid item xs={5}>\r\n        <Box sx={{ px: 2 }}>\r\n          <Typography>Level: {routineLevel}</Typography>\r\n          <Slider\r\n            // aria-label=\"Always visible\"\r\n            value={routineLevel}\r\n            // getAriaValueText={(v) => `${v}`}\r\n            // valueLabelDisplay=\"on\"\r\n            step={1}\r\n            min={1}\r\n            max={20}\r\n            marks\r\n            onChange={(e, nv) => {\r\n              dispatch(\r\n                targetUpdated({\r\n                  id,\r\n                  changes: {\r\n                    routineLevel: nv,\r\n                  },\r\n                })\r\n              );\r\n            }}\r\n          />\r\n        </Box>\r\n      </Grid>\r\n\r\n      <Grid item xs={5}>\r\n        <Box sx={{ px: 2 }}>\r\n          <Typography>Target Level: {targetLevel}</Typography>\r\n          <Slider\r\n            // aria-label=\"Always visible\"\r\n            value={targetLevel}\r\n            // getAriaValueText={(v) => `${v}`}\r\n            // valueLabelDisplay=\"on\"\r\n            step={1}\r\n            min={-1}\r\n            max={24}\r\n            marks\r\n            onChange={(e, nv) => {\r\n              dispatch(\r\n                targetUpdated({\r\n                  id,\r\n                  changes: {\r\n                    targetLevel: nv,\r\n                  },\r\n                })\r\n              );\r\n            }}\r\n          />\r\n        </Box>\r\n      </Grid>\r\n\r\n      <Grid item xs={2}>\r\n        <TextField\r\n          fullWidth\r\n          label=\"AC\"\r\n          value={AC}\r\n          onChange={(e) => {\r\n            setAC(e.target.value);\r\n            e.target.focus();\r\n          }}\r\n          onBlur={() => {\r\n            let newVal = parseInt(AC);\r\n            setAC(newVal.toString());\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: {\r\n                  overrideAC: newVal,\r\n                },\r\n              })\r\n            );\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={2}>\r\n        <TextField\r\n          fullWidth\r\n          label=\"Fort\"\r\n          value={Fort}\r\n          onChange={(e) => {\r\n            setFort(e.target.value);\r\n            e.target.focus();\r\n          }}\r\n          onBlur={() => {\r\n            let newVal = parseInt(Fort);\r\n            setFort(newVal.toString());\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: {\r\n                  overrideFort: newVal,\r\n                },\r\n              })\r\n            );\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={2}>\r\n        <TextField\r\n          fullWidth\r\n          label=\"Ref\"\r\n          value={Ref}\r\n          onChange={(e) => {\r\n            setRef(e.target.value);\r\n            e.target.focus();\r\n          }}\r\n          onBlur={() => {\r\n            let newVal = parseInt(Ref);\r\n            setRef(newVal.toString());\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: {\r\n                  overrideRef: newVal,\r\n                },\r\n              })\r\n            );\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={2}>\r\n        <TextField\r\n          fullWidth\r\n          label=\"Will\"\r\n          value={Will}\r\n          onChange={(e) => {\r\n            setWill(e.target.value);\r\n            e.target.focus();\r\n          }}\r\n          onBlur={() => {\r\n            let newVal = parseInt(Will);\r\n            setWill(newVal.toString());\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: {\r\n                  overrideWill: newVal,\r\n                },\r\n              })\r\n            );\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={2}>\r\n        <TextField\r\n          fullWidth\r\n          label=\"Perception\"\r\n          value={Per}\r\n          onChange={(e) => {\r\n            setPer(e.target.value);\r\n            e.target.focus();\r\n          }}\r\n          onBlur={() => {\r\n            let newVal = parseInt(Per);\r\n            setPer(newVal.toString());\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: {\r\n                  overridePer: newVal,\r\n                },\r\n              })\r\n            );\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item container alignItems=\"center\">\r\n        <Typography>Resistance/Weakness: </Typography>\r\n      </Grid>\r\n      {weaknesses.map((weaknessId) => (\r\n        <WeaknessInput parentId={id} id={weaknessId} key={weaknessId} />\r\n      ))}\r\n      <AddWeakness parentId={id} />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport { SingleLevelInput };\r\n\r\nconst WeaknessInput = ({ id, parentId }: { id: number; parentId: number }) => {\r\n  // needs to have parent id to remove weakness\r\n  const { type, value } = useAppSelector((state: RootState) =>\r\n    selectweaknessById(state, id)\r\n  )!;\r\n  const [tempVal, setTempVal] = useState(value.toString());\r\n  const dispatch = useAppDispatch();\r\n\r\n  const updateOrRemoveWeakness = (e: SelectChangeEvent) => {\r\n    if (e?.target?.value === damageTypes.NONE) {\r\n      // remove this weakness\r\n      dispatch(weaknessRemoved({ id, parentId }));\r\n    } else {\r\n      dispatch(\r\n        weaknessUpdated({\r\n          id,\r\n          changes: { type: e.target.value as Weakness[\"type\"] },\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid item>\r\n      <WeaknessSelect value={type} onChange={updateOrRemoveWeakness} />\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"Value\"\r\n        value={tempVal}\r\n        sx={{ width: \"7ch\" }}\r\n        onChange={(e) => {\r\n          setTempVal(e.target.value);\r\n          e.target.focus();\r\n        }}\r\n        onBlur={() => {\r\n          let newVal = parseInt(tempVal);\r\n          setTempVal(newVal.toString());\r\n          dispatch(weaknessUpdated({ id, changes: { value: newVal } }));\r\n        }}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst AddWeakness = ({ parentId }: { parentId: number }) => {\r\n  const dispatch = useAppDispatch();\r\n  let [tempVal, setTempVal] = useState(\"0\");\r\n\r\n  // add a Weakness to TargetInfo id\r\n  const addWeakness = (e: SelectChangeEvent) => {\r\n    if (e.target.value !== damageTypes.NONE) {\r\n      // need to create a new weakness\r\n      dispatch(\r\n        weaknessCreated({\r\n          type: e.target.value,\r\n          value: tempVal,\r\n          parentId: parentId,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid item>\r\n      <WeaknessSelect value={damageTypes.NONE} onChange={addWeakness} />\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"Value\"\r\n        value={tempVal}\r\n        sx={{ width: \"7ch\" }}\r\n        onChange={(e) => {\r\n          setTempVal(e.target.value);\r\n          e.target.focus();\r\n        }}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst WeaknessSelect = ({\r\n  value,\r\n  onChange,\r\n}: {\r\n  value: Weakness[\"type\"];\r\n  onChange: (e: SelectChangeEvent) => void;\r\n}) => {\r\n  return (\r\n    <FormControl size=\"small\">\r\n      <InputLabel>Type</InputLabel>\r\n      <Select label=\"Type\" value={value} onChange={(e) => onChange(e)}>\r\n        {weaknessOptions}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../App/hooks\";\r\nimport { selecttargetById, Target, targetUpdated } from \"./targetSlice\";\r\n// import { damageTypes } from \"../Model/types\";\r\n// import {\r\n//   selectweaknessById,\r\n//   Weakness,\r\n//   weaknessCreated,\r\n//   weaknessRemoved,\r\n//   weaknessUpdated,\r\n// } from \"./weaknessSlice\";\r\n// import { EntityId } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../App/store\";\r\nimport { ACOptions, SaveOptions } from \"../Model/options\";\r\nimport {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  Grid,\r\n  Paper,\r\n  TextField,\r\n  FormControlLabel,\r\n  Switch,\r\n  Slider,\r\n  Typography,\r\n} from \"@mui/material\";\r\n\r\nconst JointInput = () => {\r\n  const id = 0;\r\n  const {\r\n    persistentMultiplier,\r\n    flatfooted,\r\n    percentSelectedRoutine,\r\n    // weaknesses,\r\n  } = useAppSelector((state: RootState) => selecttargetById(state, id)!);\r\n  const [perMul, setPerMul] = useState(persistentMultiplier.toString());\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    <Grid container spacing={{ xs: 1, sm: 2 }}>\r\n      <Grid item xs={6} sm={3} md={6} lg={3}>\r\n        <FormControlLabel\r\n          control={\r\n            <Switch\r\n              checked={flatfooted}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  targetUpdated({\r\n                    id,\r\n                    changes: { flatfooted: e.target.checked },\r\n                  })\r\n                )\r\n              }\r\n            />\r\n          }\r\n          label=\"Flatfooted\"\r\n        />\r\n      </Grid>\r\n\r\n      <Grid item xs={6} sm={3} md={6} lg={3}>\r\n        <TextField\r\n          fullWidth\r\n          label=\"Persistent Damage Multiplier\"\r\n          value={perMul}\r\n          onChange={(e) => {\r\n            setPerMul(e.target.value);\r\n            e.target.focus();\r\n          }}\r\n          onBlur={() => {\r\n            let newVal = parseFloat(perMul);\r\n            setPerMul(newVal.toString());\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: {\r\n                  persistentMultiplier: newVal,\r\n                },\r\n              })\r\n            );\r\n          }}\r\n        />\r\n      </Grid>\r\n\r\n      <Grid item xs={12} sm={6} md={12} lg={6}>\r\n        <FormControlLabel\r\n          control={\r\n            <Switch\r\n              checked={percentSelectedRoutine}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  targetUpdated({\r\n                    id,\r\n                    changes: { percentSelectedRoutine: e.target.checked },\r\n                  })\r\n                )\r\n              }\r\n            />\r\n          }\r\n          label=\"% of Selected Routine\"\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport { JointInput };\r\n","import React, { useState } from \"react\";\r\n// import { graphTypeOptions, levelOptions } from \"../Model/options\";\r\nimport { graphTypes } from \"../Model/types\";\r\nimport { ByLevelInput } from \"./ByLevelInput\";\r\n\r\nimport {\r\n  Collapse,\r\n  FormControlLabel,\r\n  Paper,\r\n  Select,\r\n  Switch,\r\n  Typography,\r\n} from \"@mui/material\";\r\n\r\nimport useGenerateGraphs from \"./useGenerateGraphs\";\r\nimport { makeOptions } from \"../Model/options\";\r\nimport { Box } from \"@mui/system\";\r\nimport { SingleLevelInput } from \"./SingleLevelInput\";\r\nimport { JointInput } from \"./JointInput\";\r\n\r\nconst Display = () => {\r\n  // evaluates routines and displays appropriate graphs\r\n  const [showByLevel, setShowByLevel] = useState<boolean>(true);\r\n  const [showSingleLevel, setShowSingleLevel] = useState<boolean>(false);\r\n  // const [addPersistent, setAddPersistent] = useState(false);\r\n  const [graphType, setGraphType] = useState<string>(graphTypes.DISTRIBUTION);\r\n  // const [displayLevel, setDisplayLevel] = useState(1);\r\n  const {\r\n    expectedDamages,\r\n    // expectedPersistentDamages,\r\n    damageChart,\r\n    // persistentDamageChart,\r\n    byLevelDamageChart,\r\n    // byLevelPerDamageChart,\r\n  } = useGenerateGraphs(graphType);\r\n  // const [perMulti, setPerMulti] = useState(2);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Paper sx={{ p: 1, my: 2 }}>\r\n        <FormControlLabel\r\n          control={\r\n            <Switch\r\n              checked={showByLevel}\r\n              onChange={() => setShowByLevel(!showByLevel)}\r\n            />\r\n          }\r\n          label=\"Display By Level Graph\"\r\n          // sx={{ background: \"lightgrey\", width: 1 }}\r\n        />\r\n        <Collapse in={showByLevel}>\r\n          <ByLevelInput />\r\n          <JointInput />\r\n          <Box>{byLevelDamageChart}</Box>\r\n        </Collapse>\r\n      </Paper>\r\n\r\n      <Paper sx={{ p: 1, my: 2 }}>\r\n        <FormControlLabel\r\n          control={\r\n            <Switch\r\n              checked={showSingleLevel}\r\n              onChange={() => setShowSingleLevel(!showSingleLevel)}\r\n            />\r\n          }\r\n          label=\"Display Single Level Graph\"\r\n        />\r\n        <Collapse in={showSingleLevel}>\r\n          <SingleLevelInput />\r\n          {/* <JointInput /> */}\r\n          <Typography>Expected damage: </Typography>\r\n          {expectedDamages}\r\n          <Select\r\n            value={graphType}\r\n            onChange={(e) => setGraphType(e.target.value)}\r\n          >\r\n            {makeOptions(graphTypes)}\r\n          </Select>\r\n\r\n          <Box>{damageChart}</Box>\r\n        </Collapse>\r\n      </Paper>\r\n      {/* <div className=\"box\">\r\n        {\"Graph Type: \"}\r\n        <select\r\n          value={graphType}\r\n          onChange={(e) => setGraphType(e.target.value)}\r\n        >\r\n          {graphTypeOptions}\r\n        </select>\r\n        (\r\n        <select\r\n          value={displayLevel}\r\n          onChange={(e) => setDisplayLevel(parseInt(e.target.value))}\r\n        >\r\n          {levelOptions}\r\n        </select>\r\n        ){\" Show persistent damage: \"}\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={addPersistent}\r\n          onChange={(e) => setAddPersistent(e.target.checked)}\r\n        />\r\n        {/* , persistent damage multiplier:\r\n      <input\r\n        type=\"number\"\r\n        value={perMulti ? perMulti : 0}\r\n        onChange={(e) => setPerMulti(e.target.valueAsNumber)}\r\n      /> */}\r\n      {/* <div>\r\n          Expected Damage:\r\n          {expectedDamages}\r\n        </div>\r\n        {damageChart}\r\n        {byLevelDamageChart}\r\n        {!addPersistent ? (\r\n          \"\"\r\n        ) : (\r\n          <div>\r\n            <div>\r\n              Expected Persistent Damage:\r\n              {expectedPersistentDamages}\r\n            </div>\r\n            {persistentDamageChart}\r\n            {byLevelPerDamageChart}\r\n          </div>\r\n        )}\r\n      </div> */}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Display;\r\n","import React from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../App/hooks\";\r\n\r\n// import SendIcon from \"@mui/icons-material/Send\";\r\nimport AutoFixHighIcon from \"@mui/icons-material/AutoFixHigh\";\r\nimport GavelIcon from \"@mui/icons-material/Gavel\";\r\nimport { ListItemButton, ListItemIcon, ListItemText } from \"@mui/material\";\r\n\r\nimport { RootState } from \"../App/store\";\r\nimport {\r\n  selectactivityPathById,\r\n  setActivityPath,\r\n  selectSelectedActivityPath,\r\n  selectParentActivityId,\r\n} from \"./RoutineSlice/routineSlice\";\r\nimport { activityTypes } from \"../Model/types\";\r\n\r\nexport const ActivityPathStub = ({\r\n  id,\r\n  level,\r\n  displayChildren = true,\r\n}: {\r\n  id: number;\r\n  level: number;\r\n  displayChildren?: boolean;\r\n}) => {\r\n  const { parentId, condition, type, apIds } = useAppSelector(\r\n    (state: RootState) => selectactivityPathById(state, id)!\r\n  );\r\n  const selectedActivityPath = useAppSelector(selectSelectedActivityPath);\r\n  const parentActivityId = useAppSelector(selectParentActivityId);\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  let icon = <GavelIcon />;\r\n  switch (type) {\r\n    case activityTypes.SAVE:\r\n      icon = <AutoFixHighIcon />;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ListItemButton\r\n        selected={selectedActivityPath === id || parentActivityId === id}\r\n        sx={{ pl: 4 * level + 2 }}\r\n        onClick={() => dispatch(setActivityPath(id))}\r\n      >\r\n        {/* {displayCondition ? \"Conditions\" : \"\"} */}\r\n        <ListItemIcon>{icon}</ListItemIcon>\r\n        <ListItemText primary={type} secondary={level > 0 ? condition : \"\"} />\r\n      </ListItemButton>\r\n      {displayChildren\r\n        ? apIds.map((apId) => (\r\n            <ActivityPathStub key={apId} id={apId} level={level + 1} />\r\n          ))\r\n        : \"\"}\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../App/hooks\";\r\nimport {\r\n  emptyActivityPathCreated,\r\n  routineUpdated,\r\n  selectRoutineById,\r\n  setNewActivityParent,\r\n} from \"./RoutineSlice/routineSlice\";\r\nimport { ActivityPathStub } from \"./ActivityPathStub\";\r\nimport { RootState } from \"../App/store\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  List,\r\n  ListSubheader,\r\n  Paper,\r\n  Slider,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { activityTypes } from \"../Model/types\";\r\nimport { Box } from \"@mui/system\";\r\n\r\nfunction SelectedRoutine({ routineId }: { routineId: number }) {\r\n  // const selectedRoutine = useSelector(selectSelectedRoutine);\r\n  const { name, startLevel, endLevel, description, apIds } = useAppSelector(\r\n    (state: RootState) => selectRoutineById(state, routineId)!\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  let [tempName, setTempName] = useState(name);\r\n  const [tempDescription, setTempDescription] = useState(description);\r\n  let [validLevels, setValidLevels] = useState([startLevel, endLevel]);\r\n  useEffect(() => setTempName(name), [name]);\r\n  useEffect(() => setTempDescription(description), [description]);\r\n  useEffect(\r\n    () => setValidLevels([startLevel, endLevel]),\r\n    [startLevel, endLevel]\r\n  );\r\n\r\n  return (\r\n    <Paper sx={{ my: 2, p: 1 }}>\r\n      <Grid container spacing={{ xs: 1, sm: 2 }} sx={{ p: 1 }}>\r\n        <Grid item xs={12} sm={8} md={12} lg={8}>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Routine Name\"\r\n            placeholder=\"Fighter d8 2 strikes\"\r\n            value={tempName}\r\n            onChange={(e) => {\r\n              setTempName(e.target.value);\r\n            }}\r\n            onBlur={() =>\r\n              dispatch(\r\n                routineUpdated({ id: routineId, changes: { name: tempName } })\r\n              )\r\n            }\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={4} md={12} lg={4}>\r\n          <Typography align=\"center\">\r\n            Valid Levels: {startLevel} to {endLevel}\r\n          </Typography>\r\n          <Box sx={{ px: 2 }}>\r\n            <Slider\r\n              getAriaLabel={() => \"Valid levels\"}\r\n              value={validLevels}\r\n              min={1}\r\n              max={20}\r\n              marks\r\n              // @ts-ignore\r\n              onChange={(e, nv: number[]) => setValidLevels(nv)}\r\n              onBlur={() =>\r\n                dispatch(\r\n                  routineUpdated({\r\n                    id: routineId,\r\n                    changes: {\r\n                      startLevel: validLevels[0],\r\n                      endLevel: validLevels[1],\r\n                    },\r\n                  })\r\n                )\r\n              }\r\n              valueLabelDisplay=\"auto\"\r\n              getAriaValueText={(v) => `${v}`}\r\n            />\r\n          </Box>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            fullWidth\r\n            multiline\r\n            label=\"Routine Description\"\r\n            placeholder=\"A Fighter making two strikes with a longsword. Critical Specialization at 5. 1d6 runes at 8 and 15.\"\r\n            value={tempDescription}\r\n            onChange={(e) => {\r\n              setTempDescription(e.target.value);\r\n            }}\r\n            onBlur={() =>\r\n              dispatch(\r\n                routineUpdated({\r\n                  id: routineId,\r\n                  changes: { description: tempDescription },\r\n                })\r\n              )\r\n            }\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      {/* <Paper sx={{ my: 2, p: 1 }}> */}\r\n      <List\r\n        id=\"routine-activity-list\"\r\n        subheader={<ListSubheader>Activities</ListSubheader>}\r\n      >\r\n        {apIds.map((apId) => (\r\n          <ActivityPathStub key={apId} id={apId} level={0} />\r\n        ))}\r\n      </List>\r\n      {/* </Paper> */}\r\n      <Grid container spacing={{ xs: 1 }} sx={{ my: 2, p: 1 }}>\r\n        <Grid\r\n          item\r\n          container\r\n          xs={6}\r\n          sm={3}\r\n          md={6}\r\n          lg={3}\r\n          justifyContent=\"center\"\r\n        >\r\n          <Button\r\n            size=\"small\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            onClick={() => dispatch(setNewActivityParent({ routineId }))}\r\n          >\r\n            Create New Activity\r\n          </Button>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          container\r\n          xs={6}\r\n          sm={3}\r\n          md={6}\r\n          lg={3}\r\n          justifyContent=\"center\"\r\n        >\r\n          <Button\r\n            size=\"small\"\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            onClick={() => dispatch(emptyActivityPathCreated({ routineId }))}\r\n          >\r\n            New Empty Activity\r\n          </Button>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          container\r\n          xs={6}\r\n          sm={3}\r\n          md={6}\r\n          lg={3}\r\n          justifyContent=\"center\"\r\n        >\r\n          <Button\r\n            size=\"small\"\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            onClick={() =>\r\n              dispatch(\r\n                emptyActivityPathCreated({\r\n                  routineId,\r\n                  activityType: activityTypes.STRIKE,\r\n                })\r\n              )\r\n            }\r\n          >\r\n            New Martial Strike\r\n          </Button>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          container\r\n          xs={6}\r\n          sm={3}\r\n          md={6}\r\n          lg={3}\r\n          justifyContent=\"center\"\r\n        >\r\n          <Button\r\n            size=\"small\"\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            onClick={() =>\r\n              dispatch(\r\n                emptyActivityPathCreated({\r\n                  routineId,\r\n                  activityType: activityTypes.SAVE,\r\n                })\r\n              )\r\n            }\r\n          >\r\n            New Caster Save\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      {/* <Button\r\n        variant=\"outlined\"\r\n        onClick={() =>\r\n          dispatch(activityPathCreated({ routineId, isStrike: false }))\r\n        }\r\n      >\r\n        + Save\r\n      </Button> */}\r\n      {/* <EffectInput /> */}\r\n      {/* </div> */}\r\n    </Paper>\r\n  );\r\n}\r\n\r\n// const NameInput = ({ id, name: baseName }: { id: number; name: string }) => {\r\n//   const dispatch = useDispatch();\r\n//   let [name, setName] = useState(baseName);\r\n//   useEffect(() => setName(baseName), [baseName]);\r\n//   // const name = useSelector((state) => selectRoutineById(state, id)).name;\r\n\r\n//   return (\r\n//     <React.Fragment>\r\n//       <label htmlFor=\"routineName\">Routine Name:</label>\r\n//       <input\r\n//         id=\"routineName\"\r\n//         type=\"text\"\r\n//         placeholder=\"Enter routine name\"\r\n//         value={name}\r\n//         onChange={(e) => setName(e.target.value)}\r\n//         onBlur={() => dispatch(routineUpdated({ id, changes: { name } }))}\r\n//       />\r\n//     </React.Fragment>\r\n//   );\r\n// };\r\n// const DescriptionInput = ({\r\n//   id,\r\n//   description: baseDescription,\r\n// }: {\r\n//   id: number;\r\n//   description: string;\r\n// }) => {\r\n//   const dispatch = useDispatch();\r\n//   const [description, setDescription] = useState(baseDescription);\r\n//   useEffect(() => setDescription(baseDescription), [baseDescription]);\r\n\r\n//   return (\r\n//     <div>\r\n//       <textarea\r\n//         className=\"routineDescription\"\r\n//         id=\"routineDescription\"\r\n//         placeholder=\"Enter routine description\"\r\n//         value={description}\r\n//         onChange={(e) => setDescription(e.target.value)}\r\n//         onBlur={() =>\r\n//           dispatch(routineUpdated({ id, changes: { description } }))\r\n//         }\r\n//       />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\nexport default SelectedRoutine;\r\n","import {\r\n  Chip,\r\n  InputLabel,\r\n  MenuItem,\r\n  Paper,\r\n  Select,\r\n  FormControl,\r\n  Grid,\r\n  Button,\r\n} from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\nimport React from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../App/hooks\";\r\n\r\nimport {\r\n  routineCreated,\r\n  routineRemoved,\r\n  routineUpdated,\r\n  selectAllRoutines,\r\n  selectSelectedRoutine,\r\n  setRoutine,\r\n} from \"./RoutineSlice/routineSlice\";\r\n\r\nconst Routines = () => {\r\n  const routines = useAppSelector(selectAllRoutines);\r\n  const selectedRoutine = useAppSelector(selectSelectedRoutine);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const routineOptions: JSX.Element[] = [];\r\n  const routineDisplays: JSX.Element[] = [];\r\n  routines.forEach((routine) => {\r\n    routineOptions.push(\r\n      <MenuItem value={routine.id} key={routine.id}>\r\n        {routine.name}\r\n      </MenuItem>\r\n    );\r\n    routineDisplays.push(\r\n      <Box component=\"li\" key={routine.id} sx={{ margin: 0.5 }}>\r\n        <Chip\r\n          label={routine.name}\r\n          variant={routine.display ? \"filled\" : \"outlined\"}\r\n          size=\"small\"\r\n          color=\"secondary\"\r\n          onClick={() => {\r\n            dispatch(\r\n              routineUpdated({\r\n                id: routine.id,\r\n                changes: { display: !routine.display },\r\n              })\r\n            );\r\n            dispatch(setRoutine(routine.id));\r\n          }}\r\n          onDelete={() => dispatch(routineRemoved(routine.id))}\r\n        />\r\n      </Box>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Paper\r\n        variant=\"outlined\"\r\n        sx={{\r\n          display: \"flex\",\r\n          flexWrap: \"wrap\",\r\n          justifyContent: \"center\",\r\n          listStyle: \"none\",\r\n          p: 0.5,\r\n          my: 2,\r\n        }}\r\n        component=\"ul\"\r\n      >\r\n        {routineDisplays}\r\n      </Paper>\r\n      <Paper sx={{ my: 2, p: 1 }}>\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={12} sm={6} md={12} lg={6}>\r\n            <FormControl fullWidth>\r\n              <InputLabel id=\"select-routine-label\">Select Routine</InputLabel>\r\n              <Select\r\n                labelId=\"select-routine-label\"\r\n                id=\"select-routine\"\r\n                value={selectedRoutine}\r\n                label=\"Select Routine\"\r\n                onChange={(e) => dispatch(setRoutine(e.target.value))}\r\n              >\r\n                {routineOptions}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            container\r\n            xs={6}\r\n            sm={3}\r\n            md={6}\r\n            lg={3}\r\n            justifyContent=\"center\"\r\n          >\r\n            <Button\r\n              variant=\"contained\"\r\n              onClick={() => dispatch(routineCreated({ copy: false }))}\r\n            >\r\n              Create New Routine\r\n            </Button>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            container\r\n            xs={6}\r\n            sm={3}\r\n            md={6}\r\n            lg={3}\r\n            justifyContent=\"center\"\r\n          >\r\n            <Button\r\n              variant=\"outlined\"\r\n              onClick={() => dispatch(routineCreated({ copy: true }))}\r\n            >\r\n              Copy Selected Routine\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Routines;\r\n","const fighterGs2 = `{\"id\":1,\"name\":\"Greatsword Fighter 2 strikes\",\"display\":true,\"apIds\":[{\"id\":0,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Fighter Weapon (1, 5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"AC\",\"targetInfoId\":0,\"damages\":[{\"id\":3,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":12,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Fighter Weapon Specialization\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":4,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[{\"id\":1,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[{\"id\":1,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Fighter Weapon (1, 5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-5 (1x-5)\",\"targetType\":\"AC\",\"targetInfoId\":0,\"damages\":[{\"id\":5,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":12,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Fighter Weapon Specialization\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":6,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[{\"id\":2,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[]}]}],\"levelDiff\":0,\"description\":\"A simple Fighter making 2 strikes with a greatsword. 1d6 damage runes at 8 and 15. Crit specialization at 5.\",\"startLevel\":1,\"endLevel\":20}`;\r\nconst pickdouble = `{\"id\":3,\"name\":\"Pick Fighter Double Slice\",\"display\":false,\"apIds\":[{\"id\":3,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Fighter Weapon (1, 5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"AC\",\"targetInfoId\":0,\"damages\":[{\"id\":8,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":true,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Fighter Weapon Specialization\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"piercing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":9,\"damageCondition\":\"On Crit\",\"dieTrend\":\"None\",\"dieAdjustments\":{\"1\":1,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"16\":1,\"17\":1,\"18\":1,\"19\":1,\"20\":1},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":4,\"6\":4,\"7\":4,\"8\":4,\"9\":4,\"10\":4,\"11\":4,\"12\":6,\"13\":6,\"14\":6,\"15\":6,\"16\":6,\"17\":6,\"18\":6,\"19\":8,\"20\":8},\"damageType\":\"piercing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":10,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[],\"apIds\":[]},{\"id\":4,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Fighter Weapon (1, 5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-4)\",\"targetType\":\"AC\",\"targetInfoId\":0,\"damages\":[{\"id\":11,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":4,\"fatal\":true,\"fatalDie\":8,\"damageTrend\":[\"18 to 24 apex(17)\",\"Fighter Weapon Specialization\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"piercing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":12,\"damageCondition\":\"On Crit\",\"dieTrend\":\"None\",\"dieAdjustments\":{\"1\":1,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"16\":1,\"17\":1,\"18\":1,\"19\":1,\"20\":1},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":4,\"6\":4,\"7\":4,\"8\":4,\"9\":4,\"10\":4,\"11\":4,\"12\":6,\"13\":6,\"14\":6,\"15\":6,\"16\":6,\"17\":6,\"18\":6,\"19\":8,\"20\":8},\"damageType\":\"piercing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":13,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[],\"apIds\":[]}],\"levelDiff\":0,\"description\":\"A Fighter using Double Slice with a pick and a light pick. 1d6 damage runes at 8 and 15. Crit specialization at 5.\",\"startLevel\":1,\"endLevel\":20}`;\r\nconst fireball = `{\"id\":2,\"name\":\"Fireball\",\"display\":true,\"apIds\":[{\"id\":2,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Save\",\"profTrend\":\"Caster Spell (7, 15, 19)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"None\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"Ref\",\"targetInfoId\":0,\"damages\":[{\"id\":7,\"damageCondition\":\"Basic save\",\"dieTrend\":\"2 x Spell Level\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[],\"apIds\":[]}],\"levelDiff\":0,\"description\":\"A 2d6 / spell level basic reflex save.\",\"startLevel\":1,\"endLevel\":20}`;\r\nconst thaum2strikes = `{\"id\":101,\"name\":\"Thaumaturge 2 strikes\",\"display\":false,\"apIds\":[{\"id\":1002,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"16 to 22 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1004,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"16 to 22 apex(17)\",\"Martial Weapon Specializaton\",\"Implement's Empowerment\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1005,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1006,\"damageCondition\":\"Success or better\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"None\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"1/2 Level\"],\"damageAdjustments\":{\"1\":2,\"2\":2,\"3\":2,\"4\":2,\"5\":2,\"6\":2,\"7\":2,\"8\":2,\"9\":2,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2}}],\"effects\":[{\"id\":1002,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[{\"id\":1001,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"16 to 22 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-5 (1x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1001,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"16 to 22 apex(17)\",\"Martial Weapon Specializaton\",\"Implement's Empowerment\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1002,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1003,\"damageCondition\":\"Success or better\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"None\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"1/2 Level\"],\"damageAdjustments\":{\"1\":2,\"2\":2,\"3\":2,\"4\":2,\"5\":2,\"6\":2,\"7\":2,\"8\":2,\"9\":2,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2}}],\"effects\":[{\"id\":1001,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[]}]}],\"levelDiff\":0,\"description\":\"A playtest Thaumaturge making 2 strikes with a longsword. 1d6 damage runes at 8 and 15. Critical specialization at 5 from weapon implement. After they succeeded in giving the target a 1/2 level +2 weakness.\",\"startLevel\":1,\"endLevel\":20}`;\r\nconst disintigrate = `{\"id\":102,\"name\":\"Disintigrate\",\"display\":false,\"apIds\":[{\"id\":1003,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Caster Spell (7, 15, 19)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"None\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"AC\",\"damages\":[],\"effects\":[],\"apIds\":[{\"id\":1004,\"condition\":\"On Crit\",\"rollType\":\"Normal\",\"type\":\"Save\",\"profTrend\":\"Caster Spell (7, 15, 19)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"None\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"Fort\",\"damages\":[{\"id\":1009,\"damageCondition\":\"On Failure\",\"dieTrend\":\"2 x Spell Level\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"None\",\"material\":\"none\",\"persistent\":false,\"multiplier\":2},{\"id\":1010,\"damageCondition\":\"On Success\",\"damageType\":\"None\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"2 x Spell Level\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1011,\"damageCondition\":\"On Crit\",\"damageType\":\"None\",\"material\":\"none\",\"persistent\":false,\"multiplier\":0.5,\"dieTrend\":\"2 x Spell Level\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[]},{\"id\":1005,\"condition\":\"On Success\",\"rollType\":\"Normal\",\"type\":\"Save\",\"profTrend\":\"Caster Spell (7, 15, 19)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"None\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"Fort\",\"damages\":[{\"id\":1012,\"damageCondition\":\"Basic save\",\"dieTrend\":\"2 x Spell Level\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"None\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[],\"apIds\":[]}]}],\"levelDiff\":0,\"description\":\"If the spell attack crits then the save is one degree worse example. \",\"startLevel\":11,\"endLevel\":20}`;\r\nconst giantBarb3 = `{\"id\":103,\"name\":\"Giant Barbarian 3 Strikes\",\"display\":false,\"apIds\":[{\"id\":1006,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1011,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":12,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\",\"Giant Rage\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1012,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[{\"id\":1003,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[{\"id\":1007,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-5 (1x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1013,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":12,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\",\"Giant Rage\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1014,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[{\"id\":1004,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[{\"id\":1009,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1017,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":12,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\",\"Giant Rage\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1018,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[{\"id\":1006,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[]}]}]}],\"levelDiff\":0,\"description\":\"A Barbarian making 3 strikes with a greatsword. 1d6 damage runes at 8 and 15. Crit specialization at 5.\",\"startLevel\":1,\"endLevel\":20}`;\r\nconst flurryRanger4 = `{\"id\":104,\"name\":\"Melee Flurry Ranger 4 strikes\",\"display\":false,\"apIds\":[{\"id\":1009,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":1,\"18\":1,\"19\":1,\"20\":1},\"MAP\":\"0 (0x-3)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1017,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1018,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[{\"id\":1006,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[{\"id\":1010,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":1,\"18\":1,\"19\":1,\"20\":1},\"MAP\":\"-2 (1x-2)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1019,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1020,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[{\"id\":1007,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[{\"id\":1011,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"MAP\":\"-4 (2x-2)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1021,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1022,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[{\"id\":1008,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[{\"id\":1012,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"MAP\":\"-4 (2x-2)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1023,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1024,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[{\"id\":1009,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[]}]}]}]}],\"levelDiff\":0,\"description\":\"A longsword shortsword ranger with flurry edge making an attack with a longsword, then 3 shortsword attacks. improvement at 17 included. Crit spec at 5. \",\"startLevel\":1,\"endLevel\":20}`;\r\nconst doubleSliceRogue = `{\"id\":105,\"name\":\"Rogue Double Slice Sneak Attack\",\"display\":false,\"apIds\":[{\"id\":1013,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1025,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1026,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1028,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[{\"id\":1010,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[{\"id\":1014,\"condition\":\"On Crit\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-4)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1029,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1030,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1032,\"damageCondition\":\"Always\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":2,\"dieTrend\":\"Sneak Attack (1, 5, 11, 17)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[{\"id\":1011,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[]},{\"id\":1015,\"condition\":\"On Success\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-4)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1033,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1034,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1036,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":2,\"dieTrend\":\"Sneak Attack (1, 5, 11, 17)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1037,\"damageCondition\":\"Success or worse\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Sneak Attack (1, 5, 11, 17)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[{\"id\":1012,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[]},{\"id\":1016,\"condition\":\"Failure or worse\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-4)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1038,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1039,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1041,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Sneak Attack (1, 5, 11, 17)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[{\"id\":1013,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[]}]}],\"levelDiff\":0,\"description\":\"Using double slice on a Rogue. Only applying sneak attack damage to at most one attack. rapier and shortsword. Crit Spec at 5.\",\"startLevel\":1,\"endLevel\":20}`;\r\nconst rogue2strikes = `{\"id\":106,\"name\":\"Rogue 2 Strikes Sneak Attack\",\"display\":false,\"apIds\":[{\"id\":1017,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1038,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1039,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1040,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1044,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Sneak Attack (1, 5, 11, 17)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[{\"id\":1014,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[{\"id\":1018,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-4 (1x-4)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1041,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1042,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1045,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Sneak Attack (1, 5, 11, 17)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[{\"id\":1015,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[]}]}],\"levelDiff\":0,\"description\":\"Two strikes with sneak attack applied. \",\"startLevel\":1,\"endLevel\":20}`;\r\nconst preRanger4bow = `{\"id\":107,\"name\":\"Precision Ranger Shortbow 4 Strikes\",\"display\":false,\"apIds\":[{\"id\":1019,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1045,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1046,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1047,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1048,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 1(1, 11, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[{\"id\":1020,\"condition\":\"Success or better\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-5 (1x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1049,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1050,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1051,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1052,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 2(17, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[{\"id\":1022,\"condition\":\"Success or better\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1057,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1058,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1059,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1060,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 3(19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[{\"id\":1024,\"condition\":\"Success or better\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1065,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1066,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1067,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[]},{\"id\":1025,\"condition\":\"Failure or worse\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1069,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1070,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1071,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1072,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 3(19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[]}]},{\"id\":1023,\"condition\":\"Failure or worse\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1061,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1062,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1063,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1064,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 2(17, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[{\"id\":1026,\"condition\":\"Success or better\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1073,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1074,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1075,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1076,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 3(19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[]},{\"id\":1027,\"condition\":\"Failure or worse\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1077,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1078,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1079,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1080,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 2(17, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[]}]}]},{\"id\":1021,\"condition\":\"Failure or worse\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-5 (1x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1053,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1054,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1055,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1056,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 1(1, 11, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[{\"id\":1029,\"condition\":\"Success or better\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1085,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1086,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1087,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1088,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 2(17, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[{\"id\":1031,\"condition\":\"Success or better\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1093,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1094,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1095,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1096,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 3(19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[]},{\"id\":1032,\"condition\":\"Failure or worse\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1097,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1098,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1099,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1100,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 2(17, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[]}]},{\"id\":1030,\"condition\":\"Failure or worse\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1089,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1090,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1091,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1092,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 1(1, 11, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[{\"id\":1033,\"condition\":\"Success or better\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1101,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1102,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1103,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1104,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 2(17, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[]},{\"id\":1034,\"condition\":\"Failure or worse\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1105,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1106,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1107,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1108,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 1(1, 11, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[]}]}]}]}],\"levelDiff\":0,\"description\":\"4 Strikes for a Ranger with Precision Edge using a shortbow. Composite bow at 2. Str 14 boosted to 18 at 10. Runes at 8 and 15. \",\"startLevel\":1,\"endLevel\":20}`;\r\nconst preRanger2bow = `{\"id\":107,\"name\":\"Precision Ranger Shortbow 2 Strikes\",\"display\":false,\"apIds\":[{\"id\":1033,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1100,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1101,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1102,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1103,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 1(1, 11, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[{\"id\":1025,\"condition\":\"Success or better\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-5 (1x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1068,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1069,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1070,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1071,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 2(17, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[]},{\"id\":1032,\"condition\":\"Failure or worse\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-5 (1x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1096,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1097,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1098,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1099,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 1(1, 11, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[]}]}],\"levelDiff\":0,\"description\":\"2 Strikes for a Ranger with Precision Edge using a shortbow. Composite bow at 2. Str 14 boosted to 18 at 10. Runes at 8 and 15. \",\"startLevel\":1,\"endLevel\":20}`;\r\n\r\nexport const exampleRoutines = [\r\n  fighterGs2,\r\n  pickdouble,\r\n  fireball,\r\n  thaum2strikes,\r\n  disintigrate,\r\n  giantBarb3,\r\n  flurryRanger4,\r\n  doubleSliceRogue,\r\n  rogue2strikes,\r\n  preRanger4bow,\r\n  preRanger2bow,\r\n];\r\n","import { Button, Grid, Paper, TextField, Typography } from \"@mui/material\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../App/hooks\";\r\nimport { exampleRoutines } from \"../Model/exampleRoutines\";\r\nimport { importStates } from \"../Model/types\";\r\nimport {\r\n  importRoutine,\r\n  selectImportState,\r\n  selectSelectedRoutineObject,\r\n} from \"../Routines/RoutineSlice/routineSlice\";\r\n// import { useSelector } from \"react-redux\";\r\n\r\n/* TODO: \r\n  Convert to mui\r\n  Add save routines button\r\n  Add load example routines button\r\n*/\r\nconst ImportExport = () => {\r\n  const routine = useAppSelector(selectSelectedRoutineObject);\r\n  const importState = useAppSelector(selectImportState);\r\n  // const textAreaRef: RefObject<HTMLTextAreaElement> = useRef(null);\r\n  const [textValue, setTextValue] = useState(\"\");\r\n  const dispatch = useAppDispatch();\r\n  useEffect(() => {\r\n    if (importState === importStates.Failure) {\r\n      setTextValue(\"Import failed\");\r\n    } else if (importState === importStates.Successful) {\r\n      setTextValue(\"Import successful\");\r\n    }\r\n  }, [importState]);\r\n\r\n  const tryToAddRoutine = () => {\r\n    dispatch(importRoutine(textValue));\r\n  };\r\n  const paste = () => {\r\n    setTextValue(JSON.stringify(routine));\r\n  };\r\n\r\n  //   const saveRoutines = () => {try {\r\n  //       const serialState = JSON.stringify(state);\r\n  //       localStorage.setItem('appState', serialState);\r\n  //     } catch(err) {\r\n  //         console.log(err);\r\n  //     }\r\n  // };\r\n  // const loadSavedRoutines = () => {};\r\n  const addExampleRoutines = () => {\r\n    for (let r of exampleRoutines) {\r\n      dispatch(importRoutine(r));\r\n    }\r\n  };\r\n  // const copy = () => {\r\n  //   if (textAreaRef.current) {\r\n  //     textAreaRef.current.select();\r\n  //     textAreaRef!.current.setSelectionRange(0, 99999); /* For mobile devices */\r\n  //     navigator.clipboard.writeText(textAreaRef.current.value);\r\n  //     // document.execCommand(\"copy\");\r\n  //   }\r\n  // };\r\n  return (\r\n    <Paper sx={{ p: 1 }}>\r\n      <Typography variant=\"h5\">Import and Export Here:</Typography>\r\n      <Grid container>\r\n        <Grid item>\r\n          <Button onClick={tryToAddRoutine}>Import</Button>\r\n        </Grid>\r\n        <Grid item>\r\n          <Button onClick={paste}>Export</Button>\r\n        </Grid>\r\n        {/* <Grid item>\r\n          <Button onClick={saveRoutines}>Save Routines</Button>\r\n        </Grid> */}\r\n        {/* <Grid item>\r\n          <Button onClick={loadSavedRoutines}>Load Saved Routines</Button>\r\n        </Grid> */}\r\n        <Grid item>\r\n          <Button onClick={addExampleRoutines}>Add example Routines</Button>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            fullWidth\r\n            multiline\r\n            label=\"Routine code\"\r\n            placeholder=\"Enter routine code here to import.\"\r\n            value={textValue}\r\n            onChange={(e) => setTextValue(e.target.value)}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default ImportExport;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  FormControl,\r\n  Grid,\r\n  InputLabel,\r\n  List,\r\n  ListSubheader,\r\n  Paper,\r\n  Select,\r\n  SelectChangeEvent,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@mui/material\";\r\n\r\ntype Props = {\r\n  title: string;\r\n  label: string;\r\n  value: any;\r\n  onChange: (e: SelectChangeEvent) => void;\r\n  children: JSX.Element[];\r\n};\r\n\r\nconst TooltipSelect = ({ title, label, value, onChange, children }: Props) => {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  return (\r\n    <Tooltip\r\n      title={title}\r\n      open={open}\r\n      onFocus={() => {\r\n        console.log(\"focus1\");\r\n        setOpen(false);\r\n      }}\r\n    >\r\n      <FormControl\r\n        size=\"small\"\r\n        onMouseEnter={() => setOpen(true)}\r\n        onMouseLeave={() => setOpen(false)}\r\n        onFocus={() => setOpen(false)}\r\n      >\r\n        <InputLabel>{label}</InputLabel>\r\n        <Select label={label} value={value} onChange={onChange}>\r\n          {children}\r\n        </Select>\r\n      </FormControl>\r\n    </Tooltip>\r\n  );\r\n};\r\n\r\nexport { TooltipSelect };\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  FormControl,\r\n  Select,\r\n  InputLabel,\r\n  TextField,\r\n  Grid,\r\n  IconButton,\r\n  Tooltip,\r\n} from \"@mui/material\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { ActionCreatorWithPayload } from \"@reduxjs/toolkit\";\r\n\r\nimport { Dispatch } from \"redux\";\r\nimport { levelOptions } from \"../../Model/options\";\r\nimport { Adjustment } from \"../RoutineSlice/RoutineTypes\";\r\nimport { ArrowRight } from \"@mui/icons-material\";\r\nimport { TooltipSelect } from \"../../TooltipSelect\";\r\n\r\ntype Adjustments = {\r\n  [level: number]: number;\r\n};\r\ntype Entry = [number, string];\r\n\r\nexport const generateEntries = (adjustments: Adjustments) => {\r\n  let currentValue = 0;\r\n  const entries: Entry[] = [];\r\n  for (let level = 1; level <= 20; level++) {\r\n    if (currentValue !== adjustments[level]) {\r\n      entries.push([level, (adjustments[level] - currentValue).toString()]);\r\n      currentValue = adjustments[level];\r\n    }\r\n  }\r\n  return entries;\r\n};\r\n\r\nconst generateAdjustments = (entries: Entry[]) => {\r\n  const adjustments: Adjustments = {};\r\n  let currentValue = 0;\r\n  let total = 0;\r\n  let currentIndex = 0;\r\n  // console.log(entries);\r\n  for (let level = 1; level <= 20; level++) {\r\n    if (entries[currentIndex] && entries[currentIndex][0] === level) {\r\n      // console.log(\"here\");\r\n      currentValue = parseInt(entries[currentIndex][1]);\r\n      if (!currentValue) currentValue = 0;\r\n      currentIndex++;\r\n      total += currentValue;\r\n    }\r\n    adjustments[level] = total;\r\n  }\r\n  return adjustments;\r\n};\r\n\r\nexport const adjustmentsFromLevelChange = (\r\n  entries: Entry[],\r\n  index: number,\r\n  newLevel: number\r\n) => {\r\n  entries[index] = [newLevel, entries[index][1]];\r\n  entries.sort((a, b) => a[0] - b[0]);\r\n  return generateAdjustments(entries);\r\n};\r\n\r\nexport const adjustmentsFromValueChange = (\r\n  entries: Entry[],\r\n  index: number,\r\n  newValue: string\r\n) => {\r\n  entries[index] = [entries[index][0], newValue];\r\n  return generateAdjustments(entries);\r\n};\r\n\r\nexport const adjustmentsFromNewEntry = (entries: Entry[]) => {\r\n  let lastValue: Entry =\r\n    entries.length > 0 ? entries[entries.length - 1] : [0, \"0\"];\r\n  entries.push([lastValue[0] + 1, (0).toString()]);\r\n  return generateAdjustments(entries);\r\n};\r\n\r\nexport const LevelList = (\r\n  name: string,\r\n  dispatch: Dispatch<any>,\r\n  action: ActionCreatorWithPayload<any, string>,\r\n  id: number,\r\n  adjustments: Adjustment\r\n) => {\r\n  const baseEntries = generateEntries(adjustments);\r\n  let [entries, setEntries] = useState(baseEntries);\r\n  let be = JSON.stringify(baseEntries);\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  useEffect(() => setEntries(baseEntries), [be]);\r\n  let levelList = [];\r\n\r\n  for (let i = 0; i < entries.length; i++) {\r\n    levelList.push(\r\n      <Grid item key={i}>\r\n        <TooltipSelect\r\n          title=\"The level where this bonus is added, all later levels will have this bonus added. Please only add 1 bonus per level. Bonuses of 0 are removed.\"\r\n          label=\"Level\"\r\n          value={entries[i][0]}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              action({\r\n                id,\r\n                changes: {\r\n                  [name]: adjustmentsFromLevelChange(\r\n                    entries,\r\n                    i,\r\n                    Number(e.target.value)\r\n                  ),\r\n                },\r\n              })\r\n            )\r\n          }\r\n        >\r\n          {levelOptions}\r\n        </TooltipSelect>\r\n\r\n        <TextField\r\n          size=\"small\"\r\n          label=\"Bonus\"\r\n          sx={{ width: \"7ch\" }}\r\n          value={entries[i][1]}\r\n          onChange={(e) => {\r\n            let newEntries = entries.slice();\r\n            newEntries[i] = [newEntries[i][0], e.target.value];\r\n            setEntries(newEntries);\r\n            e.target.focus();\r\n          }}\r\n          onBlur={() => {\r\n            let newEntries = entries.slice();\r\n            for (let ni = 0; ni < entries.length; ni++) {\r\n              newEntries[ni] = [\r\n                newEntries[ni][0],\r\n                parseInt(newEntries[ni][1]).toString(),\r\n              ];\r\n            }\r\n            setEntries(newEntries);\r\n            dispatch(\r\n              action({\r\n                id,\r\n                changes: {\r\n                  [name]: generateAdjustments(entries),\r\n                },\r\n              })\r\n            );\r\n          }}\r\n        />\r\n        {/* <input\r\n          type=\"number\"\r\n          value={entries[i][1]}\r\n          onChange={(e) => {\r\n            let newEntries = entries.slice();\r\n            newEntries[i][1] = e.target.value;\r\n            setEntries(newEntries);\r\n            e.target.focus();\r\n          }}\r\n          onBlur={(e) =>\r\n            dispatch(\r\n              action({\r\n                id,\r\n                changes: {\r\n                  [name]: generateAdjustments(entries),\r\n                },\r\n              })\r\n            )\r\n          }\r\n        /> */}\r\n      </Grid>\r\n    );\r\n  }\r\n  levelList.push(\r\n    <Grid item key=\"addButton\">\r\n      <Tooltip title=\"Add a bonus at a specified level.\">\r\n        <IconButton\r\n          color=\"primary\"\r\n          aria-label=\"Add button\"\r\n          onClick={() =>\r\n            dispatch(\r\n              action({\r\n                id,\r\n                changes: {\r\n                  [name]: adjustmentsFromNewEntry(entries),\r\n                },\r\n              })\r\n            )\r\n          }\r\n        >\r\n          <AddIcon />\r\n        </IconButton>\r\n      </Tooltip>\r\n    </Grid>\r\n  );\r\n  return levelList;\r\n};\r\n","import React from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../../App/hooks\";\r\nimport { LevelList } from \"./LevelList\";\r\nimport {\r\n  damageRemoved,\r\n  damageUpdated,\r\n  selectdamageById,\r\n} from \"../RoutineSlice/routineSlice\";\r\nimport {\r\n  damageConditionOptions,\r\n  damageTrendOptions,\r\n  damageTypeOptions,\r\n  diceSizeOptions,\r\n  dieTrendOptions,\r\n  makeOptions,\r\n  materialOptions,\r\n  multiplierOptions,\r\n} from \"../../Model/options\";\r\nimport { DamageTrend, damageTrends, whenConditions } from \"../../Model/types\";\r\nimport { RootState } from \"../../App/store\";\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  FormControl,\r\n  FormControlLabel,\r\n  Grid,\r\n  IconButton,\r\n  InputLabel,\r\n  Select,\r\n  Switch,\r\n} from \"@mui/material\";\r\nimport Divider from \"@mui/material/Divider\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport { Box } from \"@mui/system\";\r\nimport { StayPrimaryLandscape } from \"@mui/icons-material\";\r\n\r\n// const useStyles = makeStyles({\r\n//   transition: theme.transitions.create([\"background\", \"background-color\"], {\r\n//     duration: theme.transitions.duration.complex,\r\n//   }),\r\n//   \"&:hover\": {\r\n//     backgroundColor: \"#BBB\",\r\n//   },\r\n// });\r\nexport const Damage = ({ parentId, id }: { parentId: number; id: number }) => {\r\n  const {\r\n    damageCondition,\r\n    damageType,\r\n    material,\r\n    persistent,\r\n    multiplier,\r\n    damageWhen,\r\n\r\n    dieTrend,\r\n    dieAdjustments,\r\n    diceSize,\r\n    fatal,\r\n    fatalDie,\r\n    damageTrend,\r\n    damageAdjustments,\r\n  } = useAppSelector((state: RootState) => selectdamageById(state, id)!);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const dieLevelList = LevelList(\r\n    \"dieAdjustments\",\r\n    dispatch,\r\n    damageUpdated,\r\n    id,\r\n    dieAdjustments\r\n  );\r\n\r\n  const damageLevelList = LevelList(\r\n    \"damageAdjustments\",\r\n    dispatch,\r\n    damageUpdated,\r\n    id,\r\n    damageAdjustments\r\n  );\r\n\r\n  const damageTrendList = damageTrend.map((dt, index) => {\r\n    return (\r\n      <Grid item key={index}>\r\n        <Select\r\n          // no stable id\r\n          size=\"small\"\r\n          value={dt}\r\n          onChange={(e) => {\r\n            let newdt = damageTrend.slice();\r\n            if (e.target.value === damageTrends.NONE) {\r\n              newdt.splice(index, 1);\r\n            } else {\r\n              newdt[index] = e.target.value as DamageTrend;\r\n            }\r\n            dispatch(\r\n              damageUpdated({\r\n                id,\r\n                changes: { damageTrend: newdt },\r\n              })\r\n            );\r\n          }}\r\n        >\r\n          {damageTrendOptions}\r\n        </Select>\r\n      </Grid>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        mt: 3,\r\n        mb: 6,\r\n        \"&:hover\": { bgcolor: \"rgb(50,50,50,.2)\" },\r\n      }}\r\n    >\r\n      <Divider textAlign=\"left\" sx={{ mt: 1, mb: 1 }}></Divider>\r\n      <Grid container spacing={{ xs: 1, sm: 2 }} sx={{ my: 0 }}>\r\n        <Grid item xs=\"auto\">\r\n          <IconButton\r\n            color=\"primary\"\r\n            size=\"small\"\r\n            onClick={(e) => {\r\n              dispatch(damageRemoved({ id, parentId }));\r\n            }}\r\n          >\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </Grid>\r\n\r\n        <Grid item xs>\r\n          <FormControl size=\"small\" fullWidth>\r\n            <InputLabel id=\"damage-condition-input\">Condition</InputLabel>\r\n            <Select\r\n              labelId=\"damage-condition-input\"\r\n              id=\"damage-condition\"\r\n              value={damageCondition}\r\n              label=\"Condition\"\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  damageUpdated({\r\n                    id,\r\n                    changes: { damageCondition: e.target.value },\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              {damageConditionOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        {/* </Grid>\r\n      <Grid container spacing={{ xs: 1, sm: 2 }}> */}\r\n        <Grid item>\r\n          <FormControl size=\"small\">\r\n            <InputLabel id=\"damage-multiplier-input\">Multiplier</InputLabel>\r\n            <Select\r\n              labelId=\"damage-multiplier-input\"\r\n              id=\"damage-multiplier\"\r\n              value={multiplier}\r\n              label=\"Multiplier\"\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  damageUpdated({\r\n                    id,\r\n                    changes: { multiplier: Number(e.target.value) },\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              {multiplierOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item>\r\n          <FormControl size=\"small\">\r\n            <InputLabel id=\"damage-type-input\">Type</InputLabel>\r\n            <Select\r\n              labelId=\"damage-type-input\"\r\n              id=\"damage-type\"\r\n              value={damageType}\r\n              label=\"Type\"\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  damageUpdated({\r\n                    id,\r\n                    changes: { damageType: e.target.value },\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              {damageTypeOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item>\r\n          <FormControl size=\"small\">\r\n            <InputLabel id=\"damage-material-input\">Material</InputLabel>\r\n            <Select\r\n              labelId=\"damage-material-input\"\r\n              id=\"damage-material\"\r\n              value={material}\r\n              label=\"Material\"\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  damageUpdated({\r\n                    id,\r\n                    changes: { material: e.target.value },\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              {materialOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item>\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                checked={persistent}\r\n                onChange={(e) =>\r\n                  dispatch(\r\n                    damageUpdated({\r\n                      id,\r\n                      changes: { persistent: e.target.checked },\r\n                    })\r\n                  )\r\n                }\r\n              />\r\n            }\r\n            label=\"Persistent\"\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <FormControl size=\"small\">\r\n            <InputLabel id=\"damage-when-input\">When Target</InputLabel>\r\n            <Select\r\n              labelId=\"damage-when-input\"\r\n              id=\"damage-when\"\r\n              multiple\r\n              value={damageWhen}\r\n              label=\"When Target\"\r\n              renderValue={(selected) => selected.join(\" or \")}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  damageUpdated({\r\n                    id,\r\n                    changes: { damageWhen: e.target.value },\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              {makeOptions(whenConditions)}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n      </Grid>\r\n      <Divider textAlign=\"left\" sx={{ mt: 1, mb: 1 }}>\r\n        Dice\r\n      </Divider>\r\n      <Grid container spacing={{ xs: 1, sm: 2 }}>\r\n        <Grid item>\r\n          <FormControl size=\"small\">\r\n            <InputLabel id=\"dice-input\">Damage Dice</InputLabel>\r\n            <Select\r\n              labelId=\"dice-input\"\r\n              id=\"dice\"\r\n              value={dieTrend}\r\n              label=\"Damage Dice\"\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  damageUpdated({\r\n                    id,\r\n                    changes: { dieTrend: e.target.value },\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              {dieTrendOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        {dieLevelList}\r\n        <Grid item>\r\n          <FormControl size=\"small\">\r\n            <InputLabel id=\"dice-size-input\">Die Size</InputLabel>\r\n            <Select\r\n              labelId=\"dice-size-input\"\r\n              id=\"dice-size\"\r\n              value={diceSize}\r\n              label=\"Die Size\"\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  damageUpdated({\r\n                    id,\r\n                    changes: { diceSize: e.target.value },\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              {diceSizeOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item>\r\n          <FormControlLabel\r\n            control={\r\n              <Switch\r\n                checked={fatal}\r\n                onChange={(e) =>\r\n                  dispatch(\r\n                    damageUpdated({\r\n                      id,\r\n                      changes: { fatal: e.target.checked },\r\n                    })\r\n                  )\r\n                }\r\n              />\r\n            }\r\n            label=\"On Crit Die\"\r\n          />\r\n        </Grid>\r\n        {fatal ? (\r\n          <Grid item>\r\n            <FormControl size=\"small\">\r\n              <InputLabel id=\"fatal-size-input\">Die Size</InputLabel>\r\n              <Select\r\n                labelId=\"fatal-size-input\"\r\n                id=\"fatal-size\"\r\n                value={fatalDie}\r\n                label=\"Die Size\"\r\n                onChange={(e) =>\r\n                  dispatch(\r\n                    damageUpdated({\r\n                      id,\r\n                      changes: { fatalDie: e.target.value },\r\n                    })\r\n                  )\r\n                }\r\n              >\r\n                {diceSizeOptions}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </Grid>\r\n      <Divider textAlign=\"left\" sx={{ mt: 1, mb: 1 }}>\r\n        Static Damage\r\n      </Divider>\r\n      <Grid container spacing={{ xs: 1, sm: 2 }}>\r\n        {damageTrendList}\r\n        <Grid item>\r\n          <Button\r\n            onClick={() => {\r\n              let newdt = damageTrend.slice();\r\n              newdt.push(damageTrends.NONE);\r\n              dispatch(\r\n                damageUpdated({\r\n                  id,\r\n                  changes: {\r\n                    damageTrend: newdt,\r\n                  },\r\n                })\r\n              );\r\n            }}\r\n          >\r\n            Add damage scaling\r\n          </Button>\r\n        </Grid>\r\n        {damageLevelList}\r\n      </Grid>\r\n      <Divider textAlign=\"left\" sx={{ mt: 1, mb: 1 }}></Divider>\r\n    </Box>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../../App/hooks\";\r\n\r\nimport {\r\n  FormControl,\r\n  Grid,\r\n  IconButton,\r\n  InputLabel,\r\n  Select,\r\n  Slider,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\n\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport { Box } from \"@mui/system\";\r\n\r\nimport {\r\n  conditionOptions,\r\n  effectTypeOptions,\r\n  makeOptions,\r\n} from \"../../Model/options\";\r\nimport { RootState } from \"../../App/store\";\r\nimport {\r\n  effectRemoved,\r\n  effectUpdated,\r\n  selecteffectById,\r\n} from \"../RoutineSlice/routineSlice\";\r\nimport { effectValueTypes, whenConditions } from \"../../Model/types\";\r\n\r\nexport const Effect = ({ parentId, id }: { parentId: number; id: number }) => {\r\n  const {\r\n    effectCondition,\r\n    effectType,\r\n    effectValue,\r\n    startLevel,\r\n    endLevel,\r\n    damageWhen,\r\n  } = useAppSelector((state: RootState) => selecteffectById(state, id)!);\r\n  const dispatch = useAppDispatch();\r\n  let [value, setValue] = useState(effectValue ? effectValue.toString() : \"0\");\r\n  let [validLevels, setValidLevels] = useState([startLevel, endLevel]);\r\n  useEffect(\r\n    () => setValidLevels([startLevel, endLevel]),\r\n    [startLevel, endLevel]\r\n  );\r\n\r\n  return (\r\n    <Box sx={{ mt: 3, mb: 6, \"&:hover\": { bgcolor: \"rgb(50,50,50,.2)\" } }}>\r\n      <Grid container spacing={{ xs: 1, sm: 2 }} sx={{ my: 0 }}>\r\n        <Grid item xs=\"auto\">\r\n          <IconButton\r\n            aria-label=\"delete\"\r\n            color=\"primary\"\r\n            onClick={(e) => {\r\n              dispatch(effectRemoved({ id, parentId }));\r\n            }}\r\n          >\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </Grid>\r\n        <Grid item>\r\n          <FormControl size=\"small\" fullWidth>\r\n            <InputLabel id=\"effect-condition-input\">Condition</InputLabel>\r\n            <Select\r\n              labelId=\"effect-condition-input\"\r\n              id=\"effect-condition\"\r\n              value={effectCondition}\r\n              label=\"Condition\"\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  effectUpdated({\r\n                    id,\r\n                    changes: { effectCondition: e.target.value },\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              {conditionOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item>\r\n          <FormControl size=\"small\" fullWidth>\r\n            <InputLabel id=\"effect-type-input\">Effect</InputLabel>\r\n            <Select\r\n              labelId=\"effect-type-input\"\r\n              id=\"effect-type\"\r\n              value={effectType}\r\n              label=\"Effect\"\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  effectUpdated({\r\n                    id,\r\n                    changes: { effectType: e.target.value },\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              {effectTypeOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n\r\n        {\r\n          // @ts-ignore\r\n          Object.values(effectValueTypes).includes(effectType) ? (\r\n            <Grid item>\r\n              <TextField\r\n                size=\"small\"\r\n                label=\"Value\"\r\n                sx={{ width: \"7ch\" }}\r\n                value={value}\r\n                onChange={(e) => {\r\n                  setValue(e.target.value);\r\n                  e.target.focus();\r\n                }}\r\n                onBlur={() => {\r\n                  let newVal = parseInt(value);\r\n                  setValue(newVal.toString());\r\n                  dispatch(\r\n                    effectUpdated({\r\n                      id,\r\n                      changes: {\r\n                        effectValue: newVal,\r\n                      },\r\n                    })\r\n                  );\r\n                }}\r\n              />\r\n            </Grid>\r\n          ) : (\r\n            \"\"\r\n          )\r\n        }\r\n\r\n        <Grid item sx={{ px: 2 }}>\r\n          <Typography align=\"center\">\r\n            Valid Levels: {startLevel} to {endLevel}\r\n          </Typography>\r\n          <Slider\r\n            size=\"small\"\r\n            getAriaLabel={() => \"Valid levels\"}\r\n            value={validLevels}\r\n            min={1}\r\n            max={20}\r\n            marks\r\n            // @ts-ignore\r\n            onChange={(e, nv: number[]) => setValidLevels(nv)}\r\n            onBlur={() =>\r\n              dispatch(\r\n                effectUpdated({\r\n                  id,\r\n                  changes: {\r\n                    startLevel: validLevels[0],\r\n                    endLevel: validLevels[1],\r\n                  },\r\n                })\r\n              )\r\n            }\r\n            valueLabelDisplay=\"auto\"\r\n            getAriaValueText={(v) => `${v}`}\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <FormControl size=\"small\">\r\n            <InputLabel id=\"damage-when-input\">When Target</InputLabel>\r\n            <Select\r\n              labelId=\"damage-when-input\"\r\n              id=\"damage-when\"\r\n              multiple\r\n              value={damageWhen}\r\n              label=\"When Target\"\r\n              renderValue={(selected) => selected.join(\" or \")}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  effectUpdated({\r\n                    id,\r\n                    changes: { damageWhen: e.target.value },\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              {makeOptions(whenConditions)}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../../App/hooks\";\r\n\r\nimport { LevelList } from \"./LevelList\";\r\nimport {\r\n  activityPathContinued,\r\n  damageCreated,\r\n  setNewActivityParent,\r\n} from \"../RoutineSlice/routineSlice\";\r\nimport {\r\n  activityTypeOptions,\r\n  profTrendOptions,\r\n  conditionOptions,\r\n  defenseOptions,\r\n  MAPOptions,\r\n  rollOptions,\r\n  statTrendOptions,\r\n  itemBTrendOptions,\r\n} from \"../../Model/options\";\r\nimport {\r\n  activityPathRemoved,\r\n  activityPathUpdated,\r\n  selectactivityPathById,\r\n} from \"../RoutineSlice/routineSlice\";\r\nimport { activityTypes } from \"../../Model/types\";\r\nimport { Damage } from \"./Damage\";\r\nimport { Effect } from \"./Effect\";\r\nimport { effectCreated } from \"../RoutineSlice/routineSlice\";\r\nimport { RootState } from \"../../App/store\";\r\nimport {\r\n  Button,\r\n  FormControl,\r\n  Grid,\r\n  InputLabel,\r\n  List,\r\n  ListSubheader,\r\n  Paper,\r\n  Select,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport { ActivityPathStub } from \"../ActivityPathStub\";\r\nimport { TooltipSelect } from \"../../TooltipSelect\";\r\n\r\nexport const ActivityPath = ({ id }: { id: number }) => {\r\n  const {\r\n    parentId,\r\n    routineId,\r\n    condition,\r\n\r\n    rollType,\r\n    type,\r\n    profTrend,\r\n    statTrend,\r\n    itemTrend,\r\n    bonusAdjustments,\r\n    MAP,\r\n    targetType,\r\n\r\n    damages,\r\n    effects,\r\n    apIds,\r\n  } = useAppSelector((state: RootState) => selectactivityPathById(state, id)!);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const bonusLevelList = LevelList(\r\n    \"bonusAdjustments\",\r\n    dispatch,\r\n    activityPathUpdated,\r\n    id,\r\n    bonusAdjustments\r\n  );\r\n\r\n  return (\r\n    <Paper sx={{ my: 2, p: 1 }}>\r\n      <Grid container spacing={{ xs: 1, sm: 2 }} sx={{ my: 0 }}>\r\n        <Grid item xs=\"auto\">\r\n          <Button\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            startIcon={<DeleteIcon />}\r\n            onClick={(e) => {\r\n              dispatch(activityPathRemoved({ id, parentId, routineId }));\r\n            }}\r\n          >\r\n            Delete\r\n          </Button>\r\n        </Grid>\r\n        {parentId !== undefined ? (\r\n          <Grid item xs>\r\n            <TooltipSelect\r\n              title='Depending on the roll of the parent activity, should this activity happen. For example: to add another strike only when you hit with the previous one, have the second strike be a child of the first with the condition \"Success or Better\"'\r\n              value={condition}\r\n              label=\"Condition\"\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { condition: e.target.value },\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              {conditionOptions}\r\n            </TooltipSelect>\r\n          </Grid>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </Grid>\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        Roll\r\n      </Typography>\r\n      <Grid\r\n        container\r\n        spacing={{ xs: 1, sm: 2 }}\r\n        sx={{ my: 2, \"&:hover\": { bgcolor: \"rgb(50,50,50,.2)\" } }}\r\n      >\r\n        <Grid item>\r\n          <TooltipSelect\r\n            title=\"Advantage is rolling twice and taking the higher roll, disadvantage is taking the lower\"\r\n            label=\"Roll Type\"\r\n            value={rollType}\r\n            onChange={(e) => {\r\n              dispatch(\r\n                activityPathUpdated({\r\n                  id,\r\n                  changes: { rollType: e.target.value },\r\n                })\r\n              );\r\n            }}\r\n          >\r\n            {rollOptions}\r\n          </TooltipSelect>\r\n        </Grid>\r\n        <Grid item>\r\n          <FormControl size=\"small\">\r\n            <InputLabel id=\"activity-type-input\">Activity Type</InputLabel>\r\n            <Select\r\n              labelId=\"activity-type-input\"\r\n              label=\"Activity Type\"\r\n              value={type}\r\n              onChange={(e) => {\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { type: e.target.value },\r\n                  })\r\n                );\r\n              }}\r\n            >\r\n              {activityTypeOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item>\r\n          <TooltipSelect\r\n            title=\"An increase in proficiency (+2) is applied at each level in ()\"\r\n            label=\"Proficiency\"\r\n            value={profTrend}\r\n            onChange={(e) => {\r\n              dispatch(\r\n                activityPathUpdated({\r\n                  id,\r\n                  changes: { profTrend: e.target.value },\r\n                })\r\n              );\r\n            }}\r\n          >\r\n            {profTrendOptions}\r\n          </TooltipSelect>\r\n        </Grid>\r\n        <Grid item>\r\n          <TooltipSelect\r\n            title=\"Bonuses from the listed ability score are applied at the appropriate levels. An ability score starts at the first value and is increased at levels 5, 10, 15, and 20 or until it reaches the second value listed. 'apex' means a bonus from an apex item is added to that score at the level in ()\"\r\n            label=\"Ability Score\"\r\n            value={statTrend}\r\n            onChange={(e) => {\r\n              dispatch(\r\n                activityPathUpdated({\r\n                  id,\r\n                  changes: { statTrend: e.target.value },\r\n                })\r\n              );\r\n            }}\r\n          >\r\n            {statTrendOptions}\r\n          </TooltipSelect>\r\n        </Grid>\r\n        <Grid item>\r\n          <TooltipSelect\r\n            title=\"Item bonuses are applied at the levels in ().\"\r\n            label=\"Item Bonus\"\r\n            value={itemTrend}\r\n            onChange={(e) => {\r\n              dispatch(\r\n                activityPathUpdated({\r\n                  id,\r\n                  changes: { itemTrend: e.target.value },\r\n                })\r\n              );\r\n            }}\r\n          >\r\n            {itemBTrendOptions}\r\n          </TooltipSelect>\r\n        </Grid>\r\n        {bonusLevelList}\r\n        {type !== activityTypes.SAVE ? (\r\n          <Grid item>\r\n            <TooltipSelect\r\n              title=\"The multiple attack penalty that is applied to this attack.\"\r\n              label=\"MAP\"\r\n              value={MAP}\r\n              onChange={(e) => {\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { MAP: e.target.value },\r\n                  })\r\n                );\r\n              }}\r\n            >\r\n              {MAPOptions}\r\n            </TooltipSelect>\r\n          </Grid>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <Grid item>\r\n          <TooltipSelect\r\n            title=\"What defense is targeted\"\r\n            label=\"Target Defense\"\r\n            value={targetType}\r\n            onChange={(e) => {\r\n              dispatch(\r\n                activityPathUpdated({\r\n                  id,\r\n                  changes: { targetType: e.target.value },\r\n                })\r\n              );\r\n            }}\r\n          >\r\n            {defenseOptions}\r\n          </TooltipSelect>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* <List subheader={<ListSubheader>Damages</ListSubheader>}> */}\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        Damages\r\n      </Typography>\r\n      {damages.map((damageId) => (\r\n        <Damage parentId={id} id={damageId} key={damageId} />\r\n      ))}\r\n      {/* </List> */}\r\n      <Button\r\n        sx={{ mb: 3 }}\r\n        variant=\"outlined\"\r\n        size=\"small\"\r\n        onClick={() => dispatch(damageCreated({ parentId: id }))}\r\n      >\r\n        Add Damage\r\n      </Button>\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        Effects\r\n      </Typography>\r\n      {effects.map((effectId) => (\r\n        <Effect parentId={id} id={effectId} key={effectId} />\r\n      ))}\r\n      <Button\r\n        sx={{ mb: 3 }}\r\n        variant=\"outlined\"\r\n        size=\"small\"\r\n        onClick={() => dispatch(effectCreated({ parentId: id }))}\r\n      >\r\n        Add Effect\r\n      </Button>\r\n\r\n      <List subheader={<ListSubheader>Child Activities</ListSubheader>}>\r\n        {apIds.map((apId) => (\r\n          <ActivityPathStub\r\n            key={apId}\r\n            id={apId}\r\n            level={0}\r\n            displayChildren={false}\r\n          />\r\n        ))}\r\n      </List>\r\n\r\n      {type === activityTypes.STRIKE ? (\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            window.location.href = \"#routine-activity-list\";\r\n            dispatch(\r\n              activityPathContinued({\r\n                parentId: id,\r\n              })\r\n            );\r\n          }}\r\n        >\r\n          Continue Attack\r\n        </Button>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <Button\r\n        variant=\"outlined\"\r\n        onClick={(event) => {\r\n          window.location.href = \"#routine-activity-list\";\r\n          dispatch(setNewActivityParent({ parentId: id }));\r\n        }}\r\n      >\r\n        New Child Activity\r\n      </Button>\r\n\r\n      {/* <div className=\"box\">\r\n        {apIds.map((apId) => (\r\n          <ActivityPath id={apId} key={apId} />\r\n        ))}\r\n        <button\r\n          className=\"add\"\r\n          onClick={() =>\r\n            dispatch(\r\n              activityPathCreated({\r\n                parentId: id,\r\n                isStrike: true,\r\n                applyMAP: true,\r\n              })\r\n            )\r\n          }\r\n        >\r\n          + Strike\r\n        </button>\r\n        <button\r\n          className=\"add\"\r\n          onClick={() =>\r\n            dispatch(activityPathCreated({ parentId: id, isStrike: false }))\r\n          }\r\n        >\r\n          + Save\r\n        </button>\r\n      </div> */}\r\n    </Paper>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport { useAppDispatch } from \"../../App/hooks\";\r\nimport {\r\n  Paper,\r\n  Grid,\r\n  Box,\r\n  Typography,\r\n  Select,\r\n  FormControl,\r\n  InputLabel,\r\n  Chip,\r\n  FormControlLabel,\r\n  Switch,\r\n  Slider,\r\n  Button,\r\n} from \"@mui/material\";\r\nimport { diceSizeOptions, makeOptions } from \"../../Model/options\";\r\nimport {\r\n  diceSizes,\r\n  DieTrend,\r\n  dieTrends,\r\n  StatTrend,\r\n  statTrends,\r\n} from \"../../Model/types\";\r\nimport { activityPathCreated } from \"../RoutineSlice/routineSlice\";\r\nimport {\r\n  activityTypes,\r\n  cantrips,\r\n  strikeActivities,\r\n  classes,\r\n  critSpecs,\r\n  runeTrends,\r\n  StrikeInfo,\r\n  weaponTraits,\r\n  classOptions,\r\n} from \"../../Model/newActivityInfo\";\r\n\r\n/*\r\n  get activity type: strike, skill, cantrip, spell\r\n\r\n  if type is strike \r\n    choose class\r\n    choose activity\r\n    attak score, damage score, cantrip score for ea/magus\r\n    choose weapon die and traits\r\n    choose number of attacks\r\n\r\n*/\r\nexport default function NewActivity({\r\n  routineId,\r\n  parentId,\r\n}: {\r\n  routineId?: number;\r\n  parentId?: number;\r\n}): JSX.Element {\r\n  const [activityType, setActivityType] = useState<string>(\r\n    activityTypes.Strike\r\n  );\r\n\r\n  return (\r\n    <Paper sx={{ my: 2, p: 1 }}>\r\n      <Grid container spacing={{ xs: 1, sm: 2 }} sx={{ m: 2, p: 2 }}>\r\n        <Grid item>\r\n          <Typography>Enter activity information</Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <FormControl>\r\n            <InputLabel>Activity Type</InputLabel>\r\n            <Select\r\n              value={activityType}\r\n              label=\"Activity Type\"\r\n              onChange={(e) => {\r\n                setActivityType(e.target.value);\r\n              }}\r\n            >\r\n              {makeOptions(activityTypes)}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item>\r\n          {activityTypes.Strike === activityType ? (\r\n            <StrikeSelection />\r\n          ) : activityTypes.Skill === activityType ? (\r\n            <SkillSelection />\r\n          ) : activityTypes.Cantrip === activityType ? (\r\n            <CantripSelection />\r\n          ) : activityTypes.Spell === activityType ? (\r\n            <SpellSelection />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nfunction StrikeSelection() {\r\n  const [runes, setRunes] = useState<DieTrend>(dieTrends.RUNE);\r\n  const [cClass, setCClass] = useState<typeof classes[number]>(classes[7]);\r\n  const [activity, setActivity] = useState<string>(\"Strike\");\r\n  const [cantrip, setCantrip] = useState<string>(cantrips[0]);\r\n  const [classOption, setClassOption] = useState<string>(\"\");\r\n  const [attackScore, setAttackScore] = useState<StatTrend>(statTrends.AS18a);\r\n  const [damageScore, setDamageScore] = useState<StatTrend>(statTrends.AS18a);\r\n  const [cantripScore, setCantripScore] = useState<StatTrend>(\r\n    statTrends.AS16pp\r\n  );\r\n  const [dieSize, setDieSize] = useState<number>(diceSizes[8]);\r\n  const [numStrikes, setNumStrikes] = useState<number>(1);\r\n  const [traits, setTraits] = useState(\r\n    // Array.from(weaponTraits, () => false)\r\n    Object.fromEntries(weaponTraits.map((trait) => [trait, false]))\r\n  );\r\n  const [deadlySize, setDeadlySize] = useState<number>(diceSizes[8]);\r\n  const [fatalSize, setFatalSize] = useState<number>(diceSizes[10]);\r\n  const [critSpec, setCritSpec] = useState<boolean>(false);\r\n  const [critSpecLevel, setCritSpecLevel] = useState<number>(5);\r\n  const [critSpecType, setCritSpecType] = useState<string>(critSpecs[0]);\r\n\r\n  const strikeInfo: StrikeInfo = {\r\n    runes,\r\n    cClass,\r\n    classOption,\r\n    activity,\r\n    cantrip,\r\n    attackScore,\r\n    damageScore,\r\n    cantripScore,\r\n    dieSize,\r\n    numStrikes,\r\n    traits,\r\n    deadlySize,\r\n    fatalSize,\r\n    critSpec,\r\n    critSpecLevel,\r\n    critSpecType,\r\n  };\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const setClass = (className: typeof classes[number]) => {\r\n    setCClass(className);\r\n    if (classOptions[className].length > 0) {\r\n      setClassOption(classOptions[className][0]);\r\n    } else {\r\n      setClassOption(\"\");\r\n    }\r\n  };\r\n  const showClassOptions = (): boolean => {\r\n    return classOptions[cClass].length > 0;\r\n  };\r\n  const showCantrip = (): boolean => {\r\n    return false;\r\n  };\r\n  const showCantripScore = (): boolean => {\r\n    if (cClass === \"Inventor\") return true;\r\n    return false;\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={{ xs: 1, sm: 2 }}>\r\n      <Grid item>\r\n        <FormControl>\r\n          <InputLabel>Damage Rune Levels</InputLabel>\r\n          <Select\r\n            value={runes}\r\n            label=\"Damage Rune Levels\"\r\n            onChange={(e) => {\r\n              setRunes(e.target.value as DieTrend);\r\n            }}\r\n          >\r\n            {makeOptions(runeTrends)}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item>\r\n        <FormControl>\r\n          <InputLabel>Class</InputLabel>\r\n          <Select\r\n            value={cClass}\r\n            label=\"Class\"\r\n            onChange={(e) => {\r\n              setClass(e.target.value as typeof classes[number]);\r\n            }}\r\n          >\r\n            {makeOptions(classes)}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n\r\n      {showClassOptions() ? (\r\n        <Grid item>\r\n          <FormControl>\r\n            <InputLabel>Class Option</InputLabel>\r\n            <Select\r\n              value={classOption}\r\n              label=\"Class Option\"\r\n              onChange={(e) => {\r\n                setClassOption(e.target.value);\r\n              }}\r\n            >\r\n              {makeOptions(classOptions[cClass])}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n\r\n      <Grid item>\r\n        <FormControl>\r\n          <InputLabel>Activity</InputLabel>\r\n          <Select\r\n            value={activity}\r\n            label=\"Activity\"\r\n            onChange={(e) => {\r\n              setActivity(e.target.value);\r\n            }}\r\n          >\r\n            {\r\n              // @ts-ignore\r\n              makeOptions(strikeActivities)\r\n            }\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      {showCantrip() ? (\r\n        <Grid item>\r\n          <FormControl>\r\n            <InputLabel>Cantrip</InputLabel>\r\n            <Select\r\n              value={cantrip}\r\n              label=\"Cantrip\"\r\n              onChange={(e) => {\r\n                setCantrip(e.target.value);\r\n              }}\r\n            >\r\n              {makeOptions(cantrips)}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <Grid item>\r\n        <FormControl>\r\n          <InputLabel>Attack Abilitiy Score</InputLabel>\r\n          <Select\r\n            value={attackScore}\r\n            label=\"Attack Abilitiy Score\"\r\n            onChange={(e) => {\r\n              setAttackScore(e.target.value as StatTrend);\r\n            }}\r\n          >\r\n            {\r\n              // @ts-ignore\r\n              makeOptions(statTrends)\r\n            }\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item>\r\n        <FormControl>\r\n          <InputLabel>Damage Abilitiy Score</InputLabel>\r\n          <Select\r\n            value={damageScore}\r\n            label=\"Damage Abilitiy Score\"\r\n            onChange={(e) => {\r\n              setDamageScore(e.target.value as StatTrend);\r\n            }}\r\n          >\r\n            {\r\n              // @ts-ignore\r\n              makeOptions(statTrends)\r\n            }\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      {showCantripScore() ? (\r\n        <Grid item>\r\n          <FormControl>\r\n            <InputLabel>Mental Abilitiy Score</InputLabel>\r\n            <Select\r\n              value={cantripScore}\r\n              label=\"Cantrip Abilitiy Score\"\r\n              onChange={(e) => {\r\n                setCantripScore(e.target.value as StatTrend);\r\n              }}\r\n            >\r\n              {\r\n                // @ts-ignore\r\n                makeOptions(statTrends)\r\n              }\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <Grid item>\r\n        <FormControl>\r\n          <InputLabel>Damage Die</InputLabel>\r\n          <Select\r\n            value={dieSize}\r\n            label=\"Damage Die\"\r\n            onChange={(e) => {\r\n              setDieSize(Number(e.target.value));\r\n            }}\r\n          >\r\n            {diceSizeOptions}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n\r\n      {/* Weapon Traits */}\r\n      <Grid item>\r\n        <Paper\r\n          variant=\"outlined\"\r\n          sx={{\r\n            display: \"flex\",\r\n            flexWrap: \"wrap\",\r\n            justifyContent: \"center\",\r\n            listStyle: \"none\",\r\n            p: 0.5,\r\n            my: 1,\r\n          }}\r\n          component=\"ul\"\r\n        >\r\n          {weaponTraits.map((traitName, index) => (\r\n            <Box component=\"li\" key={traitName} sx={{ margin: 0.5 }}>\r\n              <Chip\r\n                label={traitName}\r\n                size=\"small\"\r\n                color=\"secondary\"\r\n                variant={traits[traitName] ? \"filled\" : \"outlined\"}\r\n                onClick={() => {\r\n                  const newTraits = {\r\n                    ...traits,\r\n                    [traitName]: !traits[traitName],\r\n                  };\r\n                  // newTraits[traitName] = !traits[traitName];\r\n                  setTraits(newTraits);\r\n                }}\r\n              />\r\n            </Box>\r\n          ))}\r\n        </Paper>\r\n      </Grid>\r\n      {traits[\"deadly\"] ? (\r\n        <Grid item>\r\n          <FormControl>\r\n            <InputLabel>Deadly Die</InputLabel>\r\n            <Select\r\n              value={deadlySize}\r\n              label=\"Deadly Die\"\r\n              onChange={(e) => {\r\n                setDeadlySize(Number(e.target.value));\r\n              }}\r\n            >\r\n              {diceSizeOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {traits[\"fatal\"] ? (\r\n        <Grid item>\r\n          <FormControl>\r\n            <InputLabel>Fatal Die</InputLabel>\r\n            <Select\r\n              value={fatalSize}\r\n              label=\"Fatal Die\"\r\n              onChange={(e) => {\r\n                setFatalSize(Number(e.target.value));\r\n              }}\r\n            >\r\n              {diceSizeOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n\r\n      <Grid item>\r\n        <FormControlLabel\r\n          control={\r\n            <Switch\r\n              checked={critSpec}\r\n              onChange={(e) => setCritSpec(e.target.checked)}\r\n            />\r\n          }\r\n          label=\"Critical Specialization\"\r\n        />\r\n      </Grid>\r\n      {/* crit spec level slider */}\r\n      {critSpec ? (\r\n        <Grid item>\r\n          <Typography align=\"center\">At Level {critSpecLevel}</Typography>\r\n          <Slider\r\n            value={critSpecLevel}\r\n            min={1}\r\n            max={20}\r\n            marks\r\n            onChange={(e, nv) => setCritSpecLevel(Number(nv))}\r\n          />\r\n        </Grid>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {critSpec ? (\r\n        <Grid item>\r\n          <FormControl>\r\n            <InputLabel>Weapon Group</InputLabel>\r\n            <Select\r\n              value={critSpecType}\r\n              label=\"Weapon Group\"\r\n              onChange={(e) => setCritSpecType(e.target.value)}\r\n            >\r\n              {makeOptions(critSpecs)}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n\r\n      <Grid item xs={6} sm={3} md={4} lg={2}>\r\n        <FormControl fullWidth>\r\n          <InputLabel>Number of Strikes</InputLabel>\r\n          <Select\r\n            value={numStrikes}\r\n            label=\"Number of Strikes\"\r\n            onChange={(e) => {\r\n              setNumStrikes(Number(e.target.value));\r\n            }}\r\n          >\r\n            {makeOptions([0, 1, 2, 3, 4, 5, 6])}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n\r\n      {/* Add Strike button */}\r\n      <Grid item>\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={() => dispatch(activityPathCreated({ strikeInfo }))}\r\n        >\r\n          Creat New Activity\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nfunction SkillSelection() {\r\n  return <React.Fragment>select prof</React.Fragment>;\r\n}\r\n\r\nfunction CantripSelection() {\r\n  return <React.Fragment>select cantrip/prof/ascore/dscore</React.Fragment>;\r\n}\r\n\r\nfunction SpellSelection() {\r\n  return <React.Fragment>select spell/prof/ascore</React.Fragment>;\r\n}\r\n","import React from \"react\";\r\n\r\nimport ReactGA from \"react-ga4\";\r\nimport { Adsense } from \"@ctrl/react-adsense\";\r\n\r\nimport Display from \"../Display/Display\";\r\nimport SelectedRoutine from \"../Routines/SelectedRoutine\";\r\nimport Routines from \"../Routines/Routines\";\r\nimport Export from \"../Sharing/Export\";\r\n\r\nimport \"./PF2App.css\";\r\n\r\nimport {\r\n  selectSelectedRoutine,\r\n  selectSelectedActivityPath,\r\n  selectCreateNewActivity,\r\n} from \"../Routines/RoutineSlice/routineSlice\";\r\nimport { Container, Grid, Box } from \"@mui/material\";\r\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\r\n// import Header from \"./Header\";\r\nimport { ActivityPath } from \"../Routines/Activity/ActivityPath\";\r\nimport NewActivity from \"../Routines/NewActivity/NewActivity\";\r\nimport { useAppSelector } from \"./hooks\";\r\n\r\n// Initialize google analytics\r\nReactGA.initialize(\"G-JR2YK097BG\");\r\n\r\nfunction PF2App() {\r\n  const selectedRoutine = useAppSelector(selectSelectedRoutine);\r\n  const selectedActivityPath = useAppSelector(selectSelectedActivityPath);\r\n  const createNewActivity = useAppSelector(selectCreateNewActivity);\r\n\r\n  const isBigEnough = useMediaQuery((theme: any) => {\r\n    console.log(`Theme is ${theme}`);\r\n    return theme.breakpoints.up(\"md\");\r\n  });\r\n\r\n  ReactGA.send(\"pageview\");\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* <Header /> */}\r\n      <Container maxWidth=\"xl\">\r\n        {isBigEnough ? (\r\n          <Grid\r\n            container\r\n            columnSpacing={{ xs: 2, md: 2, lg: 3, xl: 4 }}\r\n            sx={{ height: \"100vh\" }} // \"calc(100vh - 40px)\"\r\n          >\r\n            <Grid\r\n              id=\"container\"\r\n              item\r\n              xs={12}\r\n              md={6}\r\n              sx={{ height: \"100%\", overflow: \"auto\" }}\r\n            >\r\n              <Box sx={{}}>\r\n                {/* <TargetInput id={0} /> */}\r\n                <Adsense client=\"ca-pub-8032326260699508\" slot=\"3994991926\" />\r\n                <Routines />\r\n                {selectedRoutine !== undefined ? (\r\n                  <SelectedRoutine routineId={selectedRoutine} />\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n                {selectedActivityPath !== undefined ? (\r\n                  <ActivityPath id={selectedActivityPath} />\r\n                ) : createNewActivity ? (\r\n                  <NewActivity />\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n                <Export />\r\n                <Adsense client=\"ca-pub-8032326260699508\" slot=\"3994991926\" />\r\n              </Box>\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              xs={12}\r\n              md={6}\r\n              sx={{ mt: 0, height: 1, overflow: \"hidden auto\" }}\r\n            >\r\n              {/* <Box sx={{ height: 1 }}> */}\r\n              <Display />\r\n              {/* </Box> */}\r\n            </Grid>\r\n          </Grid>\r\n        ) : (\r\n          <React.Fragment>\r\n            {/* <TargetInput id={0} /> */}\r\n            <Adsense client=\"ca-pub-8032326260699508\" slot=\"3994991926\" />\r\n            <Display />\r\n            <Routines />\r\n            {selectedRoutine !== undefined ? (\r\n              <SelectedRoutine routineId={selectedRoutine} />\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            {selectedActivityPath !== undefined ? (\r\n              <ActivityPath id={selectedActivityPath} />\r\n            ) : createNewActivity ? (\r\n              <NewActivity />\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            <Export />\r\n            <Adsense client=\"ca-pub-8032326260699508\" slot=\"3994991926\" />\r\n          </React.Fragment>\r\n        )}\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default PF2App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport routineReducer, {\r\n  damageAdded,\r\n  effectAdded,\r\n  routineAdded,\r\n  setRoutine,\r\n} from \"../Routines/RoutineSlice/routineSlice\";\r\nimport targetReducer, { targetAdded } from \"../Display/targetSlice\";\r\nimport weaknessReducer from \"../Display/weaknessSlice\";\r\nimport {\r\n  ACTrends,\r\n  conditions,\r\n  damageTrends,\r\n  damageTypes,\r\n  dCond,\r\n  dieTrends,\r\n  effectTypes,\r\n  graphTypes,\r\n  materials,\r\n  SaveTrends,\r\n  whenConditions,\r\n} from \"../Model/types\";\r\n\r\nconst empty: { [key: number]: number } = {};\r\nconst pickCritSpec: { [key: number]: number } = {};\r\nconst one: { [key: number]: number } = {};\r\nfor (let i = 1; i <= 20; i++) {\r\n  empty[i] = 0;\r\n  one[i] = 1;\r\n  pickCritSpec[i] = 0;\r\n  if (i >= 5) {\r\n    pickCritSpec[i] = 4;\r\n  }\r\n  if (i >= 12) {\r\n    pickCritSpec[i] = 6;\r\n  }\r\n  if (i >= 19) {\r\n    pickCritSpec[i] = 8;\r\n  }\r\n}\r\n\r\n// const activityPathRemoved = createAction(\r\n//   \"RemoveActivityPath\",\r\n//   (id, parentId) => ({ payload: { id, parentId } })\r\n// );\r\n// const globalReducer = createReducer(, (builder) => {\r\n//   builder.addCase(activityPathRemoved, (state, action) => {\r\n//     const { id, parentId } = action.payload;\r\n//     // activityPathAdapter.removeMany(state, state.entities[id].apIds);\r\n//     activityPathAdapter.removeOne(state, id);\r\n//     if (parentId !== undefined) {\r\n//       state.entities[parentId].apIds = state.entities[parentId].apIds.filter(\r\n//         (apId) => apId !== id\r\n//       );\r\n//     }\r\n//   });\r\n// });\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    routines: routineReducer,\r\n    weaknesses: weaknessReducer,\r\n    targets: targetReducer,\r\n  },\r\n});\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n// default damages and effects\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 0,\r\n    damageCondition: dCond.STRIKE,\r\n\r\n    dieTrend: dieTrends.WEAPON,\r\n    dieAdjustments: { ...empty },\r\n    diceSize: 8,\r\n    fatal: false,\r\n    fatalDie: 10,\r\n    damageTrend: [damageTrends.AS18a, damageTrends.MARTIALWEAPONSPEC],\r\n    damageAdjustments: { ...empty },\r\n\r\n    damageType: damageTypes.S,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n    damageWhen: [whenConditions.Always],\r\n  })\r\n);\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 1,\r\n    damageCondition: dCond.STRIKE,\r\n\r\n    dieTrend: dieTrends.RUNE,\r\n    dieAdjustments: { ...empty },\r\n    diceSize: 6,\r\n    fatal: false,\r\n    fatalDie: 10,\r\n    damageTrend: [],\r\n    damageAdjustments: { ...empty },\r\n\r\n    damageType: damageTypes.FIRE,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n    damageWhen: [whenConditions.Always],\r\n  })\r\n);\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 2,\r\n    damageCondition: dCond.BASIC,\r\n\r\n    dieTrend: dieTrends.SPELLLEVEL2,\r\n    dieAdjustments: { ...empty },\r\n    diceSize: 6,\r\n    fatal: false,\r\n    fatalDie: 10,\r\n    damageTrend: [],\r\n    damageAdjustments: { ...empty },\r\n\r\n    damageType: damageTypes.FIRE,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n    damageWhen: [whenConditions.Always],\r\n  })\r\n);\r\nstore.dispatch(\r\n  effectAdded({\r\n    id: 0,\r\n    effectCondition: conditions.CRIT,\r\n    effectType: effectTypes.FLATFOOT,\r\n    startLevel: 5,\r\n    endLevel: 20,\r\n    damageWhen: [whenConditions.Always],\r\n  })\r\n);\r\n\r\nstore.dispatch(\r\n  targetAdded({\r\n    id: 0,\r\n    name: \"AC: High, Saves: Moderate\",\r\n\r\n    levelDiff: 0,\r\n    persistentMultiplier: 2,\r\n\r\n    ACTrend: ACTrends.HIGH,\r\n    FortTrend: SaveTrends.MODERATE,\r\n    RefTrend: SaveTrends.MODERATE,\r\n    WillTrend: SaveTrends.MODERATE,\r\n    PerTrend: SaveTrends.MODERATE,\r\n\r\n    flatfooted: false,\r\n    percentSelectedRoutine: false,\r\n    weaknesses: [],\r\n\r\n    graphType: graphTypes.DISTRIBUTION,\r\n    routineLevel: 1,\r\n    targetLevel: 1,\r\n    overrideAC: 16,\r\n    overrideFort: 7,\r\n    overrideRef: 7,\r\n    overrideWill: 7,\r\n    overridePer: 7,\r\n  })\r\n);\r\n\r\n// add in some example routines\r\nstore.dispatch(\r\n  routineAdded({\r\n    id: 0,\r\n    name: \"Baseline\",\r\n    display: true,\r\n    apIds: [],\r\n    levelDiff: 0,\r\n    description: \"No damage. Just so graphs display 0 with autoscalling.\",\r\n    startLevel: 1,\r\n    endLevel: 20,\r\n  })\r\n);\r\n\r\n// store.dispatch(\r\n//   routineAdded({\r\n//     id: 1,\r\n//     name: \"Greatsword Fighter 2 strikes\",\r\n//     display: true,\r\n//     apIds: [0],\r\n//     levelDiff: 0,\r\n//     description:\r\n//       \"A simple Fighter making 2 strikes with a greatsword. 1d6 damage runes at 8 and 15. Crit specialization at 5.\",\r\n//     startLevel: 1,\r\n//     endLevel: 20,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   activityPathAdded({\r\n//     id: 0,\r\n//     routineId: 1,\r\n//     condition: conditions.ALWAYS,\r\n\r\n//     rollType: rollTypes.NORMAL,\r\n//     type: activityTypes.STRIKE,\r\n//     profTrend: profTrends.FIGHTERWEAPON,\r\n//     statTrend: statTrends.AS18a,\r\n//     itemTrend: itemTrends.WEAPON,\r\n//     bonusAdjustments: { ...empty },\r\n//     MAP: MAPs.N1,\r\n\r\n//     targetType: defenses.AC,\r\n//     targetInfoId: 0,\r\n\r\n//     damages: [3, 4],\r\n//     effects: [1],\r\n//     apIds: [1],\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 3,\r\n//     damageCondition: dCond.STRIKE,\r\n\r\n//     dieTrend: dieTrends.WEAPON,\r\n//     dieAdjustments: { ...empty },\r\n//     diceSize: 12,\r\n//     fatal: false,\r\n//     fatalDie: 10,\r\n//     damageTrend: [damageTrends.AS18a, damageTrends.FIGHTERWEAPONSPEC],\r\n//     damageAdjustments: { ...empty },\r\n\r\n//     damageType: damageTypes.S,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//     multiplier: 1,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 4,\r\n//     damageCondition: dCond.STRIKE,\r\n\r\n//     dieTrend: dieTrends.RUNE,\r\n//     dieAdjustments: { ...empty },\r\n//     diceSize: 6,\r\n//     fatal: false,\r\n//     fatalDie: 10,\r\n//     damageTrend: [],\r\n//     damageAdjustments: { ...empty },\r\n\r\n//     damageType: damageTypes.FIRE,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//     multiplier: 1,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   effectAdded({\r\n//     id: 1,\r\n//     effectCondition: conditions.CRIT,\r\n//     effectType: effectTypes.FLATFOOT,\r\n//     startLevel: 5,\r\n//     endLevel: 20,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   activityPathAdded({\r\n//     id: 1,\r\n//     parentId: 0,\r\n//     condition: conditions.ALWAYS,\r\n\r\n//     rollType: rollTypes.NORMAL,\r\n//     type: activityTypes.STRIKE,\r\n//     profTrend: profTrends.FIGHTERWEAPON,\r\n//     statTrend: statTrends.AS18a,\r\n//     itemTrend: itemTrends.WEAPON,\r\n//     bonusAdjustments: { ...empty },\r\n//     MAP: MAPs.N2,\r\n\r\n//     targetType: defenses.AC,\r\n//     targetInfoId: 0,\r\n\r\n//     damages: [5, 6],\r\n//     effects: [2],\r\n//     apIds: [],\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 5,\r\n//     damageCondition: dCond.STRIKE,\r\n\r\n//     dieTrend: dieTrends.WEAPON,\r\n//     dieAdjustments: { ...empty },\r\n//     diceSize: 12,\r\n//     fatal: false,\r\n//     fatalDie: 10,\r\n//     damageTrend: [damageTrends.AS18a, damageTrends.FIGHTERWEAPONSPEC],\r\n//     damageAdjustments: { ...empty },\r\n\r\n//     damageType: damageTypes.S,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//     multiplier: 1,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 6,\r\n//     damageCondition: dCond.STRIKE,\r\n\r\n//     dieTrend: dieTrends.RUNE,\r\n//     dieAdjustments: { ...empty },\r\n//     diceSize: 6,\r\n//     fatal: false,\r\n//     fatalDie: 10,\r\n//     damageTrend: [],\r\n//     damageAdjustments: { ...empty },\r\n\r\n//     damageType: damageTypes.FIRE,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//     multiplier: 1,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   effectAdded({\r\n//     id: 2,\r\n//     effectCondition: conditions.CRIT,\r\n//     effectType: effectTypes.FLATFOOT,\r\n//     startLevel: 5,\r\n//     endLevel: 20,\r\n//   })\r\n// );\r\n\r\n// store.dispatch(\r\n//   routineAdded({\r\n//     id: 2,\r\n//     name: \"Fireball\",\r\n//     display: true,\r\n//     apIds: [2],\r\n//     levelDiff: 0,\r\n//     description: \"A 2d6 / spell level basic reflex save.\",\r\n//     startLevel: 1,\r\n//     endLevel: 20,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   activityPathAdded({\r\n//     id: 2,\r\n//     routineId: 2,\r\n//     condition: conditions.ALWAYS,\r\n\r\n//     rollType: rollTypes.NORMAL,\r\n//     type: activityTypes.SAVE,\r\n//     profTrend: profTrends.CASTERSPELL,\r\n//     statTrend: statTrends.AS18a,\r\n//     itemTrend: itemTrends.NONE,\r\n//     bonusAdjustments: { ...empty },\r\n//     MAP: MAPs.N1,\r\n\r\n//     targetType: defenses.REF,\r\n//     targetInfoId: 0,\r\n\r\n//     damages: [7],\r\n//     effects: [],\r\n//     apIds: [],\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 7,\r\n//     damageCondition: dCond.BASIC,\r\n\r\n//     dieTrend: dieTrends.SPELLLEVEL2,\r\n//     dieAdjustments: { ...empty },\r\n//     diceSize: 6,\r\n//     fatal: false,\r\n//     fatalDie: 10,\r\n//     damageTrend: [],\r\n//     damageAdjustments: { ...empty },\r\n\r\n//     damageType: damageTypes.FIRE,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//     multiplier: 1,\r\n//   })\r\n// );\r\n\r\n// store.dispatch(\r\n//   routineAdded({\r\n//     id: 3,\r\n//     name: \"Pick Fighter Double Slice\",\r\n//     display: false,\r\n//     apIds: [3, 4],\r\n//     levelDiff: 0,\r\n//     description:\r\n//       \"A Fighter using Double Slice with a pick and a light pick. 1d6 damage runes at 8 and 15. Crit specialization at 5.\",\r\n//     startLevel: 1,\r\n//     endLevel: 20,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   activityPathAdded({\r\n//     id: 3,\r\n//     routineId: 3,\r\n//     condition: conditions.ALWAYS,\r\n\r\n//     rollType: rollTypes.NORMAL,\r\n//     type: activityTypes.STRIKE,\r\n//     profTrend: profTrends.FIGHTERWEAPON,\r\n//     statTrend: statTrends.AS18a,\r\n//     itemTrend: itemTrends.WEAPON,\r\n//     bonusAdjustments: { ...empty },\r\n//     MAP: MAPs.N1,\r\n\r\n//     targetType: defenses.AC,\r\n//     targetInfoId: 0,\r\n\r\n//     damages: [8, 9, 10],\r\n//     effects: [],\r\n//     apIds: [],\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 8,\r\n//     damageCondition: dCond.STRIKE,\r\n\r\n//     dieTrend: dieTrends.WEAPON,\r\n//     dieAdjustments: { ...empty },\r\n//     diceSize: 6,\r\n//     fatal: true,\r\n//     fatalDie: 10,\r\n//     damageTrend: [damageTrends.AS18a, damageTrends.FIGHTERWEAPONSPEC],\r\n//     damageAdjustments: { ...empty },\r\n\r\n//     damageType: damageTypes.P,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//     multiplier: 1,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 9,\r\n//     damageCondition: dCond.CRIT,\r\n\r\n//     dieTrend: dieTrends.NONE,\r\n//     dieAdjustments: { ...one },\r\n//     diceSize: 10,\r\n//     fatal: false,\r\n//     fatalDie: 10,\r\n//     damageTrend: [],\r\n//     damageAdjustments: { ...pickCritSpec },\r\n\r\n//     damageType: damageTypes.P,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//     multiplier: 1,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 10,\r\n//     damageCondition: dCond.STRIKE,\r\n\r\n//     dieTrend: dieTrends.RUNE,\r\n//     dieAdjustments: { ...empty },\r\n//     diceSize: 6,\r\n//     fatal: false,\r\n//     fatalDie: 10,\r\n//     damageTrend: [],\r\n//     damageAdjustments: { ...empty },\r\n\r\n//     damageType: damageTypes.FIRE,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//     multiplier: 1,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   activityPathAdded({\r\n//     id: 4,\r\n//     routineId: 3,\r\n//     condition: conditions.ALWAYS,\r\n\r\n//     rollType: rollTypes.NORMAL,\r\n//     type: activityTypes.STRIKE,\r\n//     profTrend: profTrends.FIGHTERWEAPON,\r\n//     statTrend: statTrends.AS18a,\r\n//     itemTrend: itemTrends.WEAPON,\r\n//     bonusAdjustments: { ...empty },\r\n//     MAP: MAPs.A1,\r\n\r\n//     targetType: defenses.AC,\r\n//     targetInfoId: 0,\r\n\r\n//     damages: [11, 12, 13],\r\n//     effects: [],\r\n//     apIds: [],\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 11,\r\n//     damageCondition: dCond.STRIKE,\r\n\r\n//     dieTrend: dieTrends.WEAPON,\r\n//     dieAdjustments: { ...empty },\r\n//     diceSize: 4,\r\n//     fatal: true,\r\n//     fatalDie: 8,\r\n//     damageTrend: [damageTrends.AS18a, damageTrends.FIGHTERWEAPONSPEC],\r\n//     damageAdjustments: { ...empty },\r\n\r\n//     damageType: damageTypes.P,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//     multiplier: 1,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 12,\r\n//     damageCondition: dCond.CRIT,\r\n\r\n//     dieTrend: dieTrends.NONE,\r\n//     dieAdjustments: { ...one },\r\n//     diceSize: 8,\r\n//     fatal: false,\r\n//     fatalDie: 10,\r\n//     damageTrend: [],\r\n//     damageAdjustments: { ...pickCritSpec },\r\n\r\n//     damageType: damageTypes.P,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//     multiplier: 1,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 13,\r\n//     damageCondition: dCond.STRIKE,\r\n\r\n//     dieTrend: dieTrends.RUNE,\r\n//     dieAdjustments: { ...empty },\r\n//     diceSize: 6,\r\n//     fatal: false,\r\n//     fatalDie: 10,\r\n//     damageTrend: [],\r\n//     damageAdjustments: { ...empty },\r\n\r\n//     damageType: damageTypes.FIRE,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//     multiplier: 1,\r\n//   })\r\n// );\r\n\r\nstore.dispatch(setRoutine(0));\r\n// store.dispatch(weaknessAdded({ id: 0, type: damageTypes.FIRE, value: 10 }));\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 0,\r\n//     damageCondition: dCond.STRIKE,\r\n//     diceNum: 1,\r\n//     diceSize: 8,\r\n//     staticDamage: 4,\r\n//     damageType: damageTypes.B,\r\n//     material: materials.COLD_IRON,\r\n//     persistent: false,\r\n//   })\r\n// );\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createTheme } from \"@mui/material/styles\";\r\nimport { red } from \"@mui/material/colors\";\r\n\r\n// A custom theme for this app\r\nconst theme = createTheme({\r\n  palette: {\r\n    primary: {\r\n      main: red[500],\r\n    },\r\n    background: {\r\n      default: \"#222222\",\r\n    },\r\n  },\r\n});\r\n\r\nexport default theme;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport PF2App from \"./App/PF2App\";\r\nimport store from \"./App/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { CssBaseline } from \"@mui/material\";\r\nimport theme from \"./App/theme\";\r\nimport { ThemeProvider } from \"@mui/material/styles\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <ThemeProvider theme={theme}>\r\n        <CssBaseline />\r\n        <PF2App />\r\n      </ThemeProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}