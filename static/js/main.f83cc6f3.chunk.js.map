{"version":3,"sources":["Target/weaknessSlice.js","Target/targetSlice.js","types.js","Target/TargetInput.js","Routine/damageSlice.js","Routine/activityPathSlice.js","Routine/routineSlice.js","Display.js","Calculation.js","Routine/SelectedRoutine.js","Routines.js","Export.js","PF2App.js","Routine/effectSlice.js","store.js","serviceWorker.js","index.js"],"names":["weaknessAdapter","createEntityAdapter","weakness","weaknessesSlice","createSlice","name","initialState","getInitialState","reducers","weaknessAdded","addOne","weaknessUpdated","updateOne","weaknessCreated","reducer","state","action","payload","id","type","value","prepare","parentId","weaknessRemoved","removeOne","actions","getSelectors","weaknesses","selectweaknessById","selectById","selectweaknessEntities","selectIds","selectEntities","targetAdapter","selectAll","selectTotal","targetsSlice","targetAdded","targetUpdated","extraReducers","builder","addCase","weaknessId","entities","push","filter","wid","targets","selecttargetById","selecttargetEntities","activityTypes","STRIKE","SAVE","defenses","AC","FORT","REF","WILL","PER","MAPs","N1","N2","N3","A1","A2","A3","R1","R2","R3","RA1","RA2","RA3","RAA1","RAA2","RAA3","MAPvalues","damageTypes","NONE","B","P","S","FIRE","materials","COLD_IRON","SILVER","ADAMANTINE","conditions","ALWAYS","CRIT","SUCC","FAIL","CRIF","AT_LEAST_SUCC","AT_LEAST_FAIL","FAIL_WORSE","SUCC_WORSE","dCond","BASIC","diceNums","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","diceSizes","Weakness","useSelector","dispatch","useDispatch","onChange","e","target","changes","isNaN","parseInt","AddWeakness","useState","weaknessValue","setWeaknessValue","WeaknessSelect","options","dt","key","m","TargetInput","level","Fort","Ref","Will","Perception","flatfooted","className","htmlFor","placeholder","checked","map","damageAdapter","damageId","damagesSlice","damageAdded","damageUpdated","damageCreated","condition","diceNum","diceSize","staticDamage","material","persistent","damageRemoved","console","log","damages","selectdamageById","selectdamageEntities","activityPathAdapter","activityPathId","activityPathsSlice","activityPathAdded","activityPathUpdated","activityPathCreated","targetType","targetInfoId","MAP","effects","apIds","undefined","routineId","did","activityPaths","selectactivityPathById","selectactivityPathEntities","routinesAdapter","routinesSlice","selectedRoutine","setRoutine","routineAdded","routineUpdated","routineCreated","updateSelected","routines","selectRoutineById","selectRoutineEntities","selectAllRoutines","selectSelectedRoutine","Display","addPersistent","setAddPersistent","perMulti","setPerMulti","evaluateActivityPath","chance","activityPath","currentTarget","currentDamages","currentWeaknesses","activity","bonus","DC","multiplier","aveD","thisD","maxW","maxR","critPercent","keen","dif","getCritSuccessPercent","succPercent","getSuccessPercent","failPercent","getFailurePercent","crfaPercent","getCritFailurePercent","expD","expP","forEach","damage","Math","min","max","calculateExpectedDamage","critSucc","succ","fail","critFail","apId","ap","pathChance","pathD","pathP","thisexpD","thisexpP","valueAsNumber","NameInput","ActivityPath","conditionOptions","c","activityTypeOptions","at","MAPOptions","defenseOptions","d","onClick","Damage","dc","diceNumOptions","dn","diceSizeOptions","ds","damageTypeOptions","materialOptions","SelectedRoutine","Routines","routineOptions","routine","ImportExport","PF2App","props","Export","effectAdapter","effectsSlice","effectAdded","effectUpdated","store","configureStore","routineReducer","activityPathReducer","damageReducer","effectReducer","weaknessReducer","targetReducer","overrideDefault","addMods","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f83cc6f3.chunk.js","sourcesContent":["import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const weaknessAdapter = createEntityAdapter();\r\n\r\nlet weakness = 0;\r\n\r\nexport const weaknessesSlice = createSlice({\r\n  name: \"weaknesses\",\r\n  initialState: weaknessAdapter.getInitialState(),\r\n  reducers: {\r\n    weaknessAdded: weaknessAdapter.addOne,\r\n    weaknessUpdated: weaknessAdapter.updateOne,\r\n    weaknessCreated: {\r\n      reducer: (state, action) => {\r\n        const { id, type, value } = action.payload;\r\n        weaknessAdapter.addOne(state, { id, type, value });\r\n      },\r\n      prepare: ({ parentId, type, value }) => {\r\n        const id = ++weakness;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n            type,\r\n            value,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    weaknessRemoved: weaknessAdapter.removeOne,\r\n  },\r\n});\r\n\r\nexport const {\r\n  weaknessRemoved,\r\n  weaknessCreated,\r\n  weaknessAdded,\r\n  weaknessUpdated,\r\n} = weaknessesSlice.actions;\r\n\r\nexport default weaknessesSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selectweaknessById,\r\n  selectIds: selectweaknessIds,\r\n  selectEntities: selectweaknessEntities,\r\n  selectAll: selectAllweaknesses,\r\n  selectTotal: selectTotalweaknesses,\r\n} = weaknessAdapter.getSelectors((state) => state.weaknesses);\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\nimport { weaknessCreated, weaknessRemoved } from \"./weaknessSlice\";\r\n\r\nexport const targetAdapter = createEntityAdapter();\r\n\r\nexport const targetsSlice = createSlice({\r\n  name: \"targets\",\r\n  initialState: targetAdapter.getInitialState(),\r\n  reducers: {\r\n    targetAdded: targetAdapter.addOne,\r\n    targetUpdated: targetAdapter.updateOne,\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(weaknessCreated, (state, action) => {\r\n        const { parentId: id, id: weaknessId } = action.payload;\r\n        state.entities[id].weaknesses.push(weaknessId);\r\n        // targetAdded.updateOne(state, { id, changes: { weaknesses: [...weaknesses, weaknessId] }});\r\n      })\r\n      .addCase(weaknessRemoved, (state, action) => {\r\n        const { parentId: id, id: weaknessId } = action.payload;\r\n        state.entities[id].weaknesses = state.entities[id].weaknesses.filter(\r\n          (wid) => wid !== weaknessId\r\n        );\r\n      });\r\n  },\r\n});\r\n\r\nexport const { targetAdded, targetUpdated } = targetsSlice.actions;\r\n\r\nexport default targetsSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selecttargetById,\r\n  selectIds: selecttargetIds,\r\n  selectEntities: selecttargetEntities,\r\n  selectAll: selectAlltargets,\r\n  selectTotal: selectTotaltargets,\r\n} = targetAdapter.getSelectors((state) => state.targets);\r\n","export const activityTypes = {\r\n  STRIKE: \"Strike\",\r\n  SAVE: \"Save\",\r\n};\r\n\r\nexport const defenses = {\r\n  AC: \"AC\",\r\n  FORT: \"Fort\",\r\n  REF: \"Ref\",\r\n  WILL: \"Will\",\r\n  PER: \"Perception\",\r\n};\r\n\r\nexport const MAPs = {\r\n  N1: \"0 (0x-5)\",\r\n  N2: \"-5 (1x-5)\",\r\n  N3: \"-10 (2x-5)\",\r\n  A1: \"0 (0x-4)\",\r\n  A2: \"-4 (1x-4)\",\r\n  A3: \"-8 (2x-4)\",\r\n  R1: \"0 (0x-3)\",\r\n  R2: \"-3 (1x-3)\",\r\n  R3: \"-6 (2x-3)\",\r\n  RA1: \"0 (0x-2)\",\r\n  RA2: \"-2 (1x-2)\",\r\n  RA3: \"-4 (2x-2)\",\r\n  RAA1: \"0 (0x-1)\",\r\n  RAA2: \"-1 (1x-1)\",\r\n  RAA3: \"-2 (2x-1)\",\r\n};\r\n\r\nexport const MAPvalues = {\r\n  \"0 (0x-5)\": 0,\r\n  \"-5 (1x-5)\": -5,\r\n  \"-10 (2x-5)\": -10,\r\n  \"0 (0x-4)\": 0,\r\n  \"-4 (1x-4)\": -4,\r\n  \"-8 (2x-4)\": -8,\r\n  \"0 (0x-3)\": 0,\r\n  \"-3 (1x-3)\": -3,\r\n  \"-6 (2x-3)\": -6,\r\n  \"0 (0x-2)\": 0,\r\n  \"-2 (1x-2)\": -2,\r\n  \"-4 (2x-2)\": -4,\r\n  \"0 (0x-1)\": 0,\r\n  \"-1 (1x-1)\": -1,\r\n  \"-2 (2x-1)\": -2,\r\n};\r\n\r\nexport const damageTypes = {\r\n  NONE: \"None\",\r\n  B: \"bludgeoning\",\r\n  P: \"piercing\",\r\n  S: \"slashing\",\r\n  FIRE: \"fire\",\r\n};\r\n\r\nexport const materials = {\r\n  NONE: \"none\",\r\n  COLD_IRON: \"cold iron\",\r\n  SILVER: \"silver\",\r\n  ADAMANTINE: \"adamantine\",\r\n};\r\n\r\nexport const conditions = {\r\n  ALWAYS: \"Always\",\r\n  CRIT: \"On Crit\",\r\n  SUCC: \"On Success\",\r\n  FAIL: \"On Failure\",\r\n  CRIF: \"On Crit Fail\",\r\n  AT_LEAST_SUCC: \"Success or better\",\r\n  AT_LEAST_FAIL: \"Failure or better\",\r\n  FAIL_WORSE: \"Failure or worse\",\r\n  SUCC_WORSE: \"Success or worse\",\r\n};\r\n\r\nexport const dCond = {\r\n  STRIKE: \"x1 hit, x2 crit\",\r\n  BASIC: \"Basic save\",\r\n  ALWAYS: \"Always\",\r\n  CRIT: \"On Crit\",\r\n  SUCC: \"On Success\",\r\n  FAIL: \"On Failure\",\r\n  CRIF: \"On Crit Fail\",\r\n  AT_LEAST_SUCC: \"Success or better\",\r\n  AT_LEAST_FAIL: \"Failure or better\",\r\n  FAIL_WORSE: \"Failure or worse\",\r\n  SUCC_WORSE: \"Success or worse\",\r\n};\r\n\r\nexport const diceNums = {\r\n  0: 0,\r\n  1: 1,\r\n  2: 2,\r\n  3: 3,\r\n  4: 4,\r\n  5: 5,\r\n  6: 6,\r\n  7: 7,\r\n  8: 8,\r\n  9: 9,\r\n  10: 10,\r\n  11: 11,\r\n  12: 12,\r\n  13: 13,\r\n  14: 14,\r\n  15: 15,\r\n  16: 16,\r\n  17: 17,\r\n  18: 18,\r\n  19: 19,\r\n  20: 20,\r\n};\r\n\r\nexport const diceSizes = {\r\n  4: 4,\r\n  6: 6,\r\n  8: 8,\r\n  10: 10,\r\n  12: 12,\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { selecttargetById, targetUpdated } from \"./targetSlice\";\r\nimport { damageTypes, defenses, materials } from \"../types\";\r\nimport {\r\n  selectweaknessById,\r\n  weaknessCreated,\r\n  weaknessRemoved,\r\n  weaknessUpdated,\r\n} from \"./weaknessSlice\";\r\n\r\nfunction TargetInput({ id }) {\r\n  const {\r\n    name,\r\n    level,\r\n    [defenses.AC]: AC,\r\n    [defenses.FORT]: Fort,\r\n    [defenses.REF]: Ref,\r\n    [defenses.WILL]: Will,\r\n    [defenses.PER]: Perception,\r\n    flatfooted,\r\n    weaknesses,\r\n  } = useSelector((state) => selecttargetById(state, 0));\r\n  const dispatch = useDispatch();\r\n\r\n  // name, level, ac, fort, ref, will, perception, resistances/weaknesses\r\n  return (\r\n    <div className=\"box\">\r\n      <label htmlFor=\"targetName\">Target Name:</label>\r\n      <input\r\n        id=\"targetName\"\r\n        type=\"text\"\r\n        placeholder=\"Enter Target name\"\r\n        value={name}\r\n        onChange={(e) =>\r\n          dispatch(targetUpdated({ id, changes: { name: e.target.value } }))\r\n        }\r\n      />\r\n\r\n      {\" AC: \"}\r\n      <input\r\n        type=\"number\"\r\n        value={AC}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            targetUpdated({\r\n              id,\r\n              changes: { [defenses.AC]: parseInt(e.target.value) },\r\n            })\r\n          )\r\n        }\r\n      />\r\n      {\" Fort: \"}\r\n      <input\r\n        type=\"number\"\r\n        value={Fort}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            targetUpdated({\r\n              id,\r\n              changes: { [defenses.FORT]: parseInt(e.target.value) },\r\n            })\r\n          )\r\n        }\r\n      />\r\n      {\" Ref: \"}\r\n      <input\r\n        type=\"number\"\r\n        value={Ref}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            targetUpdated({\r\n              id,\r\n              changes: { [defenses.REF]: parseInt(e.target.value) },\r\n            })\r\n          )\r\n        }\r\n      />\r\n      {\" Will: \"}\r\n      <input\r\n        type=\"number\"\r\n        value={Will}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            targetUpdated({\r\n              id,\r\n              changes: { [defenses.WILL]: parseInt(e.target.value) },\r\n            })\r\n          )\r\n        }\r\n      />\r\n      {\" Perception: \"}\r\n      <input\r\n        type=\"number\"\r\n        value={Perception}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            targetUpdated({\r\n              id,\r\n              changes: { [defenses.PER]: parseInt(e.target.value) },\r\n            })\r\n          )\r\n        }\r\n      />\r\n      {\" Flatfooted: \"}\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={flatfooted}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            targetUpdated({ id, changes: { flatfooted: e.target.checked } })\r\n          )\r\n        }\r\n      />\r\n      {\" Resistance/Weakness: \"}\r\n      {weaknesses.map((weaknessId) => (\r\n        <Weakness parentId={id} id={weaknessId} key={weaknessId} />\r\n      ))}\r\n      <AddWeakness parentId={id} />\r\n    </div>\r\n  );\r\n}\r\n\r\n// const TargetInfo = ({ id }) => {\r\n//   const { overrideDefault, type, value, weaknesses } = useSelector((state) =>\r\n//     selecttargetInfoById(state, id)\r\n//   );\r\n//   const dispatch = useDispatch();\r\n\r\n//   const defenseOptions = [];\r\n//   for (let d in defenses) {\r\n//     defenseOptions.push(<option key={d}>{defenses[d]}</option>);\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"box\">\r\n//       {\"Override Target: \"}\r\n//       <input\r\n//         type=\"checkbox\"\r\n//         checked={overrideDefault}\r\n//         onChange={(e) =>\r\n//           dispatch(\r\n//             targetInfoUpdated({\r\n//               id,\r\n//               changes: { overrideDefault: e.target.checked },\r\n//             })\r\n//           )\r\n//         }\r\n//       />\r\n\r\n// {/* <Weaknesses parentId={id} weaknessIds={weaknesses} /> */}\r\n\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const Weaknesses = ({ parentId, weaknessIds }) => {\r\n//   return (\r\n//     <span>\r\n//       {weaknessIds.map((weaknessId) => (\r\n//         <Weakness id={weaknessId} key={weaknessId} />\r\n//       ))}\r\n//       <AddWeakness id={parentId} />\r\n//     </span>\r\n//   );\r\n// };\r\n\r\nconst Weakness = ({ id, parentId }) => {\r\n  // needs to have parent id to remove weakness\r\n  const { type, value } = useSelector((state) => selectweaknessById(state, id));\r\n  const dispatch = useDispatch();\r\n\r\n  const updateOrRemoveWeakness = (e) => {\r\n    if (e.target.value === damageTypes.NONE) {\r\n      // remove this weakness\r\n      dispatch(weaknessRemoved({ id, parentId }));\r\n    } else {\r\n      dispatch(weaknessUpdated({ id, changes: { type: e.target.value } }));\r\n    }\r\n  };\r\n  const updateWeaknessValue = (e) => {\r\n    if (!isNaN(e.target.value)) {\r\n      dispatch(\r\n        weaknessUpdated({ id, changes: { value: parseInt(e.target.value) } })\r\n      );\r\n    }\r\n  };\r\n  return (\r\n    <span>\r\n      <WeaknessSelect value={type} onChange={updateOrRemoveWeakness} />\r\n      <input type=\"number\" value={value} onChange={updateWeaknessValue} />\r\n    </span>\r\n  );\r\n};\r\n\r\nlet weaknessId = 0;\r\n\r\nconst AddWeakness = ({ parentId }) => {\r\n  const dispatch = useDispatch();\r\n  let [weaknessValue, setWeaknessValue] = useState(0);\r\n\r\n  // add a Weakness to TargetInfo id\r\n  const addWeakness = (e) => {\r\n    if (e.target.value !== damageTypes.NONE) {\r\n      // need to create a new weakness\r\n      weaknessId++;\r\n      dispatch(\r\n        weaknessCreated({\r\n          id: weaknessId,\r\n          type: e.target.value,\r\n          value: weaknessValue,\r\n          parentId: parentId,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <span>\r\n      <WeaknessSelect value={damageTypes.NONE} onChange={addWeakness} />\r\n      <input\r\n        type=\"number\"\r\n        value={weaknessValue}\r\n        onChange={(e) => setWeaknessValue(parseInt(e.target.value))}\r\n      />\r\n    </span>\r\n  );\r\n};\r\n\r\nconst WeaknessSelect = ({ value, onChange }) => {\r\n  const options = [];\r\n  for (let dt in damageTypes) {\r\n    options.push(<option key={dt}>{damageTypes[dt]}</option>);\r\n  }\r\n  for (let m in materials) {\r\n    if (materials[m] === materials.NONE) continue;\r\n    options.push(<option key={m}>{materials[m]}</option>);\r\n  }\r\n  return (\r\n    <span>\r\n      <select value={value} onChange={(e) => onChange(e)}>\r\n        {options}\r\n      </select>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default TargetInput;\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\nimport { damageTypes, dCond, materials } from \"../types\";\r\n\r\nexport const damageAdapter = createEntityAdapter();\r\n\r\n// damageAdded({\r\n//   id: 0,\r\n//   condition: dCond.STRIKE,\r\n//   diceNum: 1,\r\n//   diceSize: 8,\r\n//   staticDamage: 6,\r\n//   type: damageTypes.PIERCE,\r\n//   material: materials.COLD_IRON,\r\n// });\r\n\r\nlet damageId = 1;\r\nexport const damagesSlice = createSlice({\r\n  name: \"damages\",\r\n  initialState: damageAdapter.getInitialState(),\r\n  reducers: {\r\n    damageAdded: damageAdapter.addOne,\r\n    damageUpdated: damageAdapter.updateOne,\r\n    damageCreated: {\r\n      reducer: (state, action) => {\r\n        const {\r\n          id,\r\n          condition,\r\n          diceNum,\r\n          diceSize,\r\n          staticDamage,\r\n          type,\r\n          material,\r\n          persistent,\r\n        } = action.payload;\r\n        damageAdapter.addOne(state, {\r\n          id,\r\n          condition,\r\n          diceNum,\r\n          diceSize,\r\n          staticDamage,\r\n          type,\r\n          material,\r\n          persistent,\r\n        });\r\n      },\r\n      prepare: ({ parentId }) => {\r\n        const id = ++damageId;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n            condition: dCond.STRIKE,\r\n            diceNum: 0,\r\n            diceSize: 8,\r\n            staticDamage: 0,\r\n            type: damageTypes.B,\r\n            material: materials.NONE,\r\n            persistent: false,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    damageRemoved: (state, action) => {\r\n      console.log(action);\r\n      damageAdapter.removeOne(state, action.payload.id);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { damageRemoved, damageCreated, damageAdded, damageUpdated } =\r\n  damagesSlice.actions;\r\n\r\nexport default damagesSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selectdamageById,\r\n  selectIds: selectdamageIds,\r\n  selectEntities: selectdamageEntities,\r\n  selectAll: selectAlldamages,\r\n  selectTotal: selectTotaldamages,\r\n} = damageAdapter.getSelectors((state) => state.damages);\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\nimport { activityTypes, conditions, defenses, MAPs } from \"../types\";\r\nimport { damageCreated, damageRemoved } from \"./damageSlice\";\r\n\r\nexport const activityPathAdapter = createEntityAdapter();\r\n\r\nlet activityPathId = 1;\r\nexport const activityPathsSlice = createSlice({\r\n  name: \"activityPaths\",\r\n  initialState: activityPathAdapter.getInitialState(),\r\n  reducers: {\r\n    activityPathAdded: activityPathAdapter.addOne,\r\n    activityPathUpdated: activityPathAdapter.updateOne,\r\n    activityPathCreated: {\r\n      reducer: (state, action) => {\r\n        const {\r\n          id,\r\n          parentId,\r\n          condition,\r\n          type,\r\n          targetType,\r\n          targetInfoId,\r\n          value,\r\n          MAP,\r\n          damages,\r\n          effects,\r\n          apIds,\r\n        } = action.payload;\r\n        activityPathAdapter.addOne(state, {\r\n          id,\r\n          condition,\r\n          type,\r\n          targetType,\r\n          targetInfoId,\r\n          value,\r\n          MAP,\r\n          damages,\r\n          effects,\r\n          apIds,\r\n        });\r\n        console.log(parentId);\r\n        if (parentId !== undefined) state.entities[parentId].apIds.push(id);\r\n      },\r\n      prepare: ({ parentId, routineId }) => {\r\n        const id = ++activityPathId;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n            routineId,\r\n            condition: conditions.ALWAYS,\r\n            type: activityTypes.STRIKE,\r\n            targetType: defenses.AC,\r\n            targetInfoId: 0,\r\n            value: 9,\r\n            MAP: MAPs.A1,\r\n            damages: [],\r\n            effects: [],\r\n            apIds: [],\r\n          },\r\n        };\r\n      },\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(damageCreated, (state, action) => {\r\n        const { parentId: id, id: damageId } = action.payload;\r\n        state.entities[id].damages.push(damageId);\r\n      })\r\n      .addCase(damageRemoved, (state, action) => {\r\n        const { parentId: id, id: damageId } = action.payload;\r\n        state.entities[id].damages = state.entities[id].damages.filter(\r\n          (did) => did !== damageId\r\n        );\r\n      });\r\n  },\r\n});\r\n\r\nexport const { activityPathCreated, activityPathAdded, activityPathUpdated } =\r\n  activityPathsSlice.actions;\r\n\r\nexport default activityPathsSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selectactivityPathById,\r\n  selectIds: selectactivityPathIds,\r\n  selectEntities: selectactivityPathEntities,\r\n  selectAll: selectAllactivityPaths,\r\n  selectTotal: selectTotalactivityPaths,\r\n} = activityPathAdapter.getSelectors((state) => state.activityPaths);\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\nimport { activityPathCreated } from \"./activityPathSlice\";\r\n\r\nexport const routinesAdapter = createEntityAdapter();\r\n\r\nlet routineId = 1;\r\nexport const routinesSlice = createSlice({\r\n  name: \"routines\",\r\n  initialState: routinesAdapter.getInitialState({ selectedRoutine: 0 }),\r\n  reducers: {\r\n    setRoutine: (state, action) => {\r\n      state.selectedRoutine = action.payload || 0;\r\n    },\r\n    routineAdded: routinesAdapter.addOne,\r\n    routineUpdated: routinesAdapter.updateOne,\r\n    routineCreated: {\r\n      reducer: (state, action) => {\r\n        const { id, name, apIds } = action.payload;\r\n        routinesAdapter.addOne(state, { id, name, apIds });\r\n      },\r\n      prepare: () => {\r\n        const id = ++routineId;\r\n        return { payload: { id, name: \"New Routine\", apIds: [] } };\r\n      },\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(activityPathCreated, (state, action) => {\r\n      const { routineId: id, id: apId } = action.payload;\r\n      if (id !== undefined) state.entities[id].apIds.push(id);\r\n    });\r\n  },\r\n});\r\n\r\nexport const {\r\n  routineCreated,\r\n  setRoutine,\r\n  updateSelected,\r\n  routineAdded,\r\n  routineUpdated,\r\n} = routinesSlice.actions;\r\n\r\nexport default routinesSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selectRoutineById,\r\n  selectIds: selectRoutineIds,\r\n  selectEntities: selectRoutineEntities,\r\n  selectAll: selectAllRoutines,\r\n  selectTotal: selectTotalRoutines,\r\n} = routinesAdapter.getSelectors((state) => state.routines);\r\n\r\nexport const selectSelectedRoutine = (state) => state.routines.selectedRoutine;\r\n","import React, { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { calculateExpectedDamage } from \"./Calculation\";\r\nimport { selectactivityPathEntities } from \"./Routine/activityPathSlice\";\r\nimport { selectdamageEntities } from \"./Routine/damageSlice\";\r\nimport {\r\n  selectRoutineEntities,\r\n  selectSelectedRoutine,\r\n} from \"./Routine/routineSlice\";\r\nimport { selecttargetEntities } from \"./Target/targetSlice\";\r\nimport { selectweaknessEntities } from \"./Target/weaknessSlice\";\r\nimport { conditions } from \"./types\";\r\n\r\nconst Display = () => {\r\n  const [addPersistent, setAddPersistent] = useState(false);\r\n  const [perMulti, setPerMulti] = useState(2);\r\n\r\n  const routines = useSelector(selectRoutineEntities);\r\n  const activityPaths = useSelector(selectactivityPathEntities);\r\n  const targets = useSelector(selecttargetEntities);\r\n  const damages = useSelector(selectdamageEntities);\r\n  const weaknesses = useSelector(selectweaknessEntities);\r\n\r\n  const selectedRoutine = routines[useSelector(selectSelectedRoutine)];\r\n\r\n  function evaluateActivityPath(chance, activityPath) {\r\n    let currentTarget = targets[0];\r\n    let currentDamages = activityPath.damages.map(\r\n      (damageId) => damages[damageId]\r\n    );\r\n    let currentWeaknesses = currentTarget.weaknesses.map(\r\n      (weaknessId) => weaknesses[weaknessId]\r\n    );\r\n\r\n    let [expD, expP, critSucc, succ, fail, critFail] = calculateExpectedDamage(\r\n      activityPath,\r\n      currentDamages,\r\n      currentTarget,\r\n      currentWeaknesses\r\n    );\r\n    // console.log(`expected damage is ${expD}`);\r\n\r\n    activityPath.apIds.forEach((apId) => {\r\n      let ap = activityPaths[apId];\r\n      let pathChance = chance;\r\n\r\n      switch (ap.condition) {\r\n        case conditions.ALWAYS:\r\n          break;\r\n\r\n        case conditions.AT_LEAST_FAIL:\r\n          pathChance *= critSucc + succ + fail;\r\n          break;\r\n\r\n        case conditions.AT_LEAST_SUCC:\r\n          pathChance *= critSucc + succ;\r\n          break;\r\n\r\n        case conditions.CRIF:\r\n          pathChance *= critFail;\r\n          break;\r\n\r\n        case conditions.CRIT:\r\n          pathChance *= critSucc;\r\n          break;\r\n\r\n        case conditions.FAIL:\r\n          pathChance *= fail;\r\n          break;\r\n\r\n        case conditions.FAIL_WORSE:\r\n          pathChance *= fail + critFail;\r\n          break;\r\n\r\n        case conditions.SUCC:\r\n          pathChance *= succ;\r\n          break;\r\n\r\n        case conditions.SUCC_WORSE:\r\n          pathChance *= succ + fail + critFail;\r\n          break;\r\n\r\n        default:\r\n      }\r\n      // console.log(pathChance);\r\n      let [pathD, pathP] = evaluateActivityPath(pathChance, ap);\r\n\r\n      expD += pathD;\r\n      expP += pathP;\r\n    });\r\n\r\n    return [expD * chance, expP * chance];\r\n  }\r\n\r\n  let expD = 0;\r\n  let expP = 0;\r\n  selectedRoutine.apIds.forEach((apId) => {\r\n    let activityPath = activityPaths[apId];\r\n    let [thisexpD, thisexpP] = evaluateActivityPath(1, activityPath);\r\n    expD += thisexpD;\r\n    expP += thisexpP;\r\n  });\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      Add persistent damage:\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={addPersistent}\r\n        onChange={(e) => setAddPersistent(e.target.checked)}\r\n      />\r\n      , persistent damage multiplier:\r\n      <input\r\n        type=\"number\"\r\n        value={perMulti ? perMulti : 0}\r\n        onChange={(e) => setPerMulti(e.target.valueAsNumber)}\r\n      />\r\n      <div>\r\n        Expected Damage:\r\n        <p>\r\n          {selectedRoutine.name}\r\n          {\": \"}\r\n          {addPersistent ? expD + expP * perMulti : expD}\r\n        </p>\r\n      </div>\r\n      {addPersistent ? (\r\n        \"\"\r\n      ) : (\r\n        <div>\r\n          Expected Persistent Damage:\r\n          <p>\r\n            {selectedRoutine.name}\r\n            {\": \"}\r\n            {expP}\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Display;\r\n","import { activityTypes, dCond, defenses, MAPvalues } from \"./types\";\r\n\r\nfunction getCritSuccessPercent(bonus, DC, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -20) {\r\n    chance = 0;\r\n  } else if (dif === -20) {\r\n    chance = 5;\r\n  } else if (dif < -9) {\r\n    chance = keen ? 10 : 5;\r\n  } else if (dif < 8) {\r\n    chance = (11 + dif) * 5;\r\n  } else {\r\n    chance = 95;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nfunction getSuccessPercent(bonus, DC, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -29) {\r\n    chance = 0;\r\n  } else if (dif < -20) {\r\n    chance = 5;\r\n  } else if (dif === -20) {\r\n    chance = 0;\r\n  } else if (dif < -9) {\r\n    chance = (keen ? 19 : 20 + dif) * 5;\r\n  } else if (dif < -1) {\r\n    chance = 50;\r\n  } else if (dif < 9) {\r\n    chance = (8 - dif) * 5;\r\n  } else {\r\n    chance = 5;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nfunction getFailurePercent(bonus, DC, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -29) {\r\n    chance = 5;\r\n  } else if (dif < -20) {\r\n    chance = (29 + dif) * 5;\r\n  } else if (dif < -10) {\r\n    chance = 45;\r\n  } else if (dif < -1) {\r\n    chance = (-2 - dif) * 5;\r\n  } else if (dif < 9) {\r\n    chance = 5;\r\n  } else {\r\n    chance = 0;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nfunction getCritFailurePercent(bonus, DC, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -29) {\r\n    chance = 95;\r\n  } else if (dif < -10) {\r\n    chance = (-10 - dif) * 5;\r\n  } else if (dif < -1) {\r\n    chance = 5;\r\n  } else {\r\n    chance = 0;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nfunction calculateExpectedDamage(activity, damages, target, weaknesses) {\r\n  let bonus;\r\n  let DC;\r\n  switch (activity.type) {\r\n    case activityTypes.STRIKE:\r\n      bonus = activity.value;\r\n      bonus += MAPvalues[activity.MAP];\r\n      DC = target[activity.targetType];\r\n      if (activity.targetType === defenses.AC) {\r\n        if (target.flatfooted) DC -= 2;\r\n      } else {\r\n        DC += 10;\r\n      }\r\n      break;\r\n\r\n    case activityTypes.SAVE:\r\n      bonus = target[activity.targetType];\r\n      DC = activity.value;\r\n      if (activity.targetType === defenses.AC) {\r\n        bonus -= 10;\r\n      }\r\n      break;\r\n\r\n    default:\r\n      console.log(`Activity type ${activity.type} not implemented`);\r\n  }\r\n\r\n  const critPercent = getCritSuccessPercent(bonus, DC);\r\n  const succPercent = getSuccessPercent(bonus, DC);\r\n  const failPercent = getFailurePercent(bonus, DC);\r\n  const crfaPercent = getCritFailurePercent(bonus, DC);\r\n  //   const failPercent = getFa\r\n  // console.log(\r\n  //   `${bonus} ${DC} ${critPercent} ${succPercent} ${failPercent} ${crfaPercent}`\r\n  // );\r\n\r\n  let expD = 0;\r\n  let expP = 0;\r\n  let multiplier;\r\n  let aveD;\r\n  let thisD;\r\n  let maxW;\r\n  let maxR;\r\n\r\n  damages.forEach((damage) => {\r\n    let {\r\n      condition,\r\n      diceNum,\r\n      diceSize,\r\n      staticDamage,\r\n      type,\r\n      material,\r\n      persistent,\r\n    } = damage;\r\n\r\n    // find max weakness and resistance, weaknesses are negative numbers\r\n    maxW = 0;\r\n    maxR = 0;\r\n    weaknesses.forEach((weakness) => {\r\n      if (weakness.type === type || weakness.type === material) {\r\n        if (weakness.value < 0) {\r\n          maxW = Math.min(maxW, weakness.value);\r\n        } else if (weakness.value > 0) {\r\n          maxR = Math.max(maxR, weakness.value);\r\n        }\r\n      }\r\n    });\r\n\r\n    // TODO: max distribution and add weak/res after...\r\n    // if there's any damage add the weakness, weakness is negative\r\n    if (staticDamage > 0 || diceNum > 0) staticDamage -= maxW;\r\n    staticDamage -= maxR;\r\n\r\n    // if static damage < -diceNum things are complicated...\r\n    if (staticDamage < -diceNum) {\r\n      console.log(\"Damage not correct..., < 0 not handled\");\r\n      aveD = ((diceSize + 1) * diceNum) / 2 + staticDamage;\r\n    } else {\r\n      aveD = ((diceSize + 1) * diceNum) / 2 + staticDamage;\r\n    }\r\n\r\n    switch (condition) {\r\n      case dCond.STRIKE:\r\n        multiplier = succPercent + 2 * critPercent;\r\n        break;\r\n\r\n      case dCond.BASIC:\r\n        multiplier = succPercent * 0.5 + failPercent + crfaPercent * 2;\r\n        break;\r\n\r\n      case dCond.CRIF:\r\n        multiplier = crfaPercent;\r\n        break;\r\n\r\n      case dCond.FAIL:\r\n        multiplier = failPercent;\r\n        break;\r\n\r\n      case dCond.SUCC:\r\n        multiplier = succPercent;\r\n        break;\r\n\r\n      case dCond.CRIT:\r\n        multiplier = critPercent;\r\n        break;\r\n\r\n      case dCond.AT_LEAST_SUCC:\r\n        multiplier = succPercent + critPercent;\r\n        break;\r\n\r\n      case dCond.AT_LEAST_FAIL:\r\n        multiplier = failPercent + succPercent + critPercent;\r\n        break;\r\n\r\n      case dCond.FAIL_WORSE:\r\n        multiplier = failPercent + crfaPercent;\r\n        break;\r\n\r\n      case dCond.SUCC_WORSE:\r\n        multiplier = succPercent + failPercent + crfaPercent;\r\n        break;\r\n\r\n      case dCond.ALWAYS:\r\n        multiplier = 100;\r\n        break;\r\n\r\n      default:\r\n        multiplier = 0;\r\n        console.log(\r\n          `Damage condition ${damage.condition} not implemented yet.`\r\n        );\r\n    }\r\n    thisD = multiplier * aveD;\r\n    if (persistent) expP += thisD;\r\n    else expD += thisD;\r\n    console.log(`this damage: m${multiplier} ave${aveD}`);\r\n  });\r\n\r\n  // divide by 100 because using percents %\r\n  return [\r\n    expD / 100,\r\n    expP / 100,\r\n    critPercent / 100,\r\n    succPercent / 100,\r\n    failPercent / 100,\r\n    crfaPercent / 100,\r\n  ];\r\n}\r\n\r\nexport {\r\n  //   totalBonusDescription,\r\n  //   attackBonusDescription,\r\n  //   totalDamageDescription,\r\n  calculateExpectedDamage,\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  activityTypes,\r\n  conditions,\r\n  damageTypes,\r\n  dCond,\r\n  defenses,\r\n  diceNums,\r\n  diceSizes,\r\n  MAPs,\r\n  materials,\r\n} from \"../types\";\r\nimport {\r\n  activityPathCreated,\r\n  activityPathUpdated,\r\n  selectactivityPathById,\r\n} from \"./activityPathSlice\";\r\n\r\nimport {\r\n  damageCreated,\r\n  damageRemoved,\r\n  damageUpdated,\r\n  selectdamageById,\r\n} from \"./damageSlice\";\r\nimport {\r\n  routineUpdated,\r\n  selectRoutineById,\r\n  selectSelectedRoutine,\r\n} from \"./routineSlice\";\r\n\r\nfunction SelectedRoutine() {\r\n  const selectedRoutine = useSelector(selectSelectedRoutine);\r\n  const apIds = useSelector((state) =>\r\n    selectRoutineById(state, selectedRoutine)\r\n  ).apIds;\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className=\"selectedRoutine\">\r\n      <NameInput id={selectedRoutine} />\r\n      {apIds.map((apId) => (\r\n        <ActivityPath id={apId} key={apId} />\r\n      ))}\r\n      <button\r\n        className=\"add\"\r\n        onClick={() =>\r\n          dispatch(activityPathCreated({ routineId: selectedRoutine }))\r\n        }\r\n      >\r\n        +\r\n      </button>\r\n      {/* <EffectInput /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst NameInput = ({ id }) => {\r\n  const dispatch = useDispatch();\r\n  const name = useSelector((state) => selectRoutineById(state, id)).name;\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      <label htmlFor=\"routineName\">Routine Name:</label>\r\n      <input\r\n        id=\"routineName\"\r\n        type=\"text\"\r\n        placeholder=\"Enter routine name\"\r\n        value={name}\r\n        onChange={(e) =>\r\n          dispatch(routineUpdated({ id, changes: { name: e.target.value } }))\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ActivityPath = ({ id }) => {\r\n  const { condition, type, targetType, value, MAP, damages, effects, apIds } =\r\n    useSelector((state) => selectactivityPathById(state, id));\r\n  const dispatch = useDispatch();\r\n\r\n  const conditionOptions = [];\r\n  for (let c in conditions) {\r\n    conditionOptions.push(<option key={c}>{conditions[c]}</option>);\r\n  }\r\n  const activityTypeOptions = [];\r\n  for (let at in activityTypes) {\r\n    activityTypeOptions.push(<option key={at}>{activityTypes[at]}</option>);\r\n  }\r\n  const MAPOptions = [];\r\n  for (let m in MAPs) {\r\n    MAPOptions.push(<option key={m}>{MAPs[m]}</option>);\r\n  }\r\n  const defenseOptions = [];\r\n  for (let d in defenses) {\r\n    defenseOptions.push(<option key={d}>{defenses[d]}</option>);\r\n  }\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      {condition ? (\r\n        <div>\r\n          Condition:\r\n          <select\r\n            value={condition}\r\n            onChange={(e) =>\r\n              dispatch(\r\n                activityPathUpdated({\r\n                  id,\r\n                  changes: { condition: e.target.value },\r\n                })\r\n              )\r\n            }\r\n          >\r\n            {conditionOptions}\r\n          </select>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n\r\n      <div className=\"box\">\r\n        <select\r\n          value={type}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              activityPathUpdated({ id, changes: { type: e.target.value } })\r\n            )\r\n          }\r\n        >\r\n          {activityTypeOptions}\r\n        </select>\r\n        {type === activityTypes.STRIKE ? \" +\" : \" DC: \"}\r\n        <input\r\n          type=\"number\"\r\n          value={value ? value : 0}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              activityPathUpdated({\r\n                id,\r\n                changes: { value: parseInt(e.target.value) },\r\n              })\r\n            )\r\n          }\r\n        />\r\n        {\" MAP: \"}\r\n        <select\r\n          value={MAP}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              activityPathUpdated({ id, changes: { MAP: e.target.value } })\r\n            )\r\n          }\r\n        >\r\n          {MAPOptions}\r\n        </select>\r\n\r\n        {\" VS: \"}\r\n        <select\r\n          value={targetType}\r\n          onChange={(e) => {\r\n            dispatch(\r\n              activityPathUpdated({\r\n                id,\r\n                changes: { targetType: e.target.value },\r\n              })\r\n            );\r\n          }}\r\n        >\r\n          {defenseOptions}\r\n        </select>\r\n\r\n        <div className=\"box\">\r\n          {\"Damage: \"}\r\n          {damages.map((damageId) => (\r\n            <Damage parentId={id} id={damageId} key={damageId} />\r\n          ))}\r\n          <button\r\n            className=\"add\"\r\n            onClick={() => dispatch(damageCreated({ parentId: id }))}\r\n          >\r\n            +\r\n          </button>\r\n        </div>\r\n        <div className=\"box\">Effects: {effects}</div>\r\n      </div>\r\n\r\n      <div className=\"box\">\r\n        {apIds.map((apId) => (\r\n          <ActivityPath id={apId} key={apId} />\r\n        ))}\r\n        <button\r\n          className=\"add\"\r\n          onClick={() => dispatch(activityPathCreated({ parentId: id }))}\r\n        >\r\n          +\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Damage = ({ parentId, id }) => {\r\n  const {\r\n    condition,\r\n    diceNum,\r\n    diceSize,\r\n    staticDamage,\r\n    type,\r\n    material,\r\n    persistent,\r\n  } = useSelector((state) => selectdamageById(state, id));\r\n  const dispatch = useDispatch();\r\n\r\n  const conditionOptions = [];\r\n  for (let dc in dCond) {\r\n    conditionOptions.push(<option key={dc}>{dCond[dc]}</option>);\r\n  }\r\n  const diceNumOptions = [];\r\n  for (let dn in diceNums) {\r\n    diceNumOptions.push(<option key={dn}>{dn}</option>);\r\n  }\r\n  const diceSizeOptions = [];\r\n  for (let ds in diceSizes) {\r\n    diceSizeOptions.push(<option key={ds}>{ds}</option>);\r\n  }\r\n  const damageTypeOptions = [];\r\n  for (let dt in damageTypes) {\r\n    damageTypeOptions.push(<option key={dt}>{damageTypes[dt]}</option>);\r\n  }\r\n  const materialOptions = [];\r\n  for (let m in materials) {\r\n    materialOptions.push(<option key={m}>{materials[m]}</option>);\r\n  }\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      <button\r\n        className=\"delete\"\r\n        onClick={(e) => {\r\n          dispatch(damageRemoved({ id, parentId }));\r\n        }}\r\n      >\r\n        -\r\n      </button>\r\n      <select\r\n        value={condition}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            damageUpdated({ id, changes: { condition: e.target.value } })\r\n          )\r\n        }\r\n      >\r\n        {conditionOptions}\r\n      </select>\r\n      <select\r\n        value={diceNum}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            damageUpdated({\r\n              id,\r\n              changes: { diceNum: parseInt(e.target.value) },\r\n            })\r\n          )\r\n        }\r\n      >\r\n        {diceNumOptions}\r\n      </select>\r\n      d\r\n      <select\r\n        value={diceSize}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            damageUpdated({\r\n              id,\r\n              changes: { diceSize: parseInt(e.target.value) },\r\n            })\r\n          )\r\n        }\r\n      >\r\n        {diceSizeOptions}\r\n      </select>\r\n      {\" + \"}\r\n      <input\r\n        type=\"number\"\r\n        value={staticDamage}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            damageUpdated({\r\n              id,\r\n              changes: { staticDamage: parseInt(e.target.value) },\r\n            })\r\n          )\r\n        }\r\n      />\r\n      <select\r\n        value={type}\r\n        onChange={(e) => {\r\n          dispatch(damageUpdated({ id, changes: { type: e.target.value } }));\r\n        }}\r\n      >\r\n        {damageTypeOptions}\r\n      </select>\r\n      <select\r\n        value={material}\r\n        onChange={(e) => {\r\n          dispatch(\r\n            damageUpdated({ id, changes: { material: e.target.value } })\r\n          );\r\n        }}\r\n      >\r\n        {materialOptions}\r\n      </select>\r\n      {\" Persistent: \"}\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={persistent}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            damageUpdated({\r\n              id,\r\n              changes: { persistent: e.target.checked },\r\n            })\r\n          )\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectedRoutine;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  routineCreated,\r\n  selectAllRoutines,\r\n  selectSelectedRoutine,\r\n  setRoutine,\r\n} from \"./Routine/routineSlice\";\r\n\r\nconst Routines = () => {\r\n  const routines = useSelector(selectAllRoutines);\r\n  const selectedRoutine = useSelector(selectSelectedRoutine);\r\n  const dispatch = useDispatch();\r\n\r\n  const routineOptions = [];\r\n  routines.forEach((routine) => {\r\n    routineOptions.push(\r\n      <option value={routine.id} key={routine.id}>\r\n        {routine.name}\r\n      </option>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      Selected Routine:\r\n      <select\r\n        value={selectedRoutine}\r\n        onChange={(e) => dispatch(setRoutine(e.target.value))}\r\n      >\r\n        {routineOptions}\r\n      </select>\r\n      <button className=\"add\" onClick={() => dispatch(routineCreated())}>\r\n        +\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Routines;\r\n","import React from \"react\";\r\n// import { useSelector } from \"react-redux\";\r\n\r\nconst ImportExport = () => {\r\n  return <div className=\"box\">Import and Export Here</div>;\r\n};\r\n\r\nexport default ImportExport;\r\n","import React from \"react\";\r\n// import { useSelector } from \"react-redux\";\r\n// import update from \"immutability-helper\";\r\n\r\n// //import { useSelector, useDispatch } from 'react-redux';\r\n// import { selectCurrentEffect } from \"./Effect/effectSlice\";\r\n\r\n// import {\r\n//   CheckboxInput,\r\n//   CollapsableInput,\r\n//   ByLevelInput,\r\n// } from \"./Effect/Inputs/CommonInputs.js\";\r\n\r\n// import MAP from \"./Effect/Model/MAP.js\";\r\n// import Proficiency from \"./Effect/Model/Proficiency.js\";\r\n// import AbilityScore from \"./Effect/Model/AbilityScore.js\";\r\n// import Modifier from \"./Effect/Model/Modifier.js\";\r\n// import AdditionalEffectArray from \"./Effect/Model/AdditionalEffectArray.js\";\r\n\r\n// import {\r\n//   totalBonusDescription,\r\n//   attackBonusDescription,\r\n//   totalDamageDescription,\r\n//   calculateExpectedDamage,\r\n// } from \"./Calculation.js\";\r\n\r\nimport TargetInput from \"./Target/TargetInput\";\r\nimport Display from \"./Display\";\r\n// import { selectTarget, selectLevel } from \"./Target/targetSlice\";\r\n\r\nimport SelectedRoutine from \"./Routine/SelectedRoutine\";\r\nimport Routines from \"./Routines\";\r\nimport Export from \"./Export\";\r\n\r\nimport \"./PF2App.css\";\r\n\r\n// function DisplayOutput(props) {\r\n//   // props: effect, target\r\n//   const target = useSelector(selectTarget);\r\n//   const effect = useSelector(selectCurrentEffect);\r\n//   return (\r\n//     <div className=\"Display\">\r\n//       <CollapsableInput\r\n//         description={\r\n//           \"Expected Damage: \" + calculateExpectedDamage(effect, target)\r\n//         }\r\n//         listInput=\"\"\r\n//       />\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nfunction PF2App(props) {\r\n  return (\r\n    <div className=\"PF2App\">\r\n      <TargetInput id={0} />\r\n      <Display />\r\n      <SelectedRoutine />\r\n      <Routines />\r\n      <Export />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PF2App;\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const effectAdapter = createEntityAdapter();\r\n\r\nexport const effectsSlice = createSlice({\r\n  name: \"effects\",\r\n  initialState: effectAdapter.getInitialState(),\r\n  reducers: {\r\n    effectAdded: effectAdapter.addOne,\r\n    effectUpdated: effectAdapter.updateOne,\r\n  },\r\n});\r\n\r\nexport const { effectAdded, effectUpdated } = effectsSlice.actions;\r\n\r\nexport default effectsSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selecteffectById,\r\n  selectIds: selecteffectIds,\r\n  selectEntities: selecteffectEntities,\r\n  selectAll: selectAlleffects,\r\n  selectTotal: selectTotaleffects,\r\n} = effectAdapter.getSelectors((state) => state.effects);\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport routineReducer, { routineAdded } from \"./Routine/routineSlice\";\r\nimport activityPathReducer, {\r\n  activityPathAdded,\r\n} from \"./Routine/activityPathSlice\";\r\nimport damageReducer, { damageAdded } from \"./Routine/damageSlice\";\r\nimport effectReducer from \"./Routine/effectSlice\";\r\nimport targetReducer, { targetAdded } from \"./Target/targetSlice\";\r\nimport weaknessReducer, { weaknessAdded } from \"./Target/weaknessSlice\";\r\nimport {\r\n  activityTypes,\r\n  damageTypes,\r\n  dCond,\r\n  defenses,\r\n  MAPs,\r\n  materials,\r\n} from \"./types\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    routines: routineReducer,\r\n    activityPaths: activityPathReducer,\r\n    damages: damageReducer,\r\n    effects: effectReducer,\r\n    weaknesses: weaknessReducer,\r\n    targets: targetReducer,\r\n  },\r\n});\r\n\r\nstore.dispatch(routineAdded({ id: 0, name: \"tesdt\", apIds: [0] }));\r\n\r\nstore.dispatch(\r\n  activityPathAdded({\r\n    id: 0,\r\n    condition: null,\r\n    type: activityTypes.STRIKE,\r\n    targetType: defenses.AC,\r\n    targetInfoId: 0,\r\n    value: 9,\r\n    MAP: MAPs.A1,\r\n    damages: [0],\r\n    effects: [],\r\n    apIds: [],\r\n  })\r\n);\r\n\r\nstore.dispatch(\r\n  targetAdded({\r\n    id: 0,\r\n    name: \"Custom Target\",\r\n    overrideDefault: true,\r\n    addMods: false,\r\n    level: 1,\r\n    [defenses.AC]: 15,\r\n    [defenses.FORT]: 6,\r\n    [defenses.REF]: 5,\r\n    [defenses.WILL]: 4,\r\n    [defenses.PER]: 5,\r\n    flatfooted: false,\r\n    weaknesses: [0],\r\n  })\r\n);\r\nstore.dispatch(weaknessAdded({ id: 0, type: damageTypes.FIRE, value: 10 }));\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 0,\r\n    condition: dCond.STRIKE,\r\n    diceNum: 1,\r\n    diceSize: 8,\r\n    staticDamage: 4,\r\n    type: damageTypes.B,\r\n    material: materials.COLD_IRON,\r\n    persistent: false,\r\n  })\r\n);\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 1,\r\n//     condition: dCond.CRIT,\r\n//     diceNum: 0,\r\n//     diceSize: 8,\r\n//     staticDamage: 10,\r\n//     type: damageTypes.FIRE,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//   })\r\n// );\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport PF2App from './PF2App';\r\nimport store from './store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <PF2App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}