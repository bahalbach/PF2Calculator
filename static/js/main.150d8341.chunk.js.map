{"version":3,"sources":["Inputs/CommonInputs.js","Model/Flag.js","Model/MAP.js","Model/Proficiency.js","Model/AbilityScore.js","Model/Modifier.js","Model/ItemBonus.js","Inputs/MAPInput.js","Inputs/OverrideInput.js","Inputs/ProficiencyInput.js","Inputs/AbilityScoreInput.js","Inputs/ItemBonusInput.js","Inputs/ModifierInput.js","PF2App.js","serviceWorker.js","index.js"],"names":["CheckboxInput","props","className","type","checked","onChange","label","CollapsableInput","state","collapseView","handleClick","bind","event","this","setState","onClick","description","listInput","after","React","Component","ByLevelInput","levelList","i","push","key","value","modifier","get","LevelSelection","name","Flag","target","MAP","prevAttacks","initial","changeLevel","changed","Array","fill","level","parseInt","Math","max","Proficiency","untrained","trained","expert","master","legendary","proficiencies","currentProf","profArray","maxProf","usedProficiencies","proficiencyValue","every","val","index","profDesc","toName","getInitial","getMax","getLevelAcquired","newProficiencyWithIntial","newProficiencyWithChangedLevel","profValue","initialProf","oldProficiency","newProfs","diff","length","oldProf","oldLevel","changedProf","newLevel","oldProfs","slice","AbilityScore","boosts","apexLevel","scoreArray","scoreWithApex","currentScore","maxScore","scoreDesc","getMod","newInitial","newBoosts","newApexLevel","console","error","Modifier","values","desc","newValues","ItemBonus","MAPInput","effect","levelChange","getDescription","selectedLevel","getPrevAttacks","getChanged","OverrideInput","useOverride","isTrue","onEffectChange","override","ProficiencyPresets","proficiency","isFighter","isMartial","isCaster","isAlchemist","ProficiencyInputList","prof","profList","getProficiencies","map","WeaponProficiencyInput","AbilityScoreInputList","score","scoreList","getBoosts","getApexLevel","AbilityScorePresets","is18a","is16a","is16pp","is14p","is10","AttackAbilityScoreInput","attackAbilityScore","DamageAbilityScoreInput","damageAbilityScore","ItemBonusPresets","itemBonus","isNone","isABPWeapon","isABPSkill1","isABPSkill2","ItemBonusInput","BonusPresets","is","PenaltyPresets","ModifierInput","statusBonus","circumstanceBonus","statusPenalty","circumstancePenalty","itemPenalty","untypedPenalty","totalBonusDescription","levelTotal","final","useMiscModifiers","StrikeInput","EffectInput","TargetInput","min","step","onTargetChange","PF2App","routines","selectedRoutine","selectedEffect","handleEffectChange","handleTargetChange","propertyName","newPropertyValue","newTarget","update","$set","createUpdated","newRoutines","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.150d8341.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction CheckboxInput(props) {\r\n    // props: checked, onChange, label\r\n    return (\r\n        <label className=\"CheckboxInput\">\r\n            <input\r\n                type=\"checkbox\"\r\n                checked={props.checked}\r\n                onChange={props.onChange}\r\n            />\r\n            {props.label}\r\n        </label>\r\n    );\r\n}\r\n\r\n\r\nclass CollapsableInput extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            collapseView: true,\r\n        };\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick(event) {\r\n        this.setState({ collapseView: !this.state.collapseView });\r\n    }\r\n\r\n    render() {\r\n        // if (this.state.collapseView) {\r\n        return (\r\n            <div className=\"CollapsableInput\">\r\n                <div\r\n                    className=\"Description CollapsableInputDescription\"\r\n                    onClick={this.handleClick}\r\n                >\r\n                    {this.props.description}\r\n                </div>\r\n                {this.state.collapseView ? \"\" : this.props.listInput}\r\n                {this.props.after}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction ByLevelInput(props) {\r\n    // level: value\r\n    let levelList = [];\r\n    for (let i = 1; i <= 20; i++) {\r\n        levelList.push(\r\n            <div key={i}>\r\n                <label> Level {i}: {}\r\n                    <input\r\n                        type=\"number\"\r\n                        value={props.modifier.get(i)}\r\n                        onChange={props.onChange.bind(null, i)}\r\n                    />\r\n                </label>\r\n            </div>\r\n        );\r\n    }\r\n    return levelList;\r\n}\r\n\r\n// name, value, onChange\r\nfunction LevelSelection(props) {\r\n    return (\r\n        <div >\r\n            <label> {props.name + \": \"}\r\n                <select value={props.value}\r\n                    onChange={props.onChange}\r\n                >\r\n                    <option value=\"never\">\r\n                        Never\r\n                                </option>\r\n                    <option value=\"1\">\r\n                        1\r\n                                </option>\r\n                    <option value=\"2\">\r\n                        2\r\n                                </option>\r\n                    <option value=\"3\">\r\n                        3\r\n                                </option>\r\n                    <option value=\"4\">\r\n                        4\r\n                                </option>\r\n                    <option value=\"5\">\r\n                        5\r\n                                </option>\r\n                    <option value=\"6\">\r\n                        6\r\n                                </option>\r\n                    <option value=\"7\">\r\n                        7\r\n                                </option>\r\n                    <option value=\"8\">\r\n                        8\r\n                                </option>\r\n                    <option value=\"9\">\r\n                        9\r\n                                </option>\r\n                    <option value=\"10\">\r\n                        10\r\n                                </option>\r\n                    <option value=\"11\">\r\n                        11\r\n                                </option>\r\n                    <option value=\"12\">\r\n                        12\r\n                                </option>\r\n                    <option value=\"13\">\r\n                        13\r\n                                </option>\r\n                    <option value=\"14\">\r\n                        14\r\n                                </option>\r\n                    <option value=\"15\">\r\n                        15\r\n                                </option>\r\n                    <option value=\"16\">\r\n                        16\r\n                                </option>\r\n                    <option value=\"17\">\r\n                        17\r\n                                </option>\r\n                    <option value=\"18\">\r\n                        18\r\n                                </option>\r\n                    <option value=\"19\">\r\n                        19\r\n                                </option>\r\n                    <option value=\"20\">\r\n                        20\r\n                                </option>\r\n                </select>\r\n            </label>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport { CheckboxInput, CollapsableInput, ByLevelInput, LevelSelection }","class Flag {\r\n    constructor(value = false) {\r\n        this.value = value;\r\n    }\r\n\r\n    isTrue() {\r\n        return this.value;\r\n    }\r\n\r\n    createUpdated(event) {\r\n        return new Flag(event.target.checked);\r\n    }\r\n}\r\n\r\nexport default Flag","class MAP {\r\n    constructor(prevAttacks = 0, initial = -5, changeLevel = null, changed = -4) {\r\n        // -4, 1, 10, -3 for agile weapon with agile grace at 10\r\n        this.prevAttacks = prevAttacks;\r\n        this.initial = initial;\r\n        this.changeLevel = changeLevel;\r\n        this.changed = changed;\r\n\r\n        this.value = new Array(20).fill(prevAttacks * initial);\r\n        if( changeLevel !== null) {\r\n            for (let level = changeLevel; level <= 20; level++) {\r\n                this.value[level - 1] = prevAttacks * changed;\r\n            }\r\n        }\r\n    }\r\n\r\n    get(level) {\r\n        return this.value[level - 1];\r\n    }\r\n\r\n    getPrevAttacks() {\r\n        return this.prevAttacks;\r\n    }\r\n\r\n    getInitial() {\r\n        return this.initial;\r\n    }\r\n\r\n    getChanged() {\r\n        return this.changed;\r\n    }\r\n\r\n    getDescription(level) {\r\n        if (level) {\r\n            return \"(\" + this.get(level) + \")\";\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    createUpdated(key, event) {\r\n        switch (key) {\r\n            case \"prevAttacks\":\r\n                return new MAP(parseInt(event.target.value), this.initial, this.changeLevel, this.changed);\r\n            case \"initial\":\r\n                return new MAP(this.prevAttacks, parseInt(event.target.value), this.changeLevel, parseInt(event.target.value)+1);\r\n            case \"changeLevel\":\r\n                if (event.target.value === \"never\") {\r\n                    return new MAP(this.prevAttacks, this.initial, null, this.changed);\r\n                }\r\n                return new MAP(this.prevAttacks, this.initial, parseInt(event.target.value), this.changed);\r\n            case \"changed\":\r\n                return new MAP(this.prevAttacks, Math.max(parseInt(event.target.value)-1,-5), this.changeLevel, parseInt(event.target.value));\r\n            default:\r\n                return new MAP();\r\n        }\r\n    }\r\n}\r\n\r\nexport default MAP","const MAX_LEVEL = 20;\r\n\r\nclass Proficiency {\r\n    constructor(untrained = 1, trained = 1, expert = null, master = null, legendary = null) {\r\n        this.proficiencies = [untrained, trained, expert, master, legendary];\r\n        let currentProf = 0;\r\n        if (trained && trained === 1) {\r\n            currentProf = 1;\r\n            if (expert && expert === 1) {\r\n                currentProf = 2;\r\n                if (master && master === 1) {\r\n                    currentProf = 3;\r\n                    if (legendary && legendary === 1) {\r\n                        currentProf = 4;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.initial = currentProf;\r\n        this.profArray = [];\r\n\r\n        for (let i = 0; i < MAX_LEVEL; i++) {\r\n            while (this.proficiencies[currentProf + 1] && this.proficiencies[currentProf + 1] === (i + 1)) {\r\n                currentProf++;\r\n            }\r\n            if (currentProf === 0) {\r\n                this.profArray.push(0);\r\n            } else {\r\n                this.profArray.push((i + 1) + (currentProf * 2));\r\n            }\r\n        }\r\n        this.maxProf = currentProf;\r\n        this.usedProficiencies = []\r\n        for (let i = this.initial; i <= this.maxProf; i++) {\r\n            this.usedProficiencies.push(i);\r\n        }\r\n    }\r\n\r\n    get(level) {\r\n        return this.profArray[level - 1];\r\n    }\r\n\r\n    getInitial() {\r\n        return this.initial;\r\n    }\r\n\r\n    getMax() {\r\n        return this.maxProf;\r\n    }\r\n\r\n    getLevelAcquired(proficiencyValue) {\r\n        return this.proficiencies[proficiencyValue];\r\n    }\r\n\r\n    getProficiencies() {\r\n        return this.usedProficiencies;\r\n    }\r\n\r\n    isFighter() {\r\n        return this.proficiencies.every((val, index) => val === [1, 1, 1, 5, 13][index]);\r\n    }\r\n    isMartial() {\r\n        return this.proficiencies.every((val, index) => val === [1, 1, 5, 13, null][index]);\r\n    }\r\n    isCaster() {\r\n        return this.proficiencies.every((val, index) => val === [1, 1, 11, null, null][index]);\r\n    }\r\n    isAlchemist() {\r\n        return this.proficiencies.every((val, index) => val === [1, 1, 7, null, null][index]);\r\n    }\r\n    getDescription(level) {\r\n        let profDesc = \" \";\r\n        if (level) {\r\n            profDesc += \"(\" + this.get(level) + \") \";\r\n        }\r\n\r\n        profDesc += Proficiency.toName(this.getInitial()) + \" 1\";\r\n        for (let i = this.getInitial() + 1; i <= this.getMax(); i++) {\r\n            profDesc += \", \" + Proficiency.toName(i) + \" \" + this.getLevelAcquired(i);\r\n        }\r\n\r\n        return profDesc;\r\n    }\r\n\r\n    createUpdated(key, event) {\r\n        switch (key) {\r\n            case \"initial\":\r\n                return Proficiency.newProficiencyWithIntial(event.target.value, this);\r\n            case \"fighter\":\r\n                return new Proficiency(1, 1, 1, 5, 13);\r\n            case \"martial\":\r\n                return new Proficiency(1, 1, 5, 13, null);\r\n            case \"caster\":\r\n                return new Proficiency(1, 1, 11, null, null);\r\n            case \"alchemist\":\r\n                return new Proficiency(1, 1, 7, null, null);\r\n            default:\r\n                return Proficiency.newProficiencyWithChangedLevel(key, parseInt(event.target.value), this);\r\n        }\r\n    }\r\n\r\n    static toName(profValue) {\r\n        return ([\r\n            \"Untrained\",\r\n            \"Trained\",\r\n            \"Expert\",\r\n            \"Master\",\r\n            \"Legendary\"\r\n        ][profValue]);\r\n    }\r\n\r\n    static newProficiencyWithIntial(initialProf, oldProficiency) {\r\n        let newProfs = [1, null, null, null, null];\r\n        const diff = initialProf - oldProficiency.usedProficiencies[0];\r\n        for (let i = 0; i < newProfs.length; i++) {\r\n            if (i <= initialProf) {\r\n                newProfs[i] = 1;\r\n            } else {\r\n                let oldProf = oldProficiency.usedProficiencies[i - initialProf];\r\n                let oldLevel = oldProficiency.getLevelAcquired(oldProf);\r\n                newProfs[oldProf + diff] = oldLevel;\r\n            }\r\n        }\r\n        return new Proficiency(newProfs[0], newProfs[1], newProfs[2], newProfs[3], newProfs[4]);\r\n    }\r\n\r\n    static newProficiencyWithChangedLevel(changedProf, newLevel, oldProficiency) {\r\n        let oldProfs = oldProficiency.proficiencies.slice();\r\n        oldProfs[changedProf] = newLevel;\r\n        //console.log(oldProfs);\r\n        return new Proficiency(...oldProfs);\r\n\r\n    }\r\n}\r\n\r\nexport default Proficiency","const MAX_LEVEL = 20;\r\n\r\nclass AbilityScore {\r\n    constructor(initial = 10, boosts = [false, false, false, false], apexLevel = null) {\r\n        this.initial = initial;\r\n        this.boosts = boosts;\r\n        this.apexLevel = apexLevel;\r\n\r\n        this.scoreArray = [initial];\r\n        let currentScore = initial;\r\n        let scoreWithApex;\r\n\r\n        for (let i = 2; i <= MAX_LEVEL; i++) {\r\n            if ((i === 5 && boosts[0]) || (i === 10 && boosts[1]) || (i === 15 && boosts[2]) || (i === 20 && boosts[3]))\r\n                currentScore < 18 ? currentScore += 2 : currentScore += 1;\r\n            (apexLevel && i >= apexLevel) ? (scoreWithApex = Math.max(18, currentScore + 2)) : scoreWithApex = currentScore;\r\n            this.scoreArray.push(scoreWithApex);\r\n        }\r\n        this.maxScore = scoreWithApex;\r\n    }\r\n\r\n    get(level) {\r\n        return this.scoreArray[level - 1];\r\n    }\r\n\r\n    getMod(level) {\r\n        return parseInt((this.scoreArray[level - 1] - 10) / 2);\r\n    }\r\n\r\n    getInitial() {\r\n        return this.initial;\r\n    }\r\n    getBoosts() {\r\n        return this.boosts;\r\n    }\r\n    getApexLevel() {\r\n        return this.apexLevel;\r\n    }\r\n\r\n    getScores() {\r\n        return [this.initial, ...this.boosts, this.apexLevel];\r\n    }\r\n\r\n    is18a() {\r\n        if (this.initial !== 18) return false;\r\n        if (this.boosts[0] !== true) return false;\r\n        if (this.boosts[1] !== true) return false;\r\n        if (this.boosts[2] !== true) return false;\r\n        if (this.boosts[3] !== true) return false;\r\n        if (this.apexLevel !== 17) return false;\r\n        return true;\r\n    }\r\n\r\n    is16a() {\r\n        if (this.initial !== 16) return false;\r\n        if (this.boosts[0] !== true) return false;\r\n        if (this.boosts[1] !== true) return false;\r\n        if (this.boosts[2] !== true) return false;\r\n        if (this.apexLevel !== 17) return false;\r\n        return true;\r\n    }\r\n\r\n    is16pp() {\r\n        if (this.initial !== 16) return false;\r\n        if (this.boosts[0] !== true) return false;\r\n        if (this.boosts[1] !== true) return false;\r\n        if (this.boosts[2] !== true) return false;\r\n        if (this.apexLevel !== null) return false;\r\n        return true;\r\n    }\r\n\r\n    is14p() {\r\n        if (this.initial !== 14) return false;\r\n        if (this.boosts[0] !== true) return false;\r\n        if (this.boosts[1] !== true) return false;\r\n        if (this.boosts[2] !== false) return false;\r\n        if (this.boosts[3] !== false) return false;\r\n        if (this.apexLevel !== null) return false;\r\n        return true;\r\n    }\r\n\r\n    is10() {\r\n        if (this.initial !== 10) return false;\r\n        if (this.boosts[0] !== false) return false;\r\n        if (this.boosts[1] !== false) return false;\r\n        if (this.boosts[2] !== false) return false;\r\n        if (this.boosts[3] !== false) return false;\r\n        if (this.apexLevel !== null) return false;\r\n        return true;\r\n    }\r\n\r\n    getDescription(level) {\r\n        let scoreDesc = \" \";\r\n        if (level) {\r\n            scoreDesc += \"(\" + this.getMod(level) + \") \";\r\n        }\r\n\r\n        scoreDesc += this.initial + \" to \" + this.maxScore;\r\n\r\n        return scoreDesc;\r\n    }\r\n\r\n    createUpdated(key, event) {\r\n        let newInitial = this.initial;\r\n        let newBoosts = this.boosts.slice();\r\n        let newApexLevel = this.apexLevel;\r\n        switch (key) {\r\n            case \"18a\":\r\n                return new AbilityScore(18, [true, true, true, true], 17);\r\n            case \"16a\":\r\n                return new AbilityScore(16, [true, true, true, false], 17);\r\n            case \"16++\":\r\n                return new AbilityScore(16, [true, true, true, false], null);\r\n            case \"14+\":\r\n                return new AbilityScore(14, [true, true, false, false], null);\r\n            case \"10\":\r\n                return new AbilityScore(10, [false, false, false, false], null);\r\n\r\n            case \"initial\":\r\n                newInitial = parseInt(event.target.value);\r\n                break;\r\n            case 0:\r\n            case 1:\r\n            case 2:\r\n            case 3:\r\n                newBoosts[key] = event.target.checked;\r\n                break;\r\n            case \"apex\":\r\n                let value = event.target.value;\r\n                if (value === \"never\") value = null;\r\n                newApexLevel = value;\r\n                break;\r\n            default:\r\n                console.error(\"Unhandled ability score\");\r\n        }\r\n        return new AbilityScore(newInitial, newBoosts, newApexLevel);\r\n    }\r\n}\r\n/*\r\n\r\n        this.proficiencies = [untrained,trained,expert,master,legendary];\r\n        let currentProf = 0;\r\n        if (trained && trained===1) {\r\n            currentProf = 1;\r\n            if (expert && expert===1) {\r\n                currentProf = 2;\r\n                if (master && master===1) {\r\n                    currentProf = 3;\r\n                    if (legendary && legendary===1) {\r\n                        currentProf = 4;\r\n        }}}}\r\n        this.initial = currentProf;\r\n        this.profArray = [];\r\n\r\n        for(let i=0; i<MAX_LEVEL; i++) {\r\n            while (this.proficiencies[currentProf+1] && this.proficiencies[currentProf+1] === (i+1)) {\r\n                currentProf++;\r\n            }\r\n            if (currentProf===0) {\r\n                this.profArray.push(0);\r\n            } else {\r\n                this.profArray.push((i+1) + (currentProf*2));\r\n            }\r\n        }\r\n        this.maxProf = currentProf;\r\n        this.usedProficiencies = []\r\n        for(let i=this.initial; i<=this.maxProf; i++) {\r\n            this.usedProficiencies.push(i);\r\n        }\r\n    }\r\n\r\n    get(level) {\r\n        return this.profArray[level-1];\r\n    }\r\n\r\n    getInitial() {\r\n        return this.initial;\r\n    }\r\n\r\n    getMax() {\r\n        return this.maxProf;\r\n    }\r\n\r\n    getLevelAcquired(proficiencyValue) {\r\n        return this.proficiencies[proficiencyValue];\r\n    }\r\n\r\n    getProficiencies() {\r\n        return this.usedProficiencies;\r\n    }\r\n\r\n    static toName(profValue) {\r\n        return ([\r\n            \"Untrained\",\r\n            \"Trained\",\r\n            \"Expert\",\r\n            \"Master\",\r\n            \"Legendary\"\r\n        ][profValue]);\r\n    }\r\n\r\n    static newProficiencyWithIntial(initialProf, oldProficiency) {\r\n        let newProfs = [1,null,null,null,null];\r\n        const diff = initialProf - oldProficiency.usedProficiencies[0];\r\n        for(let i=0; i<newProfs.length; i++) {\r\n            if (i <= initialProf) {\r\n                newProfs[i] = 1;\r\n            } else {\r\n                let oldProf = oldProficiency.usedProficiencies[i-initialProf];\r\n                let oldLevel = oldProficiency.getLevelAcquired(oldProf);\r\n                newProfs[oldProf+diff] = oldLevel;\r\n            }\r\n        }\r\n        return new Proficiency(newProfs[0], newProfs[1], newProfs[2], newProfs[3], newProfs[4]);\r\n    }\r\n\r\n    static newProficiencyWithChangedLevel(changedProf, newLevel, oldProficiency) {\r\n        let oldProfs = oldProficiency.proficiencies.slice();\r\n        oldProfs[changedProf] = newLevel;\r\n        console.log(oldProfs);\r\n        return new Proficiency(...oldProfs);\r\n\r\n    }\r\n}\r\n*/\r\n\r\nexport default AbilityScore","// Store:\r\n//     item bonuses\r\n//     if using other bonuses/penalties\r\n//     item penalties\r\n//     status bonuses\r\n//     status penalties\r\n//     circumstance bonuses\r\n//     circumstance penalties\r\n//     untyped penalties (other than MAP)\r\n\r\nclass Modifier {\r\n    constructor(values = null) {\r\n        if (values === null) {\r\n            this.values = new Array(20).fill(0);\r\n        } else\r\n            this.values = values;\r\n    }\r\n\r\n    get(level) {\r\n        return this.values[level - 1]\r\n    }\r\n\r\n    is(value) {\r\n        for (let i = 0; i < 20; i++) {\r\n            if (this.values[i] !== value) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    getDescription(level) {\r\n        let desc = \" \";\r\n        if (level) {\r\n            desc += \"(\" + this.get(level) + \") \";\r\n        }\r\n\r\n        desc += this.values[0] + \" to \" + this.values[19];\r\n\r\n        return desc;\r\n    }\r\n\r\n    createUpdated(key, event) {\r\n        let newValues;\r\n        switch (key) {\r\n            case \"0\":\r\n                newValues = new Array(20).fill(0);\r\n                break;\r\n            case \"+1\":\r\n            case \"-1\":\r\n                newValues = new Array(20).fill(1);\r\n                break;\r\n            case \"+2\":\r\n            case \"-2\":\r\n                newValues = new Array(20).fill(2);\r\n                break;\r\n            case \"+3\":\r\n            case \"-3\":\r\n                newValues = new Array(20).fill(3);\r\n                break;\r\n            case \"+4\":\r\n            case \"-4\":\r\n                newValues = new Array(20).fill(4);\r\n                break;\r\n            \r\n            default:\r\n                newValues = this.values.slice();\r\n                newValues[key-1] = parseInt(event.target.value);\r\n        }\r\n        return new Modifier(newValues);\r\n    }\r\n}\r\n\r\nexport default Modifier","class ItemBonus {\r\n    constructor(values = null) {\r\n        if (values === null) {\r\n            this.values = new Array(20).fill(0);\r\n        } else\r\n            this.values = values;\r\n    }\r\n\r\n    get(level) {\r\n        return this.values[level - 1]\r\n    }\r\n\r\n    getDescription(level) {\r\n        let desc = \" \";\r\n        if (level) {\r\n            desc += \"(\" + this.get(level) + \") \";\r\n        }\r\n\r\n        desc += this.values[0] + \" to \" + this.values[19];\r\n\r\n        return desc;\r\n    }\r\n\r\n    isNone() {\r\n        for (let i = 0; i < 20; i++) {\r\n            if (this.values[i] !== 0) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    isABPWeapon() {\r\n        for (let i = 0; i < 20; i++) {\r\n            if (i + 1 >= 16) {if (this.values[i] !== 3) return false; else continue;}\r\n            if (i + 1 >= 10) {if (this.values[i] !== 2) return false; else continue;}\r\n            if (i + 1 >= 2) {if (this.values[i] !== 1) return false; else continue;}\r\n            if (this.values[i] !== 0) return false; else continue;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    isABPSkill1() {\r\n        for (let i = 0; i < 20; i++) {\r\n            if (i + 1 >= 17) {if (this.values[i] !== 3) return false; else continue;}\r\n            if (i + 1 >= 9) {if (this.values[i] !== 2) return false; else continue;}\r\n            if (i + 1 >= 3) {if (this.values[i] !== 1) return false; else continue;}\r\n            if (this.values[i] !== 0) return false; else continue;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    isABPSkill2() {\r\n        for (let i = 0; i < 20; i++) {\r\n            if (i + 1 >= 20) {if (this.values[i] !== 3) return false; else continue;}\r\n            if (i + 1 >= 13) {if (this.values[i] !== 2) return false; else continue;}\r\n            if (i + 1 >= 6) {if (this.values[i] !== 1) return false; else continue;}\r\n            if (this.values[i] !== 0) return false; else continue;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    createUpdated(key, event) {\r\n        let newValues;\r\n        switch (key) {\r\n            case \"None\":\r\n                newValues = new Array(20).fill(0);\r\n                return new ItemBonus(newValues);\r\n            case \"ABPWeapon\":\r\n                newValues = new Array(20).fill(0);\r\n                for (let i = 0; i < 20; i++) {\r\n                    if (i + 1 >= 16) {newValues[i] = 3; continue;}\r\n                    if (i + 1 >= 10) {newValues[i] = 2; continue;}\r\n                    if (i + 1 >= 2) {newValues[i] = 1; continue;}\r\n                }\r\n                return new ItemBonus(newValues);\r\n            case \"ABPSkill1\":\r\n                newValues = new Array(20).fill(0);\r\n                for (let i = 0; i < 20; i++) {\r\n                    if (i + 1 >= 17) {newValues[i] = 3; continue;}\r\n                    if (i + 1 >= 9) {newValues[i] = 2; continue;}\r\n                    if (i + 1 >= 3) {newValues[i] = 1; continue;}\r\n                }\r\n                return new ItemBonus(newValues);\r\n            case \"ABPSkill2\":\r\n                newValues = new Array(20).fill(0);\r\n                for (let i = 0; i < 20; i++) {\r\n                    if (i + 1 >= 20) {newValues[i] = 3; continue;}\r\n                    if (i + 1 >= 13) {newValues[i] = 2; continue;}\r\n                    if (i + 1 >= 6) {newValues[i] = 1; continue;}\r\n                }\r\n                return new ItemBonus(newValues);\r\n            // case \"ABPSkill3\":\r\n            //     newValues = new Array(20).fill(0);\r\n            //     for (let i = 0; i < 20; i++) {\r\n            //         if (i + 1 >= 15) newValues[i] = 2;\r\n            //         if (i + 1 >= 9) newValues[i] = 1;\r\n            //     }\r\n            //     return new ItemBonus(newValues);\r\n            // case \"ABPSkill4\":\r\n            //     newValues = new Array(20).fill(0);\r\n            //     for (let i = 0; i < 20; i++) {\r\n            //         if (i + 1 >= 20) newValues[i] = 2;\r\n            //         if (i + 1 >= 15) newValues[i] = 1;\r\n            //     }\r\n            //     return new ItemBonus(newValues);\r\n            // case \"ABPSkill5\":\r\n            //     newValues = new Array(20).fill(0);\r\n            //     for (let i = 0; i < 20; i++) {\r\n            //         if (i + 1 >= 17) newValues[i] = 1;\r\n            //     }\r\n            //     return new ItemBonus(newValues);\r\n            // case \"ABPSkill6\":\r\n            //     newValues = new Array(20).fill(0);\r\n            //     for (let i = 0; i < 20; i++) {\r\n            //         if (i + 1 >= 20) newValues[i] = 1;\r\n            //     }\r\n            //     return new ItemBonus(newValues);\r\n            // case \"ABPPerception\":\r\n            //     newValues = new Array(20).fill(0);\r\n            //     for (let i = 0; i < 20; i++) {\r\n            //         if (i + 1 >= 19) newValues[i] = 3;\r\n            //         if (i + 1 >= 13) newValues[i] = 2;\r\n            //         if (i + 1 >= 7) newValues[i] = 1;\r\n            //     }\r\n            //     return new ItemBonus(newValues);\r\n            default:\r\n                newValues = this.values.slice();\r\n                newValues[key-1] = parseInt(event.target.value);\r\n                return new ItemBonus(newValues);\r\n        }\r\n    }\r\n}\r\n\r\nexport default ItemBonus","import React from 'react';\r\n\r\nfunction MAPInput(props) {\r\n    // props: effect, onChange, selectedLevel\r\n    let MAP = props.effect.MAP;\r\n    let levelChange = MAP.levelChange;\r\n    if (levelChange === null) {\r\n        levelChange = \"never\"\r\n    }\r\n\r\n    return (\r\n        <div className=\"MAPInput\" >\r\n            <div className=\"Description\">\r\n                MAP: {MAP.getDescription(props.selectedLevel)}\r\n            </div>\r\n            <select\r\n                                value={MAP.getPrevAttacks()}\r\n                                onChange={props.onChange.bind(null,\"prevAttacks\")}\r\n                            >\r\n                                <option value=\"0\">\r\n                                    0\r\n                                </option>\r\n                                <option value=\"1\">\r\n                                    1\r\n                                </option>\r\n                                <option value=\"2\">\r\n                                    2+\r\n                                </option>\r\n                                \r\n                            </select>\r\n                            x\r\n                            <select\r\n                                value={MAP.getInitial()}\r\n                                onChange={props.onChange.bind(null,\"initial\")}\r\n                            >\r\n                                <option value=\"-5\">\r\n                                    -5\r\n                                </option>\r\n                                <option value=\"-4\">\r\n                                    -4\r\n                                </option>\r\n                                <option value=\"-3\">\r\n                                    -3\r\n                                </option>\r\n                                <option value=\"-2\">\r\n                                    -2\r\n                                </option>\r\n                                <option value=\"-1\">\r\n                                    -1\r\n                                </option>\r\n                            </select>\r\n                            \r\n                    (@\r\n                        <select value={levelChange} \r\n                                onChange={props.onChange.bind(null, \"changeLevel\")}\r\n                            >\r\n                                <option value=\"never\">\r\n                                    Never\r\n                                </option>\r\n                                <option value=\"1\">\r\n                                    1\r\n                                </option>\r\n                                <option value=\"2\">\r\n                                    2\r\n                                </option>\r\n                                <option value=\"3\">\r\n                                    3\r\n                                </option>\r\n                                <option value=\"4\">\r\n                                    4\r\n                                </option>\r\n                                <option value=\"5\">\r\n                                    5\r\n                                </option>\r\n                                <option value=\"6\">\r\n                                    6\r\n                                </option>\r\n                                <option value=\"7\">\r\n                                    7\r\n                                </option>\r\n                                <option value=\"8\">\r\n                                    8\r\n                                </option>\r\n                                <option value=\"9\">\r\n                                    9\r\n                                </option>\r\n                                <option value=\"10\">\r\n                                    10\r\n                                </option>\r\n                                <option value=\"11\">\r\n                                    11\r\n                                </option>\r\n                                <option value=\"12\">\r\n                                    12\r\n                                </option>\r\n                                <option value=\"13\">\r\n                                    13\r\n                                </option>\r\n                                <option value=\"14\">\r\n                                    14\r\n                                </option>\r\n                                <option value=\"15\">\r\n                                    15\r\n                                </option>\r\n                                <option value=\"16\">\r\n                                    16\r\n                                </option>\r\n                                <option value=\"17\">\r\n                                    17\r\n                                </option>\r\n                                <option value=\"18\">\r\n                                    18\r\n                                </option>\r\n                                <option value=\"19\">\r\n                                    19\r\n                                </option>\r\n                                <option value=\"20\">\r\n                                    20\r\n                                </option>\r\n                            </select>\r\n                        =\r\n                        <select\r\n                                value={MAP.getChanged()}\r\n                                onChange={props.onChange.bind(null,\"changed\")}\r\n                            >\r\n                                <option value=\"-5\">\r\n                                    -5\r\n                                </option>\r\n                                <option value=\"-4\">\r\n                                    -4\r\n                                </option>\r\n                                <option value=\"-3\">\r\n                                    -3\r\n                                </option>\r\n                                <option value=\"-2\">\r\n                                    -2\r\n                                </option>\r\n                                <option value=\"-1\">\r\n                                    -1\r\n                                </option>\r\n                                <option value=\"0\">\r\n                                    0\r\n                                </option>\r\n                            </select>\r\n                    )\r\n                \r\n                        \r\n                   \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MAPInput","import React from 'react';\r\nimport { CheckboxInput, CollapsableInput, ByLevelInput } from './CommonInputs'\r\n\r\n\r\nexport function OverrideInput(props) {\r\n    // props: effect, onEffectChange\r\n    return (\r\n        <div className=\"InputGroup OverrideInput\">\r\n            <CheckboxInput\r\n                checked={props.effect.useOverride.isTrue()}\r\n                onChange={props.onEffectChange.bind(null, \"useOverride\")}\r\n                label=\"Override Attack Bonus?\"\r\n            />\r\n            <CollapsableInput\r\n                description={\"Override: \" + props.effect.override.getDescription(props.selectedLevel)}\r\n                listInput={\r\n                    <ByLevelInput\r\n                        modifier={props.effect.override}\r\n                        onChange={props.onEffectChange.bind(null, \"override\")}\r\n                    />\r\n                }\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OverrideInput\r\n\r\n\r\n","import React from 'react';\r\nimport Proficiency from '../Model/Proficiency';\r\nimport { CheckboxInput, CollapsableInput, LevelSelection } from './CommonInputs'\r\n\r\nfunction ProficiencyPresets(props) {\r\n    return (\r\n        <div className=\"Presets ProficiencyPresets\">\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.proficiency.isFighter()}\r\n                onChange={props.onChange.bind(null, \"fighter\")}\r\n                label={\"Fighter\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.proficiency.isMartial()}\r\n                onChange={props.onChange.bind(null, \"martial\")}\r\n                label={\"Martial\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.proficiency.isCaster()}\r\n                onChange={props.onChange.bind(null, \"caster\")}\r\n                label={\"Caster\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.proficiency.isAlchemist()}\r\n                onChange={props.onChange.bind(null, \"alchemist\")}\r\n                label={\"Alchemist/Warpriest\"}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ProficiencyInputList(props) {\r\n    // props: proficiency, onChange\r\n    \r\n    let prof = props.proficiency;\r\n\r\n    let profList = prof.getProficiencies().map(\r\n        (profValue, index) => {\r\n            if (index === 0) {\r\n                return (\r\n                    <div key=\"initial\">\r\n                        <label> Initial: {}\r\n                            <select\r\n                                value={prof.getInitial()}\r\n                                onChange={props.onChange.bind(null,\"initial\")}\r\n                            >\r\n                                <option value=\"0\">\r\n                                    Untrained\r\n                                </option>\r\n                                <option value=\"1\">\r\n                                    Trained\r\n                                </option>\r\n                                <option value=\"2\">\r\n                                    Expert\r\n                                </option>\r\n                                <option value=\"3\">\r\n                                    Master\r\n                                </option>\r\n                                <option value=\"4\">\r\n                                    Legendary\r\n                                </option>\r\n                            </select>\r\n                        </label>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let value = prof.getLevelAcquired(profValue);\r\n                if (value === null) value = \"never\";\r\n                return (\r\n                    <LevelSelection key={profValue} name={Proficiency.toName(profValue)}\r\n                        value={value} onChange={props.onChange.bind(null, profValue)}\r\n                    />\r\n                );\r\n            }\r\n        }\r\n    );\r\n    if (prof.getMax() < 4) {\r\n        profList.push(<LevelSelection key={prof.getMax() + 1} name={Proficiency.toName(prof.getMax() + 1)}\r\n            value=\"never\" onChange={props.onChange.bind(null, prof.getMax() + 1)}\r\n        />);\r\n    }\r\n\r\n    return (\r\n        <div className=\"ProficiencyInputList\">\r\n            {profList}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nfunction WeaponProficiencyInput(props) {\r\n    // props: effect, onEffectChange, selectedLevel\r\n    return (\r\n        <div className=\"InputGroup WeaponProficiencyInput\">\r\n            <ProficiencyPresets\r\n                proficiency={props.effect.proficiency}\r\n                onChange={props.onEffectChange.bind(null, \"proficiency\")}\r\n            />\r\n            <CollapsableInput\r\n                description={\"Proficiency: \" + props.effect.proficiency.getDescription(props.selectedLevel)}\r\n                listInput={\r\n                    <ProficiencyInputList\r\n                        proficiency={props.effect.proficiency}\r\n                        onChange={props.onEffectChange.bind(null, \"proficiency\")}\r\n                    />\r\n                }\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport { WeaponProficiencyInput }","import React from 'react';\r\nimport { CheckboxInput, CollapsableInput, LevelSelection } from './CommonInputs'\r\n\r\nfunction AbilityScoreInputList(props) {\r\n    // props: score, onChange\r\n\r\n    const score = props.score;\r\n    let scoreList = [];\r\n    scoreList.push(\r\n        <div key=\"initial\">\r\n            <label> Initial: {}\r\n                <select\r\n                    value={score.getInitial()}\r\n                    onChange={props.onChange.bind(null, \"initial\")}\r\n                >\r\n                    <option value=\"8\">\r\n                        8\r\n                    </option>\r\n                    <option value=\"10\">\r\n                        10\r\n                    </option>\r\n                    <option value=\"12\">\r\n                        12\r\n                    </option>\r\n                    <option value=\"14\">\r\n                        14\r\n                    </option>\r\n                    <option value=\"16\">\r\n                        16\r\n                    </option>\r\n                    <option value=\"18\">\r\n                        18\r\n                    </option>\r\n                </select>\r\n            </label>\r\n        </div>\r\n    );\r\n    const boosts = score.getBoosts();\r\n    for (let i = 0; i < boosts.length; i++) {\r\n        scoreList.push(\r\n            <div key={i}>\r\n                <label> Boost {(1 + i) * 5}: {}\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        checked={boosts[i]}\r\n                        onChange={props.onChange.bind(null, i)}\r\n                    />\r\n                </label>\r\n            </div>\r\n        );\r\n    }\r\n    let apexLevel = score.getApexLevel();\r\n    if (apexLevel === null) apexLevel = \"never\";\r\n    scoreList.push(\r\n        <LevelSelection key=\"apex\" name=\"Apex Level\"\r\n            value={apexLevel} onChange={props.onChange.bind(null, \"apex\")}\r\n        />\r\n    );\r\n\r\n    return (\r\n        <div className=\"AbilityScoreInput\">\r\n            {scoreList}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nfunction AbilityScorePresets(props) {\r\n    // props: score, onChange\r\n    return (\r\n        <div className=\"Presets AbilityScorePresets\">\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.score.is18a()}\r\n                onChange={props.onChange.bind(null, \"18a\")}\r\n                label={\"18a\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.score.is16a()}\r\n                onChange={props.onChange.bind(null, \"16a\")}\r\n                label={\"16a\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.score.is16pp()}\r\n                onChange={props.onChange.bind(null, \"16++\")}\r\n                label={\"16++\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.score.is14p()}\r\n                onChange={props.onChange.bind(null, \"14+\")}\r\n                label={\"14+\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.score.is10()}\r\n                onChange={props.onChange.bind(null, \"10\")}\r\n                label={\"10\"}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction AttackAbilityScoreInput(props) {\r\n    // props: effect, onChange\r\n    return (\r\n        <div className=\"InputGroup AbilityScoreInput\">\r\n            <AbilityScorePresets\r\n                score={props.effect.attackAbilityScore}\r\n                onChange={props.onChange}\r\n            />\r\n            <CollapsableInput\r\n                description={\"Attack Ability Score: \" + props.effect.attackAbilityScore.getDescription(props.selectedLevel)}\r\n                listInput={\r\n                    <AbilityScoreInputList\r\n                        score={props.effect.attackAbilityScore}\r\n                        onChange={props.onChange}\r\n                    />\r\n                }\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction DamageAbilityScoreInput(props) {\r\n    // props: effect, onChange\r\n    return (\r\n        <div className=\"InputGroup AbilityScoreInput\">\r\n            <AbilityScorePresets\r\n                score={props.effect.damageAbilityScore}\r\n                onChange={props.onChange}\r\n            />\r\n            <CollapsableInput\r\n                description={\"Damage Ability Score: \" + props.effect.damageAbilityScore.getDescription(props.selectedLevel)}\r\n                listInput={\r\n                    <AbilityScoreInputList\r\n                        score={props.effect.damageAbilityScore}\r\n                        onChange={props.onChange}\r\n                    />\r\n                }\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport { AttackAbilityScoreInput, DamageAbilityScoreInput }","import React from 'react';\r\nimport { CheckboxInput, CollapsableInput, ByLevelInput } from './CommonInputs'\r\n\r\nfunction ItemBonusPresets(props) {\r\n    return (\r\n        <div className=\"Presets ItemBonusPresets\">\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.itemBonus.isNone()}\r\n                onChange={props.onChange.bind(null, \"None\")}\r\n                label={\"None\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.itemBonus.isABPWeapon()}\r\n                onChange={props.onChange.bind(null, \"ABPWeapon\")}\r\n                label={\"ABP Weapon\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.itemBonus.isABPSkill1()}\r\n                onChange={props.onChange.bind(null, \"ABPSkill1\")}\r\n                label={\"ABP Skill Item 1\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.itemBonus.isABPSkill2()}\r\n                onChange={props.onChange.bind(null, \"ABPSkill2\")}\r\n                label={\"ABP Skill Item 2\"}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ItemBonusInput(props) {\r\n    return (\r\n        <div className=\"InputGroup WeaponProficiencyInput\">\r\n            <ItemBonusPresets\r\n                itemBonus={props.effect.itemBonus}\r\n                onChange={props.onChange}\r\n            />\r\n            <CollapsableInput\r\n                description={\"Item Bonus: \" + props.effect.itemBonus.getDescription(props.selectedLevel)}\r\n                listInput={\r\n                    <ByLevelInput\r\n                        modifier={props.effect.itemBonus}\r\n                        onChange={props.onChange}\r\n                    />\r\n                }\r\n            />\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default ItemBonusInput","import React from 'react';\r\nimport { CheckboxInput, CollapsableInput, ByLevelInput } from './CommonInputs'\r\n\r\nfunction BonusPresets(props) {\r\n    return (\r\n        <div className=\"Presets BonusPresets\">\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.modifier.is(0)}\r\n                onChange={props.onChange.bind(null, \"0\")}\r\n                label={\"+0\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.modifier.is(1)}\r\n                onChange={props.onChange.bind(null, \"+1\")}\r\n                label={\"+1\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.modifier.is(2)}\r\n                onChange={props.onChange.bind(null, \"+2\")}\r\n                label={\"+2\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.modifier.is(3)}\r\n                onChange={props.onChange.bind(null, \"+3\")}\r\n                label={\"+3\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.modifier.is(4)}\r\n                onChange={props.onChange.bind(null, \"+4\")}\r\n                label={\"+4\"}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction PenaltyPresets(props) {\r\n    return (\r\n        <div className=\"Presets PenaltyPresets\">\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.modifier.is(0)}\r\n                onChange={props.onChange.bind(null, \"0\")}\r\n                label={\"-0\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.modifier.is(1)}\r\n                onChange={props.onChange.bind(null, \"+1\")}\r\n                label={\"-1\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.modifier.is(2)}\r\n                onChange={props.onChange.bind(null, \"+2\")}\r\n                label={\"-2\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.modifier.is(3)}\r\n                onChange={props.onChange.bind(null, \"+3\")}\r\n                label={\"-3\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.modifier.is(4)}\r\n                onChange={props.onChange.bind(null, \"+4\")}\r\n                label={\"-4\"}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\n{/* <CheckboxInput\r\n                checked={props.effect.useMiscModifiers.isTrue()}\r\n                onChange={props.onEffectChange.bind(null, \"useMiscModifiers\")}\r\n                label=\"Add Circumstance/Status Bonuses/Penalties\"\r\n            /> */}\r\n\r\nfunction ModifierInput(props) {\r\n    // props: effect, onEffectChange\r\n    return (\r\n        <div className=\"InputGroup ModifierInput\" >\r\n            <CollapsableInput \r\n            description=\"Add Circumstance/Status Bonuses/Penalties\"\r\n            listInput={\r\n                <div className=\"ModifierInputList\">\r\n            <BonusPresets\r\n                modifier={props.effect.statusBonus}\r\n                onChange={props.onEffectChange.bind(null, \"statusBonus\")}\r\n            />\r\n            <CollapsableInput\r\n                description={\"Status Bonus: \" + props.effect.statusBonus.getDescription(props.selectedLevel)}\r\n                listInput={\r\n                    <ByLevelInput\r\n                        modifier={props.effect.statusBonus}\r\n                        onChange={props.onEffectChange.bind(null, \"statusBonus\")}\r\n                    />\r\n                }\r\n            />\r\n\r\n            <BonusPresets\r\n                modifier={props.effect.circumstanceBonus}\r\n                onChange={props.onEffectChange.bind(null, \"circumstanceBonus\")}\r\n            />\r\n            <CollapsableInput\r\n                description={\"Cicumstance Bonus: \" + props.effect.circumstanceBonus.getDescription(props.selectedLevel)}\r\n                listInput={\r\n                    <ByLevelInput\r\n                        modifier={props.effect.circumstanceBonus}\r\n                        onChange={props.onEffectChange.bind(null, \"circumstanceBonus\")}\r\n                    />\r\n                }\r\n            />\r\n\r\n            <PenaltyPresets\r\n                modifier={props.effect.statusPenalty}\r\n                onChange={props.onEffectChange.bind(null, \"statusPenalty\")}\r\n            />\r\n            <CollapsableInput\r\n                description={\"Status Penalty: \" + props.effect.statusPenalty.getDescription(props.selectedLevel)}\r\n                listInput={\r\n                    <ByLevelInput\r\n                        modifier={props.effect.statusPenalty}\r\n                        onChange={props.onEffectChange.bind(null, \"statusPenalty\")}\r\n                    />\r\n                }\r\n            />\r\n\r\n            <PenaltyPresets\r\n                modifier={props.effect.circumstancePenalty}\r\n                onChange={props.onEffectChange.bind(null, \"circumstancePenalty\")}\r\n            />\r\n            <CollapsableInput\r\n                description={\"Cicumstance Penalty: \" + props.effect.circumstancePenalty.getDescription(props.selectedLevel)}\r\n                listInput={\r\n                    <ByLevelInput\r\n                        modifier={props.effect.circumstancePenalty}\r\n                        onChange={props.onEffectChange.bind(null, \"circumstancePenalty\")}\r\n                    />\r\n                }\r\n            />\r\n\r\n            <PenaltyPresets\r\n                modifier={props.effect.itemPenalty}\r\n                onChange={props.onEffectChange.bind(null, \"itemPenalty\")}\r\n            />\r\n            <CollapsableInput\r\n                description={\"Item Penalty: \" + props.effect.itemPenalty.getDescription(props.selectedLevel)}\r\n                listInput={\r\n                    <ByLevelInput\r\n                        modifier={props.effect.itemPenalty}\r\n                        onChange={props.onEffectChange.bind(null, \"itemPenalty\")}\r\n                    />\r\n                }\r\n            />\r\n\r\n            <PenaltyPresets\r\n                modifier={props.effect.untypedPenalty}\r\n                onChange={props.onEffectChange.bind(null, \"untypedPenalty\")}\r\n            />\r\n            <CollapsableInput\r\n                description={\"Untyped Penalty: \" + props.effect.untypedPenalty.getDescription(props.selectedLevel)}\r\n                listInput={\r\n                    <ByLevelInput\r\n                        modifier={props.effect.untypedPenalty}\r\n                        onChange={props.onEffectChange.bind(null, \"untypedPenalty\")}\r\n                    />\r\n                }\r\n            />\r\n            </div>\r\n            }\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ModifierInput","import React from 'react';\r\nimport update from 'immutability-helper';\r\n\r\nimport { CheckboxInput, CollapsableInput, ByLevelInput } from './Inputs/CommonInputs.js'\r\n\r\nimport Flag from './Model/Flag.js';\r\nimport MAP from './Model/MAP.js';\r\nimport Proficiency from './Model/Proficiency.js';\r\nimport AbilityScore from './Model/AbilityScore.js';\r\nimport Modifier from './Model/Modifier.js';\r\nimport ItemBonus from './Model/ItemBonus.js';\r\n\r\nimport MAPInput from './Inputs/MAPInput.js';\r\nimport OverrideInput from './Inputs/OverrideInput.js';\r\nimport { WeaponProficiencyInput } from './Inputs/ProficiencyInput.js';\r\nimport { AttackAbilityScoreInput, DamageAbilityScoreInput } from './Inputs/AbilityScoreInput.js';\r\nimport ItemBonusInput from './Inputs/ItemBonusInput.js';\r\nimport ModifierInput from './Inputs/ModifierInput.js';\r\n\r\n\r\nimport './PF2App.css';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// function CheckInput(props) {\r\n//     return (\r\n\r\n//     );\r\n// }\r\nfunction totalBonusDescription(effect, level) {\r\n    let desc = \"\";\r\n    let levelTotal;\r\n    let initial;\r\n    let final;\r\n\r\n    if (effect.useOverride.isTrue()) {\r\n        if (level) {\r\n            levelTotal = effect.override.get(level);\r\n        }\r\n        initial = effect.override.get(1);\r\n        final = effect.override.get(20);\r\n    }\r\n    else {\r\n        if (level) {\r\n            levelTotal = effect.attackAbilityScore.getMod(level) + effect.proficiency.get(level) + effect.itemBonus.get(level);\r\n        }\r\n        initial = effect.attackAbilityScore.getMod(1) + effect.proficiency.get(1) + effect.itemBonus.get(1);\r\n        final = effect.attackAbilityScore.getMod(20) + effect.proficiency.get(20) + effect.itemBonus.get(20);\r\n    }\r\n    if (level) {\r\n        levelTotal += effect.MAP.get(level);\r\n    }\r\n    initial += effect.MAP.get(1);\r\n    final += effect.MAP.get(20);\r\n\r\n    if (effect.useMiscModifiers.isTrue()) {\r\n        if (level) {\r\n            levelTotal += (\r\n                effect.circumstanceBonus.get(level) +\r\n                effect.statusBonus.get(level) +\r\n                -effect.circumstancePenalty.get(level) +\r\n                -effect.statusPenalty.get(level) +\r\n                -effect.itemPenalty.get(level) +\r\n                -effect.untypedPenalty.get(level)\r\n            );\r\n        }\r\n        initial += (\r\n            effect.circumstanceBonus.get(1) +\r\n            effect.statusBonus.get(1) +\r\n            -effect.circumstancePenalty.get(1) +\r\n            -effect.statusPenalty.get(1) +\r\n            -effect.itemPenalty.get(1) +\r\n            -effect.untypedPenalty.get(1)\r\n        );\r\n        final += (\r\n            effect.circumstanceBonus.get(20) +\r\n            effect.statusBonus.get(20) +\r\n            -effect.circumstancePenalty.get(20) +\r\n            -effect.statusPenalty.get(20) +\r\n            -effect.itemPenalty.get(20) +\r\n            -effect.untypedPenalty.get(20)\r\n        );\r\n    }\r\n\r\n    if (level) {\r\n        desc += \"(\" + levelTotal + \") \";\r\n    }\r\n    desc += initial + \" to \" + final;\r\n    return desc;\r\n}\r\n\r\nfunction totalDamageDescription(effect, level) {\r\n    return \"\";\r\n}\r\n\r\nfunction StrikeInput(props) {\r\n    /*\r\n        Proficiency, Primary Ability Scor\r\n    */\r\n\r\n    return (\r\n        <div className=\"StrikeInput\" >\r\n            <CollapsableInput\r\n                description={\"Total Bonus: \" + totalBonusDescription(props.effect, props.selectedLevel)}\r\n                listInput={\r\n                    <div className=\"CheckInput\">\r\n                        <OverrideInput\r\n                            effect={props.effect}\r\n                            onEffectChange={props.onEffectChange}\r\n                            selectedLevel={props.selectedLevel}\r\n                        />\r\n                        <WeaponProficiencyInput\r\n                            effect={props.effect}\r\n                            onEffectChange={props.onEffectChange}\r\n                            selectedLevel={props.selectedLevel}\r\n                        />\r\n\r\n                        <AttackAbilityScoreInput\r\n                            effect={props.effect}\r\n                            onChange={props.onEffectChange.bind(null, \"attackAbilityScore\")}\r\n                            selectedLevel={props.selectedLevel}\r\n                        />\r\n\r\n                        <ItemBonusInput\r\n                            effect={props.effect}\r\n                            onChange={props.onEffectChange.bind(null, \"itemBonus\")}\r\n                            selectedLevel={props.selectedLevel}\r\n                        />\r\n\r\n                        <ModifierInput\r\n                            effect={props.effect}\r\n                            onEffectChange={props.onEffectChange}\r\n                            selectedLevel={props.selectedLevel}\r\n                        />\r\n\r\n\r\n                    </div>\r\n                }\r\n                after={\r\n                    <MAPInput\r\n                        effect={props.effect}\r\n                        onChange={props.onEffectChange.bind(null, \"MAP\")}\r\n                        selectedLevel={props.selectedLevel}\r\n\r\n                    />\r\n                }\r\n            />\r\n\r\n\r\n            <CollapsableInput\r\n                description={\"Total Damage: \" + totalDamageDescription(props.effect, props.selectedLevel)}\r\n                listInput={\r\n                    <DamageAbilityScoreInput\r\n                        effect={props.effect}\r\n                        onChange={props.onEffectChange.bind(null, \"damageAbilityScore\")}\r\n                    />\r\n                }\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction EffectInput(props) {\r\n    return (\r\n        <StrikeInput\r\n            effect={props.effect}\r\n            selectedLevel={props.selectedLevel}\r\n            onEffectChange={props.onEffectChange}\r\n        />\r\n    );\r\n}\r\n\r\nfunction TargetInput(props) {\r\n    return (\r\n        <div className=\"TargetInput\">\r\n            <label>Target Level: {props.target.selectedLevel}\r\n                <input type=\"range\" \r\n                    min=\"1\"\r\n                    max=\"20\"\r\n                    step=\"1\"\r\n                    value={props.target.selectedLevel}\r\n                    onChange={props.onTargetChange.bind(null,\"selectedLevel\")}\r\n                />\r\n            </label>\r\n            \r\n        </div>\r\n    );\r\n}\r\nclass PF2App extends React.Component {\r\n    /*\r\n        Target Selector\r\n        Graph Settings\r\n        Graph\r\n        Edit Current Effect\r\n        Select Effects\r\n    */\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            target: {\r\n                selectedLevel: 3\r\n            },\r\n            routines: [\r\n                [\r\n                    {\r\n                        MAP: new MAP(),\r\n\r\n                        useOverride: new Flag(),\r\n                        override: new Modifier(),\r\n\r\n                        proficiency: new Proficiency(1, 1, 5, 13),\r\n                        attackAbilityScore: new AbilityScore(18, [true, true, true, true], 17),\r\n                        itemBonus: new ItemBonus(),\r\n\r\n                        useMiscModifiers: new Flag(true),\r\n                        circumstanceBonus: new Modifier(),\r\n                        statusBonus: new Modifier(),\r\n                        circumstancePenalty: new Modifier(),\r\n                        statusPenalty: new Modifier(),\r\n                        itemPenalty: new Modifier(),\r\n                        untypedPenalty: new Modifier(),\r\n\r\n                        damageAbilityScore: new AbilityScore(),\r\n                    }\r\n                ]\r\n            ],\r\n            selectedRoutine: 0,\r\n            selectedEffect: 0,\r\n        };\r\n        // this.handleProficiencyChange = this.handleProficiencyChange.bind(this);\r\n        // this.handleAbilityScoreChange = this.handleAbilityScoreChange.bind(this);\r\n        this.handleEffectChange = this.handleEffectChange.bind(this);\r\n        this.handleTargetChange = this.handleTargetChange.bind(this);\r\n    }\r\n    handleTargetChange(propertyName, event) {\r\n        let newPropertyValue;\r\n        switch (propertyName) {\r\n            case \"selectedLevel\":\r\n                newPropertyValue = event.target.value;\r\n            default:\r\n                newPropertyValue = event.target.value;\r\n        }\r\n        const newTarget = update(this.state.target, {[propertyName]: {$set: newPropertyValue}});\r\n        \r\n        this.setState({ target: newTarget });\r\n    }\r\n\r\n    handleEffectChange(propertyName, key, event) {\r\n        const currentEffect = this.state.routines[this.state.selectedRoutine][this.state.selectedEffect];\r\n        const currentPropertyValue = currentEffect[propertyName];\r\n        const newPropertyValue = currentPropertyValue.createUpdated(key, event);\r\n\r\n        const newRoutines = update(this.state.routines, {\r\n            [this.state.selectedRoutine]: {\r\n                [this.state.selectedEffect]: {\r\n                    [propertyName]: { $set: newPropertyValue }\r\n                }\r\n            }\r\n        });\r\n\r\n        this.setState({ routines: newRoutines });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"PF2App\">\r\n                <TargetInput\r\n                    target={this.state.target}\r\n                    onTargetChange={this.handleTargetChange}\r\n                />\r\n                <EffectInput\r\n                    effect={this.state.routines[this.state.selectedRoutine][this.state.selectedEffect]}\r\n                    selectedLevel={this.state.target.selectedLevel}\r\n                    onEffectChange={this.handleEffectChange}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PF2App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport PF2App from './PF2App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <PF2App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}