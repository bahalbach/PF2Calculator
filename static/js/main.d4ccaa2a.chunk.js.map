{"version":3,"sources":["Target/weaknessSlice.js","Target/targetSlice.js","Model/types.js","Routines/routineSlice.js","Target/TargetInput.js","Model/defaults.js","Calculation/Distribution.js","Calculation/Calculation.js","Calculation/EvaluateActivityPath.js","Model/options.js","Display/useGenerateGraphs.js","Display/Display.js","Routines/LevelList.js","Routines/Damage.js","Routines/Effect.js","Routines/ActivityPath.js","Routines/SelectedRoutine.js","Routines/Routines.js","Export.js","PF2App.js","store.js","serviceWorker.js","index.js"],"names":["weaknessAdapter","createEntityAdapter","weakness","weaknessesSlice","createSlice","name","initialState","getInitialState","reducers","weaknessAdded","addOne","weaknessUpdated","updateOne","weaknessCreated","reducer","state","action","payload","id","type","value","prepare","parentId","weaknessRemoved","removeOne","actions","getSelectors","weaknesses","selectweaknessById","selectById","selectweaknessEntities","selectIds","selectEntities","targetAdapter","selectAll","selectTotal","targetsSlice","targetAdded","targetUpdated","changes","match","level","extraReducers","builder","addCase","weaknessId","entities","push","filter","wid","targets","selecttargetById","selecttargetEntities","graphTypes","DISTRIBUTION","PMDEFENSE","PMRES","ACTrends","LOW","MODERATE","HIGH","EXTREME","SaveTrends","TERRIBLE","conditions","ALWAYS","CRIT","SUCC","FAIL","CRIF","AT_LEAST_SUCC","AT_LEAST_FAIL","FAIL_WORSE","SUCC_WORSE","rollTypes","NORMAL","ADVANTAGE","DISADVANTAGE","activityTypes","STRIKE","SAVE","profTrends","TRAINED","FIGHTERWEAPON","MARTIALWEAPON","CASTERWEAPON","ALCHWEAPON","CASTERSPELL","MAGUSSPELL","MCSPELL","MAXSKILL","statTrends","AS10","AS18a","AS16a","AS16pp","AS16p","AS14pp","AS14p","itemTrends","NONE","WEAPON","SKILL","MAPs","N1","N2","N3","A1","A2","A3","R1","R2","R3","RA1","RA2","RA3","RAA1","RAA2","RAA3","nextMAPs","defenses","AC","FORT","REF","WILL","PER","dCond","BASIC","dieTrends","SPELLLEVEL1","SPELLLEVEL2","RUNE","DEADLY","SNEAK","STRATEGIC","PRECISE","damageTrends","FIGHTERWEAPONSPEC","MARTIALWEAPONSPEC","CASTERWEAPONSPEC","RAGE","ANIMALRAGE","DRAGONRAGE","GIANTRAGE","damageTypes","B","P","S","FIRE","materials","COLD_IRON","SILVER","ADAMANTINE","effectTypes","FLATFOOT","FRIGHTENED1","FRIGHTENED2","FRIGHTENED3","FRIGHTENED4","Weakness","useSelector","dispatch","useDispatch","className","onChange","e","target","isNaN","parseInt","AddWeakness","useState","weaknessValue","setWeaknessValue","WeaknessSelect","options","dt","key","m","TargetInput","levelDiff","ACTrend","FortTrend","RefTrend","WillTrend","PerTrend","flatfooted","ACOptions","dv","SaveOptions","htmlFor","placeholder","checked","map","routinesAdapter","activityPathAdapter","damageAdapter","effectAdapter","routineId","activityPathId","damageId","effectId","empty","i","defaultStrikeParent","rollType","profTrend","statTrend","itemTrend","bonusAdjustments","MAP","targetType","damages","effects","defaultSaveParent","defaultDamage","damageCondition","damageType","material","persistent","multiplier","dieTrend","dieAdjustments","diceSize","fatal","fatalDie","damageTrend","damageAdjustments","removeActivityPaths","ids","index","length","ap","activityPaths","apIds","removeMany","copyDamages","newDamages","did","damage","copyEffects","newEffects","eid","effect","copyActivityPaths","newApIds","apId","routinesSlice","selectedRoutine","routines","setRoutine","routineAdded","routineUpdated","activityPathAdded","activityPathUpdated","damageAdded","damageUpdated","effectAdded","effectUpdated","routineCreated","copy","routine","display","description","startLevel","endLevel","routineRemoved","childrenIds","undefined","activityPathCreated","parentAP","isStrike","applyMAP","condition","activityPathRemoved","damageCreated","damageRemoved","effectCreated","effectCondition","effectType","effectRemoved","selectRoutineById","selectRoutineEntities","selectAllRoutines","selectactivityPathById","selectactivityPathEntities","selectdamageById","selectdamageEntities","selecteffectById","selecteffectEntities","selectSelectedRoutine","convolve","vec1","vec2","Error","volume","kernel","displacement","convVec","j","consolidateDists","maxDamage","dists","dist","Math","max","staticDamage","damageDist","applyMin","min","shift","zero","trained","maxSkill","maxScore","score16pp","score16p","score16","score14p","score14","martialProf","alchProf","casterProf","spellProf","weaponItem","skillItem","weaponDice","spellDice","spellDice2","floor","runes","deadly","sneak","strategic","precise","martialSpec","casterSpec","rage","animalrage","dragonrage","giantrage","fighterAB","martialAB","casterAB","alchAB","casterSpellAttack","casterSaveDC","magusspell","mcspell","fighterStatic","fighterRanged","martialStatic","martialRanged","casterStatic","casterRanged","profTrendValues","statTrendValues","itemTrendValues","MAPvalues","dieTrendValues","damageTrendValues","extremeAC","highAC","moderateAC","lowAC","defaultACs","defaultSaves","addDamage","context","normal","dam","newDist","newDam","oldValue","chance","newValue","diff","multiplyDist","validateCondition","degreeOfSuccess","indicies","includes","ActivityPathEvaluator","this","ACBonus","resBonus","initialTargetState","frightened","dataArray","cumulative","PdataArray","Pcumulative","expD","expP","routineDDist","routinePDDist","activityPath","evalPath","PdamageDist","currentSum","targetState","defenseBonus","resistanceBonus","currentTarget","currentDamages","currentEffects","currentWeaknesses","activity","bonus","DC","targetValue","console","log","critPercent","dif","getCritSuccessPercent","succPercent","getSuccessPercent","failPercent","getFailurePercent","crfaPercent","getCritFailurePercent","notcrit","nothit","notfail","notcrfa","notsucc","chances","critDamages","succDamages","failDamages","crfaDamages","damageTrees","forEach","diceNum","fatalDist","diceArray","damageTree","damageQuality","totalStaticDamage","totalDamageDist","maxW","maxR","calculateExpectedDamage","targetStates","evaluations","Map","has","pathDist","pathPDist","set","get","Plot","createPlotlyComponent","Plotly","evaluateByLevel","evaluator","datasets","perDatasets","levelArray","expDbyLevel","expPDbyLevel","canEvaluate","evalRoutine","x","y","yaxis","evaluatePM","displayLevel","defense","expectedDamages","expectedPersistentDamages","bonusArray","expDbyBonus","expPDbyBonus","toFixed","evaluateDistribution","useGenerateGraphs","graphType","title","byLevelTile","xtitle","ytitle","byLeveldatasets","byLevelperDatasets","damageChart","classname","data","layout","autosize","xaxis","legend","xanchor","margin","l","r","useResizeHandler","style","width","height","persistentDamageChart","byLevelDamageChart","byLevelPerDamageChart","Display","addPersistent","setAddPersistent","setGraphType","setDisplayLevel","graphTypeOptions","gt","displayLevelOptions","BYLEVEL","levelOptions","conditionOptions","c","rollOptions","rt","activityTypeOptions","at","profTrendOptions","bt","statTrendOptions","itemBTrendOptions","MAPOptions","defenseOptions","d","damageConditionOptions","dc","dieTrendOptions","diceSizeOptions","ds","damageTrendOptions","damageTypeOptions","materialOptions","multiplierOptions","effectTypeOptions","et","generateAdjustments","entries","adjustments","currentValue","currentIndex","adjustmentsFromLevelChange","newLevel","sort","a","b","adjustmentsFromNewEntry","lastValue","LevelList","baseEntries","generateEntries","setEntries","be","JSON","stringify","useEffect","levelList","newEntries","slice","focus","onBlur","onClick","Damage","dieLevelList","damageLevelList","damageTrendList","newdt","splice","parseFloat","Effect","ActivityPath","displayCondition","bonusLevelList","NameInput","baseName","setName","Fragment","DescriptionInput","baseDescription","setDescription","SelectedRoutine","Routines","routineOptions","routineDisplays","ImportExport","ReactGA","initialize","PF2App","props","send","Export","pickCritSpec","one","store","configureStore","routineReducer","weaknessReducer","targetReducer","targetInfoId","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d4ccaa2a.chunk.js","sourcesContent":["import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const weaknessAdapter = createEntityAdapter();\r\n\r\nlet weakness = 0;\r\n\r\nexport const weaknessesSlice = createSlice({\r\n  name: \"weaknesses\",\r\n  initialState: weaknessAdapter.getInitialState(),\r\n  reducers: {\r\n    weaknessAdded: weaknessAdapter.addOne,\r\n    weaknessUpdated: weaknessAdapter.updateOne,\r\n    weaknessCreated: {\r\n      reducer: (state, action) => {\r\n        const { id, type, value } = action.payload;\r\n        weaknessAdapter.addOne(state, { id, type, value });\r\n      },\r\n      prepare: ({ parentId, type, value }) => {\r\n        const id = ++weakness;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n            type,\r\n            value,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    weaknessRemoved: weaknessAdapter.removeOne,\r\n  },\r\n});\r\n\r\nexport const {\r\n  weaknessRemoved,\r\n  weaknessCreated,\r\n  weaknessAdded,\r\n  weaknessUpdated,\r\n} = weaknessesSlice.actions;\r\n\r\nexport default weaknessesSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selectweaknessById,\r\n  selectIds: selectweaknessIds,\r\n  selectEntities: selectweaknessEntities,\r\n  selectAll: selectAllweaknesses,\r\n  selectTotal: selectTotalweaknesses,\r\n} = weaknessAdapter.getSelectors((state) => state.weaknesses);\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\n// import { defaultACs, defaultSaves } from \"../defaults\";\r\n// import { defenses } from \"../types\";\r\nimport { weaknessCreated, weaknessRemoved } from \"./weaknessSlice\";\r\n\r\nexport const targetAdapter = createEntityAdapter();\r\n\r\nexport const targetsSlice = createSlice({\r\n  name: \"targets\",\r\n  initialState: targetAdapter.getInitialState(),\r\n  reducers: {\r\n    targetAdded: targetAdapter.addOne,\r\n    targetUpdated: {\r\n      prepare: ({ id, changes, match, level }) => {\r\n        if (!level) level = 1;\r\n        if (level < 1) level = 1;\r\n        if (level > 20) level = 20;\r\n        return { payload: { id, changes, match, level } };\r\n      },\r\n      reducer: (state, action) => {\r\n        targetAdapter.updateOne(state, action.payload);\r\n        // const target = state.entities[action.payload.id];\r\n        // if (!target.level) target.level = 0;\r\n        // if (target.level < -1) target.level = -1;\r\n        // if (target.level > 24) target.level = 24;\r\n        // if (target.useDefaultAC) {\r\n        //   target[defenses.AC] = defaultACs[target.defaultAC][target.level];\r\n        // }\r\n        // if (target.useDefaultFort) {\r\n        //   target[defenses.FORT] =\r\n        //     defaultSaves[target.defaultFort][target.level];\r\n        // }\r\n        // if (target.useDefaultRef) {\r\n        //   target[defenses.REF] = defaultSaves[target.defaultRef][target.level];\r\n        // }\r\n        // if (target.useDefaultWill) {\r\n        //   target[defenses.WILL] =\r\n        //     defaultSaves[target.defaultWill][target.level];\r\n        // }\r\n        // if (target.useDefaultPer) {\r\n        //   target[defenses.PER] = defaultSaves[target.defaultPer][target.level];\r\n        // }\r\n      },\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(weaknessCreated, (state, action) => {\r\n        const { parentId: id, id: weaknessId } = action.payload;\r\n        state.entities[id].weaknesses.push(weaknessId);\r\n        // targetAdded.updateOne(state, { id, changes: { weaknesses: [...weaknesses, weaknessId] }});\r\n      })\r\n      .addCase(weaknessRemoved, (state, action) => {\r\n        const { parentId: id, id: weaknessId } = action.payload;\r\n        state.entities[id].weaknesses = state.entities[id].weaknesses.filter(\r\n          (wid) => wid !== weaknessId\r\n        );\r\n      });\r\n  },\r\n});\r\n\r\nexport const { targetAdded, targetUpdated } = targetsSlice.actions;\r\n\r\nexport default targetsSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selecttargetById,\r\n  selectIds: selecttargetIds,\r\n  selectEntities: selecttargetEntities,\r\n  selectAll: selectAlltargets,\r\n  selectTotal: selectTotaltargets,\r\n} = targetAdapter.getSelectors((state) => state.targets);\r\n","export const graphTypes = {\r\n  DISTRIBUTION: \"Damage Distribution\",\r\n  PMDEFENSE: \"+/- AC/Save Bonus\",\r\n  PMRES: \"+/- Resistance/Weakness\",\r\n};\r\n\r\nexport const ACTrends = {\r\n  LOW: \"Low\",\r\n  MODERATE: \"Moderate\",\r\n  HIGH: \"High\",\r\n  EXTREME: \"Extreme\",\r\n};\r\n\r\nexport const SaveTrends = {\r\n  TERRIBLE: \"Terrible\",\r\n  LOW: \"Low\",\r\n  MODERATE: \"Moderate\",\r\n  HIGH: \"High\",\r\n  EXTREME: \"Extreme\",\r\n};\r\n\r\nexport const conditions = {\r\n  ALWAYS: \"Always\",\r\n  CRIT: \"On Crit\",\r\n  SUCC: \"On Success\",\r\n  FAIL: \"On Failure\",\r\n  CRIF: \"On Crit Fail\",\r\n  AT_LEAST_SUCC: \"Success or better\",\r\n  AT_LEAST_FAIL: \"Failure or better\",\r\n  FAIL_WORSE: \"Failure or worse\",\r\n  SUCC_WORSE: \"Success or worse\",\r\n};\r\n\r\nexport const rollTypes = {\r\n  NORMAL: \"Normal\",\r\n  ADVANTAGE: \"Advantage\",\r\n  DISADVANTAGE: \"Disadvantage\",\r\n};\r\n\r\nexport const activityTypes = {\r\n  STRIKE: \"Strike\",\r\n  SAVE: \"Save\",\r\n};\r\n\r\nexport const profTrends = {\r\n  TRAINED: \"Trained Proficiency\",\r\n  FIGHTERWEAPON: \"Fighter Weapon (1, 5, 13)\",\r\n  MARTIALWEAPON: \"Martial Weapon (5, 13)\",\r\n  CASTERWEAPON: \"Caster Weapon (11)\",\r\n  ALCHWEAPON: \"Alchemist Weapon (7)\",\r\n  CASTERSPELL: \"Caster Spell (7, 15, 19)\",\r\n  MAGUSSPELL: \"Magus Spell (9, 17)\",\r\n  MCSPELL: \"MC Spell (12, 18)\",\r\n  MAXSKILL: \"Max skill (3, 7, 15)\",\r\n};\r\n\r\nexport const statTrends = {\r\n  AS10: \"10\",\r\n  AS18a: \"18 to 24 apex(17)\",\r\n  AS16a: \"16 to 22 apex(17)\",\r\n  AS16pp: \"16 to 20\",\r\n  AS16p: \"16 to 18\",\r\n  AS14pp: \"14 to 20\",\r\n  AS14p: \"14 to 18\",\r\n};\r\n\r\nexport const itemTrends = {\r\n  NONE: \"None\",\r\n  WEAPON: \"Weapon (2, 10, 16)\",\r\n  SKILL: \"Skill (3, 9, 17)\",\r\n};\r\n\r\nexport const MAPs = {\r\n  N1: \"0 (0x-5)\",\r\n  N2: \"-5 (1x-5)\",\r\n  N3: \"-10 (2x-5)\",\r\n  A1: \"0 (0x-4)\",\r\n  A2: \"-4 (1x-4)\",\r\n  A3: \"-8 (2x-4)\",\r\n  R1: \"0 (0x-3)\",\r\n  R2: \"-3 (1x-3)\",\r\n  R3: \"-6 (2x-3)\",\r\n  RA1: \"0 (0x-2)\",\r\n  RA2: \"-2 (1x-2)\",\r\n  RA3: \"-4 (2x-2)\",\r\n  RAA1: \"0 (0x-1)\",\r\n  RAA2: \"-1 (1x-1)\",\r\n  RAA3: \"-2 (2x-1)\",\r\n};\r\n\r\nexport const nextMAPs = {\r\n  \"0 (0x-5)\": \"-5 (1x-5)\",\r\n  \"-5 (1x-5)\": \"-10 (2x-5)\",\r\n  \"-10 (2x-5)\": \"-10 (2x-5)\",\r\n  \"0 (0x-4)\": \"-4 (1x-4)\",\r\n  \"-4 (1x-4)\": \"-8 (2x-4)\",\r\n  \"-8 (2x-4)\": \"-8 (2x-4)\",\r\n  \"0 (0x-3)\": \"-3 (1x-3)\",\r\n  \"-3 (1x-3)\": \"-6 (2x-3)\",\r\n  \"-6 (2x-3)\": \"-6 (2x-3)\",\r\n  \"0 (0x-2)\": \"-2 (1x-2)\",\r\n  \"-2 (1x-2)\": \"-4 (2x-2)\",\r\n  \"-4 (2x-2)\": \"-4 (2x-2)\",\r\n  \"0 (0x-1)\": \"-1 (1x-1)\",\r\n  \"-1 (1x-1)\": \"-2 (2x-1)\",\r\n  \"-2 (2x-1)\": \"-2 (2x-1)\",\r\n};\r\n\r\nexport const defenses = {\r\n  AC: \"AC\",\r\n  FORT: \"Fort\",\r\n  REF: \"Ref\",\r\n  WILL: \"Will\",\r\n  PER: \"Perception\",\r\n};\r\n\r\nexport const dCond = {\r\n  STRIKE: \"x1 hit, x2 crit\",\r\n  BASIC: \"Basic save\",\r\n  ALWAYS: \"Always\",\r\n  CRIT: \"On Crit\",\r\n  SUCC: \"On Success\",\r\n  FAIL: \"On Failure\",\r\n  CRIF: \"On Crit Fail\",\r\n  AT_LEAST_SUCC: \"Success or better\",\r\n  AT_LEAST_FAIL: \"Failure or better\",\r\n  FAIL_WORSE: \"Failure or worse\",\r\n  SUCC_WORSE: \"Success or worse\",\r\n};\r\n\r\nexport const dieTrends = {\r\n  NONE: \"None\",\r\n  WEAPON: \"Weapon (1, 4, 12, 19)\",\r\n  SPELLLEVEL1: \"1 x Spell Level\",\r\n  SPELLLEVEL2: \"2 x Spell Level\",\r\n  RUNE: \"Runes (8, 15)\",\r\n  DEADLY: \"Deadly (1, 12, 19)\",\r\n  SNEAK: \"Sneak Attack (1, 5, 11, 17)\",\r\n  STRATEGIC: \"Strategic Strike (1, 5, 9, 13, 17)\",\r\n  PRECISE: \"Precise Strike (1, 1, 5, 9, 13, 17)\",\r\n};\r\n\r\nexport const damageTrends = {\r\n  NONE: \"None\",\r\n  FIGHTERWEAPONSPEC: \"Fighter Weapon Specialization\",\r\n  MARTIALWEAPONSPEC: \"Martial Weapon Specializaton\",\r\n  CASTERWEAPONSPEC: \"Caster Weapon Specializaton\",\r\n  ...statTrends,\r\n  WEAPON: \"Weapon (1, 4, 12, 19)\",\r\n  SPELLLEVEL1: \"1 x Spell Level\",\r\n  RAGE: \"Rage\",\r\n  ANIMALRAGE: \"Animal Rage\",\r\n  DRAGONRAGE: \"Dragon Rage\",\r\n  GIANTRAGE: \"Giant Rage\",\r\n};\r\n\r\nexport const damageTypes = {\r\n  NONE: \"None\",\r\n  B: \"bludgeoning\",\r\n  P: \"piercing\",\r\n  S: \"slashing\",\r\n  FIRE: \"fire\",\r\n};\r\n\r\nexport const materials = {\r\n  NONE: \"none\",\r\n  COLD_IRON: \"cold iron\",\r\n  SILVER: \"silver\",\r\n  ADAMANTINE: \"adamantine\",\r\n};\r\n\r\nexport const effectTypes = {\r\n  FLATFOOT: \"Flatfooted\",\r\n  FRIGHTENED1: \"Frightened 1\",\r\n  FRIGHTENED2: \"Frightened 2\",\r\n  FRIGHTENED3: \"Frightened 3\",\r\n  FRIGHTENED4: \"Frightened 4\",\r\n};\r\n\r\nexport const diceNums = {\r\n  0: 0,\r\n  1: 1,\r\n  2: 2,\r\n  3: 3,\r\n  4: 4,\r\n  5: 5,\r\n  6: 6,\r\n  7: 7,\r\n  8: 8,\r\n  9: 9,\r\n  10: 10,\r\n  11: 11,\r\n  12: 12,\r\n  13: 13,\r\n  14: 14,\r\n  15: 15,\r\n  16: 16,\r\n  17: 17,\r\n  18: 18,\r\n  19: 19,\r\n  20: 20,\r\n};\r\n\r\nexport const diceSizes = {\r\n  4: 4,\r\n  6: 6,\r\n  8: 8,\r\n  10: 10,\r\n  12: 12,\r\n};\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\nimport {\r\n  activityTypes,\r\n  conditions,\r\n  profTrends,\r\n  defenses,\r\n  MAPs,\r\n  nextMAPs,\r\n  rollTypes,\r\n  statTrends,\r\n  itemTrends,\r\n  effectTypes,\r\n} from \"../Model/types\";\r\nimport { damageTypes, dCond, dieTrends, materials } from \"../Model/types\";\r\n\r\nexport const routinesAdapter = createEntityAdapter();\r\nexport const activityPathAdapter = createEntityAdapter();\r\nexport const damageAdapter = createEntityAdapter();\r\nexport const effectAdapter = createEntityAdapter();\r\n\r\nlet routineId = 100;\r\nlet activityPathId = 1000;\r\nlet damageId = 1000;\r\nlet effectId = 1000;\r\n\r\nconst empty = {};\r\nfor (let i = 1; i <= 20; i++) {\r\n  empty[i] = 0;\r\n}\r\nconst defaultStrikeParent = {\r\n  rollType: rollTypes.NORMAL,\r\n  type: activityTypes.STRIKE,\r\n  profTrend: profTrends.MARTIALWEAPON,\r\n  statTrend: statTrends.AS18a,\r\n  itemTrend: itemTrends.WEAPON,\r\n  bonusAdjustments: { ...empty },\r\n  MAP: MAPs.N1,\r\n  targetType: defenses.AC,\r\n\r\n  damages: [0, 1],\r\n  effects: [0],\r\n};\r\nconst defaultSaveParent = {\r\n  rollType: rollTypes.NORMAL,\r\n  type: activityTypes.SAVE,\r\n  profTrend: profTrends.CASTERSPELL,\r\n  statTrend: statTrends.AS18a,\r\n  itemTrend: itemTrends.NONE,\r\n  bonusAdjustments: { ...empty },\r\n  MAP: MAPs.N1,\r\n  targetType: defenses.REF,\r\n\r\n  damages: [2],\r\n  effects: [],\r\n};\r\nconst defaultDamage = {\r\n  damageCondition: dCond.STRIKE,\r\n  damageType: damageTypes.S,\r\n  material: materials.NONE,\r\n  persistent: false,\r\n  multiplier: 1,\r\n\r\n  dieTrend: dieTrends.NONE,\r\n  dieAdjustments: { ...empty },\r\n  diceSize: 6,\r\n  fatal: false,\r\n  fatalDie: 10,\r\n  damageTrend: [],\r\n  damageAdjustments: { ...empty },\r\n};\r\n\r\nconst removeActivityPaths = (state, ids) => {\r\n  let index = 0;\r\n  while (index < ids.length) {\r\n    let ap = state.activityPaths.entities[ids[index]];\r\n    ids.push(...ap.apIds);\r\n    damageAdapter.removeMany(state.damages, ap.damages);\r\n    effectAdapter.removeMany(state.effects, ap.effects);\r\n    activityPathAdapter.removeOne(state.activityPaths, ap.id);\r\n    index += 1;\r\n  }\r\n};\r\nconst copyDamages = (state, damages) => {\r\n  const newDamages = [];\r\n  for (let did of damages) {\r\n    let damage = state.damages.entities[did];\r\n    // create a new damage entity and add it's id to newDamages\r\n    const id = ++damageId;\r\n    damageAdapter.addOne(state.damages, { ...damage, id });\r\n    newDamages.push(id);\r\n  }\r\n  return newDamages;\r\n};\r\nconst copyEffects = (state, effects) => {\r\n  const newEffects = [];\r\n  for (let eid of effects) {\r\n    let effect = state.effects.entities[eid];\r\n    // create a new effect entity and add it's id to newEffects\r\n    const id = ++effectId;\r\n    effectAdapter.addOne(state.effects, { ...effect, id });\r\n    newEffects.push(id);\r\n  }\r\n  return newEffects;\r\n};\r\nconst copyActivityPaths = (state, apIds) => {\r\n  let newApIds = [];\r\n  for (let apId of apIds) {\r\n    const ap = state.activityPaths.entities[apId];\r\n    const apIds = copyActivityPaths(state, ap.apIds);\r\n    const damages = copyDamages(state, ap.damages);\r\n    const effects = copyEffects(state, ap.effects);\r\n    const id = ++activityPathId;\r\n    activityPathAdapter.addOne(state.activityPaths, {\r\n      ...ap,\r\n      id,\r\n      damages,\r\n      effects,\r\n      apIds,\r\n    });\r\n    newApIds.push(id);\r\n  }\r\n  return newApIds;\r\n};\r\n\r\nexport const routinesSlice = createSlice({\r\n  name: \"routines\",\r\n  initialState: {\r\n    selectedRoutine: 1,\r\n    routines: routinesAdapter.getInitialState(),\r\n    activityPaths: activityPathAdapter.getInitialState(),\r\n    damages: damageAdapter.getInitialState(),\r\n    effects: effectAdapter.getInitialState(),\r\n  },\r\n  reducers: {\r\n    setRoutine: (state, action) => {\r\n      state.selectedRoutine = action.payload || 0;\r\n    },\r\n\r\n    routineAdded: (state, action) => {\r\n      routinesAdapter.addOne(state.routines, action);\r\n    },\r\n    routineUpdated: (state, action) => {\r\n      routinesAdapter.updateOne(state.routines, action);\r\n    },\r\n    activityPathAdded: (state, action) => {\r\n      activityPathAdapter.addOne(state.activityPaths, action);\r\n    },\r\n    activityPathUpdated: (state, action) => {\r\n      activityPathAdapter.updateOne(state.activityPaths, action);\r\n    },\r\n    damageAdded: (state, action) => {\r\n      damageAdapter.addOne(state.damages, action);\r\n    },\r\n    damageUpdated: (state, action) => {\r\n      damageAdapter.updateOne(state.damages, action);\r\n    },\r\n    effectAdded: (state, action) => {\r\n      effectAdapter.addOne(state.effects, action);\r\n    },\r\n    effectUpdated: (state, action) => {\r\n      effectAdapter.updateOne(state.effects, action);\r\n    },\r\n\r\n    routineCreated: {\r\n      reducer: (state, action) => {\r\n        const { id, copy } = action.payload;\r\n        if (copy) {\r\n          const routine = state.routines.entities[state.selectedRoutine];\r\n          const name = \"Copy of \" + routine.name;\r\n          const apIds = copyActivityPaths(state, routine.apIds);\r\n          routinesAdapter.addOne(state.routines, {\r\n            ...routine,\r\n            id,\r\n            name,\r\n            apIds,\r\n          });\r\n        } else {\r\n          routinesAdapter.addOne(state.routines, {\r\n            id,\r\n            name: \"New Routine\",\r\n            display: true,\r\n            apIds: [],\r\n            levelDiff: 0,\r\n            description: \"Enter a description here.\",\r\n            startLevel: 1,\r\n            endLevel: 20,\r\n          });\r\n        }\r\n        state.selectedRoutine = id;\r\n      },\r\n      prepare: ({ copy = false }) => {\r\n        const id = ++routineId;\r\n        return { payload: { id, copy } };\r\n      },\r\n    },\r\n    routineRemoved: (state, action) => {\r\n      // recursively remove all children\r\n      const routineId = action.payload;\r\n      let childrenIds = state.routines.entities[routineId].apIds;\r\n      removeActivityPaths(state, childrenIds);\r\n\r\n      routinesAdapter.removeOne(state.routines, routineId);\r\n      if (routineId === state.selectedRoutine)\r\n        state.selectedRoutine = state.routines.ids\r\n          ? state.routines.ids[0]\r\n          : undefined;\r\n    },\r\n    activityPathCreated: {\r\n      reducer: (state, action) => {\r\n        const { id, parentId, routineId, isStrike, applyMAP } = action.payload;\r\n\r\n        let parentAP;\r\n        if (routineId !== undefined)\r\n          state.routines.entities[routineId].apIds.push(id);\r\n        if (parentId !== undefined) {\r\n          state.activityPaths.entities[parentId].apIds.push(id);\r\n          parentAP = state.activityPaths.entities[parentId];\r\n        } else {\r\n          parentAP = isStrike ? defaultStrikeParent : defaultSaveParent;\r\n        }\r\n        // copy parent damages and effects\r\n        let newDamages = copyDamages(state, parentAP.damages);\r\n        let newEffects = copyEffects(state, parentAP.effects);\r\n\r\n        activityPathAdapter.addOne(state.activityPaths, {\r\n          id,\r\n          condition: conditions.ALWAYS,\r\n\r\n          rollType: rollTypes.NORMAL,\r\n          type: parentAP.type,\r\n          profTrend: parentAP.profTrend,\r\n          statTrend: parentAP.statTrend,\r\n          itemTrend: parentAP.itemTrend,\r\n          bonusAdjustments: { ...parentAP.bonusAdjustments },\r\n          MAP: applyMAP ? nextMAPs[parentAP.MAP] : parentAP.MAP,\r\n\r\n          targetType: parentAP.targetType,\r\n\r\n          damages: newDamages,\r\n          effects: newEffects,\r\n          apIds: [],\r\n        });\r\n      },\r\n      prepare: ({ parentId, routineId, isStrike = true, applyMAP = false }) => {\r\n        const id = ++activityPathId;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n            routineId,\r\n            isStrike,\r\n            applyMAP,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    activityPathRemoved: (state, action) => {\r\n      const { id, parentId, routineId } = action.payload;\r\n\r\n      // recursively remove all children\r\n      let childrenIds = [id];\r\n      removeActivityPaths(state, childrenIds);\r\n\r\n      if (parentId !== undefined) {\r\n        state.activityPaths.entities[parentId].apIds =\r\n          state.activityPaths.entities[parentId].apIds.filter(\r\n            (apId) => apId !== id\r\n          );\r\n      }\r\n      if (routineId !== undefined) {\r\n        state.routines.entities[routineId].apIds = state.routines.entities[\r\n          routineId\r\n        ].apIds.filter((apId) => apId !== id);\r\n      }\r\n    },\r\n\r\n    damageCreated: {\r\n      reducer: (state, action) => {\r\n        const { id, parentId } = action.payload;\r\n        state.activityPaths.entities[parentId].damages.push(id);\r\n        damageAdapter.addOne(state.damages, { id, ...defaultDamage });\r\n      },\r\n      prepare: ({ parentId }) => {\r\n        const id = ++damageId;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    damageRemoved: (state, action) => {\r\n      const { id, parentId } = action.payload;\r\n      state.activityPaths.entities[parentId].damages =\r\n        state.activityPaths.entities[parentId].damages.filter(\r\n          (did) => did !== id\r\n        );\r\n      damageAdapter.removeOne(state.damages, id);\r\n    },\r\n    effectCreated: {\r\n      reducer: (state, action) => {\r\n        const { id, parentId } = action.payload;\r\n        state.activityPaths.entities[parentId].effects.push(id);\r\n        effectAdapter.addOne(state.effects, {\r\n          id,\r\n          effectCondition: conditions.ALWAYS,\r\n          effectType: effectTypes.FLATFOOT,\r\n          startLevel: 1,\r\n          endLevel: 20,\r\n        });\r\n      },\r\n      prepare: ({ parentId }) => {\r\n        const id = ++effectId;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    effectRemoved: (state, action) => {\r\n      const { id, parentId } = action.payload;\r\n      state.activityPaths.entities[parentId].effects =\r\n        state.activityPaths.entities[parentId].effects.filter(\r\n          (eid) => eid !== id\r\n        );\r\n      effectAdapter.removeOne(state.effects, id);\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setRoutine,\r\n\r\n  routineAdded,\r\n  routineUpdated,\r\n  routineCreated,\r\n  routineRemoved,\r\n\r\n  activityPathAdded,\r\n  activityPathUpdated,\r\n  activityPathCreated,\r\n  activityPathRemoved,\r\n\r\n  damageAdded,\r\n  damageUpdated,\r\n  damageCreated,\r\n  damageRemoved,\r\n\r\n  effectAdded,\r\n  effectUpdated,\r\n  effectCreated,\r\n  effectRemoved,\r\n} = routinesSlice.actions;\r\n\r\nexport default routinesSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selectRoutineById,\r\n  selectIds: selectRoutineIds,\r\n  selectEntities: selectRoutineEntities,\r\n  selectAll: selectAllRoutines,\r\n  selectTotal: selectTotalRoutines,\r\n} = routinesAdapter.getSelectors((state) => state.routines.routines);\r\n\r\nexport const {\r\n  selectById: selectactivityPathById,\r\n  selectIds: selectactivityPathIds,\r\n  selectEntities: selectactivityPathEntities,\r\n  selectAll: selectAllactivityPaths,\r\n  selectTotal: selectTotalactivityPaths,\r\n} = activityPathAdapter.getSelectors((state) => state.routines.activityPaths);\r\n\r\nexport const {\r\n  selectById: selectdamageById,\r\n  selectIds: selectdamageIds,\r\n  selectEntities: selectdamageEntities,\r\n  selectAll: selectAlldamages,\r\n  selectTotal: selectTotaldamages,\r\n} = damageAdapter.getSelectors((state) => state.routines.damages);\r\n\r\nexport const {\r\n  selectById: selecteffectById,\r\n  selectIds: selecteffectIds,\r\n  selectEntities: selecteffectEntities,\r\n  selectAll: selectAlleffects,\r\n  selectTotal: selectTotaleffects,\r\n} = effectAdapter.getSelectors((state) => state.routines.effects);\r\n\r\nexport const selectSelectedRoutine = (state) => state.routines.selectedRoutine;\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { selecttargetById, targetUpdated } from \"./targetSlice\";\r\nimport { ACTrends, damageTypes, materials, SaveTrends } from \"../Model/types\";\r\nimport {\r\n  selectweaknessById,\r\n  weaknessCreated,\r\n  weaknessRemoved,\r\n  weaknessUpdated,\r\n} from \"./weaknessSlice\";\r\n\r\nfunction TargetInput({ id }) {\r\n  const {\r\n    name,\r\n\r\n    // level,\r\n    // matchRoutines,\r\n    levelDiff,\r\n\r\n    // [defenses.AC]: AC,\r\n    // defaultAC,\r\n    // useDefaultAC,\r\n    // [defenses.FORT]: Fort,\r\n    // defaultFort,\r\n    // useDefaultFort,\r\n    // [defenses.REF]: Ref,\r\n    // defaultRef,\r\n    // useDefaultRef,\r\n    // [defenses.WILL]: Will,\r\n    // defaultWill,\r\n    // useDefaultWill,\r\n    // [defenses.PER]: Perception,\r\n    // defaultPer,\r\n    // useDefaultPer,\r\n\r\n    ACTrend,\r\n    FortTrend,\r\n    RefTrend,\r\n    WillTrend,\r\n    PerTrend,\r\n\r\n    flatfooted,\r\n    weaknesses,\r\n  } = useSelector((state) => selecttargetById(state, 0));\r\n  const dispatch = useDispatch();\r\n\r\n  const ACOptions = [];\r\n  for (let dv in ACTrends) {\r\n    ACOptions.push(<option key={dv}>{ACTrends[dv]}</option>);\r\n  }\r\n  const SaveOptions = [];\r\n  for (let dv in SaveTrends) {\r\n    SaveOptions.push(<option key={dv}>{SaveTrends[dv]}</option>);\r\n  }\r\n\r\n  // name, level, ac, fort, ref, will, perception, resistances/weaknesses\r\n  return (\r\n    <div className=\"box flexbox\">\r\n      <span className=\"input\">\r\n        <label htmlFor=\"targetName\">{\"Target Name: \"}</label>\r\n        <input\r\n          id=\"targetName\"\r\n          type=\"text\"\r\n          placeholder=\"Enter Target name\"\r\n          value={name}\r\n          onChange={(e) =>\r\n            dispatch(targetUpdated({ id, changes: { name: e.target.value } }))\r\n          }\r\n        />\r\n      </span>\r\n\r\n      {/* <span className=\"input\">\r\n        <label htmlFor=\"Level\">{\" Level: \"}</label>\r\n        <input\r\n          id=\"Level\"\r\n          type=\"number\"\r\n          value={level}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: {\r\n                  level: parseInt(e.target.value),\r\n                },\r\n                match: matchRoutines,\r\n                level: parseInt(e.target.value) - levelDiff,\r\n              })\r\n            )\r\n          }\r\n        />\r\n      </span> */}\r\n\r\n      {/* <span className=\"input\">\r\n        <label htmlFor=\"match\">{\" Match routine levels: \"}</label>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={matchRoutines}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { matchRoutines: e.target.checked },\r\n                match: e.target.checked,\r\n                level: level - levelDiff,\r\n              })\r\n            )\r\n          }\r\n        />\r\n        <input\r\n          type=\"number\"\r\n          value={levelDiff}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: {\r\n                  levelDiff: parseInt(e.target.value),\r\n                },\r\n                match: matchRoutines,\r\n                level: level - parseInt(e.target.value),\r\n              })\r\n            )\r\n          }\r\n        />\r\n      </span> */}\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"levelDiff\">{\" Level Difference: \"}</label>\r\n        <input\r\n          type=\"number\"\r\n          id=\"levelDiff\"\r\n          value={levelDiff}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: {\r\n                  levelDiff: parseInt(e.target.value),\r\n                },\r\n              })\r\n            )\r\n          }\r\n        />\r\n      </span>\r\n      <span className=\"input\">\r\n        <label htmlFor=\"AC\">{\" AC: \"}</label>\r\n        {/* <input\r\n          type=\"checkbox\"\r\n          checked={useDefaultAC}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { useDefaultAC: e.target.checked } })\r\n            )\r\n          }\r\n        /> */}\r\n        <select\r\n          id=\"AC\"\r\n          value={ACTrend}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { ACTrend: e.target.value } })\r\n            )\r\n          }\r\n        >\r\n          {ACOptions}\r\n        </select>\r\n        {/* <input\r\n          id=\"AC\"\r\n          type=\"number\"\r\n          value={AC}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: {\r\n                  useDefaultAC: false,\r\n                  [defenses.AC]: parseInt(e.target.value),\r\n                },\r\n              })\r\n            )\r\n          }\r\n        /> */}\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"Fort\">{\" Fort: \"}</label>\r\n        {/* <input\r\n          type=\"checkbox\"\r\n          checked={useDefaultFort}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { useDefaultFort: e.target.checked },\r\n              })\r\n            )\r\n          }\r\n        /> */}\r\n        <select\r\n          id=\"Fort\"\r\n          value={FortTrend}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { FortTrend: e.target.value } })\r\n            )\r\n          }\r\n        >\r\n          {SaveOptions}\r\n        </select>\r\n        {/* <input\r\n          id=\"Fort\"\r\n          type=\"number\"\r\n          value={Fort}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { [defenses.FORT]: parseInt(e.target.value) },\r\n              })\r\n            )\r\n          }\r\n        /> */}\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"Ref\">{\" Ref: \"}</label>\r\n        {/* <input\r\n          type=\"checkbox\"\r\n          checked={useDefaultRef}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { useDefaultRef: e.target.checked },\r\n              })\r\n            )\r\n          }\r\n        /> */}\r\n        <select\r\n          id=\"Red\"\r\n          value={RefTrend}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { RefTrend: e.target.value } })\r\n            )\r\n          }\r\n        >\r\n          {SaveOptions}\r\n        </select>\r\n        {/* <input\r\n          id=\"Ref\"\r\n          type=\"number\"\r\n          value={Ref}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { [defenses.REF]: parseInt(e.target.value) },\r\n              })\r\n            )\r\n          }\r\n        /> */}\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"Will\">{\" Will: \"}</label>\r\n        {/* <input\r\n          type=\"checkbox\"\r\n          checked={useDefaultWill}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { useDefaultWill: e.target.checked },\r\n              })\r\n            )\r\n          }\r\n        /> */}\r\n        <select\r\n          id=\"Will\"\r\n          value={WillTrend}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { WillTrend: e.target.value } })\r\n            )\r\n          }\r\n        >\r\n          {SaveOptions}\r\n        </select>\r\n        {/* <input\r\n          id=\"Will\"\r\n          type=\"number\"\r\n          value={Will}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { [defenses.WILL]: parseInt(e.target.value) },\r\n              })\r\n            )\r\n          }\r\n        /> */}\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"Perception\">{\" Perception: \"}</label>\r\n        {/* <input\r\n          type=\"checkbox\"\r\n          checked={useDefaultPer}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { useDefaultPer: e.target.checked },\r\n              })\r\n            )\r\n          }\r\n        /> */}\r\n        <select\r\n          id=\"Perception\"\r\n          value={PerTrend}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { PerTrend: e.target.value } })\r\n            )\r\n          }\r\n        >\r\n          {SaveOptions}\r\n        </select>\r\n        {/* <input\r\n          id=\"Perception\"\r\n          type=\"number\"\r\n          value={Perception}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { [defenses.PER]: parseInt(e.target.value) },\r\n              })\r\n            )\r\n          }\r\n        /> */}\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"Flatfooted\">{\" Flatfooted: \"}</label>\r\n        <input\r\n          id=\"Flatfooted\"\r\n          type=\"checkbox\"\r\n          checked={flatfooted}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { flatfooted: e.target.checked } })\r\n            )\r\n          }\r\n        />\r\n      </span>\r\n\r\n      <div className=\"box flexbox\">\r\n        {\" Resistance/Weakness: \"}\r\n        {weaknesses.map((weaknessId) => (\r\n          <Weakness parentId={id} id={weaknessId} key={weaknessId} />\r\n        ))}\r\n        <AddWeakness parentId={id} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// const TargetInfo = ({ id }) => {\r\n//   const { overrideDefault, type, value, weaknesses } = useSelector((state) =>\r\n//     selecttargetInfoById(state, id)\r\n//   );\r\n//   const dispatch = useDispatch();\r\n\r\n//   const defenseOptions = [];\r\n//   for (let d in defenses) {\r\n//     defenseOptions.push(<option key={d}>{defenses[d]}</option>);\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"box\">\r\n//       {\"Override Target: \"}\r\n//       <input\r\n//         type=\"checkbox\"\r\n//         checked={overrideDefault}\r\n//         onChange={(e) =>\r\n//           dispatch(\r\n//             targetInfoUpdated({\r\n//               id,\r\n//               changes: { overrideDefault: e.target.checked },\r\n//             })\r\n//           )\r\n//         }\r\n//       />\r\n\r\n// {/* <Weaknesses parentId={id} weaknessIds={weaknesses} /> */}\r\n\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const Weaknesses = ({ parentId, weaknessIds }) => {\r\n//   return (\r\n//     <span>\r\n//       {weaknessIds.map((weaknessId) => (\r\n//         <Weakness id={weaknessId} key={weaknessId} />\r\n//       ))}\r\n//       <AddWeakness id={parentId} />\r\n//     </span>\r\n//   );\r\n// };\r\n\r\nconst Weakness = ({ id, parentId }) => {\r\n  // needs to have parent id to remove weakness\r\n  const { type, value } = useSelector((state) => selectweaknessById(state, id));\r\n  const dispatch = useDispatch();\r\n\r\n  const updateOrRemoveWeakness = (e) => {\r\n    if (e.target.value === damageTypes.NONE) {\r\n      // remove this weakness\r\n      dispatch(weaknessRemoved({ id, parentId }));\r\n    } else {\r\n      dispatch(weaknessUpdated({ id, changes: { type: e.target.value } }));\r\n    }\r\n  };\r\n  const updateWeaknessValue = (e) => {\r\n    if (!isNaN(e.target.value)) {\r\n      dispatch(\r\n        weaknessUpdated({ id, changes: { value: parseInt(e.target.value) } })\r\n      );\r\n    }\r\n  };\r\n  return (\r\n    <span className=\"input\">\r\n      <WeaknessSelect value={type} onChange={updateOrRemoveWeakness} />\r\n      <input type=\"number\" value={value} onChange={updateWeaknessValue} />\r\n    </span>\r\n  );\r\n};\r\n\r\nlet weaknessId = 0;\r\n\r\nconst AddWeakness = ({ parentId }) => {\r\n  const dispatch = useDispatch();\r\n  let [weaknessValue, setWeaknessValue] = useState(0);\r\n\r\n  // add a Weakness to TargetInfo id\r\n  const addWeakness = (e) => {\r\n    if (e.target.value !== damageTypes.NONE) {\r\n      // need to create a new weakness\r\n      weaknessId++;\r\n      dispatch(\r\n        weaknessCreated({\r\n          id: weaknessId,\r\n          type: e.target.value,\r\n          value: weaknessValue,\r\n          parentId: parentId,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <span className=\"input\">\r\n      <WeaknessSelect value={damageTypes.NONE} onChange={addWeakness} />\r\n      <input\r\n        type=\"number\"\r\n        value={weaknessValue}\r\n        onChange={(e) => setWeaknessValue(parseInt(e.target.value))}\r\n      />\r\n    </span>\r\n  );\r\n};\r\n\r\nconst WeaknessSelect = ({ value, onChange }) => {\r\n  const options = [];\r\n  for (let dt in damageTypes) {\r\n    options.push(<option key={dt}>{damageTypes[dt]}</option>);\r\n  }\r\n  for (let m in materials) {\r\n    if (materials[m] === materials.NONE) continue;\r\n    options.push(<option key={m}>{materials[m]}</option>);\r\n  }\r\n  return (\r\n    <span>\r\n      <select value={value} onChange={(e) => onChange(e)}>\r\n        {options}\r\n      </select>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default TargetInput;\r\n","import {\r\n  ACTrends,\r\n  profTrends,\r\n  damageTrends,\r\n  dieTrends,\r\n  SaveTrends,\r\n  statTrends,\r\n  itemTrends,\r\n} from \"./types\";\r\n\r\nconst zero = {};\r\nconst level = {};\r\nconst trained = {};\r\nconst maxSkill = {};\r\n\r\nconst maxScore = {};\r\nconst score16pp = {};\r\nconst score16p = {};\r\nconst score16 = {};\r\nconst score14p = {};\r\nconst score14 = {};\r\n\r\nconst martialProf = {};\r\nconst alchProf = {};\r\nconst casterProf = {};\r\n\r\nconst spellProf = {};\r\n\r\nconst weaponItem = {};\r\nconst skillItem = {};\r\n\r\nconst weaponDice = {};\r\nconst spellDice = {};\r\nconst spellDice2 = {};\r\nfor (let i = 1; i <= 20; i++) {\r\n  spellDice[i] = Math.floor((i + 1) / 2);\r\n  spellDice2[i] = 2 * Math.floor((i + 1) / 2);\r\n}\r\nconst runes = {};\r\nconst deadly = {};\r\n\r\nconst sneak = {};\r\nconst strategic = {};\r\nconst precise = {};\r\n\r\nconst martialSpec = {};\r\nconst casterSpec = {};\r\n\r\nconst rage = {};\r\nconst animalrage = {};\r\nconst dragonrage = {};\r\nconst giantrage = {};\r\n\r\nconst fighterAB = {};\r\nconst martialAB = {};\r\nconst casterAB = {};\r\nconst alchAB = {};\r\n\r\nconst casterSpellAttack = {};\r\nconst casterSaveDC = {};\r\nconst magusspell = {};\r\nconst mcspell = {};\r\n\r\nconst fighterStatic = {};\r\nconst fighterRanged = {};\r\nconst martialStatic = {};\r\nconst martialRanged = {};\r\nconst casterStatic = {};\r\nconst casterRanged = {};\r\n\r\nfor (let i = 1; i <= 20; i++) {\r\n  zero[i] = 0;\r\n  level[i] = i;\r\n  trained[i] = i + 2;\r\n  maxSkill[i] = i + 2;\r\n\r\n  maxScore[i] = 4;\r\n  score16pp[i] = 3;\r\n  score16p[i] = 3;\r\n  score16[i] = 3;\r\n  score14p[i] = 2;\r\n  score14[i] = 2;\r\n\r\n  martialProf[i] = 2;\r\n  alchProf[i] = 2;\r\n  casterProf[i] = 2;\r\n\r\n  spellProf[i] = 2;\r\n  magusspell[i] = i + 2;\r\n  mcspell[i] = i + 2;\r\n\r\n  weaponItem[i] = 0;\r\n  skillItem[i] = 0;\r\n  weaponDice[i] = 1;\r\n  runes[i] = 0;\r\n  deadly[i] = 1;\r\n\r\n  sneak[i] = 1;\r\n  strategic[i] = 1;\r\n  precise[i] = 2;\r\n\r\n  martialSpec[i] = 0;\r\n  casterSpec[i] = 0;\r\n\r\n  rage[i] = 2;\r\n  animalrage[i] = 2;\r\n  dragonrage[i] = 4;\r\n  giantrage[i] = 6;\r\n\r\n  if (i >= 2) {\r\n    weaponItem[i] = 1;\r\n  }\r\n  if (i >= 3) {\r\n    maxSkill[i] = i + 4;\r\n    skillItem[i] = 1;\r\n  }\r\n  if (i >= 4) {\r\n    weaponDice[i] = 2;\r\n  }\r\n  if (i >= 5) {\r\n    martialProf[i] = 4;\r\n    score16pp[i] = 4;\r\n    score16p[i] = 4;\r\n    score16[i] = 4;\r\n    score14p[i] = 3;\r\n    score14[i] = 3;\r\n\r\n    sneak[i] = 2;\r\n    strategic[i] = 2;\r\n    precise[i] = 3;\r\n  }\r\n  if (i >= 7) {\r\n    alchProf[i] = 4;\r\n    martialSpec[i] = 1;\r\n    spellProf[i] = 4;\r\n    maxSkill[i] = i + 6;\r\n\r\n    rage[i] = 6;\r\n    animalrage[i] = 5;\r\n    dragonrage[i] = 8;\r\n    giantrage[i] = 10;\r\n  }\r\n  if (i >= 8) {\r\n    runes[i] = 1;\r\n  }\r\n  if (i >= 9) {\r\n    skillItem[i] = 2;\r\n    magusspell[i] = i + 4;\r\n\r\n    strategic[i] = 3;\r\n    precise[i] = 4;\r\n  }\r\n  if (i >= 10) {\r\n    weaponItem[i] = 2;\r\n    maxScore[i] = 5;\r\n    score14p[i] = 4;\r\n    score14[i] = 4;\r\n  }\r\n  if (i >= 11) {\r\n    casterProf[i] = 4;\r\n\r\n    sneak[i] = 3;\r\n  }\r\n  if (i >= 12) {\r\n    weaponDice[i] = 3;\r\n    mcspell[i] = i + 4;\r\n    deadly[i] = 2;\r\n  }\r\n  if (i >= 13) {\r\n    martialProf[i] = 6;\r\n    casterSpec[i] = 1;\r\n\r\n    strategic[i] = 4;\r\n    precise[i] = 5;\r\n  }\r\n  if (i >= 15) {\r\n    martialSpec[i] = 2;\r\n    score16pp[i] = 5;\r\n    score16p[i] = 5;\r\n    spellProf[i] = 6;\r\n    maxSkill[i] = i + 8;\r\n    runes[i] = 2;\r\n\r\n    rage[i] = 12;\r\n    animalrage[i] = 12;\r\n    dragonrage[i] = 16;\r\n    giantrage[i] = 18;\r\n  }\r\n  if (i >= 16) {\r\n    weaponItem[i] = 3;\r\n  }\r\n  if (i >= 17) {\r\n    score16pp[i] = 6;\r\n    maxScore[i] = 6;\r\n    skillItem[i] = 3;\r\n    magusspell[i] = i + 6;\r\n\r\n    sneak[i] = 4;\r\n    strategic[i] = 5;\r\n    precise[i] = 6;\r\n  }\r\n  if (i >= 18) {\r\n    mcspell[i] = i + 6;\r\n  }\r\n  if (i >= 19) {\r\n    weaponDice[i] = 4;\r\n    spellProf[i] = 8;\r\n    deadly[i] = 3;\r\n  }\r\n  if (i >= 20) {\r\n    maxScore[i] = 7;\r\n  }\r\n\r\n  fighterAB[i] = i + martialProf[i] + 2;\r\n  martialAB[i] = i + martialProf[i];\r\n  casterAB[i] = i + casterProf[i];\r\n  alchAB[i] = i + alchProf[i];\r\n  casterSpellAttack[i] = i + spellProf[i];\r\n  casterSaveDC[i] = 10 + i + spellProf[i] + maxScore[i];\r\n\r\n  fighterStatic[i] = maxScore[i] + (martialSpec[i] * (martialProf[i] + 2)) / 2;\r\n  fighterRanged[i] = (martialSpec[i] * (martialProf[i] + 2)) / 2;\r\n  martialStatic[i] = maxScore[i] + (martialSpec[i] * martialProf[i]) / 2;\r\n  martialRanged[i] = (martialSpec[i] * martialProf[i]) / 2;\r\n  casterStatic[i] = score16[i] + (casterSpec[i] * casterProf[i]) / 2;\r\n  casterRanged[i] = (casterSpec[i] * casterProf[i]) / 2;\r\n}\r\nexport const profTrendValues = {\r\n  [profTrends.TRAINED]: trained,\r\n  [profTrends.FIGHTERWEAPON]: fighterAB,\r\n  [profTrends.MARTIALWEAPON]: martialAB,\r\n  [profTrends.CASTERWEAPON]: casterAB,\r\n  [profTrends.ALCHWEAPON]: alchAB,\r\n  [profTrends.CASTERSPELL]: casterSpellAttack,\r\n  [profTrends.MAGUSSPELL]: magusspell,\r\n  [profTrends.MCSPELL]: mcspell,\r\n  [profTrends.MAXSKILL]: maxSkill,\r\n};\r\nexport const statTrendValues = {\r\n  [statTrends.AS10]: zero,\r\n  [statTrends.AS18a]: maxScore,\r\n  [statTrends.AS16a]: score16pp,\r\n  [statTrends.AS16pp]: score16p,\r\n  [statTrends.AS16p]: score16,\r\n  [statTrends.AS14pp]: score14p,\r\n  [statTrends.AS14p]: score14,\r\n};\r\nexport const itemTrendValues = {\r\n  [itemTrends.NONE]: zero,\r\n  [itemTrends.WEAPON]: weaponItem,\r\n  [itemTrends.SKILL]: skillItem,\r\n};\r\n\r\nexport const MAPvalues = {\r\n  \"0 (0x-5)\": 0,\r\n  \"-5 (1x-5)\": -5,\r\n  \"-10 (2x-5)\": -10,\r\n  \"0 (0x-4)\": 0,\r\n  \"-4 (1x-4)\": -4,\r\n  \"-8 (2x-4)\": -8,\r\n  \"0 (0x-3)\": 0,\r\n  \"-3 (1x-3)\": -3,\r\n  \"-6 (2x-3)\": -6,\r\n  \"0 (0x-2)\": 0,\r\n  \"-2 (1x-2)\": -2,\r\n  \"-4 (2x-2)\": -4,\r\n  \"0 (0x-1)\": 0,\r\n  \"-1 (1x-1)\": -1,\r\n  \"-2 (2x-1)\": -2,\r\n};\r\n\r\nexport const dieTrendValues = {\r\n  [dieTrends.NONE]: zero,\r\n  [dieTrends.WEAPON]: weaponDice,\r\n  [dieTrends.SPELLLEVEL1]: spellDice,\r\n  [dieTrends.SPELLLEVEL2]: spellDice2,\r\n  [dieTrends.RUNE]: runes,\r\n  [dieTrends.DEADLY]: deadly,\r\n  [dieTrends.SNEAK]: sneak,\r\n  [dieTrends.STRATEGIC]: strategic,\r\n  [dieTrends.PRECISE]: precise,\r\n};\r\n\r\nexport const damageTrendValues = {\r\n  ...statTrendValues,\r\n  [damageTrends.NONE]: zero,\r\n  [damageTrends.FIGHTERWEAPONSPEC]: fighterRanged,\r\n  [damageTrends.MARTIALWEAPONSPEC]: martialRanged,\r\n  [damageTrends.CASTERWEAPONSPEC]: casterRanged,\r\n  [damageTrends.WEAPON]: weaponDice,\r\n  [damageTrends.SPELLLEVEL1]: spellDice,\r\n  [damageTrends.RAGE]: rage,\r\n  [damageTrends.ANIMALRAGE]: animalrage,\r\n  [damageTrends.DRAGONRAGE]: dragonrage,\r\n  [damageTrends.GIANTRAGE]: giantrage,\r\n};\r\n\r\nconst extremeAC = {\r\n  \"-1\": 18,\r\n  0: 19,\r\n  1: 19,\r\n  2: 21,\r\n  3: 22,\r\n  4: 24,\r\n  5: 25,\r\n  6: 27,\r\n  7: 28,\r\n  8: 30,\r\n  9: 31,\r\n  10: 33,\r\n  11: 34,\r\n  12: 36,\r\n  13: 37,\r\n  14: 39,\r\n  15: 40,\r\n  16: 42,\r\n  17: 43,\r\n  18: 45,\r\n  19: 46,\r\n  20: 48,\r\n  21: 49,\r\n  22: 51,\r\n  23: 52,\r\n  24: 54,\r\n};\r\nconst highAC = { ...extremeAC };\r\nfor (let level in highAC) highAC[level] -= 3;\r\n\r\nconst moderateAC = { ...extremeAC };\r\nfor (let level in moderateAC) moderateAC[level] -= 4;\r\n\r\nconst lowAC = { ...extremeAC };\r\nfor (let level in lowAC) lowAC[level] -= 6;\r\n\r\nexport const defaultACs = {\r\n  [ACTrends.EXTREME]: extremeAC,\r\n  [ACTrends.HIGH]: highAC,\r\n  [ACTrends.MODERATE]: moderateAC,\r\n  [ACTrends.LOW]: lowAC,\r\n};\r\n\r\nconst extremeSaves = {\r\n  \"-1\": 9,\r\n  0: 10,\r\n  1: 11,\r\n  2: 12,\r\n  3: 14,\r\n  4: 15,\r\n  5: 17,\r\n  6: 18,\r\n  7: 20,\r\n  8: 21,\r\n  9: 23,\r\n  10: 24,\r\n  11: 26,\r\n  12: 27,\r\n  13: 29,\r\n  14: 30,\r\n  15: 32,\r\n  16: 33,\r\n  17: 35,\r\n  18: 36,\r\n  19: 38,\r\n  20: 39,\r\n  21: 41,\r\n  22: 43,\r\n  23: 44,\r\n  24: 46,\r\n};\r\nconst highSaves = {\r\n  \"-1\": 8,\r\n  0: 9,\r\n  1: 10,\r\n  2: 11,\r\n  3: 12,\r\n  4: 14,\r\n  5: 15,\r\n  6: 17,\r\n  7: 18,\r\n  8: 19,\r\n  9: 21,\r\n  10: 22,\r\n  11: 24,\r\n  12: 25,\r\n  13: 26,\r\n  14: 28,\r\n  15: 29,\r\n  16: 30,\r\n  17: 32,\r\n  18: 33,\r\n  19: 35,\r\n  20: 36,\r\n  21: 38,\r\n  22: 39,\r\n  23: 40,\r\n  24: 42,\r\n};\r\nconst moderateSaves = {\r\n  \"-1\": 5,\r\n  0: 6,\r\n  1: 7,\r\n  2: 8,\r\n  3: 9,\r\n  4: 11,\r\n  5: 12,\r\n  6: 14,\r\n  7: 15,\r\n  8: 16,\r\n  9: 18,\r\n  10: 19,\r\n  11: 21,\r\n  12: 22,\r\n  13: 23,\r\n  14: 25,\r\n  15: 26,\r\n  16: 28,\r\n  17: 29,\r\n  18: 30,\r\n  19: 32,\r\n  20: 33,\r\n  21: 35,\r\n  22: 36,\r\n  23: 37,\r\n  24: 38,\r\n};\r\nconst lowSaves = {\r\n  \"-1\": 2,\r\n  0: 3,\r\n  1: 4,\r\n  2: 5,\r\n  3: 6,\r\n  4: 8,\r\n  5: 9,\r\n  6: 11,\r\n  7: 12,\r\n  8: 13,\r\n  9: 15,\r\n  10: 16,\r\n  11: 18,\r\n  12: 19,\r\n  13: 20,\r\n  14: 22,\r\n  15: 23,\r\n  16: 25,\r\n  17: 26,\r\n  18: 27,\r\n  19: 29,\r\n  20: 30,\r\n  21: 32,\r\n  22: 33,\r\n  23: 34,\r\n  24: 36,\r\n};\r\nconst terribleSaves = {\r\n  \"-1\": 0,\r\n  0: 1,\r\n  1: 2,\r\n  2: 3,\r\n  3: 4,\r\n  4: 6,\r\n  5: 7,\r\n  6: 8,\r\n  7: 10,\r\n  8: 11,\r\n  9: 12,\r\n  10: 14,\r\n  11: 15,\r\n  12: 16,\r\n  13: 18,\r\n  14: 19,\r\n  15: 20,\r\n  16: 22,\r\n  17: 23,\r\n  18: 24,\r\n  19: 26,\r\n  20: 27,\r\n  21: 28,\r\n  22: 30,\r\n  23: 31,\r\n  24: 32,\r\n};\r\nexport const defaultSaves = {\r\n  [SaveTrends.EXTREME]: extremeSaves,\r\n  [SaveTrends.HIGH]: highSaves,\r\n  [SaveTrends.MODERATE]: moderateSaves,\r\n  [SaveTrends.LOW]: lowSaves,\r\n  [SaveTrends.TERRIBLE]: terribleSaves,\r\n};\r\n","export const convolve = (vec1, vec2) => {\r\n  if (vec1.length === 0 || vec2.length === 0) {\r\n    throw new Error(\"Vectors can not be empty!\");\r\n  }\r\n  const volume = vec1;\r\n  const kernel = vec2;\r\n  let displacement = 0;\r\n  const convVec = [];\r\n\r\n  for (let i = 0; i < volume.length; i++) {\r\n    for (let j = 0; j < kernel.length; j++) {\r\n      if (displacement + j !== convVec.length) {\r\n        convVec[displacement + j] =\r\n          convVec[displacement + j] + volume[i] * kernel[j];\r\n      } else {\r\n        convVec.push(volume[i] * kernel[j]);\r\n      }\r\n    }\r\n    displacement++;\r\n  }\r\n\r\n  return convVec;\r\n};\r\n\r\nexport const multiplyDist = (dam, dist, multiplier) => {\r\n  if (multiplier === 0) return [0, [1]];\r\n  if (multiplier === 1) return [dam, [...dist]];\r\n\r\n  const newDist = [0];\r\n  let index = 0;\r\n  const newDam = Math.floor(dam * multiplier);\r\n\r\n  let i = 0;\r\n  let oldValue = newDam;\r\n  for (let chance of dist) {\r\n    let newValue = Math.floor((dam + i) * multiplier);\r\n    if (newValue === oldValue) {\r\n      newDist[index] += chance;\r\n    } else {\r\n      if (newValue > oldValue + 1) {\r\n        for (let diff = 0; diff < newValue - (oldValue + 1); diff++) {\r\n          index++;\r\n          newDist[index] = 0;\r\n        }\r\n      }\r\n      index++;\r\n      newDist[index] = chance;\r\n    }\r\n    oldValue = newValue;\r\n    i++;\r\n  }\r\n\r\n  return [newDam, newDist];\r\n};\r\n\r\n/**\r\n * Combine multiple distributions with their chances into one distribution starting from 0\r\n * @param  {...[{staticDamage, distribution}, chance]} dists\r\n * @returns\r\n */\r\nexport const consolidateDists = (...dists) => {\r\n  let maxDamage = 0;\r\n  for (let dist of dists) {\r\n    maxDamage = Math.max(\r\n      maxDamage,\r\n      dist[0].staticDamage + dist[0].damageDist.length\r\n    );\r\n  }\r\n  let damageDist = [];\r\n  for (let i = 0; i < maxDamage; i++) {\r\n    damageDist.push(0);\r\n    for (let dist of dists) {\r\n      if (dist[0].staticDamage <= i) {\r\n        let index = i - dist[0].staticDamage;\r\n        if (index < dist[0].damageDist.length)\r\n          damageDist[i] += dist[0].damageDist[index] * dist[1];\r\n      }\r\n    }\r\n  }\r\n  return damageDist;\r\n};\r\n\r\n/**\r\n * apply a minimum to a distribution, like for damage penalties or resistances\r\n * @param {number} staticDamage\r\n * @param {[number]} damageDist\r\n * @param {number} min\r\n * @returns\r\n */\r\nexport const applyMin = (staticDamage, damageDist, min) => {\r\n  while (staticDamage < min) {\r\n    if (damageDist.length >= 2) {\r\n      damageDist[1] += damageDist[0];\r\n      damageDist.shift();\r\n    }\r\n    staticDamage++;\r\n  }\r\n  return [staticDamage, damageDist];\r\n};\r\n","import {\r\n  damageTrendValues,\r\n  dieTrendValues,\r\n  defaultACs,\r\n  defaultSaves,\r\n  profTrendValues,\r\n  statTrendValues,\r\n  itemTrendValues,\r\n  MAPvalues,\r\n} from \"../Model/defaults\";\r\nimport {\r\n  activityTypes,\r\n  dCond,\r\n  defenses,\r\n  materials,\r\n  rollTypes,\r\n} from \"../Model/types\";\r\nimport { applyMin, convolve, multiplyDist } from \"./Distribution\";\r\n\r\nfunction getCritSuccessPercent(bonus, DC, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -20) {\r\n    chance = 0;\r\n  } else if (dif === -20) {\r\n    chance = 5;\r\n  } else if (dif < -9) {\r\n    chance = keen ? 10 : 5;\r\n  } else if (dif < 8) {\r\n    chance = (11 + dif) * 5;\r\n  } else {\r\n    chance = 95;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nfunction getSuccessPercent(bonus, DC, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -29) {\r\n    chance = 0;\r\n  } else if (dif < -20) {\r\n    chance = 5;\r\n  } else if (dif === -20) {\r\n    chance = 0;\r\n  } else if (dif < -9) {\r\n    chance = (keen ? 19 : 20 + dif) * 5;\r\n  } else if (dif < -1) {\r\n    chance = 50;\r\n  } else if (dif < 9) {\r\n    chance = (8 - dif) * 5;\r\n  } else {\r\n    chance = 5;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nfunction getFailurePercent(bonus, DC, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -29) {\r\n    chance = 5;\r\n  } else if (dif < -20) {\r\n    chance = (29 + dif) * 5;\r\n  } else if (dif < -10) {\r\n    chance = 45;\r\n  } else if (dif < -1) {\r\n    chance = (-2 - dif) * 5;\r\n  } else if (dif < 9) {\r\n    chance = 5;\r\n  } else {\r\n    chance = 0;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nfunction getCritFailurePercent(bonus, DC, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -29) {\r\n    chance = 95;\r\n  } else if (dif < -10) {\r\n    chance = (-10 - dif) * 5;\r\n  } else if (dif < -1) {\r\n    chance = 5;\r\n  } else {\r\n    chance = 0;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\n// combine the probability distributions of the given damages into context\r\nconst addDamage = (\r\n  context,\r\n  type,\r\n  material,\r\n  persistent,\r\n  staticDamage,\r\n  damageDist,\r\n  multiplier\r\n) => {\r\n  if (persistent) {\r\n    context = context.persistent;\r\n  } else {\r\n    context = context.normal;\r\n  }\r\n  [staticDamage, damageDist] = multiplyDist(\r\n    staticDamage,\r\n    damageDist,\r\n    multiplier\r\n  );\r\n  if (!(type in context)) {\r\n    context[type] = { material, staticDamage, damageDist };\r\n  } else {\r\n    context[type].staticDamage += staticDamage;\r\n    context[type].damageDist = convolve(context[type].damageDist, damageDist);\r\n    if (material !== materials.NONE) context[type].material = material;\r\n  }\r\n};\r\n\r\n/**\r\n * Calculate the chance of each result and the appropriate damage\r\n * distributions for a given activity at level vs target with targetState\r\n * adds defenseBonus or resistanceBonus to target if given\r\n * @param {Number} level\r\n * @param {*} activity\r\n * @param {*} damages\r\n * @param {*} target\r\n * @param {*} targetState\r\n * @param {*} weaknesses\r\n * @param {*} defenseBonus\r\n * @param {*} resistanceBonus\r\n * @returns [damageTrees, chances];\r\n */\r\nfunction calculateExpectedDamage(\r\n  level,\r\n  activity,\r\n  damages,\r\n  target,\r\n  targetState,\r\n  weaknesses,\r\n  defenseBonus,\r\n  resistanceBonus\r\n) {\r\n  /**\r\n   * Get the check bonus and DC\r\n   * Calculate the chance of each outcome\r\n   * Go through each damage and evaluate it, put damage types together\r\n   * Go through each damage type and apply weakness/resistance\r\n   * Return damage trees and chances\r\n   */\r\n  let bonus;\r\n  let DC;\r\n  let targetValue;\r\n  switch (activity.targetType) {\r\n    case defenses.AC:\r\n      targetValue = defaultACs[target.ACTrend];\r\n      break;\r\n    case defenses.FORT:\r\n      targetValue = defaultSaves[target.FortTrend];\r\n      break;\r\n    case defenses.REF:\r\n      targetValue = defaultSaves[target.RefTrend];\r\n      break;\r\n    case defenses.WILL:\r\n      targetValue = defaultSaves[target.WillTrend];\r\n      break;\r\n    case defenses.PER:\r\n      targetValue = defaultSaves[target.PerTrend];\r\n      break;\r\n\r\n    default:\r\n      targetValue = defaultACs[target.ACTrend];\r\n      break;\r\n  }\r\n\r\n  targetValue = targetValue[level + target.levelDiff];\r\n  switch (activity.type) {\r\n    case activityTypes.STRIKE:\r\n      bonus = profTrendValues[activity.profTrend][level];\r\n      bonus += statTrendValues[activity.statTrend][level];\r\n      bonus += itemTrendValues[activity.itemTrend][level];\r\n      bonus += activity.bonusAdjustments[level];\r\n      bonus += MAPvalues[activity.MAP];\r\n      DC = targetValue + defenseBonus - targetState.frightened;\r\n      if (activity.targetType === defenses.AC) {\r\n        if (target.flatfooted || targetState.flatfooted) DC -= 2;\r\n      } else {\r\n        DC += 10;\r\n      }\r\n      break;\r\n\r\n    case activityTypes.SAVE:\r\n      bonus = targetValue + defenseBonus - targetState.frightened;\r\n      DC = 10 + profTrendValues[activity.profTrend][level];\r\n      DC += statTrendValues[activity.statTrend][level];\r\n      DC += itemTrendValues[activity.itemTrend][level];\r\n      DC += activity.bonusAdjustments[level];\r\n      if (activity.targetType === defenses.AC) {\r\n        bonus -= 10;\r\n      }\r\n      break;\r\n\r\n    default:\r\n      console.log(`Activity type ${activity.type} not implemented`);\r\n  }\r\n\r\n  let critPercent = getCritSuccessPercent(bonus, DC);\r\n  let succPercent = getSuccessPercent(bonus, DC);\r\n  let failPercent = getFailurePercent(bonus, DC);\r\n  let crfaPercent = getCritFailurePercent(bonus, DC);\r\n  if (activity.rollType === rollTypes.ADVANTAGE) {\r\n    let notcrit = 100 - critPercent;\r\n    critPercent = 100 - (notcrit * notcrit) / 100;\r\n    let nothit = notcrit - succPercent;\r\n    succPercent = 100 - (nothit * nothit) / 100 - critPercent;\r\n    let notfail = nothit - failPercent;\r\n    failPercent = 100 - (notfail * notfail) / 100 - succPercent - critPercent;\r\n    crfaPercent = (crfaPercent * crfaPercent) / 100;\r\n  } else if (activity.rollType === rollTypes.DISADVANTAGE) {\r\n    let notcrfa = 100 - crfaPercent;\r\n    crfaPercent = 100 - (notcrfa * notcrfa) / 100;\r\n    let notfail = notcrfa - failPercent;\r\n    failPercent = 100 - (notfail * notfail) / 100 - crfaPercent;\r\n    let notsucc = notfail - succPercent;\r\n    succPercent = 100 - (notsucc * notsucc) / 100 - failPercent - crfaPercent;\r\n    critPercent = (critPercent * critPercent) / 100;\r\n  }\r\n  const chances = [\r\n    critPercent / 100,\r\n    succPercent / 100,\r\n    failPercent / 100,\r\n    crfaPercent / 100,\r\n  ];\r\n  const critDamages = { normal: {}, persistent: {} };\r\n  const succDamages = { normal: {}, persistent: {} };\r\n  const failDamages = { normal: {}, persistent: {} };\r\n  const crfaDamages = { normal: {}, persistent: {} };\r\n  const damageTrees = [critDamages, succDamages, failDamages, crfaDamages];\r\n\r\n  // Start going through each damage and evaluate it, put damage types together\r\n  damages.forEach((damage) => {\r\n    let {\r\n      damageCondition,\r\n      diceSize,\r\n      fatal,\r\n      fatalDie,\r\n\r\n      damageTrend,\r\n      damageType,\r\n      material,\r\n      persistent,\r\n      multiplier,\r\n    } = damage;\r\n\r\n    let diceNum = dieTrendValues[damage.dieTrend][level];\r\n    diceNum += damage.dieAdjustments[level];\r\n    if (diceNum < 0) diceNum = 0;\r\n    let staticDamage = 0;\r\n    for (let i = 0; i < damageTrend.length; i++) {\r\n      staticDamage += damageTrendValues[damageTrend[i]][level];\r\n    }\r\n    staticDamage += damage.damageAdjustments[level];\r\n    let damageDist = [1];\r\n    let fatalDist = [1];\r\n    let diceArray = [];\r\n    for (let i = 0; i < diceSize; i++) {\r\n      diceArray.push(1 / diceSize);\r\n    }\r\n    for (let i = 0; i < diceNum; i++) {\r\n      damageDist = convolve(damageDist, diceArray);\r\n    }\r\n    if (fatal) {\r\n      let diceArray = [];\r\n      for (let i = 0; i < fatalDie; i++) {\r\n        diceArray.push(1 / fatalDie);\r\n      }\r\n      for (let i = 0; i < diceNum; i++) {\r\n        fatalDist = convolve(fatalDist, diceArray);\r\n      }\r\n    }\r\n    staticDamage += diceNum;\r\n\r\n    // Add damage to damage trees appropriately\r\n    switch (damageCondition) {\r\n      case dCond.STRIKE:\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          critDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          fatal ? fatalDist : damageDist,\r\n          multiplier * 2\r\n        );\r\n        break;\r\n\r\n      case dCond.BASIC:\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 0.5\r\n        );\r\n        addDamage(\r\n          failDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          crfaDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 2\r\n        );\r\n        break;\r\n\r\n      case dCond.CRIF:\r\n        addDamage(\r\n          crfaDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.FAIL:\r\n        addDamage(\r\n          failDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.SUCC:\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.CRIT:\r\n        addDamage(\r\n          critDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.AT_LEAST_SUCC:\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          critDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.AT_LEAST_FAIL:\r\n        addDamage(\r\n          failDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          critDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.FAIL_WORSE:\r\n        addDamage(\r\n          crfaDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          failDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.SUCC_WORSE:\r\n        addDamage(\r\n          crfaDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          failDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n\r\n        break;\r\n\r\n      case dCond.ALWAYS:\r\n        addDamage(\r\n          crfaDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          failDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          critDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      default:\r\n        console.log(\r\n          `Damage condition ${damage.condition} not implemented yet.`\r\n        );\r\n    }\r\n  });\r\n  // end going through each damage and evaluate it, put damage types together\r\n\r\n  // Start going through each damage type and apply weakness/resistance\r\n  for (let damageTree of damageTrees) {\r\n    for (let damageQuality of [\"normal\", \"persistent\"]) {\r\n      let totalStaticDamage = 0;\r\n      let totalDamageDist = [1];\r\n      for (let type in damageTree[damageQuality]) {\r\n        let { material, staticDamage, damageDist } =\r\n          damageTree[damageQuality][type];\r\n\r\n        // ignore if there's 0 damage\r\n        if (damageDist.length === 1 && staticDamage <= 0) continue;\r\n\r\n        // make min damage 1 before resistances\r\n        [staticDamage, damageDist] = applyMin(staticDamage, damageDist, 1);\r\n\r\n        // find max weakness and resistance, weaknesses are negative numbers\r\n        let maxW = 0;\r\n        let maxR = 0;\r\n        weaknesses.forEach((weakness) => {\r\n          if (weakness.type === type || weakness.type === material) {\r\n            if (weakness.value + resistanceBonus < 0) {\r\n              maxW = Math.min(maxW, weakness.value + resistanceBonus);\r\n            } else if (weakness.value + resistanceBonus > 0) {\r\n              maxR = Math.max(maxR, weakness.value + resistanceBonus);\r\n            }\r\n          }\r\n        });\r\n        staticDamage = staticDamage - (maxR + maxW);\r\n\r\n        // make min damage 0 after resistances\r\n        [staticDamage, damageDist] = applyMin(staticDamage, damageDist, 0);\r\n\r\n        totalStaticDamage += staticDamage;\r\n        totalDamageDist = convolve(totalDamageDist, damageDist);\r\n      }\r\n      damageTree[damageQuality].staticDamage = totalStaticDamage;\r\n      damageTree[damageQuality].damageDist = totalDamageDist;\r\n    }\r\n  }\r\n  // End going through each damage type and apply weakness/resistance\r\n\r\n  return [damageTrees, chances];\r\n}\r\n\r\nexport { calculateExpectedDamage };\r\n","import { convolve, consolidateDists } from \"./Distribution\";\r\nimport { calculateExpectedDamage } from \"./Calculation\";\r\nimport { conditions, effectTypes } from \"../Model/types\";\r\n\r\n/**\r\n * Checks given degreeOfSuccess is in the condition\r\n * like Success is in Success or better\r\n * @param {*} condition\r\n * @param {*} degreeOfSuccess\r\n * @returns\r\n */\r\nfunction validateCondition(condition, degreeOfSuccess) {\r\n  let indicies = [];\r\n  // console.log(`cond is: ${ap.condition}`);\r\n  switch (condition) {\r\n    case conditions.ALWAYS:\r\n      indicies = [0, 1, 2, 3];\r\n      break;\r\n\r\n    case conditions.AT_LEAST_FAIL:\r\n      indicies = [0, 1, 2];\r\n      break;\r\n\r\n    case conditions.AT_LEAST_SUCC:\r\n      indicies = [0, 1];\r\n      break;\r\n\r\n    case conditions.CRIF:\r\n      indicies = [3];\r\n      break;\r\n\r\n    case conditions.CRIT:\r\n      indicies = [0];\r\n      break;\r\n\r\n    case conditions.FAIL:\r\n      indicies = [2];\r\n      break;\r\n\r\n    case conditions.FAIL_WORSE:\r\n      indicies = [2, 3];\r\n      break;\r\n\r\n    case conditions.SUCC:\r\n      indicies = [1];\r\n      break;\r\n\r\n    case conditions.SUCC_WORSE:\r\n      indicies = [1, 2, 3];\r\n      break;\r\n\r\n    default:\r\n  }\r\n  return indicies.includes(degreeOfSuccess);\r\n}\r\n\r\nclass ActivityPathEvaluator {\r\n  constructor(activityPaths, targets, damages, effects, weaknesses) {\r\n    this.activityPaths = activityPaths;\r\n    this.targets = targets;\r\n    this.damages = damages;\r\n    this.effects = effects;\r\n    this.weaknesses = weaknesses;\r\n  }\r\n\r\n  canEvaluate(level, routine) {\r\n    const levelDiff = this.targets[0].levelDiff;\r\n    // console.log(`level ${level}, levelDiff ${levelDiff}`);\r\n    if (level < routine.startLevel || level > routine.endLevel) return false;\r\n    if (level + levelDiff < -1 || level + levelDiff > 24) return false;\r\n    return true;\r\n  }\r\n\r\n  evalRoutine(routine, level, ACBonus, resBonus) {\r\n    const initialTargetState = {\r\n      flatfooted: false,\r\n      frightened: 0,\r\n    };\r\n    const dataArray = [];\r\n    const cumulative = [];\r\n    const PdataArray = [];\r\n    const Pcumulative = [];\r\n\r\n    let expD = 0;\r\n    let expP = 0;\r\n    let routineDDist = [1];\r\n    let routinePDDist = [1];\r\n    for (let i = 0; i < routine.apIds.length; i++) {\r\n      let activityPath = this.activityPaths[routine.apIds[i]];\r\n      let [damageDist, PdamageDist] = this.evalPath(\r\n        activityPath,\r\n        initialTargetState,\r\n        level,\r\n        ACBonus,\r\n        resBonus\r\n      );\r\n      routineDDist = convolve(routineDDist, damageDist);\r\n      routinePDDist = convolve(routinePDDist, PdamageDist);\r\n    }\r\n    let currentSum = 1;\r\n    for (let i = 0; i < routineDDist.length; i++) {\r\n      dataArray.push(i);\r\n      cumulative.push(currentSum);\r\n      currentSum -= routineDDist[i];\r\n\r\n      expD += routineDDist[i] * i;\r\n    }\r\n    currentSum = 1;\r\n    for (let i = 0; i < routinePDDist.length; i++) {\r\n      PdataArray.push(i);\r\n      Pcumulative.push(currentSum);\r\n      currentSum -= routinePDDist[i];\r\n\r\n      expP += routinePDDist[i] * i;\r\n    }\r\n    return {\r\n      expD,\r\n      expP,\r\n      dataArray,\r\n      routineDDist,\r\n      cumulative,\r\n      PdataArray,\r\n      routinePDDist,\r\n      Pcumulative,\r\n    };\r\n  }\r\n\r\n  evalPath(activityPath, targetState, level, defenseBonus, resistanceBonus) {\r\n    // evaluate this and all following APs\r\n    let currentTarget = this.targets[0];\r\n    let currentDamages = activityPath.damages.map(\r\n      (damageId) => this.damages[damageId]\r\n    );\r\n    //currentDamages.push(activityPath);\r\n    let currentEffects = activityPath.effects.map(\r\n      (effectId) => this.effects[effectId]\r\n    );\r\n    let currentWeaknesses = currentTarget.weaknesses.map(\r\n      (weaknessId) => this.weaknesses[weaknessId]\r\n    );\r\n\r\n    // calculate the expected damage for this activity\r\n    let [damageTrees, chances] = calculateExpectedDamage(\r\n      level,\r\n      activityPath,\r\n      currentDamages,\r\n      currentTarget,\r\n      targetState,\r\n      currentWeaknesses,\r\n      defenseBonus,\r\n      resistanceBonus\r\n    );\r\n\r\n    const targetStates = [targetState, targetState, targetState, targetState];\r\n    // go through each degree of success\r\n    for (let i = 0; i < 4; i++) {\r\n      // go though each effect and update targetStates\r\n      currentEffects.forEach((effect) => {\r\n        let { effectCondition, effectType, startLevel, endLevel } = effect;\r\n        if (level < startLevel || level > endLevel) return;\r\n        if (validateCondition(effectCondition, i)) {\r\n          switch (effectType) {\r\n            case effectTypes.FLATFOOT:\r\n              if (targetStates[i].flatfooted !== true)\r\n                targetStates[i] = { ...targetStates[i], flatfooted: true };\r\n              break;\r\n\r\n            case effectTypes.FRIGHTENED1:\r\n              if (targetStates[i].frightened < 1)\r\n                targetStates[i] = {\r\n                  ...targetStates[i],\r\n                  frightened: 1,\r\n                };\r\n              break;\r\n            case effectTypes.FRIGHTENED2:\r\n              if (targetStates[i].frightened < 2)\r\n                targetStates[i] = {\r\n                  ...targetStates[i],\r\n                  frightened: 2,\r\n                };\r\n              break;\r\n            case effectTypes.FRIGHTENED3:\r\n              if (targetStates[i].frightened < 3)\r\n                targetStates[i] = {\r\n                  ...targetStates[i],\r\n                  frightened: 3,\r\n                };\r\n              break;\r\n            case effectTypes.FRIGHTENED4:\r\n              if (targetStates[i].frightened < 4)\r\n                targetStates[i] = {\r\n                  ...targetStates[i],\r\n                  frightened: 4,\r\n                };\r\n              break;\r\n\r\n            default:\r\n              console.log(`Effect type ${effectType} not implemented`);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // go through each activity path, depending on its condition add its damage distributions to this activities appropriately\r\n    activityPath.apIds.forEach((apId) => {\r\n      let ap = this.activityPaths[apId];\r\n\r\n      const evaluations = new Map();\r\n      // go through each degree of success\r\n      for (let i = 0; i < 4; i++) {\r\n        // evaluate if necessary and add distribution to damageTrees\r\n        if (validateCondition(ap.condition, i)) {\r\n          if (evaluations.has(targetStates[i])) {\r\n            // already evaluated\r\n          } else {\r\n            let [pathDist, pathPDist] = this.evalPath(\r\n              ap,\r\n              targetStates[i],\r\n              level,\r\n              defenseBonus,\r\n              resistanceBonus\r\n            );\r\n            evaluations.set(targetStates[i], { pathDist, pathPDist });\r\n          }\r\n\r\n          damageTrees[i].normal.damageDist = convolve(\r\n            damageTrees[i].normal.damageDist,\r\n            evaluations.get(targetStates[i]).pathDist\r\n          );\r\n          damageTrees[i].persistent.damageDist = convolve(\r\n            damageTrees[i].persistent.damageDist,\r\n            evaluations.get(targetStates[i]).pathPDist\r\n          );\r\n        }\r\n      }\r\n    });\r\n\r\n    let damageDist = consolidateDists(\r\n      [damageTrees[0].normal, chances[0]],\r\n      [damageTrees[1].normal, chances[1]],\r\n      [damageTrees[2].normal, chances[2]],\r\n      [damageTrees[3].normal, chances[3]]\r\n    );\r\n    let PdamageDist = consolidateDists(\r\n      [damageTrees[0].persistent, chances[0]],\r\n      [damageTrees[1].persistent, chances[1]],\r\n      [damageTrees[2].persistent, chances[2]],\r\n      [damageTrees[3].persistent, chances[3]]\r\n    );\r\n    // console.log(damageDist);\r\n\r\n    return [damageDist, PdamageDist];\r\n  }\r\n}\r\n\r\nconst evaluateRoutine = (evaluator, routine) => {};\r\nexport { ActivityPathEvaluator, evaluateRoutine };\r\n","import React from \"react\";\r\n\r\nimport {\r\n  activityTypes,\r\n  profTrends,\r\n  conditions,\r\n  damageTrends,\r\n  damageTypes,\r\n  dCond,\r\n  defenses,\r\n  diceSizes,\r\n  dieTrends,\r\n  effectTypes,\r\n  MAPs,\r\n  materials,\r\n  rollTypes,\r\n  statTrends,\r\n  itemTrends,\r\n} from \"../Model/types\";\r\n\r\nexport const levelOptions = [];\r\nfor (let level = 1; level <= 20; level++) {\r\n  levelOptions.push(<option key={level}>{level}</option>);\r\n}\r\n\r\nexport const conditionOptions = [];\r\nfor (let c in conditions) {\r\n  conditionOptions.push(<option key={c}>{conditions[c]}</option>);\r\n}\r\n\r\nexport const rollOptions = [];\r\nfor (let rt in rollTypes) {\r\n  rollOptions.push(<option key={rt}>{rollTypes[rt]}</option>);\r\n}\r\n\r\nexport const activityTypeOptions = [];\r\nfor (let at in activityTypes) {\r\n  activityTypeOptions.push(<option key={at}>{activityTypes[at]}</option>);\r\n}\r\n\r\nexport const profTrendOptions = [];\r\nfor (let bt in profTrends) {\r\n  profTrendOptions.push(<option key={bt}>{profTrends[bt]}</option>);\r\n}\r\nexport const statTrendOptions = [];\r\nfor (let bt in statTrends) {\r\n  statTrendOptions.push(<option key={bt}>{statTrends[bt]}</option>);\r\n}\r\nexport const itemBTrendOptions = [];\r\nfor (let bt in itemTrends) {\r\n  itemBTrendOptions.push(<option key={bt}>{itemTrends[bt]}</option>);\r\n}\r\n\r\nexport const MAPOptions = [];\r\nfor (let m in MAPs) {\r\n  MAPOptions.push(<option key={m}>{MAPs[m]}</option>);\r\n}\r\nexport const defenseOptions = [];\r\nfor (let d in defenses) {\r\n  defenseOptions.push(<option key={d}>{defenses[d]}</option>);\r\n}\r\n\r\nexport const damageConditionOptions = [];\r\nfor (let dc in dCond) {\r\n  damageConditionOptions.push(<option key={dc}>{dCond[dc]}</option>);\r\n}\r\nexport const dieTrendOptions = [];\r\nfor (let dt in dieTrends) {\r\n  dieTrendOptions.push(<option key={dt}>{dieTrends[dt]}</option>);\r\n}\r\nexport const diceSizeOptions = [];\r\nfor (let ds in diceSizes) {\r\n  diceSizeOptions.push(<option key={ds}>{ds}</option>);\r\n}\r\nexport const damageTrendOptions = [];\r\nfor (let dt in damageTrends) {\r\n  damageTrendOptions.push(<option key={dt}>{damageTrends[dt]}</option>);\r\n}\r\nexport const damageTypeOptions = [];\r\nfor (let dt in damageTypes) {\r\n  damageTypeOptions.push(<option key={dt}>{damageTypes[dt]}</option>);\r\n}\r\nexport const materialOptions = [];\r\nfor (let m in materials) {\r\n  materialOptions.push(<option key={m}>{materials[m]}</option>);\r\n}\r\nexport const multiplierOptions = [];\r\nfor (let m of [0.5, 1, 2]) {\r\n  multiplierOptions.push(<option key={m}>{m}</option>);\r\n}\r\n\r\nexport const effectTypeOptions = [];\r\nfor (let et in effectTypes) {\r\n  effectTypeOptions.push(<option key={et}>{effectTypes[et]}</option>);\r\n}\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectactivityPathEntities } from \"../Routines/routineSlice\";\r\nimport { selectdamageEntities } from \"../Routines/routineSlice\";\r\nimport { selectRoutineEntities } from \"../Routines/routineSlice\";\r\nimport { selecttargetEntities } from \"../Target/targetSlice\";\r\nimport { selectweaknessEntities } from \"../Target/weaknessSlice\";\r\nimport { graphTypes } from \"../Model/types\";\r\nimport { selecteffectEntities } from \"../Routines/routineSlice\";\r\n\r\nimport { ActivityPathEvaluator } from \"../Calculation/EvaluateActivityPath\";\r\n\r\nimport Plotly from \"plotly.js-basic-dist\";\r\nimport createPlotlyComponent from \"react-plotly.js/factory\";\r\nimport { defaultACs, defaultSaves } from \"../Model/defaults\";\r\nconst Plot = createPlotlyComponent(Plotly);\r\n\r\nconst useGenerateGraphs = (graphType, displayLevel) => {\r\n  const routines = useSelector(selectRoutineEntities);\r\n  const activityPaths = useSelector(selectactivityPathEntities);\r\n  const targets = useSelector(selecttargetEntities);\r\n  const damages = useSelector(selectdamageEntities);\r\n  const effects = useSelector(selecteffectEntities);\r\n  const weaknesses = useSelector(selectweaknessEntities);\r\n\r\n  const evaluator = new ActivityPathEvaluator(\r\n    activityPaths,\r\n    targets,\r\n    damages,\r\n    effects,\r\n    weaknesses\r\n  );\r\n\r\n  const currentTarget = targets[0];\r\n  let title = \"@\" + displayLevel;\r\n  let byLevelTile = currentTarget.name;\r\n\r\n  title += \" Vs \";\r\n  title += \" AC: \" + defaultACs[currentTarget.ACTrend][displayLevel];\r\n  title += \" Fort: \" + defaultSaves[currentTarget.FortTrend][displayLevel];\r\n  title += \" Ref: \" + defaultSaves[currentTarget.RefTrend][displayLevel];\r\n  title += \" Will: \" + defaultSaves[currentTarget.WillTrend][displayLevel];\r\n  title += \" Per: \" + defaultSaves[currentTarget.PerTrend][displayLevel];\r\n\r\n  // byLevelTile += \" Vs \";\r\n  // byLevelTile += \" AC: \" + currentTarget.ACTrend;\r\n  // byLevelTile += \" Fort: \" + currentTarget.FortTrend;\r\n  // byLevelTile += \" Ref: \" + currentTarget.RefTrend;\r\n  // byLevelTile += \" Will: \" + currentTarget.WillTrend;\r\n  // byLevelTile += \" Per: \" + currentTarget.PerTrend;\r\n\r\n  let datasets;\r\n  let perDatasets;\r\n  let expectedDamages;\r\n  let expectedPersistentDamages;\r\n  switch (graphType) {\r\n    case graphTypes.DISTRIBUTION:\r\n      ({ expectedDamages, expectedPersistentDamages, datasets, perDatasets } =\r\n        evaluateDistribution(routines, evaluator, displayLevel));\r\n      break;\r\n    case graphTypes.PMDEFENSE:\r\n      ({ expectedDamages, expectedPersistentDamages, datasets, perDatasets } =\r\n        evaluatePM(routines, evaluator, displayLevel, true));\r\n      break;\r\n    case graphTypes.PMRES:\r\n      ({ expectedDamages, expectedPersistentDamages, datasets, perDatasets } =\r\n        evaluatePM(routines, evaluator, displayLevel, false));\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  let { datasets: byLeveldatasets, perDatasets: byLevelperDatasets } =\r\n    evaluateByLevel(routines, evaluator);\r\n\r\n  let xtitle;\r\n  let ytitle;\r\n  if (graphType === graphTypes.DISTRIBUTION) {\r\n    xtitle = \"damage\";\r\n    ytitle = \"chance\";\r\n  } else if (graphType === graphTypes.PMDEFENSE) {\r\n    xtitle = \"+/- AC/Save Bonus\";\r\n    ytitle = \"Expected Damage\";\r\n  } else if (graphType === graphTypes.PMRES) {\r\n    xtitle = \"+/- Resistance/Weakness\";\r\n    ytitle = \"Expected Damage\";\r\n  }\r\n\r\n  let damageChart = (\r\n    <Plot\r\n      classname=\"plot\"\r\n      data={datasets}\r\n      layout={{\r\n        title: title,\r\n        autosize: true,\r\n        xaxis: { title: xtitle },\r\n        yaxis: { title: ytitle },\r\n        legend: {\r\n          x: 1,\r\n          y: 1,\r\n          xanchor: \"right\",\r\n        },\r\n        margin: {\r\n          l: 40,\r\n          r: 40,\r\n        },\r\n      }}\r\n      useResizeHandler={true}\r\n      style={{ width: \"100%\", height: \"100%\" }}\r\n    />\r\n  );\r\n  let persistentDamageChart = (\r\n    <Plot\r\n      classname=\"plot\"\r\n      data={perDatasets}\r\n      layout={{\r\n        title: \"Expected Persistent Damage\",\r\n        autosize: true,\r\n        xaxis: { title: \"persistent damage\" },\r\n        yaxis: { title: \"chance\" },\r\n        legend: {\r\n          x: 1,\r\n          y: 1,\r\n          xanchor: \"right\",\r\n        },\r\n        margin: {\r\n          l: 40,\r\n          r: 40,\r\n        },\r\n      }}\r\n      useResizeHandler={true}\r\n      style={{ width: \"100%\", height: \"100%\" }}\r\n    />\r\n  );\r\n  let byLevelDamageChart = (\r\n    <Plot\r\n      classname=\"plot\"\r\n      data={byLeveldatasets}\r\n      layout={{\r\n        title: byLevelTile,\r\n        autosize: true,\r\n        xaxis: { title: \"Level\" },\r\n        yaxis: { title: \"Expected Damage\" },\r\n        legend: {\r\n          x: 0,\r\n          y: 1,\r\n          xanchor: \"left\",\r\n        },\r\n        margin: {\r\n          l: 40,\r\n          r: 40,\r\n        },\r\n      }}\r\n      useResizeHandler={true}\r\n      style={{ width: \"100%\", height: \"100%\" }}\r\n    />\r\n  );\r\n  let byLevelPerDamageChart = (\r\n    <Plot\r\n      classname=\"plot\"\r\n      data={byLevelperDatasets}\r\n      layout={{\r\n        title: byLevelTile,\r\n        autosize: true,\r\n        xaxis: { title: \"Level\" },\r\n        yaxis: { title: \"Expected Persistent Damage\" },\r\n        legend: {\r\n          x: 1,\r\n          y: 1,\r\n          xanchor: \"right\",\r\n        },\r\n        margin: {\r\n          l: 40,\r\n          r: 40,\r\n        },\r\n      }}\r\n      useResizeHandler={true}\r\n      style={{ width: \"100%\", height: \"100%\" }}\r\n    />\r\n  );\r\n  return {\r\n    expectedDamages,\r\n    expectedPersistentDamages,\r\n    damageChart,\r\n    persistentDamageChart,\r\n    byLevelDamageChart,\r\n    byLevelPerDamageChart,\r\n  };\r\n};\r\n\r\nconst evaluateByLevel = (routines, evaluator) => {\r\n  let datasets = [];\r\n  let perDatasets = [];\r\n\r\n  for (let id in routines) {\r\n    let routine = routines[id];\r\n    if (!routine.display) continue;\r\n\r\n    const levelArray = [];\r\n    const expDbyLevel = [];\r\n    const expPDbyLevel = [];\r\n    for (let level = 1; level <= 20; level++) {\r\n      if (!evaluator.canEvaluate(level, routine)) continue;\r\n      levelArray.push(level);\r\n      let { expD, expP } = evaluator.evalRoutine(routine, level, 0, 0);\r\n      expDbyLevel.push(expD);\r\n      expPDbyLevel.push(expP);\r\n    }\r\n    datasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: levelArray,\r\n      y: expDbyLevel,\r\n      yaxis: \"y\",\r\n    });\r\n    perDatasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: levelArray,\r\n      y: expPDbyLevel,\r\n      yaxis: \"y\",\r\n    });\r\n  }\r\n\r\n  return { datasets, perDatasets };\r\n};\r\n\r\nconst evaluatePM = (routines, evaluator, displayLevel, defense = true) => {\r\n  let datasets = [];\r\n  let perDatasets = [];\r\n  let expectedDamages = [];\r\n  let expectedPersistentDamages = [];\r\n\r\n  // return {\r\n  //   expectedDamages,\r\n  //   expectedPersistentDamages,\r\n  //   datasets,\r\n  //   perDatasets,\r\n  // };\r\n\r\n  for (let id in routines) {\r\n    let routine = routines[id];\r\n    if (!routine.display) continue;\r\n    if (!evaluator.canEvaluate(displayLevel, routine)) continue;\r\n\r\n    const bonusArray = [];\r\n    const expDbyBonus = [];\r\n    const expPDbyBonus = [];\r\n\r\n    for (let bonus = -5; bonus <= 5; bonus++) {\r\n      bonusArray.push(bonus);\r\n      let { expD, expP } = evaluator.evalRoutine(\r\n        routine,\r\n        displayLevel,\r\n        defense ? bonus : 0,\r\n        defense ? 0 : bonus\r\n      );\r\n\r\n      if (bonus === 0) {\r\n        expectedDamages.push(\r\n          <div key={routine.id}>\r\n            {routine.name}\r\n            {\": \"}\r\n            {expD.toFixed(2)}\r\n          </div>\r\n        );\r\n        expectedPersistentDamages.push(\r\n          <div key={routine.id}>\r\n            {routine.name}\r\n            {\": \"}\r\n            {expP.toFixed(2)}\r\n          </div>\r\n        );\r\n      }\r\n\r\n      expDbyBonus.push(expD);\r\n      expPDbyBonus.push(expP);\r\n    }\r\n\r\n    datasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: bonusArray,\r\n      y: expDbyBonus,\r\n      yaxis: \"y\",\r\n    });\r\n    perDatasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: bonusArray,\r\n      y: expPDbyBonus,\r\n      yaxis: \"y\",\r\n    });\r\n  }\r\n  return { expectedDamages, expectedPersistentDamages, datasets, perDatasets };\r\n};\r\n\r\nconst evaluateDistribution = (routines, evaluator, displayLevel) => {\r\n  let datasets = [];\r\n  let perDatasets = [];\r\n  let expectedDamages = [];\r\n  let expectedPersistentDamages = [];\r\n\r\n  // if (!evaluator.canEvaluate(displayLevel))\r\n  //   return {\r\n  //     expectedDamages,\r\n  //     expectedPersistentDamages,\r\n  //     datasets,\r\n  //     perDatasets,\r\n  //   };\r\n\r\n  for (let id in routines) {\r\n    let routine = routines[id];\r\n    if (!routine.display) continue;\r\n    if (!evaluator.canEvaluate(displayLevel, routine)) continue;\r\n    let {\r\n      expD,\r\n      expP,\r\n      dataArray,\r\n      routineDDist,\r\n      cumulative,\r\n      PdataArray,\r\n      routinePDDist,\r\n      Pcumulative,\r\n    } = evaluator.evalRoutine(routine, displayLevel, 0, 0);\r\n    expectedDamages.push(\r\n      <div key={routine.id}>\r\n        {routine.name}\r\n        {\": \"}\r\n        {expD.toFixed(2)}\r\n      </div>\r\n    );\r\n    expectedPersistentDamages.push(\r\n      <div key={routine.id}>\r\n        {routine.name}\r\n        {\": \"}\r\n        {expP.toFixed(2)}\r\n      </div>\r\n    );\r\n    datasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: dataArray,\r\n      y: cumulative,\r\n      yaxis: \"y\",\r\n    });\r\n    datasets.push({\r\n      type: \"bar\",\r\n      name: expD.toFixed(2),\r\n      x: dataArray,\r\n      y: routineDDist,\r\n    });\r\n    perDatasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: PdataArray,\r\n      y: Pcumulative,\r\n    });\r\n    perDatasets.push({\r\n      type: \"bar\",\r\n      name: expP.toFixed(2),\r\n      x: PdataArray,\r\n      y: routinePDDist,\r\n    });\r\n  }\r\n  return { expectedDamages, expectedPersistentDamages, datasets, perDatasets };\r\n};\r\n\r\nexport default useGenerateGraphs;\r\n","import React, { useState } from \"react\";\r\nimport { graphTypes } from \"../Model/types\";\r\n\r\nimport useGenerateGraphs from \"./useGenerateGraphs\";\r\n\r\nconst Display = () => {\r\n  // evaluates routines and displays appropriate graphs\r\n\r\n  const [addPersistent, setAddPersistent] = useState(false);\r\n  const [graphType, setGraphType] = useState(graphTypes.DISTRIBUTION);\r\n  const [displayLevel, setDisplayLevel] = useState(1);\r\n  const {\r\n    expectedDamages,\r\n    expectedPersistentDamages,\r\n    damageChart,\r\n    persistentDamageChart,\r\n    byLevelDamageChart,\r\n    byLevelPerDamageChart,\r\n  } = useGenerateGraphs(graphType, displayLevel);\r\n  // const [perMulti, setPerMulti] = useState(2);\r\n\r\n  const graphTypeOptions = [];\r\n  for (let gt in graphTypes) {\r\n    graphTypeOptions.push(<option key={gt}>{graphTypes[gt]}</option>);\r\n  }\r\n  const displayLevelOptions = [];\r\n  for (let i = 1; i <= 20; i++) {\r\n    displayLevelOptions.push(\r\n      <option key={i} value={i}>\r\n        {i}\r\n      </option>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      {\"Graph Type: \"}\r\n      <select value={graphType} onChange={(e) => setGraphType(e.target.value)}>\r\n        {graphTypeOptions}\r\n      </select>\r\n      {graphType === graphTypes.BYLEVEL ? (\r\n        \"\"\r\n      ) : (\r\n        <select\r\n          value={displayLevel}\r\n          onChange={(e) => setDisplayLevel(parseInt(e.target.value))}\r\n        >\r\n          {displayLevelOptions}\r\n        </select>\r\n      )}\r\n      {\" Show persistent damage: \"}\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={addPersistent}\r\n        onChange={(e) => setAddPersistent(e.target.checked)}\r\n      />\r\n      {/* , persistent damage multiplier:\r\n      <input\r\n        type=\"number\"\r\n        value={perMulti ? perMulti : 0}\r\n        onChange={(e) => setPerMulti(e.target.valueAsNumber)}\r\n      /> */}\r\n      <div>\r\n        Expected Damage:\r\n        {expectedDamages}\r\n      </div>\r\n      {damageChart}\r\n      {byLevelDamageChart}\r\n      {!addPersistent ? (\r\n        \"\"\r\n      ) : (\r\n        <div>\r\n          <div>\r\n            Expected Persistent Damage:\r\n            {expectedPersistentDamages}\r\n          </div>\r\n          {persistentDamageChart}\r\n          {byLevelPerDamageChart}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Display;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { levelOptions } from \"../Model/options\";\r\n\r\nexport const generateEntries = (adjustments) => {\r\n  let currentValue = 0;\r\n  const entries = [];\r\n  for (let level = 1; level <= 20; level++) {\r\n    if (currentValue !== adjustments[level]) {\r\n      currentValue = adjustments[level];\r\n      entries.push([level, currentValue]);\r\n    }\r\n  }\r\n  return entries;\r\n};\r\n\r\nconst generateAdjustments = (entries) => {\r\n  const adjustments = {};\r\n  let currentValue = 0;\r\n  let currentIndex = 0;\r\n  // console.log(entries);\r\n  for (let level = 1; level <= 20; level++) {\r\n    if (entries[currentIndex] && entries[currentIndex][0] === level) {\r\n      // console.log(\"here\");\r\n      currentValue = parseInt(entries[currentIndex][1]);\r\n      if (!currentValue) currentValue = 0;\r\n      currentIndex++;\r\n    }\r\n    adjustments[level] = currentValue;\r\n  }\r\n  return adjustments;\r\n};\r\n\r\nexport const adjustmentsFromLevelChange = (entries, index, newLevel) => {\r\n  entries[index] = [newLevel, entries[index][1]];\r\n  entries.sort((a, b) => a[0] - b[0]);\r\n  return generateAdjustments(entries);\r\n};\r\n\r\nexport const adjustmentsFromValueChange = (entries, index, newValue) => {\r\n  entries[index] = [entries[index][0], newValue];\r\n  return generateAdjustments(entries);\r\n};\r\n\r\nexport const adjustmentsFromNewEntry = (entries) => {\r\n  let lastValue = entries.length > 0 ? entries[entries.length - 1] : [0, 0];\r\n  entries.push([lastValue[0] + 1, lastValue[1] + 1]);\r\n  return generateAdjustments(entries);\r\n};\r\n\r\nexport const LevelList = (name, dispatch, action, id, adjustments) => {\r\n  const baseEntries = generateEntries(adjustments);\r\n  let [entries, setEntries] = useState(baseEntries);\r\n  let be = JSON.stringify(baseEntries);\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  useEffect(() => setEntries(baseEntries), [be]);\r\n  let levelList = [];\r\n\r\n  for (let i = 0; i < entries.length; i++) {\r\n    levelList.push(\r\n      <span className=\"input\" key={i}>\r\n        @\r\n        <select\r\n          value={entries[i][0]}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              action({\r\n                id,\r\n                changes: {\r\n                  [name]: adjustmentsFromLevelChange(\r\n                    entries,\r\n                    i,\r\n                    parseInt(e.target.value)\r\n                  ),\r\n                },\r\n              })\r\n            )\r\n          }\r\n        >\r\n          {levelOptions}\r\n        </select>\r\n        +\r\n        <input\r\n          type=\"number\"\r\n          value={entries[i][1]}\r\n          onChange={(e) => {\r\n            let newEntries = entries.slice();\r\n            newEntries[i][1] = e.target.value;\r\n            setEntries(newEntries);\r\n            e.target.focus();\r\n          }}\r\n          onBlur={(e) =>\r\n            dispatch(\r\n              action({\r\n                id,\r\n                changes: {\r\n                  [name]: generateAdjustments(entries),\r\n                },\r\n              })\r\n            )\r\n          }\r\n        />\r\n      </span>\r\n    );\r\n  }\r\n  levelList.push(\r\n    <button\r\n      key=\"addButton\"\r\n      className=\"add\"\r\n      onClick={() =>\r\n        dispatch(\r\n          action({\r\n            id,\r\n            changes: {\r\n              [name]: adjustmentsFromNewEntry(entries),\r\n            },\r\n          })\r\n        )\r\n      }\r\n    >\r\n      +\r\n    </button>\r\n  );\r\n  return levelList;\r\n};\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { LevelList } from \"./LevelList\";\r\nimport { damageRemoved, damageUpdated, selectdamageById } from \"./routineSlice\";\r\nimport {\r\n  damageConditionOptions,\r\n  damageTrendOptions,\r\n  damageTypeOptions,\r\n  diceSizeOptions,\r\n  dieTrendOptions,\r\n  materialOptions,\r\n  multiplierOptions,\r\n} from \"../Model/options\";\r\nimport { damageTrends } from \"../Model/types\";\r\n\r\nexport const Damage = ({ parentId, id }) => {\r\n  const {\r\n    damageCondition,\r\n    damageType,\r\n    material,\r\n    persistent,\r\n    multiplier,\r\n\r\n    dieTrend,\r\n    dieAdjustments,\r\n    diceSize,\r\n    fatal,\r\n    fatalDie,\r\n    damageTrend,\r\n    damageAdjustments,\r\n  } = useSelector((state) => selectdamageById(state, id));\r\n  const dispatch = useDispatch();\r\n\r\n  const dieLevelList = LevelList(\r\n    \"dieAdjustments\",\r\n    dispatch,\r\n    damageUpdated,\r\n    id,\r\n    dieAdjustments\r\n  );\r\n\r\n  const damageLevelList = LevelList(\r\n    \"damageAdjustments\",\r\n    dispatch,\r\n    damageUpdated,\r\n    id,\r\n    damageAdjustments\r\n  );\r\n\r\n  const damageTrendList = damageTrend.map((dt, index) => {\r\n    return (\r\n      <select\r\n        key={index} // no stable id\r\n        value={dt}\r\n        onChange={(e) => {\r\n          let newdt = damageTrend.slice();\r\n          if (e.target.value === damageTrends.NONE) {\r\n            newdt.splice(index, 1);\r\n          } else {\r\n            newdt[index] = e.target.value;\r\n          }\r\n          dispatch(\r\n            damageUpdated({\r\n              id,\r\n              changes: { damageTrend: newdt },\r\n            })\r\n          );\r\n        }}\r\n      >\r\n        {damageTrendOptions}\r\n      </select>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      <button\r\n        className=\"delete\"\r\n        onClick={(e) => {\r\n          dispatch(damageRemoved({ id, parentId }));\r\n        }}\r\n      >\r\n        -\r\n      </button>\r\n      <select\r\n        value={damageCondition}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            damageUpdated({ id, changes: { damageCondition: e.target.value } })\r\n          )\r\n        }\r\n      >\r\n        {damageConditionOptions}\r\n      </select>\r\n      {\": \"}\r\n      <div>\r\n        <span className=\"input\">\r\n          {\"Dice: (\"}\r\n          <select\r\n            value={dieTrend}\r\n            onChange={(e) =>\r\n              dispatch(\r\n                damageUpdated({\r\n                  id,\r\n                  changes: { dieTrend: e.target.value },\r\n                })\r\n              )\r\n            }\r\n          >\r\n            {dieTrendOptions}\r\n          </select>\r\n          +{dieLevelList})\r\n        </span>\r\n        <span className=\"input\">\r\n          {\" d\"}\r\n          <select\r\n            value={diceSize}\r\n            onChange={(e) =>\r\n              dispatch(\r\n                damageUpdated({\r\n                  id,\r\n                  changes: { diceSize: parseInt(e.target.value) },\r\n                })\r\n              )\r\n            }\r\n          >\r\n            {diceSizeOptions}\r\n          </select>\r\n        </span>\r\n        <span className=\"input\">\r\n          {\" Fatal \"}\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={fatal}\r\n            onChange={(e) =>\r\n              dispatch(\r\n                damageUpdated({\r\n                  id,\r\n                  changes: { fatal: e.target.checked },\r\n                })\r\n              )\r\n            }\r\n          />\r\n          {fatal ? (\r\n            <select\r\n              value={fatalDie}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  damageUpdated({\r\n                    id,\r\n                    changes: { fatalDie: parseInt(e.target.value) },\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              {diceSizeOptions}\r\n            </select>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </span>\r\n        <div>\r\n          <span className=\"input\">\r\n            {\"Static: (\"}\r\n            {damageTrendList}\r\n            <button\r\n              key=\"addButton\"\r\n              className=\"add\"\r\n              onClick={() => {\r\n                let newdt = damageTrend.slice();\r\n                newdt.push(damageTrends.NONE);\r\n                dispatch(\r\n                  damageUpdated({\r\n                    id,\r\n                    changes: {\r\n                      damageTrend: newdt,\r\n                    },\r\n                  })\r\n                );\r\n              }}\r\n            >\r\n              +\r\n            </button>\r\n            +{damageLevelList})\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <span className=\"input\">\r\n        {\" Type: \"}\r\n        <select\r\n          value={damageType}\r\n          onChange={(e) => {\r\n            dispatch(\r\n              damageUpdated({ id, changes: { damageType: e.target.value } })\r\n            );\r\n          }}\r\n        >\r\n          {damageTypeOptions}\r\n        </select>\r\n        <select\r\n          value={material}\r\n          onChange={(e) => {\r\n            dispatch(\r\n              damageUpdated({ id, changes: { material: e.target.value } })\r\n            );\r\n          }}\r\n        >\r\n          {materialOptions}\r\n        </select>\r\n      </span>\r\n      <span className=\"input\">\r\n        {\" Persistent: \"}\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={persistent}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              damageUpdated({\r\n                id,\r\n                changes: { persistent: e.target.checked },\r\n              })\r\n            )\r\n          }\r\n        />\r\n      </span>{\" \"}\r\n      <span className=\"input\">\r\n        {\" x \"}\r\n        <select\r\n          value={multiplier}\r\n          onChange={(e) => {\r\n            dispatch(\r\n              damageUpdated({\r\n                id,\r\n                changes: { multiplier: parseFloat(e.target.value) },\r\n              })\r\n            );\r\n          }}\r\n        >\r\n          {multiplierOptions}\r\n        </select>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  conditionOptions,\r\n  effectTypeOptions,\r\n  levelOptions,\r\n} from \"../Model/options\";\r\nimport { effectRemoved, effectUpdated, selecteffectById } from \"./routineSlice\";\r\n\r\nexport const Effect = ({ parentId, id }) => {\r\n  const { effectCondition, effectType, startLevel, endLevel } = useSelector(\r\n    (state) => selecteffectById(state, id)\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      <button\r\n        className=\"delete\"\r\n        onClick={(e) => {\r\n          dispatch(effectRemoved({ id, parentId }));\r\n        }}\r\n      >\r\n        -\r\n      </button>\r\n      <select\r\n        value={effectCondition}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            effectUpdated({ id, changes: { effectCondition: e.target.value } })\r\n          )\r\n        }\r\n      >\r\n        {conditionOptions}\r\n      </select>\r\n      {\": \"}\r\n      <select\r\n        value={effectType}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            effectUpdated({ id, changes: { effectType: e.target.value } })\r\n          )\r\n        }\r\n      >\r\n        {effectTypeOptions}\r\n      </select>\r\n      <span className=\"input\">\r\n        @\r\n        <select\r\n          value={startLevel}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              effectUpdated({\r\n                id,\r\n                changes: { startLevel: parseInt(e.target.value) },\r\n              })\r\n            )\r\n          }\r\n        >\r\n          {levelOptions}\r\n        </select>\r\n        to\r\n        <select\r\n          value={endLevel}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              effectUpdated({\r\n                id,\r\n                changes: { endLevel: parseInt(e.target.value) },\r\n              })\r\n            )\r\n          }\r\n        >\r\n          {levelOptions}\r\n        </select>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { LevelList } from \"./LevelList\";\r\nimport { damageCreated } from \"./routineSlice\";\r\nimport {\r\n  activityTypeOptions,\r\n  profTrendOptions,\r\n  conditionOptions,\r\n  defenseOptions,\r\n  MAPOptions,\r\n  rollOptions,\r\n  statTrendOptions,\r\n  itemBTrendOptions,\r\n} from \"../Model/options\";\r\nimport {\r\n  activityPathCreated,\r\n  activityPathRemoved,\r\n  activityPathUpdated,\r\n  selectactivityPathById,\r\n} from \"./routineSlice\";\r\nimport { activityTypes } from \"../Model/types\";\r\nimport { Damage } from \"./Damage\";\r\nimport { Effect } from \"./Effect\";\r\nimport { effectCreated } from \"./routineSlice\";\r\n\r\nexport const ActivityPath = ({\r\n  id,\r\n  parentId,\r\n  routineId,\r\n  displayCondition = true,\r\n}) => {\r\n  const {\r\n    condition,\r\n\r\n    rollType,\r\n    type,\r\n    profTrend,\r\n    statTrend,\r\n    itemTrend,\r\n    bonusAdjustments,\r\n    MAP,\r\n    targetType,\r\n\r\n    damages,\r\n    effects,\r\n    apIds,\r\n  } = useSelector((state) => selectactivityPathById(state, id));\r\n  const dispatch = useDispatch();\r\n\r\n  const bonusLevelList = LevelList(\r\n    \"bonusAdjustments\",\r\n    dispatch,\r\n    activityPathUpdated,\r\n    id,\r\n    bonusAdjustments\r\n  );\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      {displayCondition ? (\r\n        <div>\r\n          {\"Condition: \"}\r\n          <select\r\n            value={condition}\r\n            onChange={(e) =>\r\n              dispatch(\r\n                activityPathUpdated({\r\n                  id,\r\n                  changes: { condition: e.target.value },\r\n                })\r\n              )\r\n            }\r\n          >\r\n            {conditionOptions}\r\n          </select>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n\r\n      <div className=\"\">\r\n        <div className=\"flexbox\">\r\n          <button\r\n            className=\"delete\"\r\n            onClick={(e) => {\r\n              dispatch(activityPathRemoved({ id, parentId, routineId }));\r\n            }}\r\n          >\r\n            -\r\n          </button>\r\n          <span className=\"input\">\r\n            <select\r\n              value={rollType}\r\n              onChange={(e) => {\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { rollType: e.target.value },\r\n                  })\r\n                );\r\n              }}\r\n            >\r\n              {rollOptions}\r\n            </select>\r\n          </span>\r\n          <span className=\"input\">\r\n            <select\r\n              value={type}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  activityPathUpdated({ id, changes: { type: e.target.value } })\r\n                )\r\n              }\r\n            >\r\n              {activityTypeOptions}\r\n            </select>\r\n          </span>{\" \"}\r\n          <span className=\"input\">\r\n            {type === activityTypes.SAVE ? \"DC: (10 + \" : \"Bonus: (\"}\r\n            <select\r\n              value={profTrend}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { profTrend: e.target.value },\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              {profTrendOptions}\r\n            </select>\r\n            <select\r\n              value={statTrend}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { statTrend: e.target.value },\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              {statTrendOptions}\r\n            </select>\r\n            <select\r\n              value={itemTrend}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { itemTrend: e.target.value },\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              {itemBTrendOptions}\r\n            </select>\r\n            +{bonusLevelList})\r\n          </span>\r\n          {type === activityTypes.STRIKE ? (\r\n            <span className=\"input\">\r\n              {\" MAP: \"}\r\n              <select\r\n                value={MAP}\r\n                onChange={(e) =>\r\n                  dispatch(\r\n                    activityPathUpdated({\r\n                      id,\r\n                      changes: { MAP: e.target.value },\r\n                    })\r\n                  )\r\n                }\r\n              >\r\n                {MAPOptions}\r\n              </select>\r\n            </span>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <span className=\"input\">\r\n            {\" VS: \"}\r\n            <select\r\n              value={targetType}\r\n              onChange={(e) => {\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { targetType: e.target.value },\r\n                  })\r\n                );\r\n              }}\r\n            >\r\n              {defenseOptions}\r\n            </select>\r\n          </span>\r\n        </div>\r\n        <div className=\"box\">\r\n          {\"Damage: \"}\r\n          {damages.map((damageId) => (\r\n            <Damage parentId={id} id={damageId} key={damageId} />\r\n          ))}\r\n          <button\r\n            className=\"add\"\r\n            onClick={() => dispatch(damageCreated({ parentId: id }))}\r\n          >\r\n            +\r\n          </button>\r\n        </div>\r\n        <div className=\"box\">\r\n          {\"Effects: \"}\r\n          {effects.map((effectId) => (\r\n            <Effect parentId={id} id={effectId} key={effectId} />\r\n          ))}\r\n          <button\r\n            className=\"add\"\r\n            onClick={() => dispatch(effectCreated({ parentId: id }))}\r\n          >\r\n            +\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"box\">\r\n        {apIds.map((apId) => (\r\n          <ActivityPath id={apId} parentId={id} key={apId} />\r\n        ))}\r\n        <button\r\n          className=\"add\"\r\n          onClick={() =>\r\n            dispatch(\r\n              activityPathCreated({\r\n                parentId: id,\r\n                isStrike: true,\r\n                applyMAP: true,\r\n              })\r\n            )\r\n          }\r\n        >\r\n          + Strike\r\n        </button>\r\n        <button\r\n          className=\"add\"\r\n          onClick={() =>\r\n            dispatch(activityPathCreated({ parentId: id, isStrike: false }))\r\n          }\r\n        >\r\n          + Save\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  activityPathCreated,\r\n  routineUpdated,\r\n  selectRoutineById,\r\n} from \"./routineSlice\";\r\nimport { levelOptions } from \"../Model/options\";\r\nimport { ActivityPath } from \"./ActivityPath\";\r\n\r\nfunction SelectedRoutine({ routineId }) {\r\n  // const selectedRoutine = useSelector(selectSelectedRoutine);\r\n  const { name, startLevel, endLevel, description, apIds } = useSelector(\r\n    (state) => selectRoutineById(state, routineId)\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className=\"selectedRoutine\">\r\n      <div className=\"box\">\r\n        <div>\r\n          <NameInput id={routineId} name={name} />\r\n          <span className=\"input\">\r\n            @\r\n            <select\r\n              value={startLevel}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  routineUpdated({\r\n                    id: routineId,\r\n                    changes: { startLevel: parseInt(e.target.value) },\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              {levelOptions}\r\n            </select>\r\n            to\r\n            <select\r\n              value={endLevel}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  routineUpdated({\r\n                    id: routineId,\r\n                    changes: { endLevel: parseInt(e.target.value) },\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              {levelOptions}\r\n            </select>\r\n          </span>\r\n        </div>\r\n        <DescriptionInput id={routineId} description={description} />\r\n      </div>\r\n      {apIds.map((apId) => (\r\n        <ActivityPath\r\n          id={apId}\r\n          routineId={routineId}\r\n          key={apId}\r\n          displayCondition={false}\r\n        />\r\n      ))}\r\n      <button\r\n        className=\"add\"\r\n        onClick={() =>\r\n          dispatch(activityPathCreated({ routineId, isStrike: true }))\r\n        }\r\n      >\r\n        + Strike\r\n      </button>\r\n      <button\r\n        className=\"add\"\r\n        onClick={() =>\r\n          dispatch(activityPathCreated({ routineId, isStrike: false }))\r\n        }\r\n      >\r\n        + Save\r\n      </button>\r\n      {/* <EffectInput /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst NameInput = ({ id, name: baseName }) => {\r\n  const dispatch = useDispatch();\r\n  let [name, setName] = useState(baseName);\r\n  useEffect(() => setName(baseName), [baseName]);\r\n  // const name = useSelector((state) => selectRoutineById(state, id)).name;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <label htmlFor=\"routineName\">Routine Name:</label>\r\n      <input\r\n        id=\"routineName\"\r\n        type=\"text\"\r\n        placeholder=\"Enter routine name\"\r\n        value={name}\r\n        onChange={(e) => setName(e.target.value)}\r\n        onBlur={() => dispatch(routineUpdated({ id, changes: { name } }))}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\nconst DescriptionInput = ({ id, description: baseDescription }) => {\r\n  const dispatch = useDispatch();\r\n  const [description, setDescription] = useState(baseDescription);\r\n  useEffect(() => setDescription(baseDescription), [baseDescription]);\r\n\r\n  return (\r\n    <div>\r\n      <textarea\r\n        className=\"routineDescription\"\r\n        id=\"routineDescription\"\r\n        placeholder=\"Enter routine description\"\r\n        value={description}\r\n        onChange={(e) => setDescription(e.target.value)}\r\n        onBlur={() =>\r\n          dispatch(routineUpdated({ id, changes: { description } }))\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectedRoutine;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  routineCreated,\r\n  routineRemoved,\r\n  routineUpdated,\r\n  selectAllRoutines,\r\n  selectSelectedRoutine,\r\n  setRoutine,\r\n} from \"./routineSlice\";\r\n\r\nconst Routines = () => {\r\n  const routines = useSelector(selectAllRoutines);\r\n  const selectedRoutine = useSelector(selectSelectedRoutine);\r\n  const dispatch = useDispatch();\r\n\r\n  const routineOptions = [];\r\n  const routineDisplays = [];\r\n  routines.forEach((routine) => {\r\n    routineOptions.push(\r\n      <option value={routine.id} key={routine.id}>\r\n        {routine.name}\r\n      </option>\r\n    );\r\n    routineDisplays.push(\r\n      <div className=\"flexbox\" key={routine.id}>\r\n        <button\r\n          className=\"remove\"\r\n          onClick={() => dispatch(routineRemoved(routine.id))}\r\n        >\r\n          -\r\n        </button>\r\n        <span\r\n          className={routine.display ? \"routineOn\" : \"routineOff\"}\r\n          onClick={() =>\r\n            dispatch(\r\n              routineUpdated({\r\n                id: routine.id,\r\n                changes: { display: !routine.display },\r\n              })\r\n            )\r\n          }\r\n        >\r\n          {routine.name}\r\n        </span>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      Selected Routine:\r\n      <select\r\n        value={selectedRoutine}\r\n        onChange={(e) => dispatch(setRoutine(e.target.value))}\r\n      >\r\n        {routineOptions}\r\n      </select>\r\n      <button className=\"add\" onClick={() => dispatch(routineCreated())}>\r\n        +\r\n      </button>\r\n      <button\r\n        className=\"add\"\r\n        onClick={() => dispatch(routineCreated({ copy: true }))}\r\n      >\r\n        Copy Selected Routine\r\n      </button>\r\n      <div className=\"routines\">{routineDisplays}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Routines;\r\n","import React from \"react\";\r\n// import { useSelector } from \"react-redux\";\r\n\r\nconst ImportExport = () => {\r\n  return <div className=\"box\">Import and Export Here</div>;\r\n};\r\n\r\nexport default ImportExport;\r\n","import React from \"react\";\r\nimport ReactGA from \"react-ga4\";\r\n\r\nimport TargetInput from \"./Target/TargetInput\";\r\nimport Display from \"./Display/Display\";\r\nimport SelectedRoutine from \"./Routines/SelectedRoutine\";\r\nimport Routines from \"./Routines/Routines\";\r\nimport Export from \"./Export\";\r\n\r\nimport \"./PF2App.css\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectSelectedRoutine } from \"./Routines/routineSlice\";\r\n\r\n// Initialize google analytics\r\nReactGA.initialize(\"G-JR2YK097BG\");\r\n\r\nfunction PF2App(props) {\r\n  const selectedRoutine = useSelector(selectSelectedRoutine);\r\n  ReactGA.send(\"pageview\");\r\n\r\n  return (\r\n    <div className=\"PF2App\">\r\n      <TargetInput id={0} />\r\n      <Display />\r\n      <Routines />\r\n      {selectedRoutine !== undefined ? (\r\n        <SelectedRoutine routineId={selectedRoutine} />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <Export />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PF2App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport routineReducer, {\r\n  activityPathAdded,\r\n  damageAdded,\r\n  effectAdded,\r\n  routineAdded,\r\n} from \"./Routines/routineSlice\";\r\nimport targetReducer, { targetAdded } from \"./Target/targetSlice\";\r\nimport weaknessReducer from \"./Target/weaknessSlice\";\r\nimport {\r\n  activityTypes,\r\n  ACTrends,\r\n  conditions,\r\n  damageTrends,\r\n  damageTypes,\r\n  dCond,\r\n  defenses,\r\n  dieTrends,\r\n  effectTypes,\r\n  itemTrends,\r\n  MAPs,\r\n  materials,\r\n  profTrends,\r\n  rollTypes,\r\n  SaveTrends,\r\n  statTrends,\r\n} from \"./Model/types\";\r\n\r\nconst empty = {};\r\nconst pickCritSpec = {};\r\nconst one = {};\r\nfor (let i = 1; i <= 20; i++) {\r\n  empty[i] = 0;\r\n  one[i] = 1;\r\n  pickCritSpec[i] = 0;\r\n  if (i >= 5) {\r\n    pickCritSpec[i] = 4;\r\n  }\r\n  if (i >= 12) {\r\n    pickCritSpec[i] = 6;\r\n  }\r\n  if (i >= 19) {\r\n    pickCritSpec[i] = 8;\r\n  }\r\n}\r\n\r\n// const activityPathRemoved = createAction(\r\n//   \"RemoveActivityPath\",\r\n//   (id, parentId) => ({ payload: { id, parentId } })\r\n// );\r\n// const globalReducer = createReducer(, (builder) => {\r\n//   builder.addCase(activityPathRemoved, (state, action) => {\r\n//     const { id, parentId } = action.payload;\r\n//     // activityPathAdapter.removeMany(state, state.entities[id].apIds);\r\n//     activityPathAdapter.removeOne(state, id);\r\n//     if (parentId !== undefined) {\r\n//       state.entities[parentId].apIds = state.entities[parentId].apIds.filter(\r\n//         (apId) => apId !== id\r\n//       );\r\n//     }\r\n//   });\r\n// });\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    routines: routineReducer,\r\n    weaknesses: weaknessReducer,\r\n    targets: targetReducer,\r\n  },\r\n});\r\n// default damages and effects\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 0,\r\n    damageCondition: dCond.STRIKE,\r\n\r\n    dieTrend: dieTrends.WEAPON,\r\n    dieAdjustments: { ...empty },\r\n    diceSize: 8,\r\n    fatal: false,\r\n    fatalDie: 10,\r\n    damageTrend: [damageTrends.AS18a, damageTrends.MARTIALWEAPONSPEC],\r\n    damageAdjustments: { ...empty },\r\n\r\n    damageType: damageTypes.S,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n  })\r\n);\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 1,\r\n    damageCondition: dCond.STRIKE,\r\n\r\n    dieTrend: dieTrends.RUNE,\r\n    dieAdjustments: { ...empty },\r\n    diceSize: 6,\r\n    fatal: false,\r\n    fatalDie: 10,\r\n    damageTrend: [],\r\n    damageAdjustments: { ...empty },\r\n\r\n    damageType: damageTypes.FIRE,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n  })\r\n);\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 2,\r\n    damageCondition: dCond.BASIC,\r\n\r\n    dieTrend: dieTrends.SPELLLEVEL2,\r\n    dieAdjustments: { ...empty },\r\n    diceSize: 6,\r\n    fatal: false,\r\n    fatalDie: 10,\r\n    damageTrend: [],\r\n    damageAdjustments: { ...empty },\r\n\r\n    damageType: damageTypes.FIRE,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n  })\r\n);\r\nstore.dispatch(\r\n  effectAdded({\r\n    id: 0,\r\n    effectCondition: conditions.CRIT,\r\n    effectType: effectTypes.FLATFOOT,\r\n    startLevel: 5,\r\n    endLevel: 20,\r\n  })\r\n);\r\n\r\nstore.dispatch(\r\n  targetAdded({\r\n    id: 0,\r\n    name: \"AC: High, Saves: Moderate\",\r\n\r\n    levelDiff: 0,\r\n\r\n    ACTrend: ACTrends.HIGH,\r\n    FortTrend: SaveTrends.MODERATE,\r\n    RefTrend: SaveTrends.MODERATE,\r\n    WillTrend: SaveTrends.MODERATE,\r\n    PerTrend: SaveTrends.MODERATE,\r\n\r\n    flatfooted: false,\r\n    weaknesses: [],\r\n  })\r\n);\r\n\r\n// add in some example routines\r\nstore.dispatch(\r\n  routineAdded({\r\n    id: 0,\r\n    name: \"Baseline\",\r\n    display: true,\r\n    apIds: [],\r\n    levelDiff: 0,\r\n    description: \"No damage. Just so graphs display 0 with autoscalling.\",\r\n    startLevel: 1,\r\n    endLevel: 20,\r\n  })\r\n);\r\n\r\nstore.dispatch(\r\n  routineAdded({\r\n    id: 1,\r\n    name: \"Greatsword Fighter 2 strikes\",\r\n    display: true,\r\n    apIds: [0],\r\n    levelDiff: 0,\r\n    description:\r\n      \"A simple Fighter making 2 strikes with a greatsword. 1d6 damage runes at 8 and 15. Crit specialization at 5.\",\r\n    startLevel: 1,\r\n    endLevel: 20,\r\n  })\r\n);\r\nstore.dispatch(\r\n  activityPathAdded({\r\n    id: 0,\r\n    condition: conditions.ALWAYS,\r\n\r\n    rollType: rollTypes.NORMAL,\r\n    type: activityTypes.STRIKE,\r\n    profTrend: profTrends.FIGHTERWEAPON,\r\n    statTrend: statTrends.AS18a,\r\n    itemTrend: itemTrends.WEAPON,\r\n    bonusAdjustments: { ...empty },\r\n    MAP: MAPs.N1,\r\n\r\n    targetType: defenses.AC,\r\n    targetInfoId: 0,\r\n\r\n    damages: [3, 4],\r\n    effects: [1],\r\n    apIds: [1],\r\n  })\r\n);\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 3,\r\n    damageCondition: dCond.STRIKE,\r\n\r\n    dieTrend: dieTrends.WEAPON,\r\n    dieAdjustments: { ...empty },\r\n    diceSize: 12,\r\n    fatal: false,\r\n    fatalDie: 10,\r\n    damageTrend: [damageTrends.AS18a, damageTrends.FIGHTERWEAPONSPEC],\r\n    damageAdjustments: { ...empty },\r\n\r\n    damageType: damageTypes.S,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n  })\r\n);\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 4,\r\n    damageCondition: dCond.STRIKE,\r\n\r\n    dieTrend: dieTrends.RUNE,\r\n    dieAdjustments: { ...empty },\r\n    diceSize: 6,\r\n    fatal: false,\r\n    fatalDie: 10,\r\n    damageTrend: [],\r\n    damageAdjustments: { ...empty },\r\n\r\n    damageType: damageTypes.FIRE,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n  })\r\n);\r\nstore.dispatch(\r\n  effectAdded({\r\n    id: 1,\r\n    effectCondition: conditions.CRIT,\r\n    effectType: effectTypes.FLATFOOT,\r\n    startLevel: 5,\r\n    endLevel: 20,\r\n  })\r\n);\r\nstore.dispatch(\r\n  activityPathAdded({\r\n    id: 1,\r\n    condition: conditions.ALWAYS,\r\n\r\n    rollType: rollTypes.NORMAL,\r\n    type: activityTypes.STRIKE,\r\n    profTrend: profTrends.FIGHTERWEAPON,\r\n    statTrend: statTrends.AS18a,\r\n    itemTrend: itemTrends.WEAPON,\r\n    bonusAdjustments: { ...empty },\r\n    MAP: MAPs.N2,\r\n\r\n    targetType: defenses.AC,\r\n    targetInfoId: 0,\r\n\r\n    damages: [5, 6],\r\n    effects: [2],\r\n    apIds: [],\r\n  })\r\n);\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 5,\r\n    damageCondition: dCond.STRIKE,\r\n\r\n    dieTrend: dieTrends.WEAPON,\r\n    dieAdjustments: { ...empty },\r\n    diceSize: 12,\r\n    fatal: false,\r\n    fatalDie: 10,\r\n    damageTrend: [damageTrends.AS18a, damageTrends.FIGHTERWEAPONSPEC],\r\n    damageAdjustments: { ...empty },\r\n\r\n    damageType: damageTypes.S,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n  })\r\n);\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 6,\r\n    damageCondition: dCond.STRIKE,\r\n\r\n    dieTrend: dieTrends.RUNE,\r\n    dieAdjustments: { ...empty },\r\n    diceSize: 6,\r\n    fatal: false,\r\n    fatalDie: 10,\r\n    damageTrend: [],\r\n    damageAdjustments: { ...empty },\r\n\r\n    damageType: damageTypes.FIRE,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n  })\r\n);\r\nstore.dispatch(\r\n  effectAdded({\r\n    id: 2,\r\n    effectCondition: conditions.CRIT,\r\n    effectType: effectTypes.FLATFOOT,\r\n    startLevel: 5,\r\n    endLevel: 20,\r\n  })\r\n);\r\n\r\nstore.dispatch(\r\n  routineAdded({\r\n    id: 2,\r\n    name: \"Fireball\",\r\n    display: true,\r\n    apIds: [2],\r\n    levelDiff: 0,\r\n    description: \"A 2d6 / spell level basic reflex save.\",\r\n    startLevel: 1,\r\n    endLevel: 20,\r\n  })\r\n);\r\nstore.dispatch(\r\n  activityPathAdded({\r\n    id: 2,\r\n    condition: conditions.ALWAYS,\r\n\r\n    rollType: rollTypes.NORMAL,\r\n    type: activityTypes.SAVE,\r\n    profTrend: profTrends.CASTERSPELL,\r\n    statTrend: statTrends.AS18a,\r\n    itemTrend: itemTrends.NONE,\r\n    bonusAdjustments: { ...empty },\r\n    MAP: MAPs.N1,\r\n\r\n    targetType: defenses.REF,\r\n    targetInfoId: 0,\r\n\r\n    damages: [7],\r\n    effects: [],\r\n    apIds: [],\r\n  })\r\n);\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 7,\r\n    damageCondition: dCond.BASIC,\r\n\r\n    dieTrend: dieTrends.SPELLLEVEL2,\r\n    dieAdjustments: { ...empty },\r\n    diceSize: 6,\r\n    fatal: false,\r\n    fatalDie: 10,\r\n    damageTrend: [],\r\n    damageAdjustments: { ...empty },\r\n\r\n    damageType: damageTypes.FIRE,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n  })\r\n);\r\n\r\nstore.dispatch(\r\n  routineAdded({\r\n    id: 3,\r\n    name: \"Pick Fighter Double Slice\",\r\n    display: false,\r\n    apIds: [3, 4],\r\n    levelDiff: 0,\r\n    description:\r\n      \"A Fighter using Double Slice with a pick and a light pick. 1d6 damage runes at 8 and 15. Crit specialization at 5.\",\r\n    startLevel: 1,\r\n    endLevel: 20,\r\n  })\r\n);\r\nstore.dispatch(\r\n  activityPathAdded({\r\n    id: 3,\r\n    condition: conditions.ALWAYS,\r\n\r\n    rollType: rollTypes.NORMAL,\r\n    type: activityTypes.STRIKE,\r\n    profTrend: profTrends.FIGHTERWEAPON,\r\n    statTrend: statTrends.AS18a,\r\n    itemTrend: itemTrends.WEAPON,\r\n    bonusAdjustments: { ...empty },\r\n    MAP: MAPs.N1,\r\n\r\n    targetType: defenses.AC,\r\n    targetInfoId: 0,\r\n\r\n    damages: [8, 9, 10],\r\n    effects: [],\r\n    apIds: [],\r\n  })\r\n);\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 8,\r\n    damageCondition: dCond.STRIKE,\r\n\r\n    dieTrend: dieTrends.WEAPON,\r\n    dieAdjustments: { ...empty },\r\n    diceSize: 6,\r\n    fatal: true,\r\n    fatalDie: 10,\r\n    damageTrend: [damageTrends.AS18a, damageTrends.FIGHTERWEAPONSPEC],\r\n    damageAdjustments: { ...empty },\r\n\r\n    damageType: damageTypes.P,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n  })\r\n);\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 9,\r\n    damageCondition: dCond.CRIT,\r\n\r\n    dieTrend: dieTrends.NONE,\r\n    dieAdjustments: { ...one },\r\n    diceSize: 10,\r\n    fatal: false,\r\n    fatalDie: 10,\r\n    damageTrend: [],\r\n    damageAdjustments: { ...pickCritSpec },\r\n\r\n    damageType: damageTypes.P,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n  })\r\n);\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 10,\r\n    damageCondition: dCond.STRIKE,\r\n\r\n    dieTrend: dieTrends.RUNE,\r\n    dieAdjustments: { ...empty },\r\n    diceSize: 6,\r\n    fatal: false,\r\n    fatalDie: 10,\r\n    damageTrend: [],\r\n    damageAdjustments: { ...empty },\r\n\r\n    damageType: damageTypes.FIRE,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n  })\r\n);\r\nstore.dispatch(\r\n  activityPathAdded({\r\n    id: 4,\r\n    condition: conditions.ALWAYS,\r\n\r\n    rollType: rollTypes.NORMAL,\r\n    type: activityTypes.STRIKE,\r\n    profTrend: profTrends.FIGHTERWEAPON,\r\n    statTrend: statTrends.AS18a,\r\n    itemTrend: itemTrends.WEAPON,\r\n    bonusAdjustments: { ...empty },\r\n    MAP: MAPs.A1,\r\n\r\n    targetType: defenses.AC,\r\n    targetInfoId: 0,\r\n\r\n    damages: [11, 12, 13],\r\n    effects: [],\r\n    apIds: [],\r\n  })\r\n);\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 11,\r\n    damageCondition: dCond.STRIKE,\r\n\r\n    dieTrend: dieTrends.WEAPON,\r\n    dieAdjustments: { ...empty },\r\n    diceSize: 4,\r\n    fatal: true,\r\n    fatalDie: 8,\r\n    damageTrend: [damageTrends.AS18a, damageTrends.FIGHTERWEAPONSPEC],\r\n    damageAdjustments: { ...empty },\r\n\r\n    damageType: damageTypes.P,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n  })\r\n);\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 12,\r\n    damageCondition: dCond.CRIT,\r\n\r\n    dieTrend: dieTrends.NONE,\r\n    dieAdjustments: { ...one },\r\n    diceSize: 8,\r\n    fatal: false,\r\n    fatalDie: 10,\r\n    damageTrend: [],\r\n    damageAdjustments: { ...pickCritSpec },\r\n\r\n    damageType: damageTypes.P,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n  })\r\n);\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 13,\r\n    damageCondition: dCond.STRIKE,\r\n\r\n    dieTrend: dieTrends.RUNE,\r\n    dieAdjustments: { ...empty },\r\n    diceSize: 6,\r\n    fatal: false,\r\n    fatalDie: 10,\r\n    damageTrend: [],\r\n    damageAdjustments: { ...empty },\r\n\r\n    damageType: damageTypes.FIRE,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n  })\r\n);\r\n// store.dispatch(weaknessAdded({ id: 0, type: damageTypes.FIRE, value: 10 }));\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 0,\r\n//     damageCondition: dCond.STRIKE,\r\n//     diceNum: 1,\r\n//     diceSize: 8,\r\n//     staticDamage: 4,\r\n//     damageType: damageTypes.B,\r\n//     material: materials.COLD_IRON,\r\n//     persistent: false,\r\n//   })\r\n// );\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport PF2App from \"./PF2App\";\r\nimport store from \"./store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <PF2App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}