{"version":3,"sources":["Model/options.tsx","Model/types.ts","App/hooks.ts","Target/weaknessSlice.ts","Target/targetSlice.ts","Target/TargetInput.tsx","Model/defaults.ts","Model/newActivityInfo.ts","Routines/RoutineSlice/RoutineTypes.ts","Routines/RoutineSlice/routineSlice.ts","Calculation/Distribution.ts","Calculation/Calculation.ts","Calculation/EvaluateActivityPath.ts","Display/useGenerateGraphs.tsx","Display/Display.tsx","Routines/ActivityPathStub.tsx","Routines/SelectedRoutine.tsx","Routines/Routines.tsx","Model/exampleRoutines.ts","Sharing/Export.tsx","Routines/Activity/LevelList.tsx","Routines/Activity/Damage.tsx","Routines/Activity/Effect.tsx","Routines/Activity/ActivityPath.tsx","Routines/NewActivity/NewActivity.tsx","App/PF2App.tsx","App/store.ts","serviceWorker.js","App/theme.ts","index.js"],"names":["gt","graphTypes","DISTRIBUTION","PMDEFENSE","PMRES","importStates","ACTrends","LOW","MODERATE","HIGH","EXTREME","SaveTrends","TERRIBLE","conditions","ALWAYS","CRIT","SUCC","FAIL","CRIF","AT_LEAST_SUCC","AT_LEAST_FAIL","FAIL_WORSE","SUCC_WORSE","rollTypes","NORMAL","ADVANTAGE","DISADVANTAGE","activityTypes","STRIKE","SAVE","SKILL","SPELLATTACK","profTrends","TRAINED","FIGHTERWEAPON","MARTIALWEAPON","CASTERWEAPON","ALCHWEAPON","CASTERSPELL","CLASSDC1","CLASSDC2","MCSPELL","MAXSKILL","statTrends","AS10","AS18a","AS16a","AS16pp","AS16p","AS14pp","AS14p","itemTrends","NONE","WEAPON","MAPs","N1","N2","N3","A1","A2","A3","R1","R2","R3","RA1","RA2","RA3","RAA1","RAA2","RAA3","nextMAPs","defenses","AC","FORT","REF","WILL","PER","DC","dCond","BASIC","dieTrends","SPELLLEVEL1","SPELLLEVEL2","LEVEL","HALFLEVEL","RUNE","RUNE2","DEADLY","SNEAK","STRATEGIC","PRECISE","PRECISIONEDGE","PRECISIONEDGE2","PRECISIONEDGE3","damageTrends","FIGHTERWEAPONSPEC","MARTIALWEAPONSPEC","CASTERWEAPONSPEC","RAGE","ANIMALRAGE","DRAGONRAGE","GIANTRAGE","IMPLEMENT","damageTypes","B","P","S","FIRE","PRECISION","materials","COLD_IRON","SILVER","ADAMANTINE","effectStateTypes","FLATFOOT","PRONE","GRAPPLED","RESTRAINED","effectValueTypes","FRIGHTENED","CLUMSY","effectTypes","whenConditions","Always","diceSizes","useAppDispatch","useDispatch","useAppSelector","useSelector","weaknessAdapter","createEntityAdapter","weakness","weaknessesSlice","createSlice","name","initialState","getInitialState","reducers","weaknessAdded","addOne","weaknessUpdated","updateOne","weaknessCreated","reducer","state","action","payload","id","type","value","prepare","parentId","weaknessRemoved","removeOne","actions","getSelectors","weaknesses","selectweaknessEntities","selectById","selectIds","selectEntities","targetAdapter","selectAll","selectTotal","targetsSlice","targetAdded","targetUpdated","extraReducers","builder","addCase","weaknessId","entities","push","filter","wid","targets","selecttargetById","selecttargetEntities","makeOptions","options","element","optionElements","graphTypeOptions","c","levelOptions","level","rt","conditionOptions","at","rollOptions","pt","activityTypeOptions","st","profTrendOptions","it","statTrendOptions","m","itemBTrendOptions","d","MAPOptions","act","defenseOptions","svt","ACOptions","dc","SaveOptions","dieT","damageConditionOptions","ds","dieTrendOptions","damT","diceSizeOptions","dt","damageTrendOptions","mat","damageTypeOptions","materialOptions","weaknessOptions","multiplierOptions","est","evt","effectTypeOptions","TargetInput","levelDiff","persistentMultiplier","ACTrend","FortTrend","RefTrend","WillTrend","PerTrend","flatfooted","percentSelectedRoutine","useState","tempName","setTempName","toString","perMul","setPerMul","dispatch","sx","my","p","container","spacing","xs","sm","item","md","lg","fullWidth","label","placeholder","onChange","e","target","onBlur","changes","step","min","max","marks","nv","control","checked","labelId","focus","newVal","parseFloat","zero","halfLevel","trained","maxSkill","maxScore","score16pp","score16p","score16","score14p","score14","martialProf","alchProf","casterProf","spellProf","weaponItem","skillItem","weaponDice","spellDice","spellDice2","i","Math","floor","runes","runes2","deadly","sneak","strategic","precise","preEdge1","preEdge2","preEdge3","martialSpec","casterSpec","rage","animalrage","dragonrage","giantrage","implementEmpower","fighterAB","martialAB","casterAB","alchAB","casterSpellAttack","casterSaveDC","classdc1","classdc2","mcspell","fighterStatic","fighterRanged","martialStatic","martialRanged","casterStatic","casterRanged","profTrendValues","statTrendValues","itemTrendValues","MAPvalues","dieTrendValues","damageTrendValues","extremeAC","highAC","moderateAC","lowAC","defaultACs","defaultSaves","standardDC","Strike","Skill","Cantrip","Spell","runeTrends","classes","cantrips","classActivities","weaponTraits","critSpecs","classAdjustments","strikeInfo","strikeNumber","adjustments","currentValue","cClass","activityWeaponDiceAdjustments","activity","classWeaponDamageTrends","trends","traits","damageScore","includes","classDamageAdjustments","hasDeadly","hasFatal","hasPickCritSpec","critSpec","critSpecType","hasSwordCritSpec","hasHammerCritSpec","hasSpearCritSpec","critSpecDice","critSpecLevel","critSpecDamage","isRoutineObject","routine","display","description","isActivityPaths","apIds","startLevel","endLevel","Array","isArray","apId","Object","values","condition","rollType","profTrend","statTrend","itemTrend","isAdjustment","bonusAdjustments","MAP","targetType","isDamages","damages","isEffects","effects","console","log","damage","damageTrend","damageCondition","dieTrend","dieAdjustments","diceSize","fatal","fatalDie","damageAdjustments","damageType","material","persistent","multiplier","effect","effectCondition","effectType","routinesAdapter","activityPathAdapter","damageAdapter","effectAdapter","routineId","activityPathId","damageId","effectId","empty","one","selectedRoutine","selectedActivityPath","undefined","parentRoutine","parentActivity","routines","activityPaths","importRoutine","defaultActivity","defaultStrikeParent","defaultSaveParent","defaultDamage","damageWhen","routinesSlice","setRoutine","setActivityPath","routineAdded","routineUpdated","activityPathAdded","activityPathUpdated","damageAdded","damageUpdated","effectAdded","effectUpdated","routineCreated","copy","copyActivityPaths","routineRemoved","childrenIds","removeActivityPaths","setNewActivityParent","emptyActivityPathCreated","activityType","ap","copyDamages","copyEffects","activityPathCreated","ids","createStrikeActivity","numStrikes","activityPathContinued","parentAP","newDamages","newEffects","activityPathRemoved","damageCreated","damageRemoved","did","effectCreated","effectValue","effectRemoved","eid","routineObject","JSON","parse","insertRoutine","error","selectRoutineById","selectRoutineEntities","selectAllRoutines","selectactivityPathById","selectactivityPathEntities","selectdamageById","selectdamageEntities","selecteffectById","selecteffectEntities","selectSelectedRoutine","selectSelectedActivityPath","selectParentActivityId","selectCreateNewActivity","selectSelectedRoutineObject","getActivityPaths","selectImportState","index","length","removeMany","className","createStrikeDamages","createStrikeEffects","classWeaponMAP","attackScore","weaponDamage","dieSize","fatalSize","runeDamage","critDamage","deadlySize","hasKnifeCritSpec","hasCritSpecEffect","critSpecEffect","newApIds","newAps","aps","getDamages","getEffects","insertActivityPaths","insertDamages","insertEffects","convolve","vec1","vec2","Error","volume","kernel","displacement","convVec","j","multiplyDist","dam","dist","staticDamage","damageDist","newDist","newDam","oldValue","chance","newValue","diff","consolidateDists","maxDamage","dists","distribution","applyMin","shift","damageQualities","normal","addDamage","baseContext","context","validateCondition","degreeOfSuccess","indicies","ActivityPathEvaluator","this","ACBonus","resBonus","initialTargetState","Flatfooted","dataArray","cumulative","PdataArray","Pcumulative","expD","expP","routineDDist","routinePDDist","activityPath","evalPath","PdamageDist","currentSum","targetState","defenseBonus","resistanceBonus","currentTarget","currentDamages","map","currentEffects","currentWeaknesses","targetValue","bonus","targetPenalty","Frightened","Clumsy","critPercent","dif","getCritSuccessPercent","succPercent","getSuccessPercent","failPercent","getFailurePercent","crfaPercent","getCritFailurePercent","notcrit","nothit","notfail","notcrfa","notsucc","chances","critDamagesByType","succDamagesByType","failDamagesByType","crfaDamagesByType","damageTreesByType","damageTrees","forEach","shouldAddThisDamage","val","diceNum","fatalDist","diceArray","damageTreeIndex","damageTree","finalTree","damageQuality","totalStaticDamage","totalDamageDist","maxW","maxR","calculateExpectedDamage","targetStates","shouldAddThisEffect","Restrained","Grappled","Prone","evaluations","Map","has","pathDist","pathPDist","set","get","Plot","createPlotlyComponent","Plotly","evaluateByLevel","evaluator","datasets","perDatasets","selectedRoutineDamage","selectedRoutinePDamage","canEvaluate","evalRoutine","levelArray","expDbyLevel","expPDbyLevel","x","y","yaxis","evaluatePM","displayLevel","defense","expectedDamages","expectedPersistentDamages","bonusArray","expDbyBonus","expPDbyBonus","toFixed","evaluateDistribution","useGenerateGraphs","graphType","title","byLevelTile","xtitle","ytitle","byLeveldatasets","byLevelperDatasets","damageChart","data","layout","autosize","xaxis","legend","xanchor","margin","l","r","useResizeHandler","style","width","height","persistentDamageChart","byLevelDamageChart","byLevelPerDamageChart","Display","Fragment","ActivityPathStub","displayChildren","parentActivityId","icon","selected","pl","onClick","primary","secondary","SelectedRoutine","tempDescription","setTempDescription","validLevels","setValidLevels","useEffect","px","align","getAriaLabel","valueLabelDisplay","getAriaValueText","v","multiline","subheader","justifyContent","variant","Routines","routineOptions","routineDisplays","component","size","color","onDelete","flexWrap","listStyle","exampleRoutines","ImportExport","importState","textValue","setTextValue","stringify","generateAdjustments","entries","total","currentIndex","parseInt","adjustmentsFromLevelChange","newLevel","sort","a","b","adjustmentsFromNewEntry","lastValue","LevelList","baseEntries","generateEntries","setEntries","be","levelList","Number","newEntries","slice","ni","Damage","dieLevelList","damageLevelList","damageTrendList","newdt","splice","mt","mb","Divider","textAlign","multiple","renderValue","join","Effect","setValue","ActivityPath","bonusLevelList","startIcon","gutterBottom","window","location","href","event","NewActivity","setActivityType","StrikeSelection","SkillSelection","CantripSelection","SpellSelection","setRunes","setClass","setActivity","cantrip","setAttackScore","setDamageScore","cantripScore","setDieSize","setNumStrikes","fromEntries","trait","setTraits","setDeadlySize","setFatalSize","setCritSpec","setCritSpecLevel","setCritSpecType","traitName","newTraits","ReactGA","initialize","PF2App","createNewActivity","isBigEnough","useMediaQuery","theme","breakpoints","up","send","maxWidth","columnSpacing","xl","overflow","client","slot","Export","pickCritSpec","store","configureStore","routineReducer","weaknessReducer","targetReducer","Boolean","hostname","match","createTheme","palette","main","red","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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C,EACA6H,EACAC,EACa,EAAb7H,GAEF,MAEF,KAAK3U,EAAM/D,KACTshB,GACEoD,EACAnM,EACAC,EACAC,EACA6H,EACAC,EACa,EAAb7H,GAEF,MAEF,KAAK3U,EAAM3D,cACTkhB,GACEqD,EACApM,EACAC,EACAC,EACA6H,EACAC,EACa,EAAb7H,GAEF4I,GACEoD,EACAnM,EACAC,EACAC,EACA6H,EACAC,EACa,EAAb7H,GAEF,MAEF,KAAK3U,EAAM1D,cACTihB,GACEsD,EACArM,EACAC,EACAC,EACA6H,EACAC,EACa,EAAb7H,GAEF4I,GACEqD,EACApM,EACAC,EACAC,EACA6H,EACAC,EACa,EAAb7H,GAEF4I,GACEoD,EACAnM,EACAC,EACAC,EACA6H,EACAC,EACa,EAAb7H,GAEF,MAEF,KAAK3U,EAAMzD,WACTghB,GACEuD,EACAtM,EACAC,EACAC,EACA6H,EACAC,EACa,EAAb7H,GAEF4I,GACEsD,EACArM,EACAC,EACAC,EACA6H,EACAC,EACa,EAAb7H,GAEF,MAEF,KAAK3U,EAAMxD,WACT+gB,GACEuD,EACAtM,EACAC,EACAC,EACA6H,EACAC,EACa,EAAb7H,GAEF4I,GACEsD,EACArM,EACAC,EACAC,EACA6H,EACAC,EACa,EAAb7H,GAEF4I,GACEqD,EACApM,EACAC,EACAC,EACA6H,EACAC,EACa,EAAb7H,GAGF,MAEF,KAAK3U,EAAMhE,OACTuhB,GACEuD,EACAtM,EACAC,EACAC,EACA6H,EACAC,EACa,EAAb7H,GAEF4I,GACEsD,EACArM,EACAC,EACAC,EACA6H,EACAC,EACa,EAAb7H,GAEF4I,GACEqD,EACApM,EACAC,EACAC,EACA6H,EACAC,EACa,EAAb7H,GAEF4I,GACEoD,EACAnM,EACAC,EACAC,EACA6H,EACAC,EACa,EAAb7H,GAEF,MAEF,QACEd,QAAQC,IAAR,2BAAgCG,EAAhC,+BAMN,IAAK,IAAIsN,EAAkB,EAAGA,EAAkB,EAAGA,IAAmB,CACpE,IAAIC,EAAaT,EAAkBQ,GAC/BE,EAAYT,EAAYO,GACxBG,OAA4B,EAChC,IAAKA,KAAiBrE,GAAiB,CACrC,IAAIsE,EAAoB,EACpBC,EAAkB,CAAC,GACnBtd,OAAgB,EACpB,IAAKA,KAAQkd,EAAWE,GAAgB,CACtC,MACEF,EAAWE,GAAepd,GADtBmQ,EAAN,EAAMA,SAAU8H,EAAhB,EAAgBA,aAAcC,EAA9B,EAA8BA,WAI9B,KAA0B,IAAtBA,EAAWrC,QAAgBoC,GAAgB,GAA/C,CALsC,MAQNY,GAASZ,EAAcC,EAAY,GAAhED,EARmC,EAQnCA,aAAcC,EARqB,EAQrBA,WAGjB,IAXsC,EAWlCqF,EAAO,EACPC,EAAO,EAZ2B,eAajBhd,GAbiB,IAatC,2BAAiC,CAAC,IAAzBzB,EAAwB,QAC3BA,EAASiB,OAASA,GAAQjB,EAASiB,OAASmQ,IAC1CpR,EAASkB,MAAQ0a,EAAkB,EACrC4C,EAAO3U,KAAK9B,IAAIyW,EAAMxe,EAASkB,MAAQ0a,GAC9B5b,EAASkB,MAAQ0a,EAAkB,IAC5C6C,EAAO5U,KAAK7B,IAAIyW,EAAMze,EAASkB,MAAQ0a,MAlBP,sCAyBN9B,GAHhCZ,GAA+BuF,EAAOD,EAGiBrF,EAAY,GAAhED,EAzBmC,EAyBnCA,aAAcC,EAzBqB,EAyBrBA,WAEjBmF,GAAqBpF,EACrBqF,EAAkBjG,GAASiG,EAAiBpF,IAE9CiF,EAAUC,GAAenF,aAAeoF,EACxCF,EAAUC,GAAelF,WAAaoF,EAGxC,MAAmCxF,GACjCqF,EAAS,WAAelF,aACxBkF,EAAS,WAAejF,WACxBxR,EAAO9B,sBAHHqT,EAAN,EAAMA,aAAcC,GAApB,EAAoBA,WAKpBiF,EAAS,OAAWlF,cAAgBA,EACpCkF,EAAS,OAAWjF,WAAab,GAC/B8F,EAAS,OAAWjF,WACpBA,IAKJ,MAAO,CAAEwE,cAAaN,WChgBWqB,CAC7Bpb,EACAgY,EACAQ,EACAD,EACAH,EACAO,EACAN,EACAC,GARI+B,EAAN,EAAMA,YAAaN,EAAnB,EAAmBA,QAWbsB,EAAe,CAACjD,EAAaA,EAAaA,EAAaA,GA1B7D,WA4BS9R,GAEPoS,EAAe4B,SAAQ,SAACrM,GACtB,IACEC,EAMED,EANFC,gBACAC,EAKEF,EALFE,WACA4D,EAIE9D,EAJF8D,YACAjG,EAGEmC,EAHFnC,WACAC,EAEEkC,EAFFlC,SACA2D,EACEzB,EADFyB,WAEF,KAAI1P,EAAQ8L,GAAc9L,EAAQ+L,GAAlC,CACA,IAViC,EAU7BuP,GAAsB,EAVO,eAWf5L,GAXe,IAWjC,2BAA8B,CAAC,IAAtBnS,EAAqB,QAC5B,GAAIA,IAAUtB,EAAeC,OAAQ,CACnCof,GAAsB,EACtB,MAEF,IAAId,EAAMa,EAAa/U,GAAG/I,GAC1B,GAAIid,GAAOA,EAAM,EAAG,CAClBc,GAAsB,EACtB,QAnB6B,8BAsBjC,GAAKA,GAEDvE,GAAkB7I,EAAiB5H,GACrC,OAAQ6H,GACN,KAAKnS,EAAYJ,YACoB,IAA/Byf,EAAa/U,GAAGiV,aAClBF,EAAa/U,GAAb,2BACK+U,EAAa/U,IADlB,IAEEiR,YAAY,EACZiE,UAAU,EACVD,YAAY,KAEhB,MAEF,KAAKvf,EAAYL,UACkB,IAA7B0f,EAAa/U,GAAGkV,WAClBH,EAAa/U,GAAb,2BACK+U,EAAa/U,IADlB,IAEEiR,YAAY,EACZiE,UAAU,KAEd,MAEF,KAAKxf,EAAYN,OACe,IAA1B2f,EAAa/U,GAAGmV,QAClBJ,EAAa/U,GAAb,2BACK+U,EAAa/U,IADlB,IAEEiR,YAAY,EACZkE,OAAO,KAEX,MAEF,KAAKzf,EAAYP,UACoB,IAA/B4f,EAAa/U,GAAGiR,aAClB8D,EAAa/U,GAAb,2BAAuB+U,EAAa/U,IAApC,IAAwCiR,YAAY,KACtD,MAEF,KAAKvb,EAAYF,WACXiW,GAAesJ,EAAa/U,GAAGyS,WAAahH,IAC9CsJ,EAAa/U,GAAb,2BACK+U,EAAa/U,IADlB,IAEEyS,WAAYhH,KAEhB,MAEF,KAAK/V,EAAYD,OACXgW,GAAesJ,EAAa/U,GAAG0S,OAASjH,IAC1CsJ,EAAa/U,GAAb,2BACK+U,EAAa/U,IADlB,IAEE0S,OAAQjH,KAEZ,MAEF,QACE7E,QAAQC,IAAR,sBAA2BgB,EAA3B,2BA9ED7H,EAAI,EAAGA,EAAI,EAAGA,IAAM,EAApBA,GAmIT,OA9CA0R,EAAanM,MAAMyO,SAAQ,SAACpO,GAK1B,IAJA,IAAI6E,EAAK,EAAK3B,cAAclD,GAEtBwP,EAAc,IAAIC,IAEfrV,EAAI,EAAGA,EAAI,EAAGA,IAErB,GAAIyQ,GAAkBhG,EAAG1E,UAAW/F,GAAI,CACtC,GAAIoV,EAAYE,IAAIP,EAAa/U,SAE1B,CACL,MAA4B,EAAK2R,SAC/BlH,EACAsK,EAAa/U,GACbtG,EACAqY,EACAC,GALF,mBAAKuD,EAAL,KAAeC,EAAf,KAOAJ,EAAYK,IAAIV,EAAa/U,GAAI,CAAEuV,WAAUC,cAE/CzB,EAAY/T,GAAGqQ,OAAOd,WAAab,GACjCqF,EAAY/T,GAAGqQ,OAAOd,WACtB6F,EAAYM,IAAIX,EAAa/U,IAAIuV,UAEnCxB,EAAY/T,GAAGyH,WAAW8H,WAAab,GACrCqF,EAAY/T,GAAGyH,WAAW8H,WAC1B6F,EAAYM,IAAIX,EAAa/U,IAAIwV,eAoBlC,CAdU1F,GACf,CAAEG,aAAc8D,EAAY,GAAG1D,OAAQV,OAAQ8D,EAAQ,IACvD,CAAExD,aAAc8D,EAAY,GAAG1D,OAAQV,OAAQ8D,EAAQ,IACvD,CAAExD,aAAc8D,EAAY,GAAG1D,OAAQV,OAAQ8D,EAAQ,IACvD,CAAExD,aAAc8D,EAAY,GAAG1D,OAAQV,OAAQ8D,EAAQ,KAEvC3D,GAChB,CAAEG,aAAc8D,EAAY,GAAGtM,WAAYkI,OAAQ8D,EAAQ,IAC3D,CAAExD,aAAc8D,EAAY,GAAGtM,WAAYkI,OAAQ8D,EAAQ,IAC3D,CAAExD,aAAc8D,EAAY,GAAGtM,WAAYkI,OAAQ8D,EAAQ,IAC3D,CAAExD,aAAc8D,EAAY,GAAGtM,WAAYkI,OAAQ8D,EAAQ,U,oCC1T3DkC,G,OAAOC,GAAsBC,MAgL7BC,GAAkB,SACtBjN,EACAkN,GAEA,IAAIC,EAAW,GACXC,EAAc,GAGZC,EAAmD,GACnDC,EAAoD,GAC1D,GACEJ,EAAUhY,OAAOvB,6BACakM,IAA9BqN,EAAUvN,gBAGV,IADA,IAAIrD,EAAU0D,EAASkN,EAAUvN,iBACxB9O,EAAQ,EAAGA,GAAS,GAAIA,IAC/B,GAAKqc,EAAUK,YAAY1c,EAAOyL,GAAlC,CACA,MAAqB4Q,EAAUM,YAAYlR,EAASzL,EAAO,EAAG,GAAxD4X,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,KACZ2E,EAAsBxc,GAAS4X,EAC/B6E,EAAuBzc,GAAS6X,EAIpC,IAAK,IAAIna,KAAMyR,EAAU,CACvB,IAAI1D,EAAU0D,EAASzR,GACvB,GAAK+N,EAAQC,QAAb,CAKA,IAHA,IAAMkR,EAAa,GACbC,EAAc,GACdC,EAAe,GACZ9c,EAAQ,EAAGA,GAAS,GAAIA,IAC/B,GAAKqc,EAAUK,YAAY1c,EAAOyL,GAAlC,CAEA,MAAqB4Q,EAAUM,YAAYlR,EAASzL,EAAO,EAAG,GAAxD4X,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,KACRwE,EAAUhY,OAAOvB,uBACf9C,KAASwc,IACXI,EAAWzd,KAAKa,GAChB6c,EAAY1d,KAAKyY,EAAO4E,EAAsBxc,IAC9C8c,EAAa3d,KAAK0Y,EAAO4E,EAAuBzc,MAGlD4c,EAAWzd,KAAKa,GAChB6c,EAAY1d,KAAKyY,GACjBkF,EAAa3d,KAAK0Y,IAGtByE,EAASnd,KAAK,CACZxB,KAAM,UACNd,KAAM4O,EAAQ5O,KACdkgB,EAAGH,EACHI,EAAGH,EACHI,MAAO,MAETV,EAAYpd,KAAK,CACfxB,KAAM,UACNd,KAAM4O,EAAQ5O,KACdkgB,EAAGH,EACHI,EAAGF,EACHG,MAAO,OAIX,MAAO,CAAEX,WAAUC,gBAGfW,GAAa,SACjB/N,EACAkN,EACAc,GAEI,IADJC,IACG,yDACCd,EAAW,GACXC,EAAc,GACdc,EAAkB,GAClBC,EAA4B,GAShC,IAAK,IAAI5f,KAAMyR,EAAU,CACvB,IAAI1D,EAAU0D,EAASzR,GACvB,GAAK+N,EAAQC,SACR2Q,EAAUK,YAAYS,EAAc1R,GAAzC,CAMA,IAJA,IAAM8R,EAAa,GACbC,EAAc,GACdC,EAAe,GAEZ5E,GAAS,EAAGA,GAAS,EAAGA,IAAS,CACxC0E,EAAWpe,KAAK0Z,GAChB,MAAqBwD,EAAUM,YAC7BlR,EACA0R,EACAC,EAAUvE,EAAQ,EAClBuE,EAAU,EAAIvE,GAJVjB,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,KAOE,IAAVgB,IACFwE,EAAgBle,KACd,iCACGsM,EAAQ5O,KACR,KACA+a,EAAK8F,QAAQ,KAHNjS,EAAQ/N,KAMpB4f,EAA0Bne,KACxB,iCACGsM,EAAQ5O,KACR,KACAgb,EAAK6F,QAAQ,KAHNjS,EAAQ/N,MAQtB8f,EAAYre,KAAKyY,GACjB6F,EAAate,KAAK0Y,GAGpByE,EAASnd,KAAK,CACZxB,KAAM,UACNd,KAAM4O,EAAQ5O,KACdkgB,EAAGQ,EACHP,EAAGQ,EACHP,MAAO,MAETV,EAAYpd,KAAK,CACfxB,KAAM,UACNd,KAAM4O,EAAQ5O,KACdkgB,EAAGQ,EACHP,EAAGS,EACHR,MAAO,OAGX,MAAO,CAAEI,kBAAiBC,4BAA2BhB,WAAUC,gBAG3DoB,GAAuB,SAC3BxO,EACAkN,EACAc,GAEA,IAAIb,EAAW,GACXC,EAAc,GACdc,EAAkB,GAClBC,EAA4B,GAUhC,IAAK,IAAI5f,KAAMyR,EAAU,CACvB,IAAI1D,EAAU0D,EAASzR,GACvB,GAAK+N,EAAQC,SACR2Q,EAAUK,YAAYS,EAAc1R,GAAzC,CACA,MASI4Q,EAAUM,YAAYlR,EAAS0R,EAAc,EAAG,GARlDvF,EADF,EACEA,KACAC,EAFF,EAEEA,KACAL,EAHF,EAGEA,UACAM,EAJF,EAIEA,aACAL,EALF,EAKEA,WACAC,EANF,EAMEA,WACAK,EAPF,EAOEA,cACAJ,EARF,EAQEA,YAEF0F,EAAgBle,KACd,iCACGsM,EAAQ5O,KACR,KACA+a,EAAK8F,QAAQ,KAHNjS,EAAQ/N,KAMpB4f,EAA0Bne,KACxB,iCACGsM,EAAQ5O,KACR,KACAgb,EAAK6F,QAAQ,KAHNjS,EAAQ/N,KAMpB4e,EAASnd,KAAK,CACZxB,KAAM,UACNd,KAAM4O,EAAQ5O,KACdkgB,EAAGvF,EACHwF,EAAGvF,EACHwF,MAAO,MAETX,EAASnd,KAAK,CACZxB,KAAM,MACNd,KAAM+a,EAAK8F,QAAQ,GACnBX,EAAGvF,EACHwF,EAAGlF,IAELyE,EAAYpd,KAAK,CACfxB,KAAM,UACNd,KAAM4O,EAAQ5O,KACdkgB,EAAGrF,EACHsF,EAAGrF,IAEL4E,EAAYpd,KAAK,CACfxB,KAAM,MACNd,KAAMgb,EAAK6F,QAAQ,GACnBX,EAAGrF,EACHsF,EAAGjF,KAGP,MAAO,CAAEsF,kBAAiBC,4BAA2BhB,WAAUC,gBAGlDqB,GArYW,SAACC,EAAmBV,GAC5C,IAAMhO,EAAW7S,GAAekW,IAC1BpD,EAAgB9S,GAAeqW,IAC/BrT,EAAUhD,GAAekD,IACzBuN,EAAUzQ,GAAeuW,IACzB5F,EAAU3Q,GAAeyW,IACzB5U,EAAa7B,GAAe8B,IAC5B0Q,EAAkBxS,GAAe0W,IAEjCqJ,EAAY,IAAInF,GACpB9H,EACA9P,EACAyN,EACAE,EACA9O,EACA2Q,GAGIyJ,EAAgBjZ,EAAQ,GAC1Bwe,EAAQ,IAAMX,EACdY,EAAcxF,EAAc1b,KAEhCihB,GAAS,OACTA,GAAS,QAAU5U,GAAWqP,EAAc/V,SAAS2a,GACrDW,GAAS,UAAY3U,GAAaoP,EAAc9V,WAAW0a,GAC3DW,GAAS,SAAW3U,GAAaoP,EAAc7V,UAAUya,GACzDW,GAAS,UAAY3U,GAAaoP,EAAc5V,WAAWwa,GAC3DW,GAAS,SAAW3U,GAAaoP,EAAc3V,UAAUua,GASzD,IAEIE,EACAC,EAHAhB,EAA0B,GAC1BC,EAA6B,GAGjC,OAAQsB,GACN,KAAKrpB,EAAWC,aAAhB,MAEIkpB,GAAqBxO,EAAUkN,EAAWc,GADzCE,EADL,EACKA,gBAAiBC,EADtB,EACsBA,0BAA2BhB,EADjD,EACiDA,SAAUC,EAD3D,EAC2DA,YAEzD,MACF,KAAK/nB,EAAWE,UAAhB,MAEIwoB,GAAW/N,EAAUkN,EAAWc,GAAc,GAD7CE,EADL,EACKA,gBAAiBC,EADtB,EACsBA,0BAA2BhB,EADjD,EACiDA,SAAUC,EAD3D,EAC2DA,YAEzD,MACF,KAAK/nB,EAAWG,MAAhB,MAEIuoB,GAAW/N,EAAUkN,EAAWc,GAAc,GAD7CE,EADL,EACKA,gBAAiBC,EADtB,EACsBA,0BAA2BhB,EADjD,EACiDA,SAAUC,EAD3D,EAC2DA,YAM7D,IAGIyB,EACAC,EAJJ,EACE7B,GAAgBjN,EAAUkN,GADZ6B,EAAhB,EAAM5B,SAAwC6B,EAA9C,EAAiC5B,YA4GjC,OAvGIsB,IAAcrpB,EAAWC,cAC3BupB,EAAS,SACTC,EAAS,UACAJ,IAAcrpB,EAAWE,WAClCspB,EAAS,oBACTC,EAAS,mBACAJ,IAAcrpB,EAAWG,QAClCqpB,EAAS,0BACTC,EAAS,mBA+FJ,CACLZ,kBACAC,4BACAc,YA9FA,eAACnC,GAAD,CACEvI,UAAU,OACV2K,KAAM/B,EACNgC,OAAQ,CACNR,MAAOA,EACPS,UAAU,EACVC,MAAO,CAAEV,MAAOE,GAChBf,MAAO,CAAEa,MAAOG,GAChBQ,OAAQ,CACN1B,EAAG,EACHC,EAAG,EACH0B,QAAS,SAEXC,OAAQ,CACNC,EAAG,GACHC,EAAG,KAGPC,kBAAkB,EAClBC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,UA4ElCC,sBAxEA,eAACjD,GAAD,CACEvI,UAAU,OACV2K,KAAM9B,EACN+B,OAAQ,CACNR,MAAO,6BACPS,UAAU,EACVC,MAAO,CAAEV,MAAO,qBAChBb,MAAO,CAAEa,MAAO,UAChBW,OAAQ,CACN1B,EAAG,EACHC,EAAG,EACH0B,QAAS,SAEXC,OAAQ,CACNC,EAAG,GACHC,EAAG,KAGPC,kBAAkB,EAClBC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,UAsDlCE,mBAlDA,eAAClD,GAAD,CACEvI,UAAU,OACV2K,KAAMH,EACNI,OAAQ,CACNR,MAAOC,EACPQ,UAAU,EACVC,MAAO,CAAEV,MAAO,SAChBb,MAAO,CAAEa,MAAO,mBAChBW,OAAQ,CACN1B,EAAG,EACHC,EAAG,EACH0B,QAAS,QAEXC,OAAQ,CACNC,EAAG,GACHC,EAAG,KAGPC,kBAAkB,EAClBC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,UAgClCG,sBA5BA,eAACnD,GAAD,CACEvI,UAAU,OACV2K,KAAMF,EACNG,OAAQ,CACNR,MAAOC,EACPQ,UAAU,EACVC,MAAO,CAAEV,MAAO,SAChBb,MAAO,CAAEa,MAAO,8BAChBW,OAAQ,CACN1B,EAAG,EACHC,EAAG,EACH0B,QAAS,SAEXC,OAAQ,CACNC,EAAG,GACHC,EAAG,KAGPC,kBAAkB,EAClBC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,YCzGvBI,GAtEC,WAId,MAAkCtc,mBAAiBvO,EAAWC,cAA9D,mBAAOopB,EAAP,KACA,GADA,KACwC9a,mBAAS,IAAjD,mBAAOoa,EAAP,KAMEgC,GANF,KAQIvB,GAAkBC,EAAWV,GAF/BgC,oBAKF,OACE,gBAAC,IAAMG,SAAP,WACE,eAACjd,GAAD,IACA,6BAAQ8c,Q,sGCVDI,GAAmB,SAAnBA,EAAoB,GAQ1B,IAPL7hB,EAOI,EAPJA,GACAsC,EAMI,EANJA,MAMI,IALJwf,uBAKI,SACJ,EAA6CljB,IAC3C,SAACiB,GAAD,OAAsBmV,GAAuBnV,EAAOG,MAD9CI,EAAR,EAAQA,SAAUuO,EAAlB,EAAkBA,UAAW1O,EAA7B,EAA6BA,KAAMkO,EAAnC,EAAmCA,MAG7BkD,EAAuBzS,GAAe2W,IACtCwM,EAAmBnjB,GAAe4W,IAElC7P,EAAWjH,IAEbsjB,EAAO,eAAC,KAAD,IACX,GAAQ/hB,IACDzH,EAAcE,KACjBspB,EAAO,eAAC,KAAD,IAMX,OACE,gBAAC,IAAMJ,SAAP,WACE,sBACEK,SAAU5Q,IAAyBrR,GAAM+hB,IAAqB/hB,EAC9D4F,GAAI,CAAEsc,GAAI,EAAI5f,EAAQ,GACtB6f,QAAS,kBAAMxc,EAASwM,GAAgBnS,KAH1C,UAME,8BAAegiB,IACf,qBACEI,QAASniB,EACToiB,eAAwB/Q,IAAblR,EAAyBuO,EAAY,QAGnDmT,EACG3T,EAAM4M,KAAI,SAACvM,GAAD,OACR,eAACqT,EAAD,CAA6B7hB,GAAIwO,EAAMlM,MAAOA,EAAQ,GAA/BkM,MAEzB,OCmMK8T,OA1Of,YAAgE,IAArCxR,EAAoC,EAApCA,UAEzB,EAA2DlS,IACzD,SAACiB,GAAD,OAAsBgV,GAAkBhV,EAAOiR,MADzC3R,EAAR,EAAQA,KAAMiP,EAAd,EAAcA,WAAYC,EAA1B,EAA0BA,SAAUJ,EAApC,EAAoCA,YAAaE,EAAjD,EAAiDA,MAG3CxI,EAAWjH,IACjB,EAA8B2G,mBAASlG,GAAvC,mBAAKmG,EAAL,KAAeC,EAAf,KACA,EAA8CF,mBAAS4I,GAAvD,mBAAOsU,EAAP,KAAwBC,EAAxB,KACA,EAAoCnd,mBAAS,CAAC+I,EAAYC,IAA1D,mBAAKoU,EAAL,KAAkBC,EAAlB,KAQA,OAPAC,qBAAU,kBAAMpd,EAAYpG,KAAO,CAACA,IACpCwjB,qBAAU,kBAAMH,EAAmBvU,KAAc,CAACA,IAClD0U,qBACE,kBAAMD,EAAe,CAACtU,EAAYC,MAClC,CAACD,EAAYC,IAIb,+BACE,qBAAMtI,WAAS,EAACC,QAAS,CAAEC,GAAI,EAAGC,GAAI,GAAKN,GAAI,CAAEC,GAAI,EAAGC,EAAG,GAA3D,UACE,oBAAMK,MAAI,EAACF,GAAI,GAAIC,GAAI,EAAGE,GAAI,GAAIC,GAAI,EAAtC,SACE,oBACEC,WAAS,EACTC,MAAM,eACNC,YAAY,uBACZtG,MAAOoF,EACPmB,SAAU,SAACC,GACTnB,EAAYmB,EAAEC,OAAOzG,QAEvB0G,OAAQ,kBACNjB,EACE0M,GAAe,CAAErS,GAAI8Q,EAAWjK,QAAS,CAAE1H,KAAMmG,WAKzD,qBAAMa,MAAI,EAACF,GAAI,GAAIC,GAAI,EAAGE,GAAI,GAAIC,GAAI,EAAGT,GAAI,CAAEgd,GAAI,GAAnD,UACE,qBAAYC,MAAM,SAAlB,2BACiBzU,EADjB,OACiCC,KAEjC,oBACEyU,aAAc,iBAAM,gBACpB5iB,MAAOuiB,EACP1b,IAAK,EACLC,IAAK,GACLC,OAAK,EAELR,SAAU,SAACC,EAAGQ,GAAJ,OAAqBwb,EAAexb,IAC9CN,OAAQ,kBACNjB,EACE0M,GAAe,CACbrS,GAAI8Q,EACJjK,QAAS,CACPuH,WAAYqU,EAAY,GACxBpU,SAAUoU,EAAY,QAK9BM,kBAAkB,OAClBC,iBAAkB,SAACC,GAAD,gBAAUA,SAGhC,oBAAM9c,MAAI,EAACF,GAAI,GAAf,SACE,oBACEK,WAAS,EACT4c,WAAS,EACT3c,MAAM,sBACNC,YAAY,sGACZtG,MAAOqiB,EACP9b,SAAU,SAACC,GACT8b,EAAmB9b,EAAEC,OAAOzG,QAE9B0G,OAAQ,kBACNjB,EACE0M,GAAe,CACbrS,GAAI8Q,EACJjK,QAAS,CAAEoH,YAAasU,cAQpC,qBACEviB,GAAG,wBACHmjB,UAAW,6CAFb,SAIGhV,EAAM4M,KAAI,SAACvM,GAAD,OACT,eAAC,GAAD,CAA6BxO,GAAIwO,EAAMlM,MAAO,GAAvBkM,QAI3B,qBAAMzI,WAAS,EAACC,QAAS,CAAEC,GAAI,GAAKL,GAAI,CAAEC,GAAI,EAAGC,EAAG,GAApD,UACE,oBACEK,MAAI,EACJJ,WAAS,EACTE,GAAI,EACJC,GAAI,EACJE,GAAI,EACJC,GAAI,EACJ+c,eAAe,SAPjB,SASE,qBACEC,QAAQ,YACRlB,QAAS,kBAAMxc,EAASuN,GAAqB,CAAEpC,gBAFjD,mCAOF,oBACE3K,MAAI,EACJJ,WAAS,EACTE,GAAI,EACJC,GAAI,EACJE,GAAI,EACJC,GAAI,EACJ+c,eAAe,SAPjB,SASE,qBACEC,QAAQ,WACRlB,QAAS,kBAAMxc,EAASwN,GAAyB,CAAErC,gBAFrD,kCAOF,oBACE3K,MAAI,EACJJ,WAAS,EACTE,GAAI,EACJC,GAAI,EACJE,GAAI,EACJC,GAAI,EACJ+c,eAAe,SAPjB,SASE,qBACEC,QAAQ,WACRlB,QAAS,kBACPxc,EACEwN,GAAyB,CACvBrC,YACAsC,aAAc5a,EAAcC,WANpC,kCAcF,oBACE0N,MAAI,EACJJ,WAAS,EACTE,GAAI,EACJC,GAAI,EACJE,GAAI,EACJC,GAAI,EACJ+c,eAAe,SAPjB,SASE,qBACEC,QAAQ,WACRlB,QAAS,kBACPxc,EACEwN,GAAyB,CACvBrC,YACAsC,aAAc5a,EAAcE,SANpC,sC,oBCpDK4qB,GAzGE,WACf,IAAM7R,EAAW7S,GAAemW,IAC1B3D,EAAkBxS,GAAe0W,IACjC3P,EAAWjH,IAEX6kB,EAAgC,GAChCC,EAAiC,GA6BvC,OA5BA/R,EAASmL,SAAQ,SAAC7O,GAChBwV,EAAe9hB,KACb,qBAAUvB,MAAO6N,EAAQ/N,GAAzB,SACG+N,EAAQ5O,MADuB4O,EAAQ/N,KAI5CwjB,EAAgB/hB,KACd,eAAC,KAAD,CAAKgiB,UAAU,KAAsB7d,GAAI,CAAEqb,OAAQ,IAAnD,SACE,qBACE1a,MAAOwH,EAAQ5O,KACfkkB,QAAStV,EAAQC,QAAU,SAAW,WACtC0V,KAAK,QACLC,MAAM,YACNxB,QAAS,WACPxc,EACE0M,GAAe,CACbrS,GAAI+N,EAAQ/N,GACZ6G,QAAS,CAAEmH,SAAUD,EAAQC,YAGjCrI,EAASuM,GAAWnE,EAAQ/N,MAE9B4jB,SAAU,kBAAMje,EAASoN,GAAehF,EAAQ/N,SAf3B+N,EAAQ/N,QAsBnC,gBAAC,IAAM4hB,SAAP,WACE,oBACEyB,QAAQ,WACRzd,GAAI,CACFoI,QAAS,OACT6V,SAAU,OACVT,eAAgB,SAChBU,UAAW,OACXhe,EAAG,GACHD,GAAI,GAEN4d,UAAU,KAVZ,SAYGD,IAEH,oBAAOH,QAAQ,WAAWzd,GAAI,CAAEC,GAAI,EAAGC,EAAG,GAA1C,SACE,qBAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,oBAAMG,MAAI,EAACF,GAAI,GAAIC,GAAI,EAAGE,GAAI,GAAIC,GAAI,EAAtC,SACE,qBAAaC,WAAS,EAAtB,UACE,oBAAYtG,GAAG,uBAAf,4BACA,oBACEqH,QAAQ,uBACRrH,GAAG,iBACHE,MAAOkR,EACP7K,MAAM,iBACNE,SAAU,SAACC,GAAD,OAAOf,EAASuM,GAAWxL,EAAEC,OAAOzG,SALhD,SAOGqjB,SAIP,oBACEpd,MAAI,EACJJ,WAAS,EACTE,GAAI,EACJC,GAAI,EACJE,GAAI,EACJC,GAAI,EACJ+c,eAAe,SAPjB,SASE,qBACEC,QAAQ,YACRlB,QAAS,kBAAMxc,EAASiN,GAAe,CAAEC,MAAM,MAFjD,kCAOF,oBACE1M,MAAI,EACJJ,WAAS,EACTE,GAAI,EACJC,GAAI,EACJE,GAAI,EACJC,GAAI,EACJ+c,eAAe,SAPjB,SASE,qBACEC,QAAQ,WACRlB,QAAS,kBAAMxc,EAASiN,GAAe,CAAEC,MAAM,MAFjD,8CCxGCkR,GAAkB,CAZf,k0GACA,wmIACF,yhCACK,08IACD,qyGACF,k3JACG,25MACG,q7RACH,qwJACA,k0oCACA,4kPCoFJC,GA5EM,WACnB,IAAMjW,EAAUnP,GAAe8W,IACzBuO,EAAcrlB,GAAegX,IAEnC,EAAkCvQ,mBAAS,IAA3C,mBAAO6e,EAAP,KAAkBC,EAAlB,KACMxe,EAAWjH,IACjBikB,qBAAU,WACJsB,IAAgB/sB,EAClBitB,EAAa,iBACJF,IAAgB/sB,GACzBitB,EAAa,uBAEd,CAACF,IA8BJ,OACE,qBAAOre,GAAI,CAAEE,EAAG,GAAhB,UACE,oBAAYud,QAAQ,KAApB,qCACA,qBAAMtd,WAAS,EAAf,UACE,oBAAMI,MAAI,EAAV,SACE,qBAAQgc,QAjCQ,WACtBxc,EAASgM,GAAcuS,KAgCjB,sBAEF,oBAAM/d,MAAI,EAAV,SACE,qBAAQgc,QAjCF,WACZgC,EAAa1P,KAAK2P,UAAUrW,KAgCtB,sBAQF,oBAAM5H,MAAI,EAAV,SACE,qBAAQgc,QA9BW,WAAO,IAAD,iBACjB4B,IADiB,IAC/B,2BAA+B,CAAC,IAAvB5C,EAAsB,QAC7Bxb,EAASgM,GAAcwP,KAFM,gCA8BzB,oCAEF,oBAAMhb,MAAI,EAACF,GAAI,GAAf,SACE,oBACEK,WAAS,EACT4c,WAAS,EACT3c,MAAM,eACNC,YAAY,qCACZtG,MAAOgkB,EACPzd,SAAU,SAACC,GAAD,OAAOyd,EAAazd,EAAEC,OAAOzG,mB,kDCpD7CmkB,GAAsB,SAACC,GAM3B,IALA,IAAM9X,EAA2B,GAC7BC,EAAe,EACf8X,EAAQ,EACRC,EAAe,EAEVliB,EAAQ,EAAGA,GAAS,GAAIA,IAC3BgiB,EAAQE,IAAiBF,EAAQE,GAAc,KAAOliB,KAExDmK,EAAegY,SAASH,EAAQE,GAAc,OAC3B/X,EAAe,GAClC+X,IACAD,GAAS9X,GAEXD,EAAYlK,GAASiiB,EAEvB,OAAO/X,GAGIkY,GAA6B,SACxCJ,EACAzO,EACA8O,GAIA,OAFAL,EAAQzO,GAAS,CAAC8O,EAAUL,EAAQzO,GAAO,IAC3CyO,EAAQM,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE,GAAKC,EAAE,MACzBT,GAAoBC,IAYhBS,GAA0B,SAACT,GACtC,IAAIU,EACFV,EAAQxO,OAAS,EAAIwO,EAAQA,EAAQxO,OAAS,GAAK,CAAC,EAAG,KAEzD,OADAwO,EAAQ7iB,KAAK,CAACujB,EAAU,GAAK,GAAI,GAAGxf,aAC7B6e,GAAoBC,IAGhBW,GAAY,SACvB9lB,EACAwG,EACA7F,EACAE,EACAwM,GAEA,IAAM0Y,EAhEuB,SAAC1Y,GAG9B,IAFA,IAAIC,EAAe,EACb6X,EAAmB,GAChBhiB,EAAQ,EAAGA,GAAS,GAAIA,IAC3BmK,IAAiBD,EAAYlK,KAC/BgiB,EAAQ7iB,KAAK,CAACa,GAAQkK,EAAYlK,GAASmK,GAAcjH,aACzDiH,EAAeD,EAAYlK,IAG/B,OAAOgiB,EAuDaa,CAAgB3Y,GACpC,EAA4BnH,mBAAS6f,GAArC,mBAAKZ,EAAL,KAAcc,EAAd,KACIC,EAAK5Q,KAAK2P,UAAUc,GAExBvC,qBAAU,kBAAMyC,EAAWF,KAAc,CAACG,IAG1C,IAFA,IAAIC,EAAY,GANb,WAQM1c,GACP0c,EAAU7jB,KACR,qBAAM0E,MAAI,EAAV,UACE,qBAAaud,KAAK,QAAlB,UACE,uCACA,oBACEnd,MAAM,QACNrG,MAAOokB,EAAQ1b,GAAG,GAClBnC,SAAU,SAACC,GAAD,OACRf,EACE7F,EAAO,CACLE,KACA6G,QAAQ,gBACL1H,EAAOulB,GACNJ,EACA1b,EACA2c,OAAO7e,EAAEC,OAAOzG,aAX5B,SAkBGmC,QAGL,oBACEqhB,KAAK,QACLnd,MAAM,QACNX,GAAI,CAAE0b,MAAO,OACbphB,MAAOokB,EAAQ1b,GAAG,GAClBnC,SAAU,SAACC,GACT,IAAI8e,EAAalB,EAAQmB,QACzBD,EAAW5c,GAAK,CAAC4c,EAAW5c,GAAG,GAAIlC,EAAEC,OAAOzG,OAC5CklB,EAAWI,GACX9e,EAAEC,OAAOW,SAEXV,OAAQ,WAEN,IADA,IAAI4e,EAAalB,EAAQmB,QAChBC,EAAK,EAAGA,EAAKpB,EAAQxO,OAAQ4P,IACpCF,EAAWE,GAAM,CACfF,EAAWE,GAAI,GACfjB,SAASe,EAAWE,GAAI,IAAIlgB,YAGhC4f,EAAWI,GACX7f,EACE7F,EAAO,CACLE,KACA6G,QAAQ,gBACL1H,EAAOklB,GAAoBC,YAhDxB1b,KAFXA,EAAI,EAAGA,EAAI0b,EAAQxO,OAAQlN,IAAM,EAAjCA,GAmGT,OApBA0c,EAAU7jB,KACR,oBAAM0E,MAAI,EAAV,SACE,qBACEwd,MAAM,UACN,aAAW,aACXxB,QAAS,kBACPxc,EACE7F,EAAO,CACLE,KACA6G,QAAQ,gBACL1H,EAAO4lB,GAAwBT,QAR1C,SAcE,eAAC,KAAD,OAfW,cAmBVgB,G,wCCnJIK,GAAS,SAAC,GAAwD,IAAtDvlB,EAAqD,EAArDA,SAAUJ,EAA2C,EAA3CA,GACjC,EAeIpB,IAAe,SAACiB,GAAD,OAAsBqV,GAAiBrV,EAAOG,MAd/D4P,EADF,EACEA,gBACAO,EAFF,EAEEA,WACAC,EAHF,EAGEA,SACAC,EAJF,EAIEA,WACAC,EALF,EAKEA,WACA0B,EANF,EAMEA,WAEAnC,EARF,EAQEA,SACAC,EATF,EASEA,eACAC,EAVF,EAUEA,SACAC,EAXF,EAWEA,MACAC,EAZF,EAYEA,SACAN,EAbF,EAaEA,YACAO,EAdF,EAcEA,kBAEIvK,EAAWjH,IAEXknB,EAAeX,GACnB,iBACAtf,EACA8M,GACAzS,EACA8P,GAGI+V,EAAkBZ,GACtB,oBACAtf,EACA8M,GACAzS,EACAkQ,GAGI4V,EAAkBnW,EAAYoL,KAAI,SAAC9W,EAAI4R,GAC3C,OACE,oBAAM1P,MAAI,EAAV,SACE,oBAEEud,KAAK,QACLxjB,MAAO+D,EACPwC,SAAU,SAACC,GACT,IAAIqf,EAAQpW,EAAY8V,QACpB/e,EAAEC,OAAOzG,QAAUvD,EAAa1C,KAClC8rB,EAAMC,OAAOnQ,EAAO,GAEpBkQ,EAAMlQ,GAASnP,EAAEC,OAAOzG,MAE1ByF,EACE8M,GAAc,CACZzS,KACA6G,QAAS,CAAE8I,YAAaoW,OAdhC,SAmBG7hB,MApBW2R,MA0BpB,OACE,gBAAC,KAAD,CACEjQ,GAAI,CACFqgB,GAAI,EACJC,GAAI,GAHR,UAME,eAACC,GAAA,EAAD,CAASC,UAAU,OAAOxgB,GAAI,CAAEqgB,GAAI,EAAGC,GAAI,KAC3C,qBAAMngB,WAAS,EAACC,QAAS,CAAEC,GAAI,EAAGC,GAAI,GAAKN,GAAI,CAAEC,GAAI,GAArD,UACE,oBAAMM,MAAI,EAACF,GAAG,OAAd,SACE,qBACE0d,MAAM,UACND,KAAK,QACLvB,QAAS,SAACzb,GACRf,EAASuO,GAAc,CAAElU,KAAII,eAJjC,SAOE,eAAC,KAAD,QAIJ,oBAAM+F,MAAI,EAACF,IAAE,EAAb,SACE,qBAAayd,KAAK,QAAQpd,WAAS,EAAnC,UACE,oBAAYtG,GAAG,yBAAf,uBACA,oBACEqH,QAAQ,yBACRrH,GAAG,mBACHE,MAAO0P,EACPrJ,MAAM,YACNE,SAAU,SAACC,GAAD,OACRf,EACE8M,GAAc,CACZzS,KACA6G,QAAS,CAAE+I,gBAAiBlJ,EAAEC,OAAOzG,WAT7C,SAcG0D,UAMP,oBAAMuC,MAAI,EAAV,SACE,qBAAaud,KAAK,QAAlB,UACE,oBAAY1jB,GAAG,0BAAf,wBACA,oBACEqH,QAAQ,0BACRrH,GAAG,oBACHE,MAAOoQ,EACP/J,MAAM,aACNE,SAAU,SAACC,GAAD,OACRf,EACE8M,GAAc,CACZzS,KACA6G,QAAS,CAAEyJ,WAAYiV,OAAO7e,EAAEC,OAAOzG,YAT/C,SAcGqE,UAIP,oBAAM4B,MAAI,EAAV,SACE,qBAAaud,KAAK,QAAlB,UACE,oBAAY1jB,GAAG,oBAAf,kBACA,oBACEqH,QAAQ,oBACRrH,GAAG,cACHE,MAAOiQ,EACP5J,MAAM,OACNE,SAAU,SAACC,GAAD,OACRf,EACE8M,GAAc,CACZzS,KACA6G,QAAS,CAAEsJ,WAAYzJ,EAAEC,OAAOzG,WATxC,SAcGkE,UAIP,oBAAM+B,MAAI,EAAV,SACE,qBAAaud,KAAK,QAAlB,UACE,oBAAY1jB,GAAG,wBAAf,sBACA,oBACEqH,QAAQ,wBACRrH,GAAG,kBACHE,MAAOkQ,EACP7J,MAAM,WACNE,SAAU,SAACC,GAAD,OACRf,EACE8M,GAAc,CACZzS,KACA6G,QAAS,CAAEuJ,SAAU1J,EAAEC,OAAOzG,WATtC,SAcGmE,UAIP,oBAAM8B,MAAI,EAAV,SACE,oBACEgB,QACE,qBACEC,QAASiJ,EACT5J,SAAU,SAACC,GAAD,OACRf,EACE8M,GAAc,CACZzS,KACA6G,QAAS,CAAEwJ,WAAY3J,EAAEC,OAAOS,eAM1Cb,MAAM,iBAGV,oBAAMJ,MAAI,EAAV,SACE,qBAAaud,KAAK,QAAlB,UACE,oBAAY1jB,GAAG,oBAAf,yBACA,oBACEqH,QAAQ,oBACRrH,GAAG,cACHqmB,UAAQ,EACRnmB,MAAO8R,EACPzL,MAAM,cACN+f,YAAa,SAACrE,GAAD,OAAcA,EAASsE,KAAK,SACzC9f,SAAU,SAACC,GAAD,OACRf,EACE8M,GAAc,CACZzS,KACA6G,QAAS,CAAEmL,WAAYtL,EAAEC,OAAOzG,WAXxC,SAgBG6B,GAAYxD,aAKrB,eAAC4nB,GAAA,EAAD,CAASC,UAAU,OAAOxgB,GAAI,CAAEqgB,GAAI,EAAGC,GAAI,GAA3C,kBAGA,qBAAMngB,WAAS,EAACC,QAAS,CAAEC,GAAI,EAAGC,GAAI,GAAtC,UACE,oBAAMC,MAAI,EAAV,SACE,qBAAaud,KAAK,QAAlB,UACE,oBAAY1jB,GAAG,aAAf,yBACA,oBACEqH,QAAQ,aACRrH,GAAG,OACHE,MAAO2P,EACPtJ,MAAM,cACNE,SAAU,SAACC,GAAD,OACRf,EACE8M,GAAc,CACZzS,KACA6G,QAAS,CAAEgJ,SAAUnJ,EAAEC,OAAOzG,WATtC,SAcG4D,UAIN8hB,EACD,oBAAMzf,MAAI,EAAV,SACE,qBAAaud,KAAK,QAAlB,UACE,oBAAY1jB,GAAG,kBAAf,sBACA,oBACEqH,QAAQ,kBACRrH,GAAG,YACHE,MAAO6P,EACPxJ,MAAM,WACNE,SAAU,SAACC,GAAD,OACRf,EACE8M,GAAc,CACZzS,KACA6G,QAAS,CAAEkJ,SAAUrJ,EAAEC,OAAOzG,WATtC,SAcG8D,UAIP,oBAAMmC,MAAI,EAAV,SACE,oBACEgB,QACE,oBACEC,QAAS4I,EACTvJ,SAAU,SAACC,GAAD,OACRf,EACE8M,GAAc,CACZzS,KACA6G,QAAS,CAAEmJ,MAAOtJ,EAAEC,OAAOS,eAMrCb,MAAM,kBAGTyJ,EACC,oBAAM7J,MAAI,EAAV,SACE,qBAAaud,KAAK,QAAlB,UACE,oBAAY1jB,GAAG,mBAAf,sBACA,oBACEqH,QAAQ,mBACRrH,GAAG,aACHE,MAAO+P,EACP1J,MAAM,WACNE,SAAU,SAACC,GAAD,OACRf,EACE8M,GAAc,CACZzS,KACA6G,QAAS,CAAEoJ,SAAUvJ,EAAEC,OAAOzG,WATtC,SAcG8D,UAKP,MAGJ,eAACmiB,GAAA,EAAD,CAASC,UAAU,OAAOxgB,GAAI,CAAEqgB,GAAI,EAAGC,GAAI,GAA3C,2BAGA,qBAAMngB,WAAS,EAACC,QAAS,CAAEC,GAAI,EAAGC,GAAI,GAAtC,UACG4f,EACD,oBAAM3f,MAAI,EAAV,SACE,qBACEgc,QAAS,WACP,IAAI4D,EAAQpW,EAAY8V,QACxBM,EAAMtkB,KAAK9E,EAAa1C,MACxB0L,EACE8M,GAAc,CACZzS,KACA6G,QAAS,CACP8I,YAAaoW,OARvB,kCAiBDF,KAEH,eAACM,GAAA,EAAD,CAASC,UAAU,OAAOxgB,GAAI,CAAEqgB,GAAI,EAAGC,GAAI,SC1VpCM,GAAS,SAAC,GAAwD,IAAtDpmB,EAAqD,EAArDA,SAAUJ,EAA2C,EAA3CA,GACjC,EACEpB,IAAe,SAACiB,GAAD,OAAsBuV,GAAiBvV,EAAOG,MADvDwQ,EAAR,EAAQA,gBAAiBC,EAAzB,EAAyBA,WAAY4D,EAArC,EAAqCA,YAAajG,EAAlD,EAAkDA,WAAYC,EAA9D,EAA8DA,SAExD1I,EAAWjH,IACjB,EAAwB2G,mBAASgP,EAAcA,EAAY7O,WAAa,KAAxE,mBAAKtF,EAAL,KAAYumB,EAAZ,KACA,EAAoCphB,mBAAS,CAAC+I,EAAYC,IAA1D,mBAAKoU,EAAL,KAAkBC,EAAlB,KAMA,OALAC,qBACE,kBAAMD,EAAe,CAACtU,EAAYC,MAClC,CAACD,EAAYC,IAIb,eAAC,KAAD,CAAKzI,GAAI,CAAEqgB,GAAI,EAAGC,GAAI,GAAtB,SACE,qBAAMngB,WAAS,EAACC,QAAS,CAAEC,GAAI,EAAGC,GAAI,GAAKN,GAAI,CAAEC,GAAI,GAArD,UACE,oBAAMM,MAAI,EAACF,GAAG,OAAd,SACE,qBACE,aAAW,SACX0d,MAAM,UACNxB,QAAS,SAACzb,GACRf,EAAS2O,GAAc,CAAEtU,KAAII,eAJjC,SAOE,eAAC,KAAD,QAGJ,oBAAM+F,MAAI,EAAV,SACE,qBAAaud,KAAK,QAAQpd,WAAS,EAAnC,UACE,oBAAYtG,GAAG,yBAAf,uBACA,oBACEqH,QAAQ,yBACRrH,GAAG,mBACHE,MAAOsQ,EACPjK,MAAM,YACNE,SAAU,SAACC,GAAD,OACRf,EACEgN,GAAc,CACZ3S,KACA6G,QAAS,CAAE2J,gBAAiB9J,EAAEC,OAAOzG,WAT7C,SAcGsC,UAIP,oBAAM2D,MAAI,EAAV,SACE,qBAAaud,KAAK,QAAQpd,WAAS,EAAnC,UACE,oBAAYtG,GAAG,oBAAf,oBACA,oBACEqH,QAAQ,oBACRrH,GAAG,cACHE,MAAOuQ,EACPlK,MAAM,SACNE,SAAU,SAACC,GAAD,OACRf,EACEgN,GAAc,CACZ3S,KACA6G,QAAS,CAAE4J,WAAY/J,EAAEC,OAAOzG,WATxC,SAcGwE,UAOL+J,OAAOC,OAAOvQ,GAAkB8O,SAASwD,GACvC,oBAAMtK,MAAI,EAAV,SACE,oBACEud,KAAK,QACLnd,MAAM,QACNX,GAAI,CAAE0b,MAAO,OACbphB,MAAOA,EACPuG,SAAU,SAACC,GACT+f,EAAS/f,EAAEC,OAAOzG,OAClBwG,EAAEC,OAAOW,SAEXV,OAAQ,WACN,IAAIW,EAASkd,SAASvkB,GACtBumB,EAASlf,EAAO/B,YAChBG,EACEgN,GAAc,CACZ3S,KACA6G,QAAS,CACPwN,YAAa9M,WAQzB,GAIJ,qBAAMpB,MAAI,EAACP,GAAI,CAAEgd,GAAI,GAArB,UACE,qBAAYC,MAAM,SAAlB,2BACiBzU,EADjB,OACiCC,KAEjC,oBACEqV,KAAK,QACLZ,aAAc,iBAAM,gBACpB5iB,MAAOuiB,EACP1b,IAAK,EACLC,IAAK,GACLC,OAAK,EAELR,SAAU,SAACC,EAAGQ,GAAJ,OAAqBwb,EAAexb,IAC9CN,OAAQ,kBACNjB,EACEgN,GAAc,CACZ3S,KACA6G,QAAS,CACPuH,WAAYqU,EAAY,GACxBpU,SAAUoU,EAAY,QAK9BM,kBAAkB,OAClBC,iBAAkB,SAACC,GAAD,gBAAUA,eC5G3ByD,GAAe,SAAC,GAA4B,IAA1B1mB,EAAyB,EAAzBA,GAC7B,EAiBIpB,IAAe,SAACiB,GAAD,OAAsBmV,GAAuBnV,EAAOG,MAhBrEI,EADF,EACEA,SACA0Q,EAFF,EAEEA,UACAnC,EAHF,EAGEA,UAEAC,EALF,EAKEA,SACA3O,EANF,EAMEA,KACA4O,EAPF,EAOEA,UACAC,EARF,EAQEA,UACAC,EATF,EASEA,UACAE,EAVF,EAUEA,iBACAC,EAXF,EAWEA,IACAC,EAZF,EAYEA,WAEAE,EAdF,EAcEA,QACAE,EAfF,EAeEA,QACApB,EAhBF,EAgBEA,MAEIxI,EAAWjH,IAEXioB,EAAiB1B,GACrB,mBACAtf,EACA4M,GACAvS,EACAiP,GAGF,OACE,qBAAOrJ,GAAI,CAAEC,GAAI,EAAGC,EAAG,GAAvB,UACE,qBAAMC,WAAS,EAACC,QAAS,CAAEC,GAAI,EAAGC,GAAI,GAAKN,GAAI,CAAEC,GAAI,GAArD,UACE,oBAAMM,MAAI,EAACF,GAAG,OAAd,SACE,qBACEod,QAAQ,WACRK,KAAK,QACLkD,UAAW,eAAC,KAAD,IACXzE,QAAS,SAACzb,GACRf,EAASqO,GAAoB,CAAEhU,KAAII,WAAU0Q,gBALjD,2BAWYQ,IAAblR,EACC,oBAAM+F,MAAI,EAACF,IAAE,EAAb,SACE,qBAAayd,KAAK,QAAQpd,WAAS,EAAnC,UACE,oBAAYtG,GAAG,kBAAf,uBACA,oBACEqH,QAAQ,kBACRrH,GAAG,YACHE,MAAOyO,EACPpI,MAAM,YACNE,SAAU,SAACC,GAAD,OACRf,EACE4M,GAAoB,CAClBvS,KACA6G,QAAS,CAAE8H,UAAWjI,EAAEC,OAAOzG,WATvC,SAcGsC,UAKP,MAGJ,oBAAY6gB,QAAQ,KAAKwD,cAAY,EAArC,kBAGA,qBAAM9gB,WAAS,EAACC,QAAS,CAAEC,GAAI,EAAGC,GAAI,GAAKN,GAAI,CAAEC,GAAI,GAArD,UACE,oBAAMM,MAAI,EAAV,SACE,qBAAaud,KAAK,QAAlB,UACE,oBAAY1jB,GAAG,kBAAf,uBACA,oBACEqH,QAAQ,kBACRd,MAAM,YACNrG,MAAO0O,EACPnI,SAAU,SAACC,GACTf,EACE4M,GAAoB,CAClBvS,KACA6G,QAAS,CAAE+H,SAAUlI,EAAEC,OAAOzG,WARtC,SAaGwC,UAIP,oBAAMyD,MAAI,EAAV,SACE,qBAAaud,KAAK,QAAlB,UACE,oBAAY1jB,GAAG,sBAAf,2BACA,oBACEqH,QAAQ,sBACRd,MAAM,gBACNrG,MAAOD,EACPwG,SAAU,SAACC,GACTf,EACE4M,GAAoB,CAClBvS,KACA6G,QAAS,CAAE5G,KAAMyG,EAAEC,OAAOzG,WARlC,SAaG0C,UAIP,oBAAMuD,MAAI,EAAV,SACE,qBAAaud,KAAK,QAAlB,UACE,oBAAY1jB,GAAG,oBAAf,yBACA,oBACEqH,QAAQ,yBACRd,MAAM,cACNrG,MAAO2O,EACPpI,SAAU,SAACC,GACTf,EACE4M,GAAoB,CAClBvS,KACA6G,QAAS,CAAEgI,UAAWnI,EAAEC,OAAOzG,WARvC,SAaG4C,UAIP,oBAAMqD,MAAI,EAAV,SACE,qBAAaud,KAAK,QAAlB,UACE,oBAAY1jB,GAAG,sBAAf,2BACA,oBACEqH,QAAQ,sBACRd,MAAM,gBACNrG,MAAO4O,EACPrI,SAAU,SAACC,GACTf,EACE4M,GAAoB,CAClBvS,KACA6G,QAAS,CAAEiI,UAAWpI,EAAEC,OAAOzG,WARvC,SAaG8C,UAIP,oBAAMmD,MAAI,EAAV,SACE,qBAAaud,KAAK,QAAlB,UACE,oBAAY1jB,GAAG,mBAAf,wBACA,oBACEqH,QAAQ,mBACRd,MAAM,aACNrG,MAAO6O,EACPtI,SAAU,SAACC,GACTf,EACE4M,GAAoB,CAClBvS,KACA6G,QAAS,CAAEkI,UAAWrI,EAAEC,OAAOzG,WARvC,SAaGgD,UAINyjB,EACA1mB,IAASzH,EAAcE,KACtB,oBAAMyN,MAAI,EAAV,SACE,qBAAaud,KAAK,QAAlB,UACE,oBAAY1jB,GAAG,YAAf,iBACA,oBACEqH,QAAQ,YACRd,MAAM,MACNrG,MAAOgP,EACPzI,SAAU,SAACC,GACTf,EACE4M,GAAoB,CAClBvS,KACA6G,QAAS,CAAEqI,IAAKxI,EAAEC,OAAOzG,WARjC,SAaGkD,UAKP,GAEF,oBAAM+C,MAAI,EAAV,SACE,qBAAaud,KAAK,QAAlB,UACE,oBAAY1jB,GAAG,gBAAf,4BACA,oBACEqH,QAAQ,gBACRd,MAAM,iBACNrG,MAAOiP,EACP1I,SAAU,SAACC,GACTf,EACE4M,GAAoB,CAClBvS,KACA6G,QAAS,CAAEsI,WAAYzI,EAAEC,OAAOzG,WARxC,SAaGoD,aAOT,oBAAY+f,QAAQ,KAAKwD,cAAY,EAArC,qBAGCxX,EAAQ0L,KAAI,SAAC/J,GAAD,OACX,eAAC,GAAD,CAAQ5Q,SAAUJ,EAAIA,GAAIgR,GAAeA,MAG3C,qBACEpL,GAAI,CAAEsgB,GAAI,GACV7C,QAAQ,WACRK,KAAK,QACLvB,QAAS,kBAAMxc,EAASsO,GAAc,CAAE7T,SAAUJ,MAJpD,wBAQA,oBAAYqjB,QAAQ,KAAKwD,cAAY,EAArC,qBAGCtX,EAAQwL,KAAI,SAAC9J,GAAD,OACX,eAAC,GAAD,CAAQ7Q,SAAUJ,EAAIA,GAAIiR,GAAeA,MAE3C,qBACErL,GAAI,CAAEsgB,GAAI,GACV7C,QAAQ,WACRK,KAAK,QACLvB,QAAS,kBAAMxc,EAASyO,GAAc,CAAEhU,SAAUJ,MAJpD,wBASA,qBAAMmjB,UAAW,mDAAjB,SACGhV,EAAM4M,KAAI,SAACvM,GAAD,OACT,eAAC,GAAD,CAEExO,GAAIwO,EACJlM,MAAO,EACPwf,iBAAiB,GAHZtT,QAQVvO,IAASzH,EAAcC,OACtB,qBACE4qB,QAAQ,YACRlB,QAAS,WACP2E,OAAOC,SAASC,KAAO,yBACvBrhB,EACEiO,GAAsB,CACpBxT,SAAUJ,MANlB,6BAcA,GAEF,qBACEqjB,QAAQ,WACRlB,QAAS,SAAC8E,GACRH,OAAOC,SAASC,KAAO,yBACvBrhB,EAASuN,GAAqB,CAAE9S,SAAUJ,MAJ9C,oCCpRS,SAASknB,GAAT,GAMC,EALdpW,UAKc,EAJd1Q,SAIe,IACf,EAAwCiF,mBACtC7M,GAAcmT,QADhB,mBAAOyH,EAAP,KAAqB+T,EAArB,KAIA,OACE,6BACE,qBAAMphB,WAAS,EAACC,QAAS,CAAEC,GAAI,EAAGC,GAAI,GAAKN,GAAI,CAAE3C,EAAG,EAAG6C,EAAG,GAA1D,UACE,oBAAMK,MAAI,EAAV,SACE,8DAEF,oBAAMA,MAAI,EAAV,SACE,+BACE,+CACA,oBACEjG,MAAOkT,EACP7M,MAAM,gBACNE,SAAU,SAACC,GACTygB,EAAgBzgB,EAAEC,OAAOzG,QAJ7B,SAOG6B,GAAYvJ,WAInB,oBAAM2N,MAAI,EAAV,SACG3N,GAAcmT,SAAWyH,EACxB,eAACgU,GAAD,IACE5uB,GAAcoT,QAAUwH,EAC1B,eAACiU,GAAD,IACE7uB,GAAcqT,UAAYuH,EAC5B,eAACkU,GAAD,IACE9uB,GAAcsT,QAAUsH,EAC1B,eAACmU,GAAD,IAEA,UAQZ,SAASH,KACP,MAA0B/hB,mBAAmBxJ,EAAUK,MAAvD,mBAAO6M,EAAP,KAAcye,EAAd,KACA,EAA2BniB,mBAAiB2G,GAAQ,IAApD,mBAAOU,EAAP,KAAe+a,EAAf,KACA,EAAgCpiB,mBAAiB,UAAjD,mBAAOuH,EAAP,KAAiB8a,EAAjB,KACA,EAA8BriB,mBAAiB4G,GAAS,IAAxD,mBAAO0b,EAAP,KACA,GADA,KACsCtiB,mBAAoB7L,EAAWE,QAArE,mBAAO0c,EAAP,KAAoBwR,EAApB,KACA,EAAsCviB,mBAAoB7L,EAAWE,OAArE,mBAAOsT,EAAP,KAAoB6a,EAApB,KACA,EAAwCxiB,mBACtC7L,EAAWI,QADb,mBAAOkuB,EAAP,KAGA,GAHA,KAG8BziB,mBAAiB5G,EAAU,KAAzD,mBAAO6X,EAAP,KAAgByR,EAAhB,KACA,EAAoC1iB,mBAAiB,GAArD,mBAAOsO,EAAP,KAAmBqU,EAAnB,KACA,EAA4B3iB,mBAE1BoJ,OAAOwZ,YAAY9b,GAAa4O,KAAI,SAACmN,GAAD,MAAW,CAACA,GAAO,QAFzD,mBAAOnb,EAAP,KAAeob,GAAf,KAIA,GAAoC9iB,mBAAiB5G,EAAU,IAA/D,qBAAOiY,GAAP,MAAmB0R,GAAnB,MACA,GAAkC/iB,mBAAiB5G,EAAU,KAA7D,qBAAO8X,GAAP,MAAkB8R,GAAlB,MACA,GAAgChjB,oBAAkB,GAAlD,qBAAOiI,GAAP,MAAiBgb,GAAjB,MACA,GAA0CjjB,mBAAiB,GAA3D,qBAAOuI,GAAP,MAAsB2a,GAAtB,MACA,GAAwCljB,mBAAiB+G,GAAU,IAAnE,qBAAOmB,GAAP,MAAqBib,GAArB,MAEMlc,GAAyB,CAC7BvD,QACA2D,SACAE,WACA+a,UACAvR,cACApJ,cACA8a,eACAxR,UACA3C,aACA5G,SACA2J,cACAH,aACAjJ,YACAM,iBACAL,iBAGI5H,GAAWjH,IAMjB,OACE,qBAAMqH,WAAS,EAACC,QAAS,CAAEC,GAAI,EAAGC,GAAI,GAAtC,UACE,oBAAMC,MAAI,EAAV,SACE,+BACE,oDACA,oBACEjG,MAAO6I,EACPxC,MAAM,qBACNE,SAAU,SAACC,GACT8gB,EAAS9gB,EAAEC,OAAOzG,QAJtB,SAOG6B,GAAYgK,WAInB,oBAAM5F,MAAI,EAAV,SACE,+BACE,uCACA,oBACEjG,MAAOwM,EACPnG,MAAM,QACNE,SAAU,SAACC,GACT+gB,EAAS/gB,EAAEC,OAAOzG,QAJtB,SAOG6B,GAAYiK,WAKnB,oBAAM7F,MAAI,EAAV,SACE,+BACE,0CACA,oBACEjG,MAAO0M,EACPrG,MAAM,WACNE,SAAU,SAACC,GACTghB,EAAYhhB,EAAEC,OAAOzG,QAJzB,SASI6B,GAAYmK,WAqBlB,GAEF,oBAAM/F,MAAI,EAAV,SACE,+BACE,uDACA,oBACEjG,MAAOkW,EACP7P,MAAM,wBACNE,SAAU,SAACC,GACTkhB,EAAelhB,EAAEC,OAAOzG,QAJ5B,SASI6B,GAAYvI,UAKpB,oBAAM2M,MAAI,EAAV,SACE,+BACE,uDACA,oBACEjG,MAAO8M,EACPzG,MAAM,wBACNE,SAAU,SAACC,GACTmhB,EAAenhB,EAAEC,OAAOzG,QAJ5B,SASI6B,GAAYvI,UAwBlB,GAEF,oBAAM2M,MAAI,EAAV,SACE,+BACE,4CACA,oBACEjG,MAAOoW,EACP/P,MAAM,aACNE,SAAU,SAACC,GACTqhB,EAAWxC,OAAO7e,EAAEC,OAAOzG,SAJ/B,SAOG8D,UAMP,oBAAMmC,MAAI,EAAV,SACE,oBACEkd,QAAQ,WACRzd,GAAI,CACFoI,QAAS,OACT6V,SAAU,OACVT,eAAgB,SAChBU,UAAW,OACXhe,EAAG,GACHD,GAAI,GAEN4d,UAAU,KAVZ,SAYGtX,GAAa4O,KAAI,SAAC0N,EAAW5S,GAAZ,OAChB,oBAAK4N,UAAU,KAAqB7d,GAAI,CAAEqb,OAAQ,IAAlD,SACE,qBACE1a,MAAOkiB,EACP/E,KAAK,QACLC,MAAM,YACNN,QAAStW,EAAO0b,GAAa,SAAW,WACxCtG,QAAS,WACP,IAAMuG,EAAS,2BACV3b,GADU,mBAEZ0b,GAAa1b,EAAO0b,KAGvBN,GAAUO,OAZSD,UAmB9B1b,EAAM,OACL,oBAAM5G,MAAI,EAAV,SACE,+BACE,4CACA,oBACEjG,MAAOwW,GACPnQ,MAAM,aACNE,SAAU,SAACC,GACT0hB,GAAc7C,OAAO7e,EAAEC,OAAOzG,SAJlC,SAOG8D,UAKP,GAED+I,EAAM,MACL,oBAAM5G,MAAI,EAAV,SACE,+BACE,2CACA,oBACEjG,MAAOqW,GACPhQ,MAAM,YACNE,SAAU,SAACC,GACT2hB,GAAa9C,OAAO7e,EAAEC,OAAOzG,SAJjC,SAOG8D,UAKP,GAGF,oBAAMmC,MAAI,EAAV,SACE,oBACEgB,QACE,oBACEC,QAASkG,GACT7G,SAAU,SAACC,GAAD,OAAO4hB,GAAY5hB,EAAEC,OAAOS,YAG1Cb,MAAM,8BAIT+G,GACC,qBAAMnH,MAAI,EAAV,UACE,qBAAY0c,MAAM,SAAlB,sBAAqCjV,MACrC,oBACE1N,MAAO0N,GACP7G,IAAK,EACLC,IAAK,GACLC,OAAK,EACLR,SAAU,SAACC,EAAGQ,GAAJ,OAAWqhB,GAAiBhD,OAAOre,UAIjD,GAEDoG,GACC,oBAAMnH,MAAI,EAAV,SACE,+BACE,8CACA,oBACEjG,MAAOqN,GACPhH,MAAM,eACNE,SAAU,SAACC,GAAD,OAAO8hB,GAAgB9hB,EAAEC,OAAOzG,QAH5C,SAKG6B,GAAYqK,WAKnB,GAGF,oBAAMjG,MAAI,EAACF,GAAI,EAAGC,GAAI,EAAGE,GAAI,EAAGC,GAAI,EAApC,SACE,qBAAaC,WAAS,EAAtB,UACE,mDACA,oBACEpG,MAAOyT,EACPpN,MAAM,oBACNE,SAAU,SAACC,GACTshB,EAAczC,OAAO7e,EAAEC,OAAOzG,SAJlC,SAOG6B,GAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,WAMtC,oBAAMoE,MAAI,EAAV,SACE,qBACEkd,QAAQ,YACRlB,QAAS,kBAAMxc,GAAS6N,GAAoB,CAAElH,kBAFhD,qCAWR,SAAS+a,KACP,OAAO,eAAC,IAAMzF,SAAP,0BAGT,SAAS0F,KACP,OAAO,eAAC,IAAM1F,SAAP,gDAGT,SAAS2F,KACP,OAAO,eAAC,IAAM3F,SAAP,uCCrZT+G,IAAQC,WAAW,gBCAnB,IDyFeC,OAvFf,WACE,IAAMzX,EAAkBxS,GAAe0W,IACjCjE,EAAuBzS,GAAe2W,IACtCuT,EAAoBlqB,GAAe6W,IAEnCsT,EAAcC,cAAc,SAACC,GAEjC,OADAzZ,QAAQC,IAAR,mBAAwBwZ,IACjBA,EAAMC,YAAYC,GAAG,SAK9B,OAFAR,IAAQS,KAAK,YAGX,eAAC,IAAMxH,SAAP,UAEE,oBAAWyH,SAAS,KAApB,SACGN,EACC,qBACEhjB,WAAS,EACTujB,cAAe,CAAErjB,GAAI,EAAGG,GAAI,EAAGC,GAAI,EAAGkjB,GAAI,GAC1C3jB,GAAI,CAAE2b,OAAQ,SAHhB,UAKE,oBACEvhB,GAAG,YACHmG,MAAI,EACJF,GAAI,GACJG,GAAI,EACJR,GAAI,CAAE2b,OAAQ,OAAQiI,SAAU,QALlC,SAOE,qBAAK5jB,GAAI,GAAT,UAEE,eAAC,IAAD,CAAS6jB,OAAO,0BAA0BC,KAAK,eAC/C,eAAC,GAAD,SACqBpY,IAApBF,EACC,eAAC,GAAD,CAAiBN,UAAWM,IAE5B,QAEwBE,IAAzBD,EACC,eAAC,GAAD,CAAcrR,GAAIqR,IAChByX,EACF,eAAC5B,GAAD,IAEA,GAEF,eAACyC,GAAD,IACA,eAAC,IAAD,CAASF,OAAO,0BAA0BC,KAAK,oBAGnD,oBACEvjB,MAAI,EACJF,GAAI,GACJG,GAAI,EACJR,GAAI,CAAEqgB,GAAI,EAAG1E,OAAQ,EAAGiI,SAAU,QAJpC,SAOE,eAAC,GAAD,SAKJ,gBAAC,IAAM5H,SAAP,WAEE,eAAC,IAAD,CAAS6H,OAAO,0BAA0BC,KAAK,eAC/C,eAAC,GAAD,IACA,eAAC,GAAD,SACqBpY,IAApBF,EACC,eAAC,GAAD,CAAiBN,UAAWM,IAE5B,QAEwBE,IAAzBD,EACC,eAAC,GAAD,CAAcrR,GAAIqR,IAChByX,EACF,eAAC5B,GAAD,IAEA,GAEF,eAACyC,GAAD,IACA,eAAC,IAAD,CAASF,OAAO,0BAA0BC,KAAK,uBCpFrDxY,GAAmC,GACnC0Y,GAA0C,GAC1CzY,GAAiC,GAC9BvI,GAAI,EAAGA,IAAK,GAAIA,KACvBsI,GAAMtI,IAAK,EACXuI,GAAIvI,IAAK,EACTghB,GAAahhB,IAAK,EACdA,IAAK,IACPghB,GAAahhB,IAAK,GAEhBA,IAAK,KACPghB,GAAahhB,IAAK,GAEhBA,IAAK,KACPghB,GAAahhB,IAAK,GAqBf,IAAMihB,GAAQC,aAAe,CAClClqB,QAAS,CACP6R,SAAUsY,GACVtpB,WAAYupB,GACZpoB,QAASqoB,MASbJ,GAAMlkB,SACJ6M,GAAY,CACVxS,GAAI,EACJ4P,gBAAiBjU,EAAMlD,OAEvBoX,SAAUhU,EAAU3B,OACpB4V,eAAe,eAAMoB,IACrBnB,SAAU,EACVC,OAAO,EACPC,SAAU,GACVN,YAAa,CAAChT,EAAajD,MAAOiD,EAAaE,mBAC/CqT,kBAAkB,eAAMgB,IAExBf,WAAY/S,EAAYG,EACxB6S,SAAU1S,EAAUzD,KACpBoW,YAAY,EACZC,WAAY,EACZ0B,WAAY,CAACzT,EAAeC,WAGhCqrB,GAAMlkB,SACJ6M,GAAY,CACVxS,GAAI,EACJ4P,gBAAiBjU,EAAMlD,OAEvBoX,SAAUhU,EAAUK,KACpB4T,eAAe,eAAMoB,IACrBnB,SAAU,EACVC,OAAO,EACPC,SAAU,GACVN,YAAa,GACbO,kBAAkB,eAAMgB,IAExBf,WAAY/S,EAAYI,KACxB4S,SAAU1S,EAAUzD,KACpBoW,YAAY,EACZC,WAAY,EACZ0B,WAAY,CAACzT,EAAeC,WAGhCqrB,GAAMlkB,SACJ6M,GAAY,CACVxS,GAAI,EACJ4P,gBAAiBjU,EAAMC,MAEvBiU,SAAUhU,EAAUE,YACpB+T,eAAe,eAAMoB,IACrBnB,SAAU,EACVC,OAAO,EACPC,SAAU,GACVN,YAAa,GACbO,kBAAkB,eAAMgB,IAExBf,WAAY/S,EAAYI,KACxB4S,SAAU1S,EAAUzD,KACpBoW,YAAY,EACZC,WAAY,EACZ0B,WAAY,CAACzT,EAAeC,WAGhCqrB,GAAMlkB,SACJ+M,GAAY,CACV1S,GAAI,EACJwQ,gBAAiB9Y,EAAWE,KAC5B6Y,WAAYnS,EAAYP,SACxBqQ,WAAY,EACZC,SAAU,GACV2D,WAAY,CAACzT,EAAeC,WAIhCqrB,GAAMlkB,SACJzE,GAAY,CACVlB,GAAI,EACJb,KAAM,4BAENyF,UAAW,EACXC,qBAAsB,EAEtBC,QAAS3N,EAASG,KAClByN,UAAWvN,EAAWH,SACtB2N,SAAUxN,EAAWH,SACrB4N,UAAWzN,EAAWH,SACtB6N,SAAU1N,EAAWH,SAErB8N,YAAY,EACZC,wBAAwB,EACxB3E,WAAY,MAKhBopB,GAAMlkB,SACJyM,GAAa,CACXpS,GAAI,EACJb,KAAM,WACN6O,SAAS,EACTG,MAAO,GACPvJ,UAAW,EACXqJ,YAAa,yDACbG,WAAY,EACZC,SAAU,MA8Xdwb,GAAMlkB,SAASuM,GAAW,IAeX2X,UC5iBKK,QACW,cAA7BpD,OAAOC,SAASoD,UAEe,UAA7BrD,OAAOC,SAASoD,UAEhBrD,OAAOC,SAASoD,SAASC,MACvB,2D,sBCNSnB,GARDoB,aAAY,CACxBC,QAAS,CACPlI,QAAS,CACPmI,KAAMC,KAAI,S,UCIhBC,IAASC,OACP,eAAC,IAAMC,WAAP,UACE,eAAC,IAAD,CAAUd,MAAOA,GAAjB,SACE,gBAACe,GAAA,EAAD,CAAe3B,MAAOA,GAAtB,UACE,uBACA,eAAC,GAAD,WAIN4B,SAASC,eAAe,SF+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzW,GACLpF,QAAQoF,MAAMA,EAAM0W,c","file":"static/js/main.4ec4f89a.chunk.js","sourcesContent":["import { MenuItem } from \"@mui/material\";\r\nimport React from \"react\";\r\n\r\nimport {\r\n  activityTypes,\r\n  profTrends,\r\n  conditions,\r\n  damageTrends,\r\n  damageTypes,\r\n  dCond,\r\n  defenses,\r\n  diceSizes,\r\n  dieTrends,\r\n  effectStateTypes,\r\n  effectValueTypes,\r\n  MAPs,\r\n  materials,\r\n  rollTypes,\r\n  statTrends,\r\n  itemTrends,\r\n  ACTrends,\r\n  SaveTrends,\r\n  graphTypes,\r\n} from \"./types\";\r\n\r\nexport const makeOptions = (options: object): JSX.Element[] => {\r\n  let element: keyof typeof options;\r\n  const optionElements: JSX.Element[] = [];\r\n  // @ts-ignore\r\n  for (element in options) {\r\n    optionElements.push(\r\n      <MenuItem key={element} value={options[element]}>\r\n        {options[element]}\r\n      </MenuItem>\r\n    );\r\n  }\r\n  return optionElements;\r\n};\r\n\r\nexport const arrayOptions = (options: string[]): JSX.Element[] => {\r\n  const optionElements: JSX.Element[] = [];\r\n  for (let element of options) {\r\n    optionElements.push(\r\n      <MenuItem key={element} value={element}>\r\n        {element}\r\n      </MenuItem>\r\n    );\r\n  }\r\n  return optionElements;\r\n};\r\n\r\nlet gt: keyof typeof graphTypes;\r\nexport const graphTypeOptions: JSX.Element[] = [];\r\nfor (gt in graphTypes) {\r\n  graphTypeOptions.push(<option key={gt}>{graphTypes[gt]}</option>);\r\n}\r\n\r\nexport const levelOptions: JSX.Element[] = [];\r\nfor (let level = 1; level <= 20; level++) {\r\n  levelOptions.push(\r\n    <MenuItem key={level} value={level}>\r\n      {level}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nlet c: keyof typeof conditions;\r\nexport const conditionOptions: JSX.Element[] = [];\r\nfor (c in conditions) {\r\n  conditionOptions.push(\r\n    <MenuItem key={c} value={conditions[c]}>\r\n      {conditions[c]}\r\n    </MenuItem>\r\n  );\r\n}\r\nlet rt: keyof typeof rollTypes;\r\nexport const rollOptions: JSX.Element[] = [];\r\nfor (rt in rollTypes) {\r\n  rollOptions.push(\r\n    <MenuItem key={rt} value={rollTypes[rt]}>\r\n      {rollTypes[rt]}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nlet at: keyof typeof activityTypes;\r\nexport const activityTypeOptions: JSX.Element[] = [];\r\nfor (at in activityTypes) {\r\n  activityTypeOptions.push(\r\n    <MenuItem key={at} value={activityTypes[at]}>\r\n      {activityTypes[at]}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nlet pt: keyof typeof profTrends;\r\nexport const profTrendOptions: JSX.Element[] = [];\r\nfor (pt in profTrends) {\r\n  profTrendOptions.push(\r\n    <MenuItem key={pt} value={profTrends[pt]}>\r\n      {profTrends[pt]}\r\n    </MenuItem>\r\n  );\r\n}\r\nlet st: keyof typeof statTrends;\r\nexport const statTrendOptions: JSX.Element[] = [];\r\nfor (st in statTrends) {\r\n  statTrendOptions.push(\r\n    <MenuItem key={st} value={statTrends[st]}>\r\n      {statTrends[st]}\r\n    </MenuItem>\r\n  );\r\n}\r\nlet it: keyof typeof itemTrends;\r\nexport const itemBTrendOptions: JSX.Element[] = [];\r\nfor (it in itemTrends) {\r\n  itemBTrendOptions.push(\r\n    <MenuItem key={it} value={itemTrends[it]}>\r\n      {itemTrends[it]}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nlet m: keyof typeof MAPs;\r\nexport const MAPOptions: JSX.Element[] = [];\r\nfor (m in MAPs) {\r\n  MAPOptions.push(\r\n    <MenuItem key={m} value={MAPs[m]}>\r\n      {MAPs[m]}\r\n    </MenuItem>\r\n  );\r\n}\r\nlet d: keyof typeof defenses;\r\nexport const defenseOptions: JSX.Element[] = [];\r\nfor (d in defenses) {\r\n  defenseOptions.push(\r\n    <MenuItem key={d} value={defenses[d]}>\r\n      {defenses[d]}\r\n    </MenuItem>\r\n  );\r\n}\r\nlet act: keyof typeof ACTrends;\r\nexport const ACOptions: JSX.Element[] = [];\r\nfor (act in ACTrends) {\r\n  ACOptions.push(\r\n    <MenuItem key={act} value={ACTrends[act]}>\r\n      {ACTrends[act]}\r\n    </MenuItem>\r\n  );\r\n}\r\nlet svt: keyof typeof SaveTrends;\r\nexport const SaveOptions: JSX.Element[] = [];\r\nfor (svt in SaveTrends) {\r\n  SaveOptions.push(\r\n    <MenuItem key={svt} value={SaveTrends[svt]}>\r\n      {SaveTrends[svt]}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nlet dc: keyof typeof dCond;\r\nexport const damageConditionOptions: JSX.Element[] = [];\r\nfor (dc in dCond) {\r\n  damageConditionOptions.push(\r\n    <MenuItem key={dc} value={dCond[dc]}>\r\n      {dCond[dc]}\r\n    </MenuItem>\r\n  );\r\n}\r\nlet dieT: keyof typeof dieTrends;\r\nexport const dieTrendOptions: JSX.Element[] = [];\r\nfor (dieT in dieTrends) {\r\n  dieTrendOptions.push(\r\n    <MenuItem key={dieT} value={dieTrends[dieT]}>\r\n      {dieTrends[dieT]}\r\n    </MenuItem>\r\n  );\r\n}\r\nlet ds: keyof typeof diceSizes;\r\nexport const diceSizeOptions: JSX.Element[] = [];\r\nfor (ds in diceSizes) {\r\n  diceSizeOptions.push(\r\n    <MenuItem key={ds} value={ds}>\r\n      {\"d\" + ds}\r\n    </MenuItem>\r\n  );\r\n}\r\nlet damT: keyof typeof damageTrends;\r\nexport const damageTrendOptions: JSX.Element[] = [];\r\nfor (damT in damageTrends) {\r\n  damageTrendOptions.push(\r\n    <MenuItem key={damT} value={damageTrends[damT]}>\r\n      {damageTrends[damT]}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nlet dt: keyof typeof damageTypes;\r\nexport const damageTypeOptions: JSX.Element[] = [];\r\nfor (dt in damageTypes) {\r\n  damageTypeOptions.push(\r\n    <MenuItem key={dt} value={damageTypes[dt]}>\r\n      {damageTypes[dt]}\r\n    </MenuItem>\r\n  );\r\n}\r\nlet mat: keyof typeof materials;\r\nexport const materialOptions: JSX.Element[] = [];\r\nfor (mat in materials) {\r\n  materialOptions.push(\r\n    <MenuItem key={mat} value={materials[mat]}>\r\n      {materials[mat]}\r\n    </MenuItem>\r\n  );\r\n}\r\nexport const weaknessOptions: JSX.Element[] = [];\r\nfor (dt in damageTypes) {\r\n  weaknessOptions.push(\r\n    <MenuItem key={dt} value={damageTypes[dt]}>\r\n      {damageTypes[dt]}\r\n    </MenuItem>\r\n  );\r\n}\r\nfor (mat in materials) {\r\n  if (materials[mat] === materials.NONE) continue;\r\n  weaknessOptions.push(\r\n    <MenuItem key={mat} value={materials[mat]}>\r\n      {materials[mat]}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nexport const multiplierOptions: JSX.Element[] = [];\r\nfor (let m of [0.5, 1, 2]) {\r\n  multiplierOptions.push(\r\n    <MenuItem key={m} value={m}>\r\n      {m}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nexport const effectTypeOptions: JSX.Element[] = [];\r\nlet est: keyof typeof effectStateTypes;\r\nfor (est in effectStateTypes) {\r\n  effectTypeOptions.push(\r\n    <MenuItem key={est} value={effectStateTypes[est]}>\r\n      {effectStateTypes[est]}\r\n    </MenuItem>\r\n  );\r\n}\r\nlet evt: keyof typeof effectValueTypes;\r\nfor (evt in effectValueTypes) {\r\n  effectTypeOptions.push(\r\n    <MenuItem key={evt} value={effectValueTypes[evt]}>\r\n      {effectValueTypes[evt]}\r\n    </MenuItem>\r\n  );\r\n}\r\n","export const graphTypes = {\r\n  DISTRIBUTION: \"Damage Distribution\",\r\n  PMDEFENSE: \"+/- AC/Save Bonus\",\r\n  PMRES: \"+/- Resistance/Weakness\",\r\n} as const;\r\nexport type GraphType = typeof graphTypes[keyof typeof graphTypes];\r\n\r\nexport const importStates = {\r\n  Importing: \"Importing\",\r\n  Successful: \"Successful\",\r\n  Failure: \"Failure\",\r\n  MessageSeen: \"Message Seen\",\r\n} as const;\r\nexport type ImportStates = typeof importStates[keyof typeof importStates];\r\n\r\nexport const ACTrends = {\r\n  LOW: \"Low\",\r\n  MODERATE: \"Moderate\",\r\n  HIGH: \"High\",\r\n  EXTREME: \"Extreme\",\r\n} as const;\r\nexport type ACTrend = typeof ACTrends[keyof typeof ACTrends];\r\n\r\nexport const SaveTrends = {\r\n  TERRIBLE: \"Terrible\",\r\n  LOW: \"Low\",\r\n  MODERATE: \"Moderate\",\r\n  HIGH: \"High\",\r\n  EXTREME: \"Extreme\",\r\n} as const;\r\nexport type SaveTrend = typeof SaveTrends[keyof typeof SaveTrends];\r\n\r\nexport const conditions = {\r\n  ALWAYS: \"Always\",\r\n  CRIT: \"On Crit\",\r\n  SUCC: \"On Success\",\r\n  FAIL: \"On Failure\",\r\n  CRIF: \"On Crit Fail\",\r\n  AT_LEAST_SUCC: \"Success or better\",\r\n  AT_LEAST_FAIL: \"Failure or better\",\r\n  FAIL_WORSE: \"Failure or worse\",\r\n  SUCC_WORSE: \"Success or worse\",\r\n} as const;\r\nexport type Condition = typeof conditions[keyof typeof conditions];\r\n\r\nexport const rollTypes = {\r\n  NORMAL: \"Normal\",\r\n  ADVANTAGE: \"Advantage\",\r\n  DISADVANTAGE: \"Disadvantage\",\r\n} as const;\r\nexport type RollType = typeof rollTypes[keyof typeof rollTypes];\r\n\r\nexport const activityTypes = {\r\n  STRIKE: \"Strike\",\r\n  SAVE: \"Save\",\r\n  SKILL: \"Skill Check\",\r\n  SPELLATTACK: \"Spell Attack\",\r\n} as const;\r\nexport type ActivityType = typeof activityTypes[keyof typeof activityTypes];\r\n\r\nexport const profTrends = {\r\n  TRAINED: \"Trained Proficiency\",\r\n  FIGHTERWEAPON: \"Fighter Weapon (1, 5, 13)\",\r\n  MARTIALWEAPON: \"Martial Weapon (5, 13)\",\r\n  CASTERWEAPON: \"Caster Weapon (11)\",\r\n  ALCHWEAPON: \"Alchemist Weapon (7)\",\r\n  CASTERSPELL: \"Caster Spell (7, 15, 19)\",\r\n  CLASSDC1: \"Class/Spell (9, 17)\",\r\n  CLASSDC2: \"Class/Spell (11, 19)\",\r\n  MCSPELL: \"MC Spell (12, 18)\",\r\n  MAXSKILL: \"Max skill (3, 7, 15)\",\r\n} as const;\r\nexport type ProfTrend = typeof profTrends[keyof typeof profTrends];\r\n\r\nexport const statTrends = {\r\n  AS10: \"10\",\r\n  AS18a: \"18 to 24 apex(17)\",\r\n  AS16a: \"16 to 22 apex(17)\",\r\n  AS16pp: \"16 to 20\",\r\n  AS16p: \"16 to 18\",\r\n  AS14pp: \"14 to 20\",\r\n  AS14p: \"14 to 18\",\r\n} as const;\r\nexport type StatTrend = typeof statTrends[keyof typeof statTrends];\r\n\r\nexport const itemTrends = {\r\n  NONE: \"None\",\r\n  WEAPON: \"Weapon (2, 10, 16)\",\r\n  SKILL: \"Skill (3, 9, 17)\",\r\n} as const;\r\nexport type ItemTrend = typeof itemTrends[keyof typeof itemTrends];\r\n\r\nexport const MAPs = {\r\n  N1: \"0 (0x-5)\",\r\n  N2: \"-5 (1x-5)\",\r\n  N3: \"-10 (2x-5)\",\r\n  A1: \"0 (0x-4)\",\r\n  A2: \"-4 (1x-4)\",\r\n  A3: \"-8 (2x-4)\",\r\n  R1: \"0 (0x-3)\",\r\n  R2: \"-3 (1x-3)\",\r\n  R3: \"-6 (2x-3)\",\r\n  RA1: \"0 (0x-2)\",\r\n  RA2: \"-2 (1x-2)\",\r\n  RA3: \"-4 (2x-2)\",\r\n  RAA1: \"0 (0x-1)\",\r\n  RAA2: \"-1 (1x-1)\",\r\n  RAA3: \"-2 (2x-1)\",\r\n} as const;\r\nexport type MAP = typeof MAPs[keyof typeof MAPs];\r\n\r\nexport const nextMAPs = {\r\n  \"0 (0x-5)\": \"-5 (1x-5)\",\r\n  \"-5 (1x-5)\": \"-10 (2x-5)\",\r\n  \"-10 (2x-5)\": \"-10 (2x-5)\",\r\n  \"0 (0x-4)\": \"-4 (1x-4)\",\r\n  \"-4 (1x-4)\": \"-8 (2x-4)\",\r\n  \"-8 (2x-4)\": \"-8 (2x-4)\",\r\n  \"0 (0x-3)\": \"-3 (1x-3)\",\r\n  \"-3 (1x-3)\": \"-6 (2x-3)\",\r\n  \"-6 (2x-3)\": \"-6 (2x-3)\",\r\n  \"0 (0x-2)\": \"-2 (1x-2)\",\r\n  \"-2 (1x-2)\": \"-4 (2x-2)\",\r\n  \"-4 (2x-2)\": \"-4 (2x-2)\",\r\n  \"0 (0x-1)\": \"-1 (1x-1)\",\r\n  \"-1 (1x-1)\": \"-2 (2x-1)\",\r\n  \"-2 (2x-1)\": \"-2 (2x-1)\",\r\n} as const;\r\n\r\nexport const defenses = {\r\n  AC: \"AC\",\r\n  FORT: \"Fort\",\r\n  REF: \"Ref\",\r\n  WILL: \"Will\",\r\n  PER: \"Perception\",\r\n  DC: \"Standard DC\",\r\n} as const;\r\nexport type Defense = typeof defenses[keyof typeof defenses];\r\n\r\nexport const dCond = {\r\n  STRIKE: \"x1 hit, x2 crit\",\r\n  BASIC: \"Basic save\",\r\n  ALWAYS: \"Always\",\r\n  CRIT: \"On Crit\",\r\n  SUCC: \"On Success\",\r\n  FAIL: \"On Failure\",\r\n  CRIF: \"On Crit Fail\",\r\n  AT_LEAST_SUCC: \"Success or better\",\r\n  AT_LEAST_FAIL: \"Failure or better\",\r\n  FAIL_WORSE: \"Failure or worse\",\r\n  SUCC_WORSE: \"Success or worse\",\r\n} as const;\r\nexport type DamageCond = typeof dCond[keyof typeof dCond];\r\n\r\nexport const dieTrends = {\r\n  NONE: \"None\",\r\n  WEAPON: \"Weapon (1, 4, 12, 19)\",\r\n  SPELLLEVEL1: \"1 x Spell Level\",\r\n  SPELLLEVEL2: \"2 x Spell Level\",\r\n  LEVEL: \"Level\",\r\n  HALFLEVEL: \"1/2 Level\",\r\n  RUNE: \"Runes (8, 15)\",\r\n  RUNE2: \"Runes (8, 10, 16)\",\r\n  DEADLY: \"Deadly (1, 12, 19)\",\r\n  SNEAK: \"Sneak Attack (1, 5, 11, 17)\",\r\n  STRATEGIC: \"Strategic Strike (1, 5, 9, 13, 17)\",\r\n  PRECISE: \"Precise Strike (1, 1, 5, 9, 13, 17)\",\r\n  PRECISIONEDGE: \"Precision Edge 1(1, 11, 19)\",\r\n  PRECISIONEDGE2: \"Precision Edge 2(17, 19)\",\r\n  PRECISIONEDGE3: \"Precision Edge 3(19)\",\r\n} as const;\r\nexport type DieTrend = typeof dieTrends[keyof typeof dieTrends];\r\n\r\nexport const damageTrends = {\r\n  NONE: \"None\",\r\n  FIGHTERWEAPONSPEC: \"Fighter Weapon Specialization\",\r\n  MARTIALWEAPONSPEC: \"Martial Weapon Specializaton\",\r\n  CASTERWEAPONSPEC: \"Caster Weapon Specializaton\",\r\n  ...statTrends,\r\n  WEAPON: \"Weapon (1, 4, 12, 19)\",\r\n  SPELLLEVEL1: \"1 x Spell Level\",\r\n  LEVEL: \"Level\",\r\n  HALFLEVEL: \"1/2 Level\",\r\n  RAGE: \"Rage\",\r\n  ANIMALRAGE: \"Animal Rage\",\r\n  DRAGONRAGE: \"Dragon Rage\",\r\n  GIANTRAGE: \"Giant Rage\",\r\n  IMPLEMENT: \"Implement's Empowerment\",\r\n} as const;\r\nexport type DamageTrend = typeof damageTrends[keyof typeof damageTrends];\r\n\r\nexport const damageTypes = {\r\n  NONE: \"None\",\r\n  B: \"bludgeoning\",\r\n  P: \"piercing\",\r\n  S: \"slashing\",\r\n  FIRE: \"fire\",\r\n  PRECISION: \"precision\",\r\n} as const;\r\nexport type DamageType = typeof damageTypes[keyof typeof damageTypes];\r\n\r\nexport const materials = {\r\n  NONE: \"none\",\r\n  COLD_IRON: \"cold iron\",\r\n  SILVER: \"silver\",\r\n  ADAMANTINE: \"adamantine\",\r\n} as const;\r\nexport type Material = typeof materials[keyof typeof materials];\r\n\r\nexport const effectStateTypes = {\r\n  FLATFOOT: \"Flatfooted\",\r\n  PRONE: \"Prone\",\r\n  GRAPPLED: \"Grappled\",\r\n  RESTRAINED: \"Restrained\",\r\n} as const;\r\nexport type EffectStateType =\r\n  typeof effectStateTypes[keyof typeof effectStateTypes];\r\nexport const effectValueTypes = {\r\n  FRIGHTENED: \"Frightened\",\r\n  CLUMSY: \"Clumsy\",\r\n} as const;\r\nexport type EffectValueType =\r\n  typeof effectValueTypes[keyof typeof effectValueTypes];\r\nexport const effectTypes = {\r\n  ...effectStateTypes,\r\n  ...effectValueTypes,\r\n} as const;\r\nexport type EffectType = EffectStateType | EffectValueType;\r\n\r\nexport const whenConditions = {\r\n  Always: \"Always\",\r\n\r\n  ...effectStateTypes,\r\n  ...effectValueTypes,\r\n} as const;\r\nexport type WhenConditions = typeof whenConditions[keyof typeof whenConditions];\r\n\r\nexport type TargetState = {\r\n  [key in EffectValueType]: number;\r\n} & {\r\n  [key in EffectStateType]: boolean;\r\n};\r\n\r\nexport const diceNums = {\r\n  0: 0,\r\n  1: 1,\r\n  2: 2,\r\n  3: 3,\r\n  4: 4,\r\n  5: 5,\r\n  6: 6,\r\n  7: 7,\r\n  8: 8,\r\n  9: 9,\r\n  10: 10,\r\n  11: 11,\r\n  12: 12,\r\n  13: 13,\r\n  14: 14,\r\n  15: 15,\r\n  16: 16,\r\n  17: 17,\r\n  18: 18,\r\n  19: 19,\r\n  20: 20,\r\n} as const;\r\n\r\nexport const diceSizes = {\r\n  \"4\": 4,\r\n  \"6\": 6,\r\n  \"8\": 8,\r\n  \"10\": 10,\r\n  \"12\": 12,\r\n} as const;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport type { RootState, AppDispatch } from \"./store\";\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import {\r\n  createEntityAdapter,\r\n  createSlice,\r\n  EntityId,\r\n  PayloadAction,\r\n} from \"@reduxjs/toolkit\";\r\nimport { damageTypes, materials } from \"../Model/types\";\r\nimport { RootState } from \"../App/store\";\r\n\r\nexport interface Weakness {\r\n  id: number;\r\n  type:\r\n    | typeof damageTypes[keyof typeof damageTypes]\r\n    | typeof materials[keyof typeof materials];\r\n  value: number;\r\n}\r\nexport const weaknessAdapter = createEntityAdapter<Weakness>();\r\n\r\nlet weakness = 0;\r\n\r\nexport const weaknessesSlice = createSlice({\r\n  name: \"weaknesses\",\r\n  initialState: weaknessAdapter.getInitialState(),\r\n  reducers: {\r\n    weaknessAdded: weaknessAdapter.addOne,\r\n    weaknessUpdated: weaknessAdapter.updateOne,\r\n    weaknessCreated: {\r\n      reducer(state, action: PayloadAction<Weakness>) {\r\n        const { id, type, value } = action.payload;\r\n        weaknessAdapter.addOne(state, { id, type, value });\r\n      },\r\n      prepare({ parentId, type, value }) {\r\n        const id = ++weakness;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n            type,\r\n            value,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    weaknessRemoved(\r\n      state,\r\n      action: PayloadAction<{ parentId: EntityId; id: EntityId }>\r\n    ) {\r\n      weaknessAdapter.removeOne(state, action.payload.id);\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  weaknessRemoved,\r\n  weaknessCreated,\r\n  weaknessAdded,\r\n  weaknessUpdated,\r\n} = weaknessesSlice.actions;\r\n\r\nexport default weaknessesSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selectweaknessById,\r\n  selectIds: selectweaknessIds,\r\n  selectEntities: selectweaknessEntities,\r\n  selectAll: selectAllweaknesses,\r\n  selectTotal: selectTotalweaknesses,\r\n} = weaknessAdapter.getSelectors((state: RootState) => state.weaknesses);\r\n","import { createEntityAdapter, createSlice, EntityId } from \"@reduxjs/toolkit\";\r\nimport { ACTrends, SaveTrends } from \"../Model/types\";\r\nimport type { RootState } from \"../App/store\";\r\n// import { defaultACs, defaultSaves } from \"../defaults\";\r\n// import { defenses } from \"../types\";\r\nimport { weaknessCreated, weaknessRemoved } from \"./weaknessSlice\";\r\n\r\n// interface limited<Type> { typeof Type[keyof typeof Type] }\r\n// Define a type for the slice state\r\n// interface TargetState {  }\r\nexport interface Target {\r\n  id: EntityId;\r\n  name: string;\r\n  levelDiff: number;\r\n  persistentMultiplier: number;\r\n  ACTrend: typeof ACTrends[keyof typeof ACTrends];\r\n  FortTrend: typeof SaveTrends[keyof typeof SaveTrends];\r\n  RefTrend: typeof SaveTrends[keyof typeof SaveTrends];\r\n  WillTrend: typeof SaveTrends[keyof typeof SaveTrends];\r\n  PerTrend: typeof SaveTrends[keyof typeof SaveTrends];\r\n  flatfooted: boolean;\r\n  percentSelectedRoutine: boolean;\r\n  weaknesses: number[];\r\n}\r\n\r\nexport const targetAdapter = createEntityAdapter<Target>();\r\n\r\nexport const targetsSlice = createSlice({\r\n  name: \"targets\",\r\n  initialState: targetAdapter.getInitialState(),\r\n  reducers: {\r\n    targetAdded: targetAdapter.addOne,\r\n    targetUpdated: (state, action) => {\r\n      targetAdapter.updateOne(state, action.payload);\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(weaknessCreated, (state, action) => {\r\n        const { parentId: id, id: weaknessId } = action.payload;\r\n        state.entities[id]!.weaknesses.push(weaknessId);\r\n        // targetAdded.updateOne(state, { id, changes: { weaknesses: [...weaknesses, weaknessId] }});\r\n      })\r\n      .addCase(weaknessRemoved, (state, action) => {\r\n        const { parentId: id, id: weaknessId } = action.payload;\r\n        state.entities[id]!.weaknesses = state.entities[id]!.weaknesses.filter(\r\n          (wid) => wid !== weaknessId\r\n        );\r\n      });\r\n  },\r\n});\r\n\r\nexport const { targetAdded, targetUpdated } = targetsSlice.actions;\r\n\r\nexport default targetsSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selecttargetById,\r\n  selectIds: selecttargetIds,\r\n  selectEntities: selecttargetEntities,\r\n  selectAll: selectAlltargets,\r\n  selectTotal: selectTotaltargets,\r\n} = targetAdapter.getSelectors((state: RootState) => state.targets);\r\n","import React, { useState } from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../App/hooks\";\r\nimport { selecttargetById, Target, targetUpdated } from \"./targetSlice\";\r\n// import { damageTypes } from \"../Model/types\";\r\n// import {\r\n//   selectweaknessById,\r\n//   Weakness,\r\n//   weaknessCreated,\r\n//   weaknessRemoved,\r\n//   weaknessUpdated,\r\n// } from \"./weaknessSlice\";\r\n// import { EntityId } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../App/store\";\r\nimport { ACOptions, SaveOptions } from \"../Model/options\";\r\nimport {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  Grid,\r\n  Paper,\r\n  TextField,\r\n  FormControlLabel,\r\n  Switch,\r\n  Slider,\r\n  Typography,\r\n} from \"@mui/material\";\r\n// { id }: { id: EntityId }\r\nfunction TargetInput() {\r\n  const id = 0;\r\n  const {\r\n    name,\r\n    levelDiff,\r\n    persistentMultiplier,\r\n    ACTrend,\r\n    FortTrend,\r\n    RefTrend,\r\n    WillTrend,\r\n    PerTrend,\r\n    flatfooted,\r\n    percentSelectedRoutine,\r\n    // weaknesses,\r\n  } = useAppSelector((state: RootState) =>\r\n    selecttargetById(state, id)\r\n  ) as Target;\r\n  const [tempName, setTempName] = useState(name);\r\n  const [perMul, setPerMul] = useState(persistentMultiplier.toString());\r\n  // const [tempLevelDiff, setTempLevelDiff] = useState(levelDiff.toString());\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    <Paper sx={{ my: 1, p: 1 }}>\r\n      <Grid container spacing={{ xs: 1, sm: 2 }}>\r\n        <Grid item xs={8} sm={4} md={8} lg={4}>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Graph Name\"\r\n            placeholder=\"Enter the name that will display on the graph\"\r\n            value={tempName}\r\n            onChange={(e) => {\r\n              setTempName(e.target.value);\r\n            }}\r\n            onBlur={() =>\r\n              dispatch(targetUpdated({ id, changes: { name: tempName } }))\r\n            }\r\n          />\r\n        </Grid>\r\n        <Grid item xs={4} sm={2} md={4} lg={2}>\r\n          <Typography>Level Diff: {levelDiff}</Typography>\r\n          <Slider\r\n            // aria-label=\"Always visible\"\r\n            value={levelDiff}\r\n            // getAriaValueText={(v) => `${v}`}\r\n            // valueLabelDisplay=\"on\"\r\n            step={1}\r\n            min={-5}\r\n            max={5}\r\n            marks\r\n            onChange={(e, nv) => {\r\n              dispatch(\r\n                targetUpdated({\r\n                  id,\r\n                  changes: {\r\n                    levelDiff: nv,\r\n                  },\r\n                })\r\n              );\r\n            }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={6} sm={3} md={6} lg={3}>\r\n          <FormControlLabel\r\n            control={\r\n              <Switch\r\n                checked={flatfooted}\r\n                onChange={(e) =>\r\n                  dispatch(\r\n                    targetUpdated({\r\n                      id,\r\n                      changes: { flatfooted: e.target.checked },\r\n                    })\r\n                  )\r\n                }\r\n              />\r\n            }\r\n            label=\"Flatfooted\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={6} sm={3} md={6} lg={3}>\r\n          <FormControl fullWidth>\r\n            <InputLabel id=\"AC-input\">AC</InputLabel>\r\n            <Select\r\n              labelId=\"AC-input\"\r\n              id=\"AC\"\r\n              value={ACTrend}\r\n              label=\"AC\"\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  targetUpdated({ id, changes: { ACTrend: e.target.value } })\r\n                )\r\n              }\r\n            >\r\n              {ACOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item xs={3} sm={3} md={3} lg={3}>\r\n          <FormControl fullWidth>\r\n            <InputLabel id=\"Fort-input\">Fort</InputLabel>\r\n            <Select\r\n              labelId=\"Fort-input\"\r\n              id=\"Fort\"\r\n              value={FortTrend}\r\n              label=\"Fort\"\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  targetUpdated({ id, changes: { FortTrend: e.target.value } })\r\n                )\r\n              }\r\n            >\r\n              {SaveOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item xs={3} sm={3} md={3} lg={3}>\r\n          <FormControl fullWidth>\r\n            <InputLabel id=\"Ref-input\">Reflex</InputLabel>\r\n            <Select\r\n              labelId=\"Ref-input\"\r\n              id=\"Ref\"\r\n              value={RefTrend}\r\n              label=\"Reflex\"\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  targetUpdated({ id, changes: { RefTrend: e.target.value } })\r\n                )\r\n              }\r\n            >\r\n              {SaveOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item xs={3} sm={3} md={3} lg={3}>\r\n          <FormControl fullWidth>\r\n            <InputLabel id=\"Will-input\">Will</InputLabel>\r\n            <Select\r\n              labelId=\"Will-input\"\r\n              id=\"Will\"\r\n              value={WillTrend}\r\n              label=\"Will\"\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  targetUpdated({ id, changes: { WillTrend: e.target.value } })\r\n                )\r\n              }\r\n            >\r\n              {SaveOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item xs={3} sm={3} md={3} lg={3}>\r\n          <FormControl fullWidth>\r\n            <InputLabel id=\"Per-input\">Perception</InputLabel>\r\n            <Select\r\n              labelId=\"Per-input\"\r\n              id=\"Per\"\r\n              value={PerTrend}\r\n              label=\"Perception\"\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  targetUpdated({ id, changes: { PerTrend: e.target.value } })\r\n                )\r\n              }\r\n            >\r\n              {SaveOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <FormControlLabel\r\n            control={\r\n              <Switch\r\n                checked={percentSelectedRoutine}\r\n                onChange={(e) =>\r\n                  dispatch(\r\n                    targetUpdated({\r\n                      id,\r\n                      changes: { percentSelectedRoutine: e.target.checked },\r\n                    })\r\n                  )\r\n                }\r\n              />\r\n            }\r\n            label=\"% of Selected Routine\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Persistent Damage Multiplier\"\r\n            value={perMul}\r\n            onChange={(e) => {\r\n              setPerMul(e.target.value);\r\n              e.target.focus();\r\n            }}\r\n            onBlur={() => {\r\n              let newVal = parseFloat(perMul);\r\n              setPerMul(newVal.toString());\r\n              dispatch(\r\n                targetUpdated({\r\n                  id,\r\n                  changes: {\r\n                    persistentMultiplier: newVal,\r\n                  },\r\n                })\r\n              );\r\n            }}\r\n          />\r\n        </Grid>\r\n        {/* \r\n        <div className=\"box flexbox\">\r\n          {\" Resistance/Weakness: \"}\r\n          {weaknesses.map((weaknessId) => (\r\n            <WeaknessInput parentId={id} id={weaknessId} key={weaknessId} />\r\n          ))}\r\n          <AddWeakness parentId={id} />\r\n        </div> */}\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n}\r\n\r\n// const TargetInfo = ({ id }) => {\r\n//   const { overrideDefault, type, value, weaknesses } = useSelector((state) =>\r\n//     selecttargetInfoById(state, id)\r\n//   );\r\n//   const dispatch = useDispatch();\r\n\r\n//   const defenseOptions = [];\r\n//   for (let d in defenses) {\r\n//     defenseOptions.push(<option key={d}>{defenses[d]}</option>);\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"box\">\r\n//       {\"Override Target: \"}\r\n//       <input\r\n//         type=\"checkbox\"\r\n//         checked={overrideDefault}\r\n//         onChange={(e) =>\r\n//           dispatch(\r\n//             targetInfoUpdated({\r\n//               id,\r\n//               changes: { overrideDefault: e.target.checked },\r\n//             })\r\n//           )\r\n//         }\r\n//       />\r\n\r\n// {/* <Weaknesses parentId={id} weaknessIds={weaknesses} /> */}\r\n\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const Weaknesses = ({ parentId, weaknessIds }) => {\r\n//   return (\r\n//     <span>\r\n//       {weaknessIds.map((weaknessId) => (\r\n//         <Weakness id={weaknessId} key={weaknessId} />\r\n//       ))}\r\n//       <AddWeakness id={parentId} />\r\n//     </span>\r\n//   );\r\n// };\r\n\r\n// const WeaknessInput = ({\r\n//   id,\r\n//   parentId,\r\n// }: {\r\n//   id: EntityId;\r\n//   parentId: EntityId;\r\n// }) => {\r\n//   // needs to have parent id to remove weakness\r\n//   const { type, value } = useSelector((state: RootState) =>\r\n//     selectweaknessById(state, id)\r\n//   ) as Weakness;\r\n//   const dispatch = useDispatch();\r\n\r\n//   const updateOrRemoveWeakness = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n//     if (e?.target?.value === damageTypes.NONE) {\r\n//       // remove this weakness\r\n//       dispatch(weaknessRemoved({ id, parentId }));\r\n//     } else {\r\n//       dispatch(\r\n//         weaknessUpdated({\r\n//           id,\r\n//           changes: { type: e.target.value as Weakness[\"type\"] },\r\n//         })\r\n//       );\r\n//     }\r\n//   };\r\n//   const updateWeaknessValue = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n//     if (!isNaN(parseInt(e.target.value))) {\r\n//       dispatch(\r\n//         weaknessUpdated({ id, changes: { value: parseInt(e.target.value) } })\r\n//       );\r\n//     }\r\n//   };\r\n//   return (\r\n//     <span className=\"input\">\r\n//       <WeaknessSelect value={type} onChange={updateOrRemoveWeakness} />\r\n//       <input type=\"number\" value={value} onChange={updateWeaknessValue} />\r\n//     </span>\r\n//   );\r\n// };\r\n\r\n// let weaknessId = 0;\r\n\r\n// const AddWeakness = ({ parentId }: { parentId: EntityId }) => {\r\n//   const dispatch = useDispatch();\r\n//   let [weaknessValue, setWeaknessValue] = useState(0);\r\n\r\n//   // add a Weakness to TargetInfo id\r\n//   const addWeakness = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n//     if (e.target.value !== damageTypes.NONE) {\r\n//       // need to create a new weakness\r\n//       weaknessId++;\r\n//       dispatch(\r\n//         weaknessCreated({\r\n//           id: weaknessId,\r\n//           type: e.target.value,\r\n//           value: weaknessValue,\r\n//           parentId: parentId,\r\n//         })\r\n//       );\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <span className=\"input\">\r\n//       <WeaknessSelect value={damageTypes.NONE} onChange={addWeakness} />\r\n//       <input\r\n//         type=\"number\"\r\n//         value={weaknessValue}\r\n//         onChange={(e) => setWeaknessValue(parseInt(e.target.value))}\r\n//       />\r\n//     </span>\r\n//   );\r\n// };\r\n\r\n// const WeaknessSelect = ({\r\n//   value,\r\n//   onChange,\r\n// }: {\r\n//   value: Weakness[\"type\"];\r\n//   onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\r\n// }) => {\r\n//   return (\r\n//     <span>\r\n//       <select value={value} onChange={(e) => onChange(e)}>\r\n//         {weaknessOptions}\r\n//       </select>\r\n//     </span>\r\n//   );\r\n// };\r\n\r\nexport { TargetInput };\r\n","import {\r\n  ACTrends,\r\n  profTrends,\r\n  damageTrends,\r\n  dieTrends,\r\n  SaveTrends,\r\n  statTrends,\r\n  itemTrends,\r\n} from \"./types\";\r\n\r\ninterface defaultValue {\r\n  [x: number]: number;\r\n}\r\nconst zero: defaultValue = {};\r\nconst level: defaultValue = {};\r\nconst halfLevel: defaultValue = {};\r\n\r\nconst trained: defaultValue = {};\r\nconst maxSkill: defaultValue = {};\r\n\r\nconst maxScore: defaultValue = {};\r\nconst score16pp: defaultValue = {};\r\nconst score16p: defaultValue = {};\r\nconst score16: defaultValue = {};\r\nconst score14p: defaultValue = {};\r\nconst score14: defaultValue = {};\r\n\r\nconst martialProf: defaultValue = {};\r\nconst alchProf: defaultValue = {};\r\nconst casterProf: defaultValue = {};\r\n\r\nconst spellProf: defaultValue = {};\r\n\r\nconst weaponItem: defaultValue = {};\r\nconst skillItem: defaultValue = {};\r\n\r\nconst weaponDice: defaultValue = {};\r\nconst spellDice: defaultValue = {};\r\nconst spellDice2: defaultValue = {};\r\nfor (let i = 1; i <= 20; i++) {\r\n  spellDice[i] = Math.floor((i + 1) / 2);\r\n  spellDice2[i] = 2 * Math.floor((i + 1) / 2);\r\n}\r\nconst runes: defaultValue = {};\r\nconst runes2: defaultValue = {};\r\nconst deadly: defaultValue = {};\r\n\r\nconst sneak: defaultValue = {};\r\nconst strategic: defaultValue = {};\r\nconst precise: defaultValue = {};\r\n\r\nconst preEdge1: defaultValue = {};\r\nconst preEdge2: defaultValue = {};\r\nconst preEdge3: defaultValue = {};\r\n\r\nconst martialSpec: defaultValue = {};\r\nconst casterSpec: defaultValue = {};\r\n\r\nconst rage: defaultValue = {};\r\nconst animalrage: defaultValue = {};\r\nconst dragonrage: defaultValue = {};\r\nconst giantrage: defaultValue = {};\r\n\r\nconst implementEmpower: defaultValue = {};\r\n\r\nconst fighterAB: defaultValue = {};\r\nconst martialAB: defaultValue = {};\r\nconst casterAB: defaultValue = {};\r\nconst alchAB: defaultValue = {};\r\n\r\nconst casterSpellAttack: defaultValue = {};\r\nconst casterSaveDC: defaultValue = {};\r\nconst classdc1: defaultValue = {};\r\nconst classdc2: defaultValue = {};\r\nconst mcspell: defaultValue = {};\r\n\r\nconst fighterStatic: defaultValue = {};\r\nconst fighterRanged: defaultValue = {};\r\nconst martialStatic: defaultValue = {};\r\nconst martialRanged: defaultValue = {};\r\nconst casterStatic: defaultValue = {};\r\nconst casterRanged: defaultValue = {};\r\n\r\nfor (let i = 1; i <= 20; i++) {\r\n  zero[i] = 0;\r\n  level[i] = i;\r\n  halfLevel[i] = Math.floor(i / 2);\r\n  trained[i] = i + 2;\r\n  maxSkill[i] = i + 2;\r\n\r\n  maxScore[i] = 4;\r\n  score16pp[i] = 3;\r\n  score16p[i] = 3;\r\n  score16[i] = 3;\r\n  score14p[i] = 2;\r\n  score14[i] = 2;\r\n\r\n  martialProf[i] = 2;\r\n  alchProf[i] = 2;\r\n  casterProf[i] = 2;\r\n\r\n  spellProf[i] = 2;\r\n  classdc1[i] = i + 2;\r\n  classdc2[i] = i + 2;\r\n  mcspell[i] = i + 2;\r\n\r\n  weaponItem[i] = 0;\r\n  skillItem[i] = 0;\r\n  weaponDice[i] = 1;\r\n  runes[i] = 0;\r\n  runes2[i] = 0;\r\n  deadly[i] = 1;\r\n\r\n  sneak[i] = 1;\r\n  strategic[i] = 1;\r\n  precise[i] = 2;\r\n\r\n  preEdge1[i] = 1;\r\n  preEdge2[i] = 0;\r\n  preEdge3[i] = 0;\r\n\r\n  martialSpec[i] = 0;\r\n  casterSpec[i] = 0;\r\n\r\n  rage[i] = 2;\r\n  animalrage[i] = 2;\r\n  dragonrage[i] = 4;\r\n  giantrage[i] = 6;\r\n\r\n  implementEmpower[i] = 2;\r\n\r\n  if (i >= 2) {\r\n    weaponItem[i] = 1;\r\n  }\r\n  if (i >= 3) {\r\n    maxSkill[i] = i + 4;\r\n    skillItem[i] = 1;\r\n\r\n    implementEmpower[i] = 4;\r\n  }\r\n  if (i >= 4) {\r\n    weaponDice[i] = 2;\r\n  }\r\n  if (i >= 5) {\r\n    martialProf[i] = 4;\r\n    score16pp[i] = 4;\r\n    score16p[i] = 4;\r\n    score16[i] = 4;\r\n    score14p[i] = 3;\r\n    score14[i] = 3;\r\n\r\n    sneak[i] = 2;\r\n    strategic[i] = 2;\r\n    precise[i] = 3;\r\n  }\r\n  if (i >= 7) {\r\n    alchProf[i] = 4;\r\n    martialSpec[i] = 1;\r\n    spellProf[i] = 4;\r\n    maxSkill[i] = i + 6;\r\n\r\n    rage[i] = 6;\r\n    animalrage[i] = 5;\r\n    dragonrage[i] = 8;\r\n    giantrage[i] = 10;\r\n  }\r\n  if (i >= 8) {\r\n    runes[i] = 1;\r\n    runes2[i] = 1;\r\n  }\r\n  if (i >= 9) {\r\n    skillItem[i] = 2;\r\n    classdc1[i] = i + 4;\r\n\r\n    strategic[i] = 3;\r\n    precise[i] = 4;\r\n  }\r\n  if (i >= 10) {\r\n    weaponItem[i] = 2;\r\n    maxScore[i] = 5;\r\n    score14p[i] = 4;\r\n    score14[i] = 4;\r\n    runes2[i] = 2;\r\n  }\r\n  if (i >= 11) {\r\n    casterProf[i] = 4;\r\n    classdc2[i] = i + 4;\r\n\r\n    sneak[i] = 3;\r\n    implementEmpower[i] = 6;\r\n\r\n    preEdge1[i] = 2;\r\n  }\r\n  if (i >= 12) {\r\n    weaponDice[i] = 3;\r\n    mcspell[i] = i + 4;\r\n    deadly[i] = 2;\r\n  }\r\n  if (i >= 13) {\r\n    martialProf[i] = 6;\r\n    casterSpec[i] = 1;\r\n\r\n    strategic[i] = 4;\r\n    precise[i] = 5;\r\n  }\r\n  if (i >= 15) {\r\n    martialSpec[i] = 2;\r\n    score16pp[i] = 5;\r\n    score16p[i] = 5;\r\n    spellProf[i] = 6;\r\n    maxSkill[i] = i + 8;\r\n    runes[i] = 2;\r\n\r\n    rage[i] = 12;\r\n    animalrage[i] = 12;\r\n    dragonrage[i] = 16;\r\n    giantrage[i] = 18;\r\n  }\r\n  if (i >= 16) {\r\n    weaponItem[i] = 3;\r\n    runes2[i] = 3;\r\n  }\r\n  if (i >= 17) {\r\n    score16pp[i] = 6;\r\n    maxScore[i] = 6;\r\n    skillItem[i] = 3;\r\n    classdc1[i] = i + 6;\r\n\r\n    sneak[i] = 4;\r\n    strategic[i] = 5;\r\n    precise[i] = 6;\r\n\r\n    preEdge2[i] = 1;\r\n  }\r\n  if (i >= 18) {\r\n    mcspell[i] = i + 6;\r\n  }\r\n  if (i >= 19) {\r\n    weaponDice[i] = 4;\r\n    spellProf[i] = 8;\r\n    classdc2[i] = i + 6;\r\n    deadly[i] = 3;\r\n\r\n    implementEmpower[i] = 8;\r\n\r\n    preEdge1[i] = 3;\r\n    preEdge2[i] = 2;\r\n    preEdge3[i] = 1;\r\n  }\r\n  if (i >= 20) {\r\n    maxScore[i] = 7;\r\n  }\r\n\r\n  fighterAB[i] = i + martialProf[i] + 2;\r\n  martialAB[i] = i + martialProf[i];\r\n  casterAB[i] = i + casterProf[i];\r\n  alchAB[i] = i + alchProf[i];\r\n  casterSpellAttack[i] = i + spellProf[i];\r\n  casterSaveDC[i] = 10 + i + spellProf[i] + maxScore[i];\r\n\r\n  fighterStatic[i] = maxScore[i] + (martialSpec[i] * (martialProf[i] + 2)) / 2;\r\n  fighterRanged[i] = (martialSpec[i] * (martialProf[i] + 2)) / 2;\r\n  martialStatic[i] = maxScore[i] + (martialSpec[i] * martialProf[i]) / 2;\r\n  martialRanged[i] = (martialSpec[i] * martialProf[i]) / 2;\r\n  casterStatic[i] = score16[i] + (casterSpec[i] * casterProf[i]) / 2;\r\n  casterRanged[i] = (casterSpec[i] * casterProf[i]) / 2;\r\n}\r\nexport const profTrendValues = {\r\n  [profTrends.TRAINED]: trained,\r\n  [profTrends.FIGHTERWEAPON]: fighterAB,\r\n  [profTrends.MARTIALWEAPON]: martialAB,\r\n  [profTrends.CASTERWEAPON]: casterAB,\r\n  [profTrends.ALCHWEAPON]: alchAB,\r\n  [profTrends.CASTERSPELL]: casterSpellAttack,\r\n  [profTrends.CLASSDC1]: classdc1,\r\n  [profTrends.CLASSDC2]: classdc2,\r\n  [profTrends.MCSPELL]: mcspell,\r\n  [profTrends.MAXSKILL]: maxSkill,\r\n};\r\nexport const statTrendValues = {\r\n  [statTrends.AS10]: zero,\r\n  [statTrends.AS18a]: maxScore,\r\n  [statTrends.AS16a]: score16pp,\r\n  [statTrends.AS16pp]: score16p,\r\n  [statTrends.AS16p]: score16,\r\n  [statTrends.AS14pp]: score14p,\r\n  [statTrends.AS14p]: score14,\r\n};\r\nexport const itemTrendValues = {\r\n  [itemTrends.NONE]: zero,\r\n  [itemTrends.WEAPON]: weaponItem,\r\n  [itemTrends.SKILL]: skillItem,\r\n};\r\n\r\nexport const MAPvalues = {\r\n  \"0 (0x-5)\": 0,\r\n  \"-5 (1x-5)\": -5,\r\n  \"-10 (2x-5)\": -10,\r\n  \"0 (0x-4)\": 0,\r\n  \"-4 (1x-4)\": -4,\r\n  \"-8 (2x-4)\": -8,\r\n  \"0 (0x-3)\": 0,\r\n  \"-3 (1x-3)\": -3,\r\n  \"-6 (2x-3)\": -6,\r\n  \"0 (0x-2)\": 0,\r\n  \"-2 (1x-2)\": -2,\r\n  \"-4 (2x-2)\": -4,\r\n  \"0 (0x-1)\": 0,\r\n  \"-1 (1x-1)\": -1,\r\n  \"-2 (2x-1)\": -2,\r\n};\r\n\r\nexport const dieTrendValues = {\r\n  [dieTrends.NONE]: zero,\r\n  [dieTrends.WEAPON]: weaponDice,\r\n  [dieTrends.SPELLLEVEL1]: spellDice,\r\n  [dieTrends.SPELLLEVEL2]: spellDice2,\r\n  [dieTrends.LEVEL]: level,\r\n  [dieTrends.HALFLEVEL]: halfLevel,\r\n  [dieTrends.RUNE]: runes,\r\n  [dieTrends.RUNE2]: runes2,\r\n  [dieTrends.DEADLY]: deadly,\r\n  [dieTrends.SNEAK]: sneak,\r\n  [dieTrends.STRATEGIC]: strategic,\r\n  [dieTrends.PRECISE]: precise,\r\n  [dieTrends.PRECISIONEDGE]: preEdge1,\r\n  [dieTrends.PRECISIONEDGE2]: preEdge2,\r\n  [dieTrends.PRECISIONEDGE3]: preEdge3,\r\n};\r\n\r\nexport const damageTrendValues = {\r\n  ...statTrendValues,\r\n  [damageTrends.NONE]: zero,\r\n  [damageTrends.FIGHTERWEAPONSPEC]: fighterRanged,\r\n  [damageTrends.MARTIALWEAPONSPEC]: martialRanged,\r\n  [damageTrends.CASTERWEAPONSPEC]: casterRanged,\r\n  [damageTrends.WEAPON]: weaponDice,\r\n  [damageTrends.SPELLLEVEL1]: spellDice,\r\n  [damageTrends.LEVEL]: level,\r\n  [damageTrends.HALFLEVEL]: halfLevel,\r\n  [damageTrends.RAGE]: rage,\r\n  [damageTrends.ANIMALRAGE]: animalrage,\r\n  [damageTrends.DRAGONRAGE]: dragonrage,\r\n  [damageTrends.GIANTRAGE]: giantrage,\r\n  [damageTrends.IMPLEMENT]: implementEmpower,\r\n};\r\n\r\nconst extremeAC: defaultValue = {\r\n  \"-1\": 18,\r\n  0: 19,\r\n  1: 19,\r\n  2: 21,\r\n  3: 22,\r\n  4: 24,\r\n  5: 25,\r\n  6: 27,\r\n  7: 28,\r\n  8: 30,\r\n  9: 31,\r\n  10: 33,\r\n  11: 34,\r\n  12: 36,\r\n  13: 37,\r\n  14: 39,\r\n  15: 40,\r\n  16: 42,\r\n  17: 43,\r\n  18: 45,\r\n  19: 46,\r\n  20: 48,\r\n  21: 49,\r\n  22: 51,\r\n  23: 52,\r\n  24: 54,\r\n};\r\nconst highAC = { ...extremeAC };\r\nfor (let level in highAC) highAC[level] -= 3;\r\n\r\nconst moderateAC = { ...extremeAC };\r\nfor (let level in moderateAC) moderateAC[level] -= 4;\r\n\r\nconst lowAC = { ...extremeAC };\r\nfor (let level in lowAC) lowAC[level] -= 6;\r\n\r\nexport const defaultACs = {\r\n  [ACTrends.EXTREME]: extremeAC,\r\n  [ACTrends.HIGH]: highAC,\r\n  [ACTrends.MODERATE]: moderateAC,\r\n  [ACTrends.LOW]: lowAC,\r\n};\r\n\r\nconst extremeSaves: defaultValue = {\r\n  \"-1\": 9,\r\n  0: 10,\r\n  1: 11,\r\n  2: 12,\r\n  3: 14,\r\n  4: 15,\r\n  5: 17,\r\n  6: 18,\r\n  7: 20,\r\n  8: 21,\r\n  9: 23,\r\n  10: 24,\r\n  11: 26,\r\n  12: 27,\r\n  13: 29,\r\n  14: 30,\r\n  15: 32,\r\n  16: 33,\r\n  17: 35,\r\n  18: 36,\r\n  19: 38,\r\n  20: 39,\r\n  21: 41,\r\n  22: 43,\r\n  23: 44,\r\n  24: 46,\r\n};\r\nconst highSaves: defaultValue = {\r\n  \"-1\": 8,\r\n  0: 9,\r\n  1: 10,\r\n  2: 11,\r\n  3: 12,\r\n  4: 14,\r\n  5: 15,\r\n  6: 17,\r\n  7: 18,\r\n  8: 19,\r\n  9: 21,\r\n  10: 22,\r\n  11: 24,\r\n  12: 25,\r\n  13: 26,\r\n  14: 28,\r\n  15: 29,\r\n  16: 30,\r\n  17: 32,\r\n  18: 33,\r\n  19: 35,\r\n  20: 36,\r\n  21: 38,\r\n  22: 39,\r\n  23: 40,\r\n  24: 42,\r\n};\r\nconst moderateSaves: defaultValue = {\r\n  \"-1\": 5,\r\n  0: 6,\r\n  1: 7,\r\n  2: 8,\r\n  3: 9,\r\n  4: 11,\r\n  5: 12,\r\n  6: 14,\r\n  7: 15,\r\n  8: 16,\r\n  9: 18,\r\n  10: 19,\r\n  11: 21,\r\n  12: 22,\r\n  13: 23,\r\n  14: 25,\r\n  15: 26,\r\n  16: 28,\r\n  17: 29,\r\n  18: 30,\r\n  19: 32,\r\n  20: 33,\r\n  21: 35,\r\n  22: 36,\r\n  23: 37,\r\n  24: 38,\r\n};\r\nconst lowSaves: defaultValue = {\r\n  \"-1\": 2,\r\n  0: 3,\r\n  1: 4,\r\n  2: 5,\r\n  3: 6,\r\n  4: 8,\r\n  5: 9,\r\n  6: 11,\r\n  7: 12,\r\n  8: 13,\r\n  9: 15,\r\n  10: 16,\r\n  11: 18,\r\n  12: 19,\r\n  13: 20,\r\n  14: 22,\r\n  15: 23,\r\n  16: 25,\r\n  17: 26,\r\n  18: 27,\r\n  19: 29,\r\n  20: 30,\r\n  21: 32,\r\n  22: 33,\r\n  23: 34,\r\n  24: 36,\r\n};\r\nconst terribleSaves: defaultValue = {\r\n  \"-1\": 0,\r\n  0: 1,\r\n  1: 2,\r\n  2: 3,\r\n  3: 4,\r\n  4: 6,\r\n  5: 7,\r\n  6: 8,\r\n  7: 10,\r\n  8: 11,\r\n  9: 12,\r\n  10: 14,\r\n  11: 15,\r\n  12: 16,\r\n  13: 18,\r\n  14: 19,\r\n  15: 20,\r\n  16: 22,\r\n  17: 23,\r\n  18: 24,\r\n  19: 26,\r\n  20: 27,\r\n  21: 28,\r\n  22: 30,\r\n  23: 31,\r\n  24: 32,\r\n};\r\nexport const defaultSaves = {\r\n  [SaveTrends.EXTREME]: extremeSaves,\r\n  [SaveTrends.HIGH]: highSaves,\r\n  [SaveTrends.MODERATE]: moderateSaves,\r\n  [SaveTrends.LOW]: lowSaves,\r\n  [SaveTrends.TERRIBLE]: terribleSaves,\r\n};\r\nexport const standardDC = {\r\n  \"-1\": 12,\r\n  0: 14,\r\n  1: 15,\r\n  2: 16,\r\n  3: 18,\r\n  4: 19,\r\n  5: 20,\r\n  6: 22,\r\n  7: 23,\r\n  8: 24,\r\n  9: 26,\r\n  10: 27,\r\n  11: 28,\r\n  12: 30,\r\n  13: 31,\r\n  14: 32,\r\n  15: 34,\r\n  16: 35,\r\n  17: 36,\r\n  18: 38,\r\n  19: 39,\r\n  20: 40,\r\n  21: 42,\r\n  22: 44,\r\n  23: 46,\r\n  24: 48,\r\n  25: 50,\r\n};\r\n","import { statTrendValues } from \"./defaults\";\r\nimport {\r\n  DamageTrend,\r\n  damageTrends,\r\n  DieTrend,\r\n  dieTrends,\r\n  MAPs,\r\n  profTrends,\r\n  StatTrend,\r\n} from \"./types\";\r\n\r\nexport type StrikeInfo = {\r\n  runes: DieTrend;\r\n  cClass: string;\r\n  activity: string;\r\n  cantrip: string;\r\n  attackScore: StatTrend;\r\n  damageScore: StatTrend;\r\n  cantripScore: StatTrend;\r\n  dieSize: number;\r\n  numStrikes: number;\r\n  traits: {\r\n    [k: string]: boolean;\r\n  };\r\n  deadlySize: number;\r\n  fatalSize: number;\r\n  critSpec: boolean;\r\n  critSpecLevel: number;\r\n  critSpecType: string;\r\n};\r\n\r\nexport const activityTypes = {\r\n  Strike: \"Strike\",\r\n  Skill: \"Skill Action\",\r\n  Cantrip: \"Cantrip\",\r\n  Spell: \"Spell\",\r\n} as const;\r\n// const activityOptions: JSX.Element[] = [];\r\n// let actType: keyof typeof activityTypes;\r\n// for (actType in activityTypes) {\r\n//   activityOptions.push(\r\n//     <MenuItem key={actType} value={activityTypes[actType]}>\r\n//       {activityTypes[actType]}\r\n//     </MenuItem>\r\n//   );\r\n// }\r\n// export const classes = {\r\n//   Alchemist: \"Alchemist\",\r\n//   Barbarian: \"Barbarian\",\r\n//   Bard: \"Bard\",\r\n//   Champion: \"Champion\",\r\n//   Cleric: \"Cleric\",\r\n//   Druid: \"Druid\",\r\n//   Fighter: \"Fighter\",\r\n//   Gunslinger: \"Gunslinger\",\r\n//   Inventor: \"Inventor\",\r\n//   Investigator: \"Investigator\",\r\n//   Magus: \"Magus\",\r\n//   Monk: \"Monk\",\r\n//   Oracle: \"Oracle\",\r\n//   Ranger: \"Ranger\",\r\n//   Rogue: \"Rogue\",\r\n//   Sorcerer: \"Sorcerer\",\r\n//   Summoner: \"Summoner\",\r\n//   Swashbuckler: \"Swashbuckler\",\r\n//   Witch: \"Witch\",\r\n//   Wizard: \"Wizard\",\r\n// } as const;\r\nexport const runeTrends = [dieTrends.NONE, dieTrends.RUNE, dieTrends.RUNE2];\r\nexport const classes = [\r\n  \"Alchemist\",\r\n  \"Barbarian\",\r\n  \"Bard\",\r\n  \"Champion\",\r\n  \"Cleric (Cloistered)\",\r\n  \"Cleric (Warpriest)\",\r\n  \"Druid\",\r\n  \"Fighter\",\r\n  \"Gunslinger\",\r\n  \"Inventor\",\r\n  \"Investigator\",\r\n  \"Magus\",\r\n  \"Monk\",\r\n  \"Oracle\",\r\n  \"Ranger (Flurry)\",\r\n  \"Ranger (Precision)\",\r\n  \"Rogue\",\r\n  \"Sorcerer\",\r\n  \"Summoner\",\r\n  \"Swashbuckler\",\r\n  \"Witch\",\r\n  \"Wizard\",\r\n] as const;\r\n\r\n// const classOptions: JSX.Element[] = [];\r\n// let cls: keyof typeof classes;\r\n// for (cls in classes) {\r\n//   classOptions.push(\r\n//     <MenuItem key={cls} value={classes[cls]}>\r\n//       {classes[cls]}\r\n//     </MenuItem>\r\n//   );\r\n// }\r\n// const AlchemistStrikeOptions = [\"Strike\"] as const;\r\n// const FighterStrikeOptions = [\"Strike\", \"Power Attack\"] as const;\r\n\r\nexport const cantrips = [\"Telekinetic Projectile\"] as const;\r\n\r\nexport const classActivities = [\"Strike\", \"Power Attack\"] as const;\r\n// Alchemist: AlchemistStrikeOptions,\r\n// Barbarian: AlchemistStrikeOptions,\r\n// Bard: AlchemistStrikeOptions,\r\n// Champion: AlchemistStrikeOptions,\r\n// Cleric: AlchemistStrikeOptions,\r\n// Druid: AlchemistStrikeOptions,\r\n// Fighter: FighterStrikeOptions,\r\n// Gunslinger: AlchemistStrikeOptions,\r\n// Inventor: AlchemistStrikeOptions,\r\n// Investigator: AlchemistStrikeOptions,\r\n// Magus: AlchemistStrikeOptions,\r\n// Monk: AlchemistStrikeOptions,\r\n// Oracle: AlchemistStrikeOptions,\r\n// Ranger: AlchemistStrikeOptions,\r\n// Rogue: AlchemistStrikeOptions,\r\n// Sorcerer: AlchemistStrikeOptions,\r\n// Summoner: AlchemistStrikeOptions,\r\n// Swashbuckler: AlchemistStrikeOptions,\r\n// Witch: AlchemistStrikeOptions,\r\n// Wizard: AlchemistStrikeOptions,\r\n// } as const;\r\n\r\nexport const weaponTraits = [\r\n  \"agile\",\r\n  \"deadly\",\r\n  \"fatal\",\r\n  \"forceful\",\r\n  \"ranged\",\r\n  \"propulsive\",\r\n] as const;\r\n\r\nexport const critSpecs = [\r\n  \"Sword\",\r\n  \"Hammer\",\r\n  \"Spear\",\r\n  \"Other\",\r\n  \"Pick\",\r\n  \"Knife\",\r\n] as const;\r\n\r\nexport const classWeaponProf = (className: string) => {\r\n  if ([\"Fighter\", \"Gunslinger\"].includes(className))\r\n    return profTrends.FIGHTERWEAPON;\r\n  if (\r\n    [\r\n      \"Bard\",\r\n      \"Cleric (Cloistered)\",\r\n      \"Druid\",\r\n      \"Oracle\",\r\n      \"Sorcerer\",\r\n      \"Summoner\",\r\n      \"Witch\",\r\n      \"Wizard\",\r\n    ].includes(className)\r\n  )\r\n    return profTrends.CASTERWEAPON;\r\n  if ([\"Alchemist\", \"Cleric (Warpriest)\"].includes(className))\r\n    return profTrends.ALCHWEAPON;\r\n\r\n  return profTrends.MARTIALWEAPON;\r\n};\r\n\r\nexport const classWeaponMAP = (strikeInfo: StrikeInfo) => {\r\n  if ([\"Ranger (Flurry)\"].includes(strikeInfo.cClass)) {\r\n    if (strikeInfo.traits[\"agile\"]) return MAPs.RA1;\r\n    else return MAPs.R1;\r\n  } else {\r\n    if (strikeInfo.traits[\"agile\"]) return MAPs.A1;\r\n    else return MAPs.N1;\r\n  }\r\n};\r\n\r\nexport const classAdjustments = (\r\n  strikeInfo: StrikeInfo,\r\n  strikeNumber: number\r\n) => {\r\n  const adjustments: { [key: number]: number } = {};\r\n  let currentValue = 0;\r\n  for (let i = 1; i <= 20; i++) {\r\n    if (strikeInfo.cClass === \"Ranger (Flurry)\" && i === 17)\r\n      currentValue = Math.min(strikeNumber, 2);\r\n    adjustments[i] = currentValue;\r\n  }\r\n  return adjustments;\r\n};\r\n\r\nexport const activityWeaponDiceAdjustments = (strikeInfo: StrikeInfo) => {\r\n  const adjustments: { [key: number]: number } = {};\r\n  let currentValue = 0;\r\n  for (let i = 1; i <= 20; i++) {\r\n    if (strikeInfo.activity === \"Power Attack\" && i === 1) currentValue = 1;\r\n    if (strikeInfo.activity === \"Power Attack\" && i === 10) currentValue = 2;\r\n    if (strikeInfo.activity === \"Power Attack\" && i === 18) currentValue = 3;\r\n    adjustments[i] = currentValue;\r\n  }\r\n  return adjustments;\r\n};\r\n\r\nexport const classWeaponDamageTrends = (\r\n  strikeInfo: StrikeInfo,\r\n  strikeNumber: number\r\n) => {\r\n  const trends: DamageTrend[] = [];\r\n\r\n  if (!strikeInfo.traits[\"propulsive\"] && !strikeInfo.traits[\"ranged\"]) {\r\n    trends.push(strikeInfo.damageScore);\r\n  }\r\n\r\n  if ([\"Fighter\", \"Gunslinger\"].includes(strikeInfo.cClass)) {\r\n    trends.push(damageTrends.FIGHTERWEAPONSPEC);\r\n  } else if (\r\n    [\r\n      \"Bard\",\r\n      \"Cleric (Cloistered)\",\r\n      \"Druid\",\r\n      \"Oracle\",\r\n      \"Sorcerer\",\r\n      \"Summoner\",\r\n      \"Witch\",\r\n      \"Wizard\",\r\n    ].includes(strikeInfo.cClass)\r\n  ) {\r\n    trends.push(damageTrends.CASTERWEAPONSPEC);\r\n  } else if ([\"Alchemist\", \"Cleric (Warpriest)\"].includes(strikeInfo.cClass)) {\r\n    trends.push(damageTrends.CASTERWEAPONSPEC);\r\n  } else {\r\n    trends.push(damageTrends.MARTIALWEAPONSPEC);\r\n  }\r\n\r\n  if (strikeInfo.traits[\"forceful\"]) {\r\n    if (strikeNumber === 1) {\r\n      trends.push(damageTrends.WEAPON);\r\n    } else if (strikeNumber >= 2) {\r\n      trends.push(damageTrends.WEAPON);\r\n      trends.push(damageTrends.WEAPON);\r\n    }\r\n  }\r\n\r\n  return trends;\r\n};\r\n\r\nexport const classDamageAdjustments = (strikeInfo: StrikeInfo) => {\r\n  const adjustments: { [key: number]: number } = {};\r\n  let currentValue = 0;\r\n  for (let i = 1; i <= 20; i++) {\r\n    currentValue = 0;\r\n    if (strikeInfo.traits[\"propulsive\"]) {\r\n      currentValue += Math.floor(\r\n        statTrendValues[strikeInfo.damageScore][i] / 2\r\n      );\r\n    }\r\n    if (strikeInfo.cClass === \"Gunslinger\") currentValue += 1;\r\n    adjustments[i] = currentValue;\r\n  }\r\n  return adjustments;\r\n};\r\n\r\nexport const hasDeadly = (strikeInfo: StrikeInfo) => {\r\n  return strikeInfo.traits[\"deadly\"];\r\n};\r\nexport const hasFatal = (strikeInfo: StrikeInfo) => {\r\n  return strikeInfo.traits[\"fatal\"];\r\n};\r\nexport const hasPickCritSpec = (strikeInfo: StrikeInfo) => {\r\n  return strikeInfo.critSpec && strikeInfo.critSpecType === \"Pick\";\r\n};\r\nexport const hasKnifeCritSpec = (strikeInfo: StrikeInfo) => {\r\n  return strikeInfo.critSpec && strikeInfo.critSpecType === \"Knife\";\r\n};\r\nexport const hasCritSpecEffect = (strikeInfo: StrikeInfo) => {\r\n  return (\r\n    hasSwordCritSpec(strikeInfo) ||\r\n    hasHammerCritSpec(strikeInfo) ||\r\n    hasSpearCritSpec(strikeInfo)\r\n  );\r\n};\r\nexport const hasSwordCritSpec = (strikeInfo: StrikeInfo) => {\r\n  return strikeInfo.critSpec && strikeInfo.critSpecType === \"Sword\";\r\n};\r\nexport const hasHammerCritSpec = (strikeInfo: StrikeInfo) => {\r\n  return strikeInfo.critSpec && strikeInfo.critSpecType === \"Hammer\";\r\n};\r\nexport const hasSpearCritSpec = (strikeInfo: StrikeInfo) => {\r\n  return strikeInfo.critSpec && strikeInfo.critSpecType === \"Hammer\";\r\n};\r\nexport const critSpecDice = (strikeInfo: StrikeInfo) => {\r\n  const adjustments: { [key: number]: number } = {};\r\n  let currentValue = 0;\r\n  for (let i = 1; i <= 20; i++) {\r\n    if (i >= strikeInfo.critSpecLevel) {\r\n      if (strikeInfo.critSpec && strikeInfo.critSpecType === \"Knife\") {\r\n        if (i >= 1) currentValue = 1;\r\n      }\r\n    }\r\n    adjustments[i] = currentValue;\r\n  }\r\n  return adjustments;\r\n};\r\nexport const critSpecDamage = (strikeInfo: StrikeInfo) => {\r\n  const adjustments: { [key: number]: number } = {};\r\n  let currentValue = 0;\r\n  for (let i = 1; i <= 20; i++) {\r\n    if (i >= strikeInfo.critSpecLevel) {\r\n      if (strikeInfo.critSpec && strikeInfo.critSpecType === \"Pick\") {\r\n        if (i >= 1) currentValue = 2;\r\n        if (i >= 4) currentValue = 4;\r\n        if (i >= 12) currentValue = 6;\r\n        if (i >= 19) currentValue = 8;\r\n      }\r\n      if (strikeInfo.critSpec && strikeInfo.critSpecType === \"Knife\") {\r\n        if (i >= 2) currentValue = 1;\r\n        if (i >= 10) currentValue = 2;\r\n        if (i >= 16) currentValue = 3;\r\n      }\r\n    }\r\n    adjustments[i] = currentValue;\r\n  }\r\n  return adjustments;\r\n};\r\n","import { EntityState } from \"@reduxjs/toolkit\";\r\nimport {\r\n  activityTypes,\r\n  conditions,\r\n  profTrends,\r\n  defenses,\r\n  MAPs,\r\n  rollTypes,\r\n  statTrends,\r\n  itemTrends,\r\n  effectTypes,\r\n  damageTrends,\r\n  Condition,\r\n  RollType,\r\n  ActivityType,\r\n  ProfTrend,\r\n  StatTrend,\r\n  ItemTrend,\r\n  MAP,\r\n  Defense,\r\n  DamageCond,\r\n  DieTrend,\r\n  DamageTrend,\r\n  DamageType,\r\n  Material,\r\n  EffectType,\r\n  damageTypes,\r\n  dCond,\r\n  dieTrends,\r\n  materials,\r\n  WhenConditions,\r\n  ImportStates,\r\n} from \"../../Model/types\";\r\n\r\nexport type State = {\r\n  selectedRoutine: number | undefined;\r\n  selectedActivityPath: number | undefined;\r\n  parentRoutine: number | undefined;\r\n  parentActivity: number | undefined;\r\n  routines: EntityState<Routine>;\r\n  activityPaths: EntityState<ActivityPath>;\r\n  damages: EntityState<Damage>;\r\n  effects: EntityState<Effect>;\r\n\r\n  importRoutine: ImportStates;\r\n};\r\n\r\nexport interface Adjustment {\r\n  [key: number]: number;\r\n}\r\nexport interface Routine {\r\n  id: number;\r\n  name: string;\r\n  display: boolean;\r\n  apIds: number[];\r\n  levelDiff: number;\r\n  description: string;\r\n  startLevel: number;\r\n  endLevel: number;\r\n}\r\nexport interface RoutineObject {\r\n  id: number;\r\n  name: string;\r\n  display: boolean;\r\n  apIds: ActivityPathObject[];\r\n  levelDiff: number;\r\n  description: string;\r\n  startLevel: number;\r\n  endLevel: number;\r\n}\r\nexport interface ActivityPath {\r\n  id: number;\r\n  parentId?: number;\r\n  routineId?: number;\r\n  condition: Condition;\r\n\r\n  rollType: RollType;\r\n  type: ActivityType;\r\n  profTrend: ProfTrend;\r\n  statTrend: StatTrend;\r\n  itemTrend: ItemTrend;\r\n  bonusAdjustments: Adjustment;\r\n  MAP: MAP;\r\n\r\n  targetType: Defense;\r\n  damages: number[];\r\n  effects: number[];\r\n  apIds: number[];\r\n}\r\nexport interface ActivityPathObject {\r\n  id: number;\r\n  parentId?: number;\r\n  routineId?: number;\r\n  condition: Condition;\r\n\r\n  rollType: RollType;\r\n  type: ActivityType;\r\n  profTrend: ProfTrend;\r\n  statTrend: StatTrend;\r\n  itemTrend: ItemTrend;\r\n  bonusAdjustments: Adjustment;\r\n  MAP: MAP;\r\n\r\n  targetType: Defense;\r\n  damages: Damage[];\r\n  effects: Effect[];\r\n  apIds: ActivityPathObject[];\r\n}\r\nexport interface Damage {\r\n  id: number;\r\n  damageCondition: DamageCond;\r\n\r\n  dieTrend: DieTrend;\r\n  dieAdjustments: Adjustment;\r\n  diceSize: number;\r\n  fatal: boolean;\r\n  fatalDie: number;\r\n  damageTrend: DamageTrend[];\r\n  damageAdjustments: Adjustment;\r\n\r\n  damageType: DamageType;\r\n  material: Material;\r\n  persistent: boolean;\r\n  multiplier: number;\r\n  damageWhen: WhenConditions[];\r\n}\r\nexport interface Effect {\r\n  id: number;\r\n  effectCondition: Condition;\r\n  effectType: EffectType;\r\n  effectValue: number | undefined;\r\n  startLevel: number;\r\n  endLevel: number;\r\n  damageWhen: WhenConditions[];\r\n}\r\n\r\nexport function isRoutineObject(routine: any): routine is RoutineObject {\r\n  return (\r\n    typeof routine === \"object\" &&\r\n    typeof routine.name === \"string\" &&\r\n    typeof routine.display === \"boolean\" &&\r\n    typeof routine.levelDiff === \"number\" &&\r\n    typeof routine.description === \"string\" &&\r\n    isActivityPaths(routine.apIds) &&\r\n    typeof routine.startLevel === \"number\" &&\r\n    typeof routine.endLevel === \"number\"\r\n  );\r\n}\r\nfunction isActivityPaths(apIds: unknown): apIds is ActivityPathObject[] {\r\n  if (Array.isArray(apIds)) {\r\n    for (let apId of apIds) {\r\n      if (\r\n        !(\r\n          Object.values(conditions).includes(apId.condition) &&\r\n          Object.values(rollTypes).includes(apId.rollType) &&\r\n          Object.values(activityTypes).includes(apId.type) &&\r\n          Object.values(profTrends).includes(apId.profTrend) &&\r\n          Object.values(statTrends).includes(apId.statTrend) &&\r\n          Object.values(itemTrends).includes(apId.itemTrend) &&\r\n          isAdjustment(apId.bonusAdjustments) &&\r\n          Object.values(MAPs).includes(apId.MAP) &&\r\n          Object.values(defenses).includes(apId.targetType) &&\r\n          isActivityPaths(apId.apIds) &&\r\n          isDamages(apId.damages) &&\r\n          isEffects(apId.effects)\r\n        )\r\n      ) {\r\n        console.log(apId);\r\n        console.log(\r\n          Object.values(conditions).includes(apId.condition) &&\r\n            Object.values(rollTypes).includes(apId.rollType) &&\r\n            Object.values(activityTypes).includes(apId.type)\r\n        );\r\n        console.log(\r\n          Object.values(profTrends).includes(apId.profTrend) &&\r\n            Object.values(statTrends).includes(apId.statTrend) &&\r\n            Object.values(itemTrends).includes(apId.itemTrend)\r\n        );\r\n        console.log(\r\n          Object.values(MAPs).includes(apId.MAP) &&\r\n            Object.values(defenses).includes(apId.targetType)\r\n        );\r\n        console.log(isActivityPaths(apId.apIds));\r\n        console.log(isDamages(apId.damages));\r\n        console.log(isEffects(apId.effects));\r\n        console.log(isAdjustment(apId.bonusAdjustments));\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  console.log(\"6\");\r\n  return false;\r\n}\r\nfunction isAdjustment(adjustments: any): adjustments is Adjustment {\r\n  if (typeof adjustments !== \"object\") {\r\n    console.log(\"1\");\r\n    return false;\r\n  }\r\n  for (let i = 1; i <= 20; i++) {\r\n    if (typeof adjustments[i] !== \"number\") {\r\n      console.log(2);\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\nfunction isDamages(damages: unknown): damages is Damage[] {\r\n  if (Array.isArray(damages)) {\r\n    for (let damage of damages) {\r\n      if (Array.isArray(damage.damageTrend)) {\r\n        for (let dt of damage.damageTrend) {\r\n          if (!Object.values(damageTrends).includes(dt)) {\r\n            console.log(\"3\");\r\n            return false;\r\n          }\r\n        }\r\n      } else {\r\n        console.log(\"4\");\r\n        return false;\r\n      }\r\n      if (\r\n        !(\r\n          Object.values(dCond).includes(damage.damageCondition) &&\r\n          Object.values(dieTrends).includes(damage.dieTrend) &&\r\n          isAdjustment(damage.dieAdjustments) &&\r\n          typeof damage.diceSize === \"number\" &&\r\n          typeof damage.fatal === \"boolean\" &&\r\n          typeof damage.fatalDie === \"number\" &&\r\n          isAdjustment(damage.damageAdjustments) &&\r\n          Object.values(damageTypes).includes(damage.damageType) &&\r\n          Object.values(materials).includes(damage.material) &&\r\n          typeof damage.persistent === \"boolean\" &&\r\n          [0.5, 1, 2].includes(damage.multiplier)\r\n        )\r\n      ) {\r\n        console.log(damage);\r\n        console.log(\r\n          Object.values(dCond).includes(damage.damageCondition) &&\r\n            Object.values(dieTrends).includes(damage.dieTrend)\r\n        );\r\n        console.log(\r\n          typeof damage.diceSize === \"number\" &&\r\n            typeof damage.fatal === \"boolean\" &&\r\n            typeof damage.fatalDie === \"number\"\r\n        );\r\n        console.log(\r\n          Object.values(damageTypes).includes(damage.damageType) &&\r\n            Object.values(materials).includes(damage.material) &&\r\n            typeof damage.persistent === \"boolean\"\r\n        );\r\n\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\nfunction isEffects(effects: unknown): effects is Effect[] {\r\n  if (Array.isArray(effects)) {\r\n    for (let effect of effects) {\r\n      if (\r\n        !(\r\n          Object.values(conditions).includes(effect.effectCondition) &&\r\n          Object.values(effectTypes).includes(effect.effectType) &&\r\n          typeof effect.startLevel === \"number\" &&\r\n          typeof effect.endLevel === \"number\"\r\n        )\r\n      ) {\r\n        console.log(effect);\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n","import {\r\n  createEntityAdapter,\r\n  createSlice,\r\n  EntityState,\r\n  PayloadAction,\r\n  Update,\r\n} from \"@reduxjs/toolkit\";\r\nimport { WritableDraft } from \"immer/dist/internal\";\r\nimport {\r\n  classWeaponMAP,\r\n  classWeaponProf,\r\n  classAdjustments,\r\n  StrikeInfo,\r\n  activityWeaponDiceAdjustments,\r\n  classWeaponDamageTrends,\r\n  hasDeadly,\r\n  hasFatal,\r\n  hasPickCritSpec,\r\n  critSpecDamage,\r\n  hasKnifeCritSpec,\r\n  critSpecDice,\r\n  classDamageAdjustments,\r\n  hasCritSpecEffect,\r\n  hasSwordCritSpec,\r\n  hasHammerCritSpec,\r\n  hasSpearCritSpec,\r\n} from \"../../Model/newActivityInfo\";\r\nimport {\r\n  activityTypes,\r\n  conditions,\r\n  profTrends,\r\n  defenses,\r\n  MAPs,\r\n  nextMAPs,\r\n  rollTypes,\r\n  statTrends,\r\n  itemTrends,\r\n  effectTypes,\r\n  EffectType,\r\n  diceSizes,\r\n  damageTypes,\r\n  dCond,\r\n  dieTrends,\r\n  materials,\r\n  effectStateTypes,\r\n  effectValueTypes,\r\n  whenConditions,\r\n  importStates,\r\n  ActivityType,\r\n} from \"../../Model/types\";\r\nimport { RootState } from \"../../App/store\";\r\nimport {\r\n  ActivityPath,\r\n  ActivityPathObject,\r\n  Damage,\r\n  Effect,\r\n  isRoutineObject,\r\n  Routine,\r\n  RoutineObject,\r\n  State,\r\n} from \"./RoutineTypes\";\r\n\r\nexport const routinesAdapter = createEntityAdapter<Routine>();\r\nexport const activityPathAdapter = createEntityAdapter<ActivityPath>();\r\nexport const damageAdapter = createEntityAdapter<Damage>();\r\nexport const effectAdapter = createEntityAdapter<Effect>();\r\n\r\nlet routineId = 100;\r\nlet activityPathId = 1000;\r\nlet damageId = 1000;\r\nlet effectId = 1000;\r\n\r\nconst empty: { [key: number]: number } = {};\r\nconst one: { [key: number]: number } = {};\r\nfor (let i = 1; i <= 20; i++) {\r\n  empty[i] = 0;\r\n  one[i] = 1;\r\n}\r\n\r\nconst initialState: State = {\r\n  selectedRoutine: 0,\r\n  selectedActivityPath: undefined,\r\n  parentRoutine: 0,\r\n  parentActivity: undefined,\r\n  routines: routinesAdapter.getInitialState(),\r\n  activityPaths: activityPathAdapter.getInitialState(),\r\n  damages: damageAdapter.getInitialState(),\r\n  effects: effectAdapter.getInitialState(),\r\n  importRoutine: importStates.MessageSeen,\r\n};\r\n\r\nconst defaultActivity = {\r\n  type: activityTypes.STRIKE,\r\n  condition: conditions.ALWAYS,\r\n  rollType: rollTypes.NORMAL,\r\n  profTrend: profTrends.TRAINED,\r\n  statTrend: statTrends.AS10,\r\n  itemTrend: itemTrends.NONE,\r\n  bonusAdjustments: empty,\r\n  MAP: MAPs.N1,\r\n  targetType: defenses.AC,\r\n  damages: [],\r\n  effects: [],\r\n  apIds: [],\r\n};\r\nconst defaultStrikeParent = {\r\n  profTrend: profTrends.MARTIALWEAPON,\r\n  statTrend: statTrends.AS18a,\r\n  itemTrend: itemTrends.WEAPON,\r\n  damages: [0, 1],\r\n  effects: [0],\r\n};\r\nconst defaultSaveParent = {\r\n  type: activityTypes.SAVE,\r\n  profTrend: profTrends.CASTERSPELL,\r\n  statTrend: statTrends.AS18a,\r\n  targetType: defenses.REF,\r\n  damages: [2],\r\n  effects: [],\r\n};\r\nconst defaultDamage = {\r\n  damageCondition: dCond.STRIKE,\r\n  damageType: damageTypes.S,\r\n  material: materials.NONE,\r\n  persistent: false,\r\n  multiplier: 1,\r\n  damageWhen: [whenConditions.Always],\r\n\r\n  dieTrend: dieTrends.NONE,\r\n  dieAdjustments: empty,\r\n  diceSize: 6,\r\n  fatal: false,\r\n  fatalDie: 10,\r\n  damageTrend: [],\r\n  damageAdjustments: empty,\r\n};\r\n\r\nexport const routinesSlice = createSlice({\r\n  name: \"routines\",\r\n  initialState,\r\n  reducers: {\r\n    setRoutine: (state, action) => {\r\n      state.selectedRoutine = action.payload;\r\n      state.selectedActivityPath = undefined;\r\n      state.parentActivity = undefined;\r\n      state.parentRoutine = undefined;\r\n    },\r\n    setActivityPath: (state, action) => {\r\n      state.selectedActivityPath = action.payload;\r\n      state.parentActivity = undefined;\r\n      state.parentRoutine = undefined;\r\n    },\r\n\r\n    routineAdded: (state, action) => {\r\n      routinesAdapter.addOne(state.routines, action);\r\n    },\r\n    routineUpdated: (state, action: PayloadAction<Update<Routine>>) => {\r\n      routinesAdapter.updateOne(state.routines, action);\r\n    },\r\n    activityPathAdded: (state, action) => {\r\n      activityPathAdapter.addOne(state.activityPaths, action);\r\n    },\r\n    activityPathUpdated: (state, action) => {\r\n      activityPathAdapter.updateOne(state.activityPaths, action);\r\n    },\r\n    damageAdded: (state, action) => {\r\n      damageAdapter.addOne(state.damages, action);\r\n    },\r\n    damageUpdated: (state, action) => {\r\n      damageAdapter.updateOne(state.damages, action);\r\n    },\r\n    effectAdded: (state, action) => {\r\n      effectAdapter.addOne(state.effects, action);\r\n    },\r\n    effectUpdated: (state, action) => {\r\n      effectAdapter.updateOne(state.effects, action);\r\n    },\r\n\r\n    routineCreated: {\r\n      reducer: (\r\n        state,\r\n        action: PayloadAction<{ id: number; copy: boolean }>\r\n      ) => {\r\n        const { id, copy } = action.payload;\r\n        if (copy && state.selectedRoutine !== undefined) {\r\n          const routine = state.routines.entities[state.selectedRoutine]!;\r\n          const name = \"Copy of \" + routine.name;\r\n          const apIds = copyActivityPaths(state, routine.apIds, undefined, id);\r\n          routinesAdapter.addOne(state.routines, {\r\n            ...routine,\r\n            id,\r\n            name,\r\n            apIds,\r\n          });\r\n        } else {\r\n          routinesAdapter.addOne(state.routines, {\r\n            id,\r\n            name: \"New Routine\",\r\n            display: true,\r\n            apIds: [],\r\n            levelDiff: 0,\r\n            description: \"Enter a description here.\",\r\n            startLevel: 1,\r\n            endLevel: 20,\r\n          });\r\n        }\r\n        state.selectedRoutine = id;\r\n        state.selectedActivityPath = undefined;\r\n        state.parentActivity = undefined;\r\n        state.parentRoutine = undefined;\r\n      },\r\n      prepare: ({ copy = false }) => {\r\n        const id = ++routineId;\r\n        return { payload: { id, copy } };\r\n      },\r\n    },\r\n    routineRemoved: (state, action) => {\r\n      // recursively remove all children\r\n      const routineId = action.payload;\r\n      let childrenIds = state.routines.entities[routineId]!.apIds;\r\n      removeActivityPaths(state, childrenIds);\r\n\r\n      routinesAdapter.removeOne(state.routines, routineId);\r\n      if (routineId === state.selectedRoutine) {\r\n        state.selectedRoutine = undefined;\r\n        state.selectedActivityPath = undefined;\r\n        state.parentActivity = undefined;\r\n        state.parentRoutine = undefined;\r\n      }\r\n    },\r\n    setNewActivityParent: (\r\n      state,\r\n      action: PayloadAction<{\r\n        parentId?: number;\r\n        routineId?: number;\r\n      }>\r\n    ) => {\r\n      state.parentRoutine = action.payload.routineId;\r\n      state.parentActivity = action.payload.parentId;\r\n      state.selectedActivityPath = undefined;\r\n    },\r\n    emptyActivityPathCreated: {\r\n      reducer: (\r\n        state,\r\n        action: PayloadAction<{\r\n          id: number;\r\n          routineId: number;\r\n          activityType?: ActivityType;\r\n        }>\r\n      ) => {\r\n        const { id, routineId, activityType } = action.payload;\r\n        let ap = {\r\n          ...defaultActivity,\r\n          id,\r\n          routineId,\r\n        } as ActivityPath;\r\n        if (activityType !== undefined) {\r\n          if (activityType === activityTypes.STRIKE) {\r\n            let damages = copyDamages(state, defaultStrikeParent.damages);\r\n            let effects = copyEffects(state, defaultStrikeParent.effects);\r\n            ap = {\r\n              ...defaultActivity,\r\n              ...defaultStrikeParent,\r\n              id,\r\n              routineId,\r\n              damages,\r\n              effects,\r\n            };\r\n          }\r\n          if (activityType === activityTypes.SAVE) {\r\n            let damages = copyDamages(state, defaultSaveParent.damages);\r\n            let effects = copyEffects(state, defaultSaveParent.effects);\r\n            ap = {\r\n              ...defaultActivity,\r\n              ...defaultSaveParent,\r\n              id,\r\n              routineId,\r\n              damages,\r\n              effects,\r\n            };\r\n          }\r\n        }\r\n\r\n        state.routines.entities[routineId]!.apIds.push(id);\r\n        activityPathAdapter.addOne(state.activityPaths, ap);\r\n        state.selectedActivityPath = id;\r\n        state.parentActivity = undefined;\r\n        state.parentRoutine = undefined;\r\n      },\r\n      prepare: ({\r\n        routineId,\r\n        activityType,\r\n      }: {\r\n        routineId: number;\r\n        activityType?: ActivityType;\r\n      }) => {\r\n        const id = ++activityPathId;\r\n        return {\r\n          payload: {\r\n            id,\r\n            routineId,\r\n            activityType,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    activityPathCreated: {\r\n      reducer: (\r\n        state,\r\n        action: PayloadAction<{\r\n          ids: number[];\r\n          strikeInfo: StrikeInfo;\r\n        }>\r\n      ) => {\r\n        const { ids, strikeInfo } = action.payload;\r\n\r\n        const { parentActivity: parentId, parentRoutine: routineId } = state;\r\n        if (routineId !== undefined)\r\n          state.routines.entities[routineId]!.apIds.push(ids[0]);\r\n        if (parentId !== undefined) {\r\n          state.activityPaths.entities[parentId]!.apIds.push(ids[0]);\r\n        }\r\n        createStrikeActivity(state, ids[0], parentId, routineId, strikeInfo, 0);\r\n        for (let i = 1; i < strikeInfo.numStrikes; i++) {\r\n          let parentId = ids[i - 1];\r\n          state.activityPaths.entities[parentId]!.apIds.push(ids[i]);\r\n          createStrikeActivity(\r\n            state,\r\n            ids[i],\r\n            parentId,\r\n            undefined,\r\n            strikeInfo,\r\n            i\r\n          );\r\n        }\r\n        state.selectedActivityPath = ids[0];\r\n        state.parentActivity = undefined;\r\n        state.parentRoutine = undefined;\r\n      },\r\n      prepare: ({\r\n        parentId,\r\n        routineId,\r\n        strikeInfo,\r\n      }: {\r\n        parentId?: number;\r\n        routineId?: number;\r\n        strikeInfo: StrikeInfo;\r\n      }) => {\r\n        const ids = [];\r\n        for (let i = 0; i < strikeInfo.numStrikes; i++) {\r\n          let id = ++activityPathId;\r\n          ids.push(id);\r\n        }\r\n        return {\r\n          payload: {\r\n            ids,\r\n            parentId,\r\n            routineId,\r\n            strikeInfo,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    activityPathContinued: {\r\n      reducer: (\r\n        state,\r\n        action: PayloadAction<{\r\n          id: number;\r\n          parentId: number;\r\n        }>\r\n      ) => {\r\n        const { id, parentId } = action.payload;\r\n        state.activityPaths.entities[parentId]!.apIds.push(id);\r\n        const parentAP = state.activityPaths.entities[parentId]!;\r\n        // copy parent damages and effects\r\n        let newDamages = copyDamages(state, parentAP.damages);\r\n        let newEffects = copyEffects(state, parentAP.effects);\r\n\r\n        activityPathAdapter.addOne(state.activityPaths, {\r\n          ...parentAP,\r\n          id,\r\n          parentId,\r\n          routineId: undefined,\r\n          MAP: nextMAPs[parentAP.MAP],\r\n          damages: newDamages,\r\n          effects: newEffects,\r\n          apIds: [],\r\n        });\r\n        state.selectedActivityPath = id;\r\n      },\r\n      prepare: ({ parentId }: { parentId: number }) => {\r\n        const id = ++activityPathId;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    activityPathRemoved: (state, action) => {\r\n      const { id, parentId, routineId } = action.payload;\r\n\r\n      // recursively remove all children\r\n      let childrenIds = [id];\r\n      removeActivityPaths(state, childrenIds);\r\n\r\n      if (parentId !== undefined) {\r\n        state.activityPaths.entities[parentId]!.apIds =\r\n          state.activityPaths.entities[parentId]!.apIds.filter(\r\n            (apId) => apId !== id\r\n          );\r\n      }\r\n      if (routineId !== undefined) {\r\n        state.routines.entities[routineId]!.apIds = state.routines.entities[\r\n          routineId\r\n        ]!.apIds.filter((apId) => apId !== id);\r\n      }\r\n      state.selectedActivityPath = undefined;\r\n    },\r\n\r\n    damageCreated: {\r\n      reducer: (\r\n        state,\r\n        action: PayloadAction<{\r\n          id: number;\r\n          parentId: number;\r\n        }>\r\n      ) => {\r\n        const { id, parentId } = action.payload;\r\n        state.activityPaths.entities[parentId]!.damages.push(id);\r\n        damageAdapter.addOne(state.damages, { id, ...defaultDamage });\r\n      },\r\n      prepare: ({ parentId }) => {\r\n        const id = ++damageId;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    damageRemoved: (\r\n      state,\r\n      action: PayloadAction<{\r\n        id: number;\r\n        parentId: number;\r\n      }>\r\n    ) => {\r\n      const { id, parentId } = action.payload;\r\n      state.activityPaths.entities[parentId]!.damages =\r\n        state.activityPaths.entities[parentId]!.damages.filter(\r\n          (did) => did !== id\r\n        );\r\n      damageAdapter.removeOne(state.damages, id);\r\n    },\r\n    effectCreated: {\r\n      reducer: (\r\n        state,\r\n        action: PayloadAction<{\r\n          id: number;\r\n          parentId: number;\r\n        }>\r\n      ) => {\r\n        const { id, parentId } = action.payload;\r\n        state.activityPaths.entities[parentId]!.effects.push(id);\r\n        effectAdapter.addOne(state.effects, {\r\n          id,\r\n          effectCondition: conditions.ALWAYS,\r\n          effectType: effectTypes.FLATFOOT,\r\n          effectValue: 0,\r\n          startLevel: 1,\r\n          endLevel: 20,\r\n          damageWhen: [whenConditions.Always],\r\n        });\r\n      },\r\n      prepare: ({ parentId }) => {\r\n        const id = ++effectId;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    effectRemoved: (state, action) => {\r\n      const { id, parentId } = action.payload;\r\n      state.activityPaths.entities[parentId]!.effects =\r\n        state.activityPaths.entities[parentId]!.effects.filter(\r\n          (eid) => eid !== id\r\n        );\r\n      effectAdapter.removeOne(state.effects, id);\r\n    },\r\n    importRoutine: (state, action) => {\r\n      try {\r\n        state.importRoutine = importStates.Importing;\r\n        const routineObject = JSON.parse(action.payload);\r\n        if (isRoutineObject(routineObject)) {\r\n          state.selectedRoutine = insertRoutine(state, routineObject);\r\n          state.selectedActivityPath = undefined;\r\n          state.parentActivity = undefined;\r\n          state.parentRoutine = undefined;\r\n          state.importRoutine = importStates.Successful;\r\n        } else {\r\n          state.importRoutine = importStates.Failure;\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n        console.log(\"Parsing failed\");\r\n        state.importRoutine = importStates.Failure;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setRoutine,\r\n  setActivityPath,\r\n  setNewActivityParent,\r\n\r\n  routineAdded,\r\n  routineUpdated,\r\n  routineCreated,\r\n  routineRemoved,\r\n\r\n  activityPathAdded,\r\n  activityPathUpdated,\r\n  emptyActivityPathCreated,\r\n  activityPathCreated,\r\n  activityPathContinued,\r\n  activityPathRemoved,\r\n\r\n  damageAdded,\r\n  damageUpdated,\r\n  damageCreated,\r\n  damageRemoved,\r\n\r\n  effectAdded,\r\n  effectUpdated,\r\n  effectCreated,\r\n  effectRemoved,\r\n\r\n  importRoutine,\r\n} = routinesSlice.actions;\r\n\r\nexport default routinesSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selectRoutineById,\r\n  selectIds: selectRoutineIds,\r\n  selectEntities: selectRoutineEntities,\r\n  selectAll: selectAllRoutines,\r\n  selectTotal: selectTotalRoutines,\r\n} = routinesAdapter.getSelectors((state: RootState) => state.routines.routines);\r\n\r\nexport const {\r\n  selectById: selectactivityPathById,\r\n  selectIds: selectactivityPathIds,\r\n  selectEntities: selectactivityPathEntities,\r\n  selectAll: selectAllactivityPaths,\r\n  selectTotal: selectTotalactivityPaths,\r\n} = activityPathAdapter.getSelectors(\r\n  (state: RootState) => state.routines.activityPaths\r\n);\r\n\r\nexport const {\r\n  selectById: selectdamageById,\r\n  selectIds: selectdamageIds,\r\n  selectEntities: selectdamageEntities,\r\n  selectAll: selectAlldamages,\r\n  selectTotal: selectTotaldamages,\r\n} = damageAdapter.getSelectors((state: RootState) => state.routines.damages);\r\n\r\nexport const {\r\n  selectById: selecteffectById,\r\n  selectIds: selecteffectIds,\r\n  selectEntities: selecteffectEntities,\r\n  selectAll: selectAlleffects,\r\n  selectTotal: selectTotaleffects,\r\n} = effectAdapter.getSelectors((state: RootState) => state.routines.effects);\r\n\r\nexport const selectSelectedRoutine = (state: RootState) =>\r\n  state.routines.selectedRoutine;\r\nexport const selectSelectedActivityPath = (state: RootState) =>\r\n  state.routines.selectedActivityPath;\r\nexport const selectParentActivityId = (state: RootState) =>\r\n  state.routines.parentActivity;\r\nexport const selectCreateNewActivity = (state: RootState) =>\r\n  state.routines.selectedActivityPath === undefined &&\r\n  (state.routines.parentRoutine !== undefined ||\r\n    state.routines.parentActivity !== undefined);\r\nexport const selectSelectedRoutineObject = (state: RootState) => {\r\n  if (state.routines.selectedRoutine) {\r\n    const routine =\r\n      state.routines.routines.entities[state.routines.selectedRoutine]!;\r\n    const routineObject = {\r\n      ...routine,\r\n      apIds: getActivityPaths(state.routines, routine.apIds),\r\n    };\r\n    return routineObject;\r\n  }\r\n  return undefined;\r\n};\r\n\r\nexport const selectImportState = (state: RootState) => {\r\n  return state.routines.importRoutine;\r\n};\r\n\r\nconst removeActivityPaths = (state: WritableDraft<State>, ids: number[]) => {\r\n  let index = 0;\r\n  while (index < ids.length) {\r\n    let ap = state.activityPaths.entities[ids[index]]!;\r\n    ids.push(...ap!.apIds);\r\n    damageAdapter.removeMany(state.damages, ap.damages);\r\n    effectAdapter.removeMany(state.effects, ap.effects);\r\n    activityPathAdapter.removeOne(state.activityPaths, ap.id);\r\n    index += 1;\r\n  }\r\n};\r\n\r\nconst createStrikeActivity = (\r\n  state: WritableDraft<State>,\r\n  id: number,\r\n  parentId: number | undefined,\r\n  routineId: number | undefined,\r\n  strikeInfo: StrikeInfo,\r\n  strikeNumber: number\r\n) => {\r\n  // copy parent damages and effects\r\n  let damages = createStrikeDamages(state, strikeInfo, strikeNumber);\r\n  let effects = createStrikeEffects(state, strikeInfo, strikeNumber);\r\n  let MAP = classWeaponMAP(strikeInfo);\r\n\r\n  activityPathAdapter.addOne(state.activityPaths, {\r\n    ...defaultActivity,\r\n    id,\r\n    parentId,\r\n    routineId,\r\n    type: activityTypes.STRIKE,\r\n    profTrend: classWeaponProf(strikeInfo.cClass),\r\n    statTrend: strikeInfo.attackScore,\r\n    itemTrend: itemTrends.WEAPON,\r\n    bonusAdjustments: classAdjustments(strikeInfo, strikeNumber),\r\n    MAP:\r\n      strikeNumber === 0\r\n        ? MAP\r\n        : strikeNumber === 1\r\n        ? nextMAPs[MAP]\r\n        : nextMAPs[nextMAPs[MAP]],\r\n\r\n    damages: damages,\r\n    effects: effects,\r\n  });\r\n  return;\r\n};\r\nconst createStrikeDamages = (\r\n  state: WritableDraft<State>,\r\n  strikeInfo: StrikeInfo,\r\n  strikeNumber: number\r\n) => {\r\n  const newDamages: number[] = [];\r\n\r\n  let id = ++damageId;\r\n  const weaponDamage: Damage = {\r\n    ...defaultDamage,\r\n    id,\r\n    dieTrend: dieTrends.WEAPON,\r\n    dieAdjustments: activityWeaponDiceAdjustments(strikeInfo),\r\n    diceSize: strikeInfo.dieSize,\r\n    fatal: hasFatal(strikeInfo),\r\n    fatalDie: strikeInfo.fatalSize,\r\n    damageTrend: classWeaponDamageTrends(strikeInfo, strikeNumber),\r\n    damageAdjustments: classDamageAdjustments(strikeInfo),\r\n  };\r\n  damageAdapter.addOne(state.damages, weaponDamage);\r\n  newDamages.push(id);\r\n\r\n  id = ++damageId;\r\n  const runeDamage: Damage = {\r\n    ...defaultDamage,\r\n    id,\r\n    dieTrend: strikeInfo.runes,\r\n    diceSize: diceSizes[6],\r\n    damageType: damageTypes.FIRE,\r\n  };\r\n  damageAdapter.addOne(state.damages, runeDamage);\r\n  newDamages.push(id);\r\n\r\n  if (hasDeadly(strikeInfo)) {\r\n    let damageAdjustments = empty;\r\n    if (!hasFatal(strikeInfo) && hasPickCritSpec(strikeInfo))\r\n      damageAdjustments = critSpecDamage(strikeInfo);\r\n    id = ++damageId;\r\n    const critDamage: Damage = {\r\n      ...defaultDamage,\r\n      id,\r\n      damageCondition: dCond.CRIT,\r\n      dieTrend: dieTrends.DEADLY,\r\n      diceSize: strikeInfo.deadlySize,\r\n      damageAdjustments,\r\n    };\r\n    damageAdapter.addOne(state.damages, critDamage);\r\n    newDamages.push(id);\r\n  }\r\n  if (hasFatal(strikeInfo)) {\r\n    let damageAdjustments = empty;\r\n    if (hasPickCritSpec(strikeInfo))\r\n      damageAdjustments = critSpecDamage(strikeInfo);\r\n    id = ++damageId;\r\n    const critDamage: Damage = {\r\n      ...defaultDamage,\r\n      id,\r\n      damageCondition: dCond.CRIT,\r\n      dieAdjustments: one,\r\n      diceSize: strikeInfo.fatalSize,\r\n      damageAdjustments,\r\n    };\r\n    damageAdapter.addOne(state.damages, critDamage);\r\n    newDamages.push(id);\r\n  }\r\n  if (\r\n    !hasDeadly(strikeInfo) &&\r\n    !hasFatal(strikeInfo) &&\r\n    hasPickCritSpec(strikeInfo)\r\n  ) {\r\n    let damageAdjustments = critSpecDamage(strikeInfo);\r\n    id = ++damageId;\r\n    const critDamage: Damage = {\r\n      ...defaultDamage,\r\n      id,\r\n      damageCondition: dCond.CRIT,\r\n      diceSize: strikeInfo.fatalSize,\r\n      damageAdjustments,\r\n    };\r\n    damageAdapter.addOne(state.damages, critDamage);\r\n    newDamages.push(id);\r\n  }\r\n  if (hasKnifeCritSpec(strikeInfo)) {\r\n    let damageAdjustments = critSpecDamage(strikeInfo);\r\n    id = ++damageId;\r\n    const critDamage: Damage = {\r\n      ...defaultDamage,\r\n      id,\r\n      damageCondition: dCond.CRIT,\r\n      dieAdjustments: critSpecDice(strikeInfo),\r\n      diceSize: diceSizes[6],\r\n      damageAdjustments,\r\n      persistent: true,\r\n    };\r\n    damageAdapter.addOne(state.damages, critDamage);\r\n    newDamages.push(id);\r\n  }\r\n\r\n  return newDamages;\r\n};\r\nconst createStrikeEffects = (\r\n  state: WritableDraft<State>,\r\n  strikeInfo: StrikeInfo,\r\n  strikeNumber: number\r\n) => {\r\n  const newEffects: number[] = [];\r\n  let id;\r\n\r\n  if (hasCritSpecEffect(strikeInfo)) {\r\n    let effectType: EffectType = effectStateTypes.FLATFOOT;\r\n    if (hasSwordCritSpec(strikeInfo)) effectType = effectStateTypes.FLATFOOT;\r\n    if (hasHammerCritSpec(strikeInfo)) effectType = effectStateTypes.PRONE;\r\n    if (hasSpearCritSpec(strikeInfo)) effectType = effectValueTypes.CLUMSY;\r\n\r\n    id = ++effectId;\r\n    const critSpecEffect: Effect = {\r\n      id,\r\n      effectCondition: conditions.CRIT,\r\n      effectType,\r\n      effectValue: 1,\r\n      startLevel: strikeInfo.critSpecLevel,\r\n      endLevel: 20,\r\n      damageWhen: [whenConditions.Always],\r\n    };\r\n    newEffects.push(id);\r\n    effectAdapter.addOne(state.effects, critSpecEffect);\r\n  }\r\n  return newEffects;\r\n};\r\n\r\nconst copyActivityPaths = (\r\n  state: WritableDraft<State>,\r\n  apIds: number[],\r\n  parentId?: number,\r\n  routineId?: number\r\n) => {\r\n  let newApIds = [];\r\n  for (let apId of apIds) {\r\n    const id = ++activityPathId;\r\n    const ap = state.activityPaths.entities[apId]!;\r\n    const apIds = copyActivityPaths(state, ap.apIds, id);\r\n    const damages = copyDamages(state, ap.damages);\r\n    const effects = copyEffects(state, ap.effects);\r\n\r\n    activityPathAdapter.addOne(state.activityPaths, {\r\n      ...ap,\r\n      id,\r\n      parentId,\r\n      routineId,\r\n      damages,\r\n      effects,\r\n      apIds,\r\n    });\r\n    newApIds.push(id);\r\n  }\r\n  return newApIds;\r\n};\r\nconst copyDamages = (state: WritableDraft<State>, damages: number[]) => {\r\n  const newDamages = [];\r\n  for (let did of damages) {\r\n    let damage = state.damages.entities[did]!;\r\n    // create a new damage entity and add it's id to newDamages\r\n    const id = ++damageId;\r\n    damageAdapter.addOne(state.damages, { ...damage, id });\r\n    newDamages.push(id);\r\n  }\r\n  return newDamages;\r\n};\r\nconst copyEffects = (state: WritableDraft<State>, effects: number[]) => {\r\n  const newEffects = [];\r\n  for (let eid of effects) {\r\n    let effect = state.effects.entities[eid]!;\r\n    // create a new effect entity and add it's id to newEffects\r\n    const id = ++effectId;\r\n    effectAdapter.addOne(state.effects, { ...effect, id });\r\n    newEffects.push(id);\r\n  }\r\n  return newEffects;\r\n};\r\n\r\nconst getActivityPaths = (state: WritableDraft<State>, apIds: number[]) => {\r\n  let newAps: ActivityPathObject[] = [];\r\n  for (let apId of apIds) {\r\n    const ap = state.activityPaths.entities[apId]!;\r\n    const aps = getActivityPaths(state, ap.apIds);\r\n    const damages = getDamages(state, ap.damages);\r\n    const effects = getEffects(state, ap.effects);\r\n    newAps.push({ ...ap, apIds: aps, damages, effects });\r\n  }\r\n  return newAps;\r\n};\r\nconst getDamages = (state: WritableDraft<State>, damages: number[]) => {\r\n  let newDamages = [];\r\n  for (let did of damages) {\r\n    const damage = state.damages.entities[did]!;\r\n    newDamages.push({ ...damage });\r\n  }\r\n  return newDamages;\r\n};\r\nconst getEffects = (state: WritableDraft<State>, effects: number[]) => {\r\n  let newEffects = [];\r\n  for (let eid of effects) {\r\n    const damage = state.effects.entities[eid]!;\r\n    newEffects.push({ ...damage });\r\n  }\r\n  return newEffects;\r\n};\r\n\r\nconst insertRoutine = (state: WritableDraft<State>, routine: RoutineObject) => {\r\n  const id = ++routineId;\r\n  const apIds = insertActivityPaths(state, routine.apIds, undefined, id);\r\n\r\n  routinesAdapter.addOne(state.routines, { ...routine, id, apIds });\r\n  return id;\r\n};\r\nconst insertActivityPaths = (\r\n  state: WritableDraft<State>,\r\n  aps: ActivityPathObject[],\r\n  parentId?: number,\r\n  routineId?: number\r\n) => {\r\n  let newApIds = [];\r\n  for (let ap of aps) {\r\n    const id = ++activityPathId;\r\n    const apIds = insertActivityPaths(state, ap.apIds, id);\r\n    const damages = insertDamages(state, ap.damages);\r\n    const effects = insertEffects(state, ap.effects);\r\n\r\n    activityPathAdapter.addOne(state.activityPaths, {\r\n      ...ap,\r\n      id,\r\n      parentId,\r\n      routineId,\r\n      damages,\r\n      effects,\r\n      apIds,\r\n    });\r\n    newApIds.push(id);\r\n  }\r\n  return newApIds;\r\n};\r\nconst insertDamages = (state: WritableDraft<State>, damages: Damage[]) => {\r\n  const newDamages = [];\r\n  for (let damage of damages) {\r\n    // create a new damage entity and add it's id to newDamages\r\n    const id = ++damageId;\r\n    damageAdapter.addOne(state.damages, { ...defaultDamage, ...damage, id });\r\n    newDamages.push(id);\r\n  }\r\n  return newDamages;\r\n};\r\nconst insertEffects = (state: WritableDraft<State>, effects: Effect[]) => {\r\n  const newEffects = [];\r\n  for (let effect of effects) {\r\n    // create a new effect entity and add it's id to newEffects\r\n    const id = ++effectId;\r\n    effectAdapter.addOne(state.effects, { ...effect, id });\r\n    newEffects.push(id);\r\n  }\r\n  return newEffects;\r\n};\r\n","export const convolve = (vec1: number[], vec2: number[]) => {\r\n  if (vec1.length === 0 || vec2.length === 0) {\r\n    throw new Error(\"Vectors can not be empty!\");\r\n  }\r\n  const volume = vec1;\r\n  const kernel = vec2;\r\n  let displacement = 0;\r\n  const convVec: number[] = [];\r\n\r\n  for (let i = 0; i < volume.length; i++) {\r\n    for (let j = 0; j < kernel.length; j++) {\r\n      if (displacement + j !== convVec.length) {\r\n        convVec[displacement + j] =\r\n          convVec[displacement + j] + volume[i] * kernel[j];\r\n      } else {\r\n        convVec.push(volume[i] * kernel[j]);\r\n      }\r\n    }\r\n    displacement++;\r\n  }\r\n\r\n  return convVec;\r\n};\r\n\r\nexport const multiplyDist = (\r\n  dam: number,\r\n  dist: number[],\r\n  multiplier: number\r\n) => {\r\n  if (multiplier === 0) return { staticDamage: 0, damageDist: [1] };\r\n  if (multiplier === 1) return { staticDamage: dam, damageDist: [...dist] };\r\n\r\n  const newDist = [0];\r\n  let index = 0;\r\n  const newDam = Math.floor(dam * multiplier);\r\n\r\n  let i = 0;\r\n  let oldValue = newDam;\r\n  for (let chance of dist) {\r\n    let newValue = Math.floor((dam + i) * multiplier);\r\n    if (newValue === oldValue) {\r\n      newDist[index] += chance;\r\n    } else {\r\n      if (newValue > oldValue + 1) {\r\n        for (let diff = 0; diff < newValue - (oldValue + 1); diff++) {\r\n          index++;\r\n          newDist[index] = 0;\r\n        }\r\n      }\r\n      index++;\r\n      newDist[index] = chance;\r\n    }\r\n    oldValue = newValue;\r\n    i++;\r\n  }\r\n\r\n  return { staticDamage: newDam, damageDist: newDist };\r\n};\r\n\r\ntype Dist = {\r\n  distribution: { staticDamage: number; damageDist: number[] };\r\n  chance: number;\r\n};\r\n/**\r\n * Combine multiple distributions with their chances into one distribution starting from 0\r\n * @param  {...[{staticDamage, distribution}, chance]} dists\r\n * @returns\r\n */\r\nexport const consolidateDists = (...dists: Dist[]) => {\r\n  let maxDamage = 0;\r\n  for (let dist of dists) {\r\n    maxDamage = Math.max(\r\n      maxDamage,\r\n      dist.distribution.staticDamage + dist.distribution.damageDist.length\r\n    );\r\n  }\r\n  let damageDist = [];\r\n  for (let i = 0; i < maxDamage; i++) {\r\n    damageDist.push(0);\r\n    for (let dist of dists) {\r\n      if (dist.distribution.staticDamage <= i) {\r\n        let index = i - dist.distribution.staticDamage;\r\n        if (index < dist.distribution.damageDist.length)\r\n          damageDist[i] += dist.distribution.damageDist[index] * dist.chance;\r\n      }\r\n    }\r\n  }\r\n  return damageDist;\r\n};\r\n\r\n/**\r\n * apply a minimum to a distribution, like for damage penalties or resistances\r\n * @param {number} staticDamage\r\n * @param {[number]} damageDist\r\n * @param {number} min\r\n * @returns\r\n */\r\nexport const applyMin = (\r\n  staticDamage: number,\r\n  damageDist: number[],\r\n  min: number\r\n) => {\r\n  while (staticDamage < min) {\r\n    if (damageDist.length >= 2) {\r\n      damageDist[1] += damageDist[0];\r\n      damageDist.shift();\r\n    }\r\n    staticDamage++;\r\n  }\r\n  return { staticDamage, damageDist };\r\n};\r\n","import {\r\n  damageTrendValues,\r\n  dieTrendValues,\r\n  defaultACs,\r\n  defaultSaves,\r\n  profTrendValues,\r\n  statTrendValues,\r\n  itemTrendValues,\r\n  MAPvalues,\r\n  standardDC,\r\n} from \"../Model/defaults\";\r\nimport {\r\n  activityTypes,\r\n  DamageType,\r\n  dCond,\r\n  defenses,\r\n  Material,\r\n  materials,\r\n  rollTypes,\r\n  TargetState,\r\n  whenConditions,\r\n} from \"../Model/types\";\r\nimport { ActivityPath, Damage } from \"../Routines/RoutineSlice/RoutineTypes\";\r\nimport { Target } from \"../Target/targetSlice\";\r\nimport { Weakness } from \"../Target/weaknessSlice\";\r\nimport { applyMin, convolve, multiplyDist } from \"./Distribution\";\r\n\r\nfunction getCritSuccessPercent(bonus: number, DC: number, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -20) {\r\n    chance = 0;\r\n  } else if (dif === -20) {\r\n    chance = 5;\r\n  } else if (dif < -9) {\r\n    chance = keen ? 10 : 5;\r\n  } else if (dif < 8) {\r\n    chance = (11 + dif) * 5;\r\n  } else {\r\n    chance = 95;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nfunction getSuccessPercent(bonus: number, DC: number, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -29) {\r\n    chance = 0;\r\n  } else if (dif < -20) {\r\n    chance = 5;\r\n  } else if (dif === -20) {\r\n    chance = 0;\r\n  } else if (dif < -9) {\r\n    chance = (keen ? 19 : 20 + dif) * 5;\r\n  } else if (dif < -1) {\r\n    chance = 50;\r\n  } else if (dif < 9) {\r\n    chance = (8 - dif) * 5;\r\n  } else {\r\n    chance = 5;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nfunction getFailurePercent(bonus: number, DC: number, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -29) {\r\n    chance = 5;\r\n  } else if (dif < -20) {\r\n    chance = (29 + dif) * 5;\r\n  } else if (dif < -10) {\r\n    chance = 45;\r\n  } else if (dif < -1) {\r\n    chance = (-2 - dif) * 5;\r\n  } else if (dif < 9) {\r\n    chance = 5;\r\n  } else {\r\n    chance = 0;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nfunction getCritFailurePercent(bonus: number, DC: number, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -29) {\r\n    chance = 95;\r\n  } else if (dif < -10) {\r\n    chance = (-10 - dif) * 5;\r\n  } else if (dif < -1) {\r\n    chance = 5;\r\n  } else {\r\n    chance = 0;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\n// staticDamage?: number;\r\n// damageDist?: number[];\r\n\r\ntype PartialContext = {\r\n  [key in DamageType]?: {\r\n    material: Material;\r\n    staticDamage: number;\r\n    damageDist: number[];\r\n  };\r\n};\r\nexport interface DamageContext {\r\n  staticDamage: number;\r\n  damageDist: number[];\r\n}\r\ntype BaseContext = {\r\n  normal: PartialContext;\r\n  persistent: PartialContext;\r\n};\r\ntype FinalContext = {\r\n  normal: DamageContext;\r\n  persistent: DamageContext;\r\n};\r\nconst damageQualities = { normal: \"normal\", persistent: \"persistent\" } as const;\r\ntype DamageQuality = keyof typeof damageQualities;\r\n\r\n// combine the probability distributions of the given damages into context\r\nconst addDamage = (\r\n  baseContext: BaseContext,\r\n  type: DamageType,\r\n  material: Material,\r\n  persistent: boolean,\r\n  staticDamage: number,\r\n  damageDist: number[],\r\n  multiplier: number\r\n) => {\r\n  let context: PartialContext;\r\n\r\n  if (persistent) {\r\n    context = baseContext.persistent;\r\n  } else {\r\n    context = baseContext.normal;\r\n  }\r\n  ({ staticDamage, damageDist } = multiplyDist(\r\n    staticDamage,\r\n    damageDist,\r\n    multiplier\r\n  ));\r\n  if (!(type in context)) {\r\n    context[type] = { material, staticDamage, damageDist };\r\n  } else {\r\n    context[type]!.staticDamage += staticDamage;\r\n    context[type]!.damageDist = convolve(context[type]!.damageDist, damageDist);\r\n    if (material !== materials.NONE) context[type]!.material = material;\r\n  }\r\n};\r\n\r\n/**\r\n * Calculate the chance of each result and the appropriate damage\r\n * distributions for a given activity at level vs target with targetState\r\n * adds defenseBonus or resistanceBonus to target if given\r\n * @param {Number} level\r\n * @param {*} activity\r\n * @param {*} damages\r\n * @param {*} target\r\n * @param {*} targetState\r\n * @param {*} weaknesses\r\n * @param {*} defenseBonus\r\n * @param {*} resistanceBonus\r\n * @returns [damageTrees, chances];\r\n */\r\nfunction calculateExpectedDamage(\r\n  level: number,\r\n  activity: ActivityPath,\r\n  damages: Damage[],\r\n  target: Target,\r\n  targetState: TargetState,\r\n  weaknesses: Weakness[],\r\n  defenseBonus: number,\r\n  resistanceBonus: number\r\n) {\r\n  /**\r\n   * Get the check bonus and DC\r\n   * Calculate the chance of each outcome\r\n   * Go through each damage and evaluate it, put damage types together\r\n   * Go through each damage type and apply weakness/resistance\r\n   * Return damage trees and chances\r\n   */\r\n  let bonus = 0;\r\n  let DC = 10;\r\n  let targetValue;\r\n  switch (activity.targetType) {\r\n    case defenses.AC:\r\n      targetValue = defaultACs[target.ACTrend];\r\n      break;\r\n    case defenses.FORT:\r\n      targetValue = defaultSaves[target.FortTrend];\r\n      break;\r\n    case defenses.REF:\r\n      targetValue = defaultSaves[target.RefTrend];\r\n      break;\r\n    case defenses.WILL:\r\n      targetValue = defaultSaves[target.WillTrend];\r\n      break;\r\n    case defenses.PER:\r\n      targetValue = defaultSaves[target.PerTrend];\r\n      break;\r\n    case defenses.DC:\r\n      targetValue = standardDC;\r\n      break;\r\n    default:\r\n      targetValue = defaultACs[target.ACTrend];\r\n      break;\r\n  }\r\n\r\n  targetValue = targetValue[level + target.levelDiff];\r\n  let targetPenalty = targetState.Frightened;\r\n  if (\r\n    activity.targetType === defenses.AC ||\r\n    activity.targetType === defenses.REF\r\n  )\r\n    targetPenalty = Math.max(targetPenalty, targetState.Clumsy);\r\n  switch (activity.type) {\r\n    case activityTypes.STRIKE:\r\n    case activityTypes.SPELLATTACK:\r\n    case activityTypes.SKILL:\r\n      bonus = profTrendValues[activity.profTrend][level];\r\n      bonus += statTrendValues[activity.statTrend][level];\r\n      bonus += itemTrendValues[activity.itemTrend][level];\r\n      bonus += activity.bonusAdjustments[level];\r\n      bonus += MAPvalues[activity.MAP];\r\n      DC = targetValue + defenseBonus - targetPenalty;\r\n      if (activity.targetType === defenses.AC) {\r\n        if (targetState.Flatfooted) DC -= 2;\r\n      } else {\r\n        if (activity.targetType !== defenses.DC) DC += 10;\r\n      }\r\n      break;\r\n\r\n    case activityTypes.SAVE:\r\n      bonus = targetValue + defenseBonus - targetPenalty;\r\n      DC = 10 + profTrendValues[activity.profTrend][level];\r\n      DC += statTrendValues[activity.statTrend][level];\r\n      DC += itemTrendValues[activity.itemTrend][level];\r\n      DC += activity.bonusAdjustments[level];\r\n      if (\r\n        activity.targetType === defenses.AC ||\r\n        activity.targetType === defenses.DC\r\n      ) {\r\n        bonus -= 10;\r\n      }\r\n      break;\r\n\r\n    default:\r\n      console.log(`Activity type ${activity.type} not implemented`);\r\n  }\r\n\r\n  let critPercent = getCritSuccessPercent(bonus, DC);\r\n  let succPercent = getSuccessPercent(bonus, DC);\r\n  let failPercent = getFailurePercent(bonus, DC);\r\n  let crfaPercent = getCritFailurePercent(bonus, DC);\r\n  if (activity.rollType === rollTypes.ADVANTAGE) {\r\n    let notcrit = 100 - critPercent;\r\n    critPercent = 100 - (notcrit * notcrit) / 100;\r\n    let nothit = notcrit - succPercent;\r\n    succPercent = 100 - (nothit * nothit) / 100 - critPercent;\r\n    let notfail = nothit - failPercent;\r\n    failPercent = 100 - (notfail * notfail) / 100 - succPercent - critPercent;\r\n    crfaPercent = (crfaPercent * crfaPercent) / 100;\r\n  } else if (activity.rollType === rollTypes.DISADVANTAGE) {\r\n    let notcrfa = 100 - crfaPercent;\r\n    crfaPercent = 100 - (notcrfa * notcrfa) / 100;\r\n    let notfail = notcrfa - failPercent;\r\n    failPercent = 100 - (notfail * notfail) / 100 - crfaPercent;\r\n    let notsucc = notfail - succPercent;\r\n    succPercent = 100 - (notsucc * notsucc) / 100 - failPercent - crfaPercent;\r\n    critPercent = (critPercent * critPercent) / 100;\r\n  }\r\n  const chances = [\r\n    critPercent / 100,\r\n    succPercent / 100,\r\n    failPercent / 100,\r\n    crfaPercent / 100,\r\n  ];\r\n  const critDamagesByType: BaseContext = {\r\n    normal: {},\r\n    persistent: {},\r\n  };\r\n  const succDamagesByType: BaseContext = {\r\n    normal: {},\r\n    persistent: {},\r\n  };\r\n  const failDamagesByType: BaseContext = {\r\n    normal: {},\r\n    persistent: {},\r\n  };\r\n  const crfaDamagesByType: BaseContext = {\r\n    normal: {},\r\n    persistent: {},\r\n  };\r\n  const critDamages: FinalContext = {\r\n    normal: { staticDamage: 0, damageDist: [1] },\r\n    persistent: { staticDamage: 0, damageDist: [1] },\r\n  };\r\n  const succDamages: FinalContext = {\r\n    normal: { staticDamage: 0, damageDist: [1] },\r\n    persistent: { staticDamage: 0, damageDist: [1] },\r\n  };\r\n  const failDamages: FinalContext = {\r\n    normal: { staticDamage: 0, damageDist: [1] },\r\n    persistent: { staticDamage: 0, damageDist: [1] },\r\n  };\r\n  const crfaDamages: FinalContext = {\r\n    normal: { staticDamage: 0, damageDist: [1] },\r\n    persistent: { staticDamage: 0, damageDist: [1] },\r\n  };\r\n  // can't have dist here, need just damage types...\r\n  // need to make new objects for dists... TODO\r\n  const damageTreesByType: BaseContext[] = [\r\n    critDamagesByType,\r\n    succDamagesByType,\r\n    failDamagesByType,\r\n    crfaDamagesByType,\r\n  ];\r\n  const damageTrees: FinalContext[] = [\r\n    critDamages,\r\n    succDamages,\r\n    failDamages,\r\n    crfaDamages,\r\n  ];\r\n\r\n  // Start going through each damage and evaluate it, put damage types together\r\n  damages.forEach((damage) => {\r\n    let {\r\n      damageCondition,\r\n      diceSize,\r\n      fatal,\r\n      fatalDie,\r\n\r\n      damageTrend,\r\n      damageType,\r\n      material,\r\n      persistent,\r\n      multiplier,\r\n      damageWhen,\r\n    } = damage;\r\n    let shouldAddThisDamage = false;\r\n    for (let state of damageWhen) {\r\n      if (state === whenConditions.Always) {\r\n        shouldAddThisDamage = true;\r\n        break;\r\n      }\r\n      let val = targetState[state];\r\n      if (val && val > 0) {\r\n        shouldAddThisDamage = true;\r\n        break;\r\n      }\r\n    }\r\n    // if (typeof val === \"boolean\") {\r\n    //   if (val) {\r\n    //     shouldAddThisDamage = true;\r\n    //     break;\r\n    //   }\r\n    // } else {\r\n    //   if (val > 0) {\r\n    //     shouldAddThisDamage = true;\r\n    //     break;\r\n    //   }\r\n    // }\r\n\r\n    if (!shouldAddThisDamage) return;\r\n\r\n    let diceNum = dieTrendValues[damage.dieTrend][level];\r\n    diceNum += damage.dieAdjustments[level];\r\n    if (diceNum < 0) diceNum = 0;\r\n    let staticDamage = 0;\r\n    for (let i = 0; i < damageTrend.length; i++) {\r\n      staticDamage += damageTrendValues[damageTrend[i]][level];\r\n    }\r\n    staticDamage += damage.damageAdjustments[level];\r\n    let damageDist = [1];\r\n    let fatalDist = [1];\r\n    let diceArray = [];\r\n    for (let i = 0; i < diceSize; i++) {\r\n      diceArray.push(1 / diceSize);\r\n    }\r\n    for (let i = 0; i < diceNum; i++) {\r\n      damageDist = convolve(damageDist, diceArray);\r\n    }\r\n    if (fatal) {\r\n      let diceArray = [];\r\n      for (let i = 0; i < fatalDie; i++) {\r\n        diceArray.push(1 / fatalDie);\r\n      }\r\n      for (let i = 0; i < diceNum; i++) {\r\n        fatalDist = convolve(fatalDist, diceArray);\r\n      }\r\n    }\r\n    staticDamage += diceNum;\r\n\r\n    // Add damage to damage trees appropriately\r\n    switch (damageCondition) {\r\n      case dCond.STRIKE:\r\n        addDamage(\r\n          succDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          critDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          fatal ? fatalDist : damageDist,\r\n          multiplier * 2\r\n        );\r\n        break;\r\n\r\n      case dCond.BASIC:\r\n        addDamage(\r\n          succDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 0.5\r\n        );\r\n        addDamage(\r\n          failDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          crfaDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 2\r\n        );\r\n        break;\r\n\r\n      case dCond.CRIF:\r\n        addDamage(\r\n          crfaDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.FAIL:\r\n        addDamage(\r\n          failDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.SUCC:\r\n        addDamage(\r\n          succDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.CRIT:\r\n        addDamage(\r\n          critDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.AT_LEAST_SUCC:\r\n        addDamage(\r\n          succDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          critDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.AT_LEAST_FAIL:\r\n        addDamage(\r\n          failDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          succDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          critDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.FAIL_WORSE:\r\n        addDamage(\r\n          crfaDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          failDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.SUCC_WORSE:\r\n        addDamage(\r\n          crfaDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          failDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          succDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n\r\n        break;\r\n\r\n      case dCond.ALWAYS:\r\n        addDamage(\r\n          crfaDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          failDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          succDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          critDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      default:\r\n        console.log(`Damage condition ${damageCondition} not implemented yet.`);\r\n    }\r\n  });\r\n  // end going through each damage and evaluate it, put damage types together\r\n\r\n  // Start going through each damage type and apply weakness/resistance\r\n  for (let damageTreeIndex = 0; damageTreeIndex < 4; damageTreeIndex++) {\r\n    let damageTree = damageTreesByType[damageTreeIndex];\r\n    let finalTree = damageTrees[damageTreeIndex];\r\n    let damageQuality: DamageQuality;\r\n    for (damageQuality in damageQualities) {\r\n      let totalStaticDamage = 0;\r\n      let totalDamageDist = [1];\r\n      let type: DamageType;\r\n      for (type in damageTree[damageQuality]) {\r\n        let { material, staticDamage, damageDist } =\r\n          damageTree[damageQuality][type]!;\r\n\r\n        // ignore if there's 0 damage\r\n        if (damageDist.length === 1 && staticDamage <= 0) continue;\r\n\r\n        // make min damage 1 before resistances\r\n        ({ staticDamage, damageDist } = applyMin(staticDamage, damageDist, 1));\r\n\r\n        // find max weakness and resistance, weaknesses are negative numbers\r\n        let maxW = 0;\r\n        let maxR = 0;\r\n        for (let weakness of weaknesses) {\r\n          if (weakness.type === type || weakness.type === material) {\r\n            if (weakness.value + resistanceBonus < 0) {\r\n              maxW = Math.min(maxW, weakness.value + resistanceBonus);\r\n            } else if (weakness.value + resistanceBonus > 0) {\r\n              maxR = Math.max(maxR, weakness.value + resistanceBonus);\r\n            }\r\n          }\r\n        }\r\n        staticDamage = staticDamage - (maxR + maxW);\r\n\r\n        // make min damage 0 after resistances\r\n        ({ staticDamage, damageDist } = applyMin(staticDamage, damageDist, 0));\r\n\r\n        totalStaticDamage += staticDamage;\r\n        totalDamageDist = convolve(totalDamageDist, damageDist);\r\n      }\r\n      finalTree[damageQuality].staticDamage = totalStaticDamage;\r\n      finalTree[damageQuality].damageDist = totalDamageDist;\r\n    }\r\n    // Add persistent damage to normal damage with a multiplier\r\n    let { staticDamage, damageDist } = multiplyDist(\r\n      finalTree[\"persistent\"].staticDamage,\r\n      finalTree[\"persistent\"].damageDist,\r\n      target.persistentMultiplier\r\n    );\r\n    finalTree[\"normal\"].staticDamage += staticDamage;\r\n    finalTree[\"normal\"].damageDist = convolve(\r\n      finalTree[\"normal\"].damageDist,\r\n      damageDist\r\n    );\r\n  }\r\n  // End going through each damage type and apply weakness/resistance\r\n\r\n  return { damageTrees, chances };\r\n}\r\n\r\nexport { calculateExpectedDamage };\r\n","import { convolve, consolidateDists } from \"./Distribution\";\r\nimport { calculateExpectedDamage } from \"./Calculation\";\r\nimport {\r\n  Condition,\r\n  conditions,\r\n  effectStateTypes,\r\n  effectTypes,\r\n  effectValueTypes,\r\n  TargetState,\r\n  whenConditions,\r\n} from \"../Model/types\";\r\nimport {\r\n  ActivityPath,\r\n  Damage,\r\n  Effect,\r\n  Routine,\r\n} from \"../Routines/RoutineSlice/RoutineTypes\";\r\nimport { Dictionary } from \"@reduxjs/toolkit\";\r\nimport { Target } from \"../Target/targetSlice\";\r\nimport { Weakness } from \"../Target/weaknessSlice\";\r\n\r\n/**\r\n * Checks given degreeOfSuccess is in the condition\r\n * like Success is in Success or better\r\n * @param {*} condition\r\n * @param {*} degreeOfSuccess\r\n * @returns\r\n */\r\nfunction validateCondition(condition: Condition, degreeOfSuccess: number) {\r\n  let indicies: number[] = [];\r\n  // console.log(`cond is: ${ap.condition}`);\r\n  switch (condition) {\r\n    case conditions.ALWAYS:\r\n      indicies = [0, 1, 2, 3];\r\n      break;\r\n\r\n    case conditions.AT_LEAST_FAIL:\r\n      indicies = [0, 1, 2];\r\n      break;\r\n\r\n    case conditions.AT_LEAST_SUCC:\r\n      indicies = [0, 1];\r\n      break;\r\n\r\n    case conditions.CRIF:\r\n      indicies = [3];\r\n      break;\r\n\r\n    case conditions.CRIT:\r\n      indicies = [0];\r\n      break;\r\n\r\n    case conditions.FAIL:\r\n      indicies = [2];\r\n      break;\r\n\r\n    case conditions.FAIL_WORSE:\r\n      indicies = [2, 3];\r\n      break;\r\n\r\n    case conditions.SUCC:\r\n      indicies = [1];\r\n      break;\r\n\r\n    case conditions.SUCC_WORSE:\r\n      indicies = [1, 2, 3];\r\n      break;\r\n\r\n    default:\r\n  }\r\n  return indicies.includes(degreeOfSuccess);\r\n}\r\n\r\nclass ActivityPathEvaluator {\r\n  activityPaths: Dictionary<ActivityPath>;\r\n  target: Target;\r\n  damages: Dictionary<Damage>;\r\n  effects: Dictionary<Effect>;\r\n  weaknesses: Dictionary<Weakness>;\r\n  selectedRoutine?: number;\r\n  constructor(\r\n    activityPaths: Dictionary<ActivityPath>,\r\n    targets: Dictionary<Target>,\r\n    damages: Dictionary<Damage>,\r\n    effects: Dictionary<Effect>,\r\n    weaknesses: Dictionary<Weakness>,\r\n    selectedRoutine?: number\r\n  ) {\r\n    this.activityPaths = activityPaths;\r\n    this.target = targets[0]!;\r\n    this.damages = damages;\r\n    this.effects = effects;\r\n    this.weaknesses = weaknesses;\r\n    this.selectedRoutine = selectedRoutine;\r\n  }\r\n\r\n  canEvaluate(level: number, routine: Routine) {\r\n    const levelDiff = this.target.levelDiff;\r\n    // console.log(`level ${level}, levelDiff ${levelDiff}`);\r\n    if (level < routine.startLevel || level > routine.endLevel) return false;\r\n    if (level + levelDiff < -1 || level + levelDiff > 24) return false;\r\n    return true;\r\n  }\r\n\r\n  evalRoutine(\r\n    routine: Routine,\r\n    level: number,\r\n    ACBonus: number,\r\n    resBonus: number\r\n  ) {\r\n    const initialTargetState = {\r\n      // flatfooted: this.target.flatfooted,\r\n      // prone: false,\r\n      // grappled: false,\r\n      // frightened: 0,\r\n      // clumsy: 0,\r\n    } as TargetState;\r\n    for (let effectState of Object.values(effectStateTypes)) {\r\n      initialTargetState[effectState] = false;\r\n    }\r\n    for (let effectValue of Object.values(effectValueTypes)) {\r\n      initialTargetState[effectValue] = 0;\r\n    }\r\n    initialTargetState.Flatfooted = this.target.flatfooted;\r\n\r\n    const dataArray = [];\r\n    const cumulative = [];\r\n    const PdataArray = [];\r\n    const Pcumulative = [];\r\n\r\n    let expD = 0;\r\n    let expP = 0;\r\n    let routineDDist = [1];\r\n    let routinePDDist = [1];\r\n    for (let i = 0; i < routine.apIds.length; i++) {\r\n      let activityPath = this.activityPaths[routine.apIds[i]]!;\r\n      let [damageDist, PdamageDist] = this.evalPath(\r\n        activityPath,\r\n        initialTargetState,\r\n        level,\r\n        ACBonus,\r\n        resBonus\r\n      );\r\n      routineDDist = convolve(routineDDist, damageDist);\r\n      routinePDDist = convolve(routinePDDist, PdamageDist);\r\n    }\r\n    let currentSum = 1;\r\n    for (let i = 0; i < routineDDist.length; i++) {\r\n      dataArray.push(i);\r\n      cumulative.push(currentSum);\r\n      currentSum -= routineDDist[i];\r\n\r\n      expD += routineDDist[i] * i;\r\n    }\r\n    currentSum = 1;\r\n    for (let i = 0; i < routinePDDist.length; i++) {\r\n      PdataArray.push(i);\r\n      Pcumulative.push(currentSum);\r\n      currentSum -= routinePDDist[i];\r\n\r\n      expP += routinePDDist[i] * i;\r\n    }\r\n    return {\r\n      expD,\r\n      expP,\r\n      dataArray,\r\n      routineDDist,\r\n      cumulative,\r\n      PdataArray,\r\n      routinePDDist,\r\n      Pcumulative,\r\n    };\r\n  }\r\n\r\n  evalPath(\r\n    activityPath: ActivityPath,\r\n    targetState: TargetState,\r\n    level: number,\r\n    defenseBonus: number,\r\n    resistanceBonus: number\r\n  ) {\r\n    // evaluate this and all following APs\r\n    let currentTarget = this.target;\r\n    let currentDamages = activityPath.damages.map(\r\n      (damageId) => this.damages[damageId]!\r\n    );\r\n    //currentDamages.push(activityPath);\r\n    let currentEffects = activityPath.effects.map(\r\n      (effectId) => this.effects[effectId]!\r\n    );\r\n    let currentWeaknesses = currentTarget.weaknesses.map(\r\n      (weaknessId) => this.weaknesses[weaknessId]!\r\n    );\r\n\r\n    // calculate the expected damage for this activity\r\n    let { damageTrees, chances } = calculateExpectedDamage(\r\n      level,\r\n      activityPath,\r\n      currentDamages,\r\n      currentTarget,\r\n      targetState,\r\n      currentWeaknesses,\r\n      defenseBonus,\r\n      resistanceBonus\r\n    );\r\n\r\n    const targetStates = [targetState, targetState, targetState, targetState];\r\n    // go through each degree of success\r\n    for (let i = 0; i < 4; i++) {\r\n      // go though each valid effect and update targetStates\r\n      currentEffects.forEach((effect) => {\r\n        let {\r\n          effectCondition,\r\n          effectType,\r\n          effectValue,\r\n          startLevel,\r\n          endLevel,\r\n          damageWhen,\r\n        } = effect;\r\n        if (level < startLevel || level > endLevel) return;\r\n        let shouldAddThisEffect = false;\r\n        for (let state of damageWhen) {\r\n          if (state === whenConditions.Always) {\r\n            shouldAddThisEffect = true;\r\n            break;\r\n          }\r\n          let val = targetStates[i][state];\r\n          if (val && val > 0) {\r\n            shouldAddThisEffect = true;\r\n            break;\r\n          }\r\n        }\r\n        if (!shouldAddThisEffect) return;\r\n\r\n        if (validateCondition(effectCondition, i)) {\r\n          switch (effectType) {\r\n            case effectTypes.RESTRAINED:\r\n              if (targetStates[i].Restrained !== true)\r\n                targetStates[i] = {\r\n                  ...targetStates[i],\r\n                  Flatfooted: true,\r\n                  Grappled: true,\r\n                  Restrained: true,\r\n                };\r\n              break;\r\n\r\n            case effectTypes.GRAPPLED:\r\n              if (targetStates[i].Grappled !== true)\r\n                targetStates[i] = {\r\n                  ...targetStates[i],\r\n                  Flatfooted: true,\r\n                  Grappled: true,\r\n                };\r\n              break;\r\n\r\n            case effectTypes.PRONE:\r\n              if (targetStates[i].Prone !== true)\r\n                targetStates[i] = {\r\n                  ...targetStates[i],\r\n                  Flatfooted: true,\r\n                  Prone: true,\r\n                };\r\n              break;\r\n\r\n            case effectTypes.FLATFOOT:\r\n              if (targetStates[i].Flatfooted !== true)\r\n                targetStates[i] = { ...targetStates[i], Flatfooted: true };\r\n              break;\r\n\r\n            case effectTypes.FRIGHTENED:\r\n              if (effectValue && targetStates[i].Frightened < effectValue)\r\n                targetStates[i] = {\r\n                  ...targetStates[i],\r\n                  Frightened: effectValue,\r\n                };\r\n              break;\r\n\r\n            case effectTypes.CLUMSY:\r\n              if (effectValue && targetStates[i].Clumsy < effectValue)\r\n                targetStates[i] = {\r\n                  ...targetStates[i],\r\n                  Clumsy: effectValue,\r\n                };\r\n              break;\r\n\r\n            default:\r\n              console.log(`Effect type ${effectType} not implemented`);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // go through each activity path, depending on its condition add its damage distributions to this activities appropriately\r\n    activityPath.apIds.forEach((apId) => {\r\n      let ap = this.activityPaths[apId]!;\r\n\r\n      const evaluations = new Map();\r\n      // go through each degree of success\r\n      for (let i = 0; i < 4; i++) {\r\n        // evaluate if necessary and add distribution to damageTrees\r\n        if (validateCondition(ap.condition, i)) {\r\n          if (evaluations.has(targetStates[i])) {\r\n            // already evaluated\r\n          } else {\r\n            let [pathDist, pathPDist] = this.evalPath(\r\n              ap,\r\n              targetStates[i],\r\n              level,\r\n              defenseBonus,\r\n              resistanceBonus\r\n            );\r\n            evaluations.set(targetStates[i], { pathDist, pathPDist });\r\n          }\r\n          damageTrees[i].normal.damageDist = convolve(\r\n            damageTrees[i].normal.damageDist,\r\n            evaluations.get(targetStates[i]).pathDist\r\n          );\r\n          damageTrees[i].persistent.damageDist = convolve(\r\n            damageTrees[i].persistent.damageDist,\r\n            evaluations.get(targetStates[i]).pathPDist\r\n          );\r\n        }\r\n      }\r\n    });\r\n\r\n    let damageDist = consolidateDists(\r\n      { distribution: damageTrees[0].normal, chance: chances[0] },\r\n      { distribution: damageTrees[1].normal, chance: chances[1] },\r\n      { distribution: damageTrees[2].normal, chance: chances[2] },\r\n      { distribution: damageTrees[3].normal, chance: chances[3] }\r\n    );\r\n    let PdamageDist = consolidateDists(\r\n      { distribution: damageTrees[0].persistent, chance: chances[0] },\r\n      { distribution: damageTrees[1].persistent, chance: chances[1] },\r\n      { distribution: damageTrees[2].persistent, chance: chances[2] },\r\n      { distribution: damageTrees[3].persistent, chance: chances[3] }\r\n    );\r\n    // console.log(damageDist);\r\n\r\n    return [damageDist, PdamageDist];\r\n  }\r\n}\r\n\r\nexport { ActivityPathEvaluator };\r\n","import React from \"react\";\r\n\r\nimport {\r\n  selectactivityPathEntities,\r\n  selectSelectedRoutine,\r\n} from \"../Routines/RoutineSlice/routineSlice\";\r\nimport { Routine } from \"../Routines/RoutineSlice/RoutineTypes\";\r\nimport { selectdamageEntities } from \"../Routines/RoutineSlice/routineSlice\";\r\nimport { selectRoutineEntities } from \"../Routines/RoutineSlice/routineSlice\";\r\nimport { selecttargetEntities } from \"../Target/targetSlice\";\r\nimport { selectweaknessEntities } from \"../Target/weaknessSlice\";\r\nimport { graphTypes } from \"../Model/types\";\r\nimport { selecteffectEntities } from \"../Routines/RoutineSlice/routineSlice\";\r\n\r\nimport { ActivityPathEvaluator } from \"../Calculation/EvaluateActivityPath\";\r\n\r\nimport Plotly from \"plotly.js-basic-dist\";\r\nimport createPlotlyComponent from \"react-plotly.js/factory\";\r\nimport { defaultACs, defaultSaves } from \"../Model/defaults\";\r\nimport { Dictionary } from \"@reduxjs/toolkit\";\r\nimport { useAppSelector } from \"../App/hooks\";\r\nconst Plot = createPlotlyComponent(Plotly);\r\n\r\nconst useGenerateGraphs = (graphType: string, displayLevel: number) => {\r\n  const routines = useAppSelector(selectRoutineEntities);\r\n  const activityPaths = useAppSelector(selectactivityPathEntities);\r\n  const targets = useAppSelector(selecttargetEntities);\r\n  const damages = useAppSelector(selectdamageEntities);\r\n  const effects = useAppSelector(selecteffectEntities);\r\n  const weaknesses = useAppSelector(selectweaknessEntities);\r\n  const selectedRoutine = useAppSelector(selectSelectedRoutine);\r\n\r\n  const evaluator = new ActivityPathEvaluator(\r\n    activityPaths,\r\n    targets,\r\n    damages,\r\n    effects,\r\n    weaknesses,\r\n    selectedRoutine\r\n  );\r\n\r\n  const currentTarget = targets[0]!;\r\n  let title = \"@\" + displayLevel;\r\n  let byLevelTile = currentTarget.name;\r\n\r\n  title += \" Vs \";\r\n  title += \" AC: \" + defaultACs[currentTarget.ACTrend][displayLevel];\r\n  title += \" Fort: \" + defaultSaves[currentTarget.FortTrend][displayLevel];\r\n  title += \" Ref: \" + defaultSaves[currentTarget.RefTrend][displayLevel];\r\n  title += \" Will: \" + defaultSaves[currentTarget.WillTrend][displayLevel];\r\n  title += \" Per: \" + defaultSaves[currentTarget.PerTrend][displayLevel];\r\n\r\n  // byLevelTile += \" Vs \";\r\n  // byLevelTile += \" AC: \" + currentTarget.ACTrend;\r\n  // byLevelTile += \" Fort: \" + currentTarget.FortTrend;\r\n  // byLevelTile += \" Ref: \" + currentTarget.RefTrend;\r\n  // byLevelTile += \" Will: \" + currentTarget.WillTrend;\r\n  // byLevelTile += \" Per: \" + currentTarget.PerTrend;\r\n\r\n  let datasets: Plotly.Data[] = [];\r\n  let perDatasets: Plotly.Data[] = [];\r\n  let expectedDamages;\r\n  let expectedPersistentDamages;\r\n  switch (graphType) {\r\n    case graphTypes.DISTRIBUTION:\r\n      ({ expectedDamages, expectedPersistentDamages, datasets, perDatasets } =\r\n        evaluateDistribution(routines, evaluator, displayLevel));\r\n      break;\r\n    case graphTypes.PMDEFENSE:\r\n      ({ expectedDamages, expectedPersistentDamages, datasets, perDatasets } =\r\n        evaluatePM(routines, evaluator, displayLevel, true));\r\n      break;\r\n    case graphTypes.PMRES:\r\n      ({ expectedDamages, expectedPersistentDamages, datasets, perDatasets } =\r\n        evaluatePM(routines, evaluator, displayLevel, false));\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  let { datasets: byLeveldatasets, perDatasets: byLevelperDatasets } =\r\n    evaluateByLevel(routines, evaluator);\r\n\r\n  let xtitle;\r\n  let ytitle;\r\n  if (graphType === graphTypes.DISTRIBUTION) {\r\n    xtitle = \"damage\";\r\n    ytitle = \"chance\";\r\n  } else if (graphType === graphTypes.PMDEFENSE) {\r\n    xtitle = \"+/- AC/Save Bonus\";\r\n    ytitle = \"Expected Damage\";\r\n  } else if (graphType === graphTypes.PMRES) {\r\n    xtitle = \"+/- Resistance/Weakness\";\r\n    ytitle = \"Expected Damage\";\r\n  }\r\n\r\n  let damageChart = (\r\n    <Plot\r\n      className=\"plot\"\r\n      data={datasets}\r\n      layout={{\r\n        title: title,\r\n        autosize: true,\r\n        xaxis: { title: xtitle },\r\n        yaxis: { title: ytitle },\r\n        legend: {\r\n          x: 1,\r\n          y: 1,\r\n          xanchor: \"right\",\r\n        },\r\n        margin: {\r\n          l: 40,\r\n          r: 40,\r\n        },\r\n      }}\r\n      useResizeHandler={true}\r\n      style={{ width: \"100%\", height: \"100%\" }}\r\n    />\r\n  );\r\n  let persistentDamageChart = (\r\n    <Plot\r\n      className=\"plot\"\r\n      data={perDatasets}\r\n      layout={{\r\n        title: \"Expected Persistent Damage\",\r\n        autosize: true,\r\n        xaxis: { title: \"persistent damage\" },\r\n        yaxis: { title: \"chance\" },\r\n        legend: {\r\n          x: 1,\r\n          y: 1,\r\n          xanchor: \"right\",\r\n        },\r\n        margin: {\r\n          l: 40,\r\n          r: 40,\r\n        },\r\n      }}\r\n      useResizeHandler={true}\r\n      style={{ width: \"100%\", height: \"100%\" }}\r\n    />\r\n  );\r\n  let byLevelDamageChart = (\r\n    <Plot\r\n      className=\"plot\"\r\n      data={byLeveldatasets}\r\n      layout={{\r\n        title: byLevelTile,\r\n        autosize: true,\r\n        xaxis: { title: \"Level\" },\r\n        yaxis: { title: \"Expected Damage\" },\r\n        legend: {\r\n          x: 0,\r\n          y: 1,\r\n          xanchor: \"left\",\r\n        },\r\n        margin: {\r\n          l: 40,\r\n          r: 40,\r\n        },\r\n      }}\r\n      useResizeHandler={true}\r\n      style={{ width: \"100%\", height: \"100%\" }}\r\n    />\r\n  );\r\n  let byLevelPerDamageChart = (\r\n    <Plot\r\n      className=\"plot\"\r\n      data={byLevelperDatasets}\r\n      layout={{\r\n        title: byLevelTile,\r\n        autosize: true,\r\n        xaxis: { title: \"Level\" },\r\n        yaxis: { title: \"Expected Persistent Damage\" },\r\n        legend: {\r\n          x: 1,\r\n          y: 1,\r\n          xanchor: \"right\",\r\n        },\r\n        margin: {\r\n          l: 40,\r\n          r: 40,\r\n        },\r\n      }}\r\n      useResizeHandler={true}\r\n      style={{ width: \"100%\", height: \"100%\" }}\r\n    />\r\n  );\r\n  return {\r\n    expectedDamages,\r\n    expectedPersistentDamages,\r\n    damageChart,\r\n    persistentDamageChart,\r\n    byLevelDamageChart,\r\n    byLevelPerDamageChart,\r\n  };\r\n};\r\n\r\nconst evaluateByLevel = (\r\n  routines: Dictionary<Routine>,\r\n  evaluator: ActivityPathEvaluator\r\n) => {\r\n  let datasets = [];\r\n  let perDatasets = [];\r\n\r\n  // Evaluate the selected routine first so we can display other routines as a % of that\r\n  const selectedRoutineDamage: { [key: number]: number } = {};\r\n  const selectedRoutinePDamage: { [key: number]: number } = {};\r\n  if (\r\n    evaluator.target.percentSelectedRoutine &&\r\n    evaluator.selectedRoutine !== undefined\r\n  ) {\r\n    let routine = routines[evaluator.selectedRoutine]!;\r\n    for (let level = 1; level <= 20; level++) {\r\n      if (!evaluator.canEvaluate(level, routine)) continue;\r\n      let { expD, expP } = evaluator.evalRoutine(routine, level, 0, 0);\r\n      selectedRoutineDamage[level] = expD;\r\n      selectedRoutinePDamage[level] = expP;\r\n    }\r\n  }\r\n\r\n  for (let id in routines) {\r\n    let routine = routines[id]!;\r\n    if (!routine.display) continue;\r\n\r\n    const levelArray = [];\r\n    const expDbyLevel = [];\r\n    const expPDbyLevel = [];\r\n    for (let level = 1; level <= 20; level++) {\r\n      if (!evaluator.canEvaluate(level, routine)) continue;\r\n\r\n      let { expD, expP } = evaluator.evalRoutine(routine, level, 0, 0);\r\n      if (evaluator.target.percentSelectedRoutine) {\r\n        if (level in selectedRoutineDamage) {\r\n          levelArray.push(level);\r\n          expDbyLevel.push(expD / selectedRoutineDamage[level]);\r\n          expPDbyLevel.push(expP / selectedRoutinePDamage[level]);\r\n        }\r\n      } else {\r\n        levelArray.push(level);\r\n        expDbyLevel.push(expD);\r\n        expPDbyLevel.push(expP);\r\n      }\r\n    }\r\n    datasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: levelArray,\r\n      y: expDbyLevel,\r\n      yaxis: \"y\",\r\n    } as const);\r\n    perDatasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: levelArray,\r\n      y: expPDbyLevel,\r\n      yaxis: \"y\",\r\n    } as const);\r\n  }\r\n\r\n  return { datasets, perDatasets };\r\n};\r\n\r\nconst evaluatePM = (\r\n  routines: Dictionary<Routine>,\r\n  evaluator: ActivityPathEvaluator,\r\n  displayLevel: number,\r\n  defense = true\r\n) => {\r\n  let datasets = [];\r\n  let perDatasets = [];\r\n  let expectedDamages = [];\r\n  let expectedPersistentDamages = [];\r\n\r\n  // return {\r\n  //   expectedDamages,\r\n  //   expectedPersistentDamages,\r\n  //   datasets,\r\n  //   perDatasets,\r\n  // };\r\n\r\n  for (let id in routines) {\r\n    let routine = routines[id]!;\r\n    if (!routine.display) continue;\r\n    if (!evaluator.canEvaluate(displayLevel, routine)) continue;\r\n\r\n    const bonusArray = [];\r\n    const expDbyBonus = [];\r\n    const expPDbyBonus = [];\r\n\r\n    for (let bonus = -5; bonus <= 5; bonus++) {\r\n      bonusArray.push(bonus);\r\n      let { expD, expP } = evaluator.evalRoutine(\r\n        routine,\r\n        displayLevel,\r\n        defense ? bonus : 0,\r\n        defense ? 0 : bonus\r\n      );\r\n\r\n      if (bonus === 0) {\r\n        expectedDamages.push(\r\n          <div key={routine.id}>\r\n            {routine.name}\r\n            {\": \"}\r\n            {expD.toFixed(2)}\r\n          </div>\r\n        );\r\n        expectedPersistentDamages.push(\r\n          <div key={routine.id}>\r\n            {routine.name}\r\n            {\": \"}\r\n            {expP.toFixed(2)}\r\n          </div>\r\n        );\r\n      }\r\n\r\n      expDbyBonus.push(expD);\r\n      expPDbyBonus.push(expP);\r\n    }\r\n\r\n    datasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: bonusArray,\r\n      y: expDbyBonus,\r\n      yaxis: \"y\",\r\n    } as const);\r\n    perDatasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: bonusArray,\r\n      y: expPDbyBonus,\r\n      yaxis: \"y\",\r\n    } as const);\r\n  }\r\n  return { expectedDamages, expectedPersistentDamages, datasets, perDatasets };\r\n};\r\n\r\nconst evaluateDistribution = (\r\n  routines: Dictionary<Routine>,\r\n  evaluator: ActivityPathEvaluator,\r\n  displayLevel: number\r\n) => {\r\n  let datasets = [];\r\n  let perDatasets = [];\r\n  let expectedDamages = [];\r\n  let expectedPersistentDamages = [];\r\n\r\n  // if (!evaluator.canEvaluate(displayLevel))\r\n  //   return {\r\n  //     expectedDamages,\r\n  //     expectedPersistentDamages,\r\n  //     datasets,\r\n  //     perDatasets,\r\n  //   };\r\n\r\n  for (let id in routines) {\r\n    let routine = routines[id]!;\r\n    if (!routine.display) continue;\r\n    if (!evaluator.canEvaluate(displayLevel, routine)) continue;\r\n    let {\r\n      expD,\r\n      expP,\r\n      dataArray,\r\n      routineDDist,\r\n      cumulative,\r\n      PdataArray,\r\n      routinePDDist,\r\n      Pcumulative,\r\n    } = evaluator.evalRoutine(routine, displayLevel, 0, 0);\r\n    expectedDamages.push(\r\n      <div key={routine.id}>\r\n        {routine.name}\r\n        {\": \"}\r\n        {expD.toFixed(2)}\r\n      </div>\r\n    );\r\n    expectedPersistentDamages.push(\r\n      <div key={routine.id}>\r\n        {routine.name}\r\n        {\": \"}\r\n        {expP.toFixed(2)}\r\n      </div>\r\n    );\r\n    datasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: dataArray,\r\n      y: cumulative,\r\n      yaxis: \"y\",\r\n    } as const);\r\n    datasets.push({\r\n      type: \"bar\",\r\n      name: expD.toFixed(2),\r\n      x: dataArray,\r\n      y: routineDDist,\r\n    } as const);\r\n    perDatasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: PdataArray,\r\n      y: Pcumulative,\r\n    } as const);\r\n    perDatasets.push({\r\n      type: \"bar\",\r\n      name: expP.toFixed(2),\r\n      x: PdataArray,\r\n      y: routinePDDist,\r\n    } as const);\r\n  }\r\n  return { expectedDamages, expectedPersistentDamages, datasets, perDatasets };\r\n};\r\n\r\nexport default useGenerateGraphs;\r\n","import React, { useState } from \"react\";\r\n// import { graphTypeOptions, levelOptions } from \"../Model/options\";\r\nimport { graphTypes } from \"../Model/types\";\r\nimport { TargetInput } from \"../Target/TargetInput\";\r\n\r\nimport { Paper } from \"@mui/material\";\r\n\r\nimport useGenerateGraphs from \"./useGenerateGraphs\";\r\n\r\nconst Display = () => {\r\n  // evaluates routines and displays appropriate graphs\r\n\r\n  // const [addPersistent, setAddPersistent] = useState(false);\r\n  const [graphType, setGraphType] = useState<string>(graphTypes.DISTRIBUTION);\r\n  const [displayLevel, setDisplayLevel] = useState(1);\r\n  const {\r\n    // expectedDamages,\r\n    // expectedPersistentDamages,\r\n    // damageChart,\r\n    // persistentDamageChart,\r\n    byLevelDamageChart,\r\n    // byLevelPerDamageChart,\r\n  } = useGenerateGraphs(graphType, displayLevel);\r\n  // const [perMulti, setPerMulti] = useState(2);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <TargetInput />\r\n      <Paper>{byLevelDamageChart}</Paper>\r\n      {/* <div className=\"box\">\r\n        {\"Graph Type: \"}\r\n        <select\r\n          value={graphType}\r\n          onChange={(e) => setGraphType(e.target.value)}\r\n        >\r\n          {graphTypeOptions}\r\n        </select>\r\n        (\r\n        <select\r\n          value={displayLevel}\r\n          onChange={(e) => setDisplayLevel(parseInt(e.target.value))}\r\n        >\r\n          {levelOptions}\r\n        </select>\r\n        ){\" Show persistent damage: \"}\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={addPersistent}\r\n          onChange={(e) => setAddPersistent(e.target.checked)}\r\n        />\r\n        {/* , persistent damage multiplier:\r\n      <input\r\n        type=\"number\"\r\n        value={perMulti ? perMulti : 0}\r\n        onChange={(e) => setPerMulti(e.target.valueAsNumber)}\r\n      /> */}\r\n      {/* <div>\r\n          Expected Damage:\r\n          {expectedDamages}\r\n        </div>\r\n        {damageChart}\r\n        {byLevelDamageChart}\r\n        {!addPersistent ? (\r\n          \"\"\r\n        ) : (\r\n          <div>\r\n            <div>\r\n              Expected Persistent Damage:\r\n              {expectedPersistentDamages}\r\n            </div>\r\n            {persistentDamageChart}\r\n            {byLevelPerDamageChart}\r\n          </div>\r\n        )}\r\n      </div> */}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Display;\r\n","import React from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../App/hooks\";\r\n\r\n// import SendIcon from \"@mui/icons-material/Send\";\r\nimport AutoFixHighIcon from \"@mui/icons-material/AutoFixHigh\";\r\nimport GavelIcon from \"@mui/icons-material/Gavel\";\r\nimport { ListItemButton, ListItemIcon, ListItemText } from \"@mui/material\";\r\n\r\nimport { RootState } from \"../App/store\";\r\nimport {\r\n  selectactivityPathById,\r\n  setActivityPath,\r\n  selectSelectedActivityPath,\r\n  selectParentActivityId,\r\n} from \"./RoutineSlice/routineSlice\";\r\nimport { activityTypes } from \"../Model/types\";\r\n\r\nexport const ActivityPathStub = ({\r\n  id,\r\n  level,\r\n  displayChildren = true,\r\n}: {\r\n  id: number;\r\n  level: number;\r\n  displayChildren?: boolean;\r\n}) => {\r\n  const { parentId, condition, type, apIds } = useAppSelector(\r\n    (state: RootState) => selectactivityPathById(state, id)!\r\n  );\r\n  const selectedActivityPath = useAppSelector(selectSelectedActivityPath);\r\n  const parentActivityId = useAppSelector(selectParentActivityId);\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  let icon = <GavelIcon />;\r\n  switch (type) {\r\n    case activityTypes.SAVE:\r\n      icon = <AutoFixHighIcon />;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ListItemButton\r\n        selected={selectedActivityPath === id || parentActivityId === id}\r\n        sx={{ pl: 4 * level + 2 }}\r\n        onClick={() => dispatch(setActivityPath(id))}\r\n      >\r\n        {/* {displayCondition ? \"Conditions\" : \"\"} */}\r\n        <ListItemIcon>{icon}</ListItemIcon>\r\n        <ListItemText\r\n          primary={type}\r\n          secondary={parentId !== undefined ? condition : \"\"}\r\n        />\r\n      </ListItemButton>\r\n      {displayChildren\r\n        ? apIds.map((apId) => (\r\n            <ActivityPathStub key={apId} id={apId} level={level + 1} />\r\n          ))\r\n        : \"\"}\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../App/hooks\";\r\nimport {\r\n  emptyActivityPathCreated,\r\n  routineUpdated,\r\n  selectRoutineById,\r\n  setNewActivityParent,\r\n} from \"./RoutineSlice/routineSlice\";\r\nimport { ActivityPathStub } from \"./ActivityPathStub\";\r\nimport { RootState } from \"../App/store\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  List,\r\n  ListSubheader,\r\n  Paper,\r\n  Slider,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { activityTypes } from \"../Model/types\";\r\n\r\nfunction SelectedRoutine({ routineId }: { routineId: number }) {\r\n  // const selectedRoutine = useSelector(selectSelectedRoutine);\r\n  const { name, startLevel, endLevel, description, apIds } = useAppSelector(\r\n    (state: RootState) => selectRoutineById(state, routineId)!\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  let [tempName, setTempName] = useState(name);\r\n  const [tempDescription, setTempDescription] = useState(description);\r\n  let [validLevels, setValidLevels] = useState([startLevel, endLevel]);\r\n  useEffect(() => setTempName(name), [name]);\r\n  useEffect(() => setTempDescription(description), [description]);\r\n  useEffect(\r\n    () => setValidLevels([startLevel, endLevel]),\r\n    [startLevel, endLevel]\r\n  );\r\n\r\n  return (\r\n    <Paper>\r\n      <Grid container spacing={{ xs: 1, sm: 2 }} sx={{ my: 2, p: 1 }}>\r\n        <Grid item xs={12} sm={8} md={12} lg={8}>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Routine Name\"\r\n            placeholder=\"Fighter d8 2 strikes\"\r\n            value={tempName}\r\n            onChange={(e) => {\r\n              setTempName(e.target.value);\r\n            }}\r\n            onBlur={() =>\r\n              dispatch(\r\n                routineUpdated({ id: routineId, changes: { name: tempName } })\r\n              )\r\n            }\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={4} md={12} lg={4} sx={{ px: 2 }}>\r\n          <Typography align=\"center\">\r\n            Valid Levels: {startLevel} to {endLevel}\r\n          </Typography>\r\n          <Slider\r\n            getAriaLabel={() => \"Valid levels\"}\r\n            value={validLevels}\r\n            min={1}\r\n            max={20}\r\n            marks\r\n            // @ts-ignore\r\n            onChange={(e, nv: number[]) => setValidLevels(nv)}\r\n            onBlur={() =>\r\n              dispatch(\r\n                routineUpdated({\r\n                  id: routineId,\r\n                  changes: {\r\n                    startLevel: validLevels[0],\r\n                    endLevel: validLevels[1],\r\n                  },\r\n                })\r\n              )\r\n            }\r\n            valueLabelDisplay=\"auto\"\r\n            getAriaValueText={(v) => `${v}`}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            fullWidth\r\n            multiline\r\n            label=\"Routine Description\"\r\n            placeholder=\"A Fighter making two strikes with a longsword. Critical Specialization at 5. 1d6 runes at 8 and 15.\"\r\n            value={tempDescription}\r\n            onChange={(e) => {\r\n              setTempDescription(e.target.value);\r\n            }}\r\n            onBlur={() =>\r\n              dispatch(\r\n                routineUpdated({\r\n                  id: routineId,\r\n                  changes: { description: tempDescription },\r\n                })\r\n              )\r\n            }\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      {/* <Paper sx={{ my: 2, p: 1 }}> */}\r\n      <List\r\n        id=\"routine-activity-list\"\r\n        subheader={<ListSubheader>Activities</ListSubheader>}\r\n      >\r\n        {apIds.map((apId) => (\r\n          <ActivityPathStub key={apId} id={apId} level={0} />\r\n        ))}\r\n      </List>\r\n      {/* </Paper> */}\r\n      <Grid container spacing={{ xs: 1 }} sx={{ my: 2, p: 1 }}>\r\n        <Grid\r\n          item\r\n          container\r\n          xs={6}\r\n          sm={3}\r\n          md={6}\r\n          lg={3}\r\n          justifyContent=\"center\"\r\n        >\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={() => dispatch(setNewActivityParent({ routineId }))}\r\n          >\r\n            Create New Activity\r\n          </Button>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          container\r\n          xs={6}\r\n          sm={3}\r\n          md={6}\r\n          lg={3}\r\n          justifyContent=\"center\"\r\n        >\r\n          <Button\r\n            variant=\"outlined\"\r\n            onClick={() => dispatch(emptyActivityPathCreated({ routineId }))}\r\n          >\r\n            New Empty Activity\r\n          </Button>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          container\r\n          xs={6}\r\n          sm={3}\r\n          md={6}\r\n          lg={3}\r\n          justifyContent=\"center\"\r\n        >\r\n          <Button\r\n            variant=\"outlined\"\r\n            onClick={() =>\r\n              dispatch(\r\n                emptyActivityPathCreated({\r\n                  routineId,\r\n                  activityType: activityTypes.STRIKE,\r\n                })\r\n              )\r\n            }\r\n          >\r\n            New Martial Strike\r\n          </Button>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          container\r\n          xs={6}\r\n          sm={3}\r\n          md={6}\r\n          lg={3}\r\n          justifyContent=\"center\"\r\n        >\r\n          <Button\r\n            variant=\"outlined\"\r\n            onClick={() =>\r\n              dispatch(\r\n                emptyActivityPathCreated({\r\n                  routineId,\r\n                  activityType: activityTypes.SAVE,\r\n                })\r\n              )\r\n            }\r\n          >\r\n            New Caster Save\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      {/* <Button\r\n        variant=\"outlined\"\r\n        onClick={() =>\r\n          dispatch(activityPathCreated({ routineId, isStrike: false }))\r\n        }\r\n      >\r\n        + Save\r\n      </Button> */}\r\n      {/* <EffectInput /> */}\r\n      {/* </div> */}\r\n    </Paper>\r\n  );\r\n}\r\n\r\n// const NameInput = ({ id, name: baseName }: { id: number; name: string }) => {\r\n//   const dispatch = useDispatch();\r\n//   let [name, setName] = useState(baseName);\r\n//   useEffect(() => setName(baseName), [baseName]);\r\n//   // const name = useSelector((state) => selectRoutineById(state, id)).name;\r\n\r\n//   return (\r\n//     <React.Fragment>\r\n//       <label htmlFor=\"routineName\">Routine Name:</label>\r\n//       <input\r\n//         id=\"routineName\"\r\n//         type=\"text\"\r\n//         placeholder=\"Enter routine name\"\r\n//         value={name}\r\n//         onChange={(e) => setName(e.target.value)}\r\n//         onBlur={() => dispatch(routineUpdated({ id, changes: { name } }))}\r\n//       />\r\n//     </React.Fragment>\r\n//   );\r\n// };\r\n// const DescriptionInput = ({\r\n//   id,\r\n//   description: baseDescription,\r\n// }: {\r\n//   id: number;\r\n//   description: string;\r\n// }) => {\r\n//   const dispatch = useDispatch();\r\n//   const [description, setDescription] = useState(baseDescription);\r\n//   useEffect(() => setDescription(baseDescription), [baseDescription]);\r\n\r\n//   return (\r\n//     <div>\r\n//       <textarea\r\n//         className=\"routineDescription\"\r\n//         id=\"routineDescription\"\r\n//         placeholder=\"Enter routine description\"\r\n//         value={description}\r\n//         onChange={(e) => setDescription(e.target.value)}\r\n//         onBlur={() =>\r\n//           dispatch(routineUpdated({ id, changes: { description } }))\r\n//         }\r\n//       />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\nexport default SelectedRoutine;\r\n","import {\r\n  Chip,\r\n  InputLabel,\r\n  MenuItem,\r\n  Paper,\r\n  Select,\r\n  FormControl,\r\n  Grid,\r\n  Button,\r\n} from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\nimport React from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../App/hooks\";\r\n\r\nimport {\r\n  routineCreated,\r\n  routineRemoved,\r\n  routineUpdated,\r\n  selectAllRoutines,\r\n  selectSelectedRoutine,\r\n  setRoutine,\r\n} from \"./RoutineSlice/routineSlice\";\r\n\r\nconst Routines = () => {\r\n  const routines = useAppSelector(selectAllRoutines);\r\n  const selectedRoutine = useAppSelector(selectSelectedRoutine);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const routineOptions: JSX.Element[] = [];\r\n  const routineDisplays: JSX.Element[] = [];\r\n  routines.forEach((routine) => {\r\n    routineOptions.push(\r\n      <MenuItem value={routine.id} key={routine.id}>\r\n        {routine.name}\r\n      </MenuItem>\r\n    );\r\n    routineDisplays.push(\r\n      <Box component=\"li\" key={routine.id} sx={{ margin: 0.5 }}>\r\n        <Chip\r\n          label={routine.name}\r\n          variant={routine.display ? \"filled\" : \"outlined\"}\r\n          size=\"small\"\r\n          color=\"secondary\"\r\n          onClick={() => {\r\n            dispatch(\r\n              routineUpdated({\r\n                id: routine.id,\r\n                changes: { display: !routine.display },\r\n              })\r\n            );\r\n            dispatch(setRoutine(routine.id));\r\n          }}\r\n          onDelete={() => dispatch(routineRemoved(routine.id))}\r\n        />\r\n      </Box>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Paper\r\n        variant=\"outlined\"\r\n        sx={{\r\n          display: \"flex\",\r\n          flexWrap: \"wrap\",\r\n          justifyContent: \"center\",\r\n          listStyle: \"none\",\r\n          p: 0.5,\r\n          my: 1,\r\n        }}\r\n        component=\"ul\"\r\n      >\r\n        {routineDisplays}\r\n      </Paper>\r\n      <Paper variant=\"outlined\" sx={{ my: 1, p: 1 }}>\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={12} sm={6} md={12} lg={6}>\r\n            <FormControl fullWidth>\r\n              <InputLabel id=\"select-routine-label\">Select Routine</InputLabel>\r\n              <Select\r\n                labelId=\"select-routine-label\"\r\n                id=\"select-routine\"\r\n                value={selectedRoutine}\r\n                label=\"Select Routine\"\r\n                onChange={(e) => dispatch(setRoutine(e.target.value))}\r\n              >\r\n                {routineOptions}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            container\r\n            xs={6}\r\n            sm={3}\r\n            md={6}\r\n            lg={3}\r\n            justifyContent=\"center\"\r\n          >\r\n            <Button\r\n              variant=\"contained\"\r\n              onClick={() => dispatch(routineCreated({ copy: false }))}\r\n            >\r\n              Create New Routine\r\n            </Button>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            container\r\n            xs={6}\r\n            sm={3}\r\n            md={6}\r\n            lg={3}\r\n            justifyContent=\"center\"\r\n          >\r\n            <Button\r\n              variant=\"outlined\"\r\n              onClick={() => dispatch(routineCreated({ copy: true }))}\r\n            >\r\n              Copy Selected Routine\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Routines;\r\n","const fighterGs2 = `{\"id\":1,\"name\":\"Greatsword Fighter 2 strikes\",\"display\":true,\"apIds\":[{\"id\":0,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Fighter Weapon (1, 5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"AC\",\"targetInfoId\":0,\"damages\":[{\"id\":3,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":12,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Fighter Weapon Specialization\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":4,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[{\"id\":1,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[{\"id\":1,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Fighter Weapon (1, 5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-5 (1x-5)\",\"targetType\":\"AC\",\"targetInfoId\":0,\"damages\":[{\"id\":5,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":12,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Fighter Weapon Specialization\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":6,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[{\"id\":2,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[]}]}],\"levelDiff\":0,\"description\":\"A simple Fighter making 2 strikes with a greatsword. 1d6 damage runes at 8 and 15. Crit specialization at 5.\",\"startLevel\":1,\"endLevel\":20}`;\r\nconst pickdouble = `{\"id\":3,\"name\":\"Pick Fighter Double Slice\",\"display\":false,\"apIds\":[{\"id\":3,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Fighter Weapon (1, 5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"AC\",\"targetInfoId\":0,\"damages\":[{\"id\":8,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":true,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Fighter Weapon Specialization\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"piercing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":9,\"damageCondition\":\"On Crit\",\"dieTrend\":\"None\",\"dieAdjustments\":{\"1\":1,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"16\":1,\"17\":1,\"18\":1,\"19\":1,\"20\":1},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":4,\"6\":4,\"7\":4,\"8\":4,\"9\":4,\"10\":4,\"11\":4,\"12\":6,\"13\":6,\"14\":6,\"15\":6,\"16\":6,\"17\":6,\"18\":6,\"19\":8,\"20\":8},\"damageType\":\"piercing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":10,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[],\"apIds\":[]},{\"id\":4,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Fighter Weapon (1, 5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-4)\",\"targetType\":\"AC\",\"targetInfoId\":0,\"damages\":[{\"id\":11,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":4,\"fatal\":true,\"fatalDie\":8,\"damageTrend\":[\"18 to 24 apex(17)\",\"Fighter Weapon Specialization\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"piercing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":12,\"damageCondition\":\"On Crit\",\"dieTrend\":\"None\",\"dieAdjustments\":{\"1\":1,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"16\":1,\"17\":1,\"18\":1,\"19\":1,\"20\":1},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":4,\"6\":4,\"7\":4,\"8\":4,\"9\":4,\"10\":4,\"11\":4,\"12\":6,\"13\":6,\"14\":6,\"15\":6,\"16\":6,\"17\":6,\"18\":6,\"19\":8,\"20\":8},\"damageType\":\"piercing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":13,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[],\"apIds\":[]}],\"levelDiff\":0,\"description\":\"A Fighter using Double Slice with a pick and a light pick. 1d6 damage runes at 8 and 15. Crit specialization at 5.\",\"startLevel\":1,\"endLevel\":20}`;\r\nconst fireball = `{\"id\":2,\"name\":\"Fireball\",\"display\":true,\"apIds\":[{\"id\":2,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Save\",\"profTrend\":\"Caster Spell (7, 15, 19)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"None\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"Ref\",\"targetInfoId\":0,\"damages\":[{\"id\":7,\"damageCondition\":\"Basic save\",\"dieTrend\":\"2 x Spell Level\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[],\"apIds\":[]}],\"levelDiff\":0,\"description\":\"A 2d6 / spell level basic reflex save.\",\"startLevel\":1,\"endLevel\":20}`;\r\nconst thaum2strikes = `{\"id\":101,\"name\":\"Thaumaturge 2 strikes\",\"display\":false,\"apIds\":[{\"id\":1002,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"16 to 22 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1004,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"16 to 22 apex(17)\",\"Martial Weapon Specializaton\",\"Implement's Empowerment\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1005,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1006,\"damageCondition\":\"Success or better\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"None\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"1/2 Level\"],\"damageAdjustments\":{\"1\":2,\"2\":2,\"3\":2,\"4\":2,\"5\":2,\"6\":2,\"7\":2,\"8\":2,\"9\":2,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2}}],\"effects\":[{\"id\":1002,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[{\"id\":1001,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"16 to 22 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-5 (1x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1001,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"16 to 22 apex(17)\",\"Martial Weapon Specializaton\",\"Implement's Empowerment\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1002,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1003,\"damageCondition\":\"Success or better\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"None\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"1/2 Level\"],\"damageAdjustments\":{\"1\":2,\"2\":2,\"3\":2,\"4\":2,\"5\":2,\"6\":2,\"7\":2,\"8\":2,\"9\":2,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2}}],\"effects\":[{\"id\":1001,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[]}]}],\"levelDiff\":0,\"description\":\"A playtest Thaumaturge making 2 strikes with a longsword. 1d6 damage runes at 8 and 15. Critical specialization at 5 from weapon implement. After they succeeded in giving the target a 1/2 level +2 weakness.\",\"startLevel\":1,\"endLevel\":20}`;\r\nconst disintigrate = `{\"id\":102,\"name\":\"Disintigrate\",\"display\":false,\"apIds\":[{\"id\":1003,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Caster Spell (7, 15, 19)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"None\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"AC\",\"damages\":[],\"effects\":[],\"apIds\":[{\"id\":1004,\"condition\":\"On Crit\",\"rollType\":\"Normal\",\"type\":\"Save\",\"profTrend\":\"Caster Spell (7, 15, 19)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"None\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"Fort\",\"damages\":[{\"id\":1009,\"damageCondition\":\"On Failure\",\"dieTrend\":\"2 x Spell Level\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"None\",\"material\":\"none\",\"persistent\":false,\"multiplier\":2},{\"id\":1010,\"damageCondition\":\"On Success\",\"damageType\":\"None\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"2 x Spell Level\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1011,\"damageCondition\":\"On Crit\",\"damageType\":\"None\",\"material\":\"none\",\"persistent\":false,\"multiplier\":0.5,\"dieTrend\":\"2 x Spell Level\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[]},{\"id\":1005,\"condition\":\"On Success\",\"rollType\":\"Normal\",\"type\":\"Save\",\"profTrend\":\"Caster Spell (7, 15, 19)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"None\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"Fort\",\"damages\":[{\"id\":1012,\"damageCondition\":\"Basic save\",\"dieTrend\":\"2 x Spell Level\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"None\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[],\"apIds\":[]}]}],\"levelDiff\":0,\"description\":\"If the spell attack crits then the save is one degree worse example. \",\"startLevel\":11,\"endLevel\":20}`;\r\nconst giantBarb3 = `{\"id\":103,\"name\":\"Giant Barbarian 3 Strikes\",\"display\":false,\"apIds\":[{\"id\":1006,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1011,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":12,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\",\"Giant Rage\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1012,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[{\"id\":1003,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[{\"id\":1007,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-5 (1x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1013,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":12,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\",\"Giant Rage\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1014,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[{\"id\":1004,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[{\"id\":1009,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1017,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":12,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\",\"Giant Rage\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1018,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[{\"id\":1006,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[]}]}]}],\"levelDiff\":0,\"description\":\"A Barbarian making 3 strikes with a greatsword. 1d6 damage runes at 8 and 15. Crit specialization at 5.\",\"startLevel\":1,\"endLevel\":20}`;\r\nconst flurryRanger4 = `{\"id\":104,\"name\":\"Melee Flurry Ranger 4 strikes\",\"display\":false,\"apIds\":[{\"id\":1009,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":1,\"18\":1,\"19\":1,\"20\":1},\"MAP\":\"0 (0x-3)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1017,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1018,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[{\"id\":1006,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[{\"id\":1010,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":1,\"18\":1,\"19\":1,\"20\":1},\"MAP\":\"-2 (1x-2)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1019,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1020,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[{\"id\":1007,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[{\"id\":1011,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"MAP\":\"-4 (2x-2)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1021,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1022,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[{\"id\":1008,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[{\"id\":1012,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"MAP\":\"-4 (2x-2)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1023,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1024,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[{\"id\":1009,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[]}]}]}]}],\"levelDiff\":0,\"description\":\"A longsword shortsword ranger with flurry edge making an attack with a longsword, then 3 shortsword attacks. improvement at 17 included. Crit spec at 5. \",\"startLevel\":1,\"endLevel\":20}`;\r\nconst doubleSliceRogue = `{\"id\":105,\"name\":\"Rogue Double Slice Sneak Attack\",\"display\":false,\"apIds\":[{\"id\":1013,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1025,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1026,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1028,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[{\"id\":1010,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[{\"id\":1014,\"condition\":\"On Crit\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-4)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1029,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1030,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1032,\"damageCondition\":\"Always\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":2,\"dieTrend\":\"Sneak Attack (1, 5, 11, 17)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[{\"id\":1011,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[]},{\"id\":1015,\"condition\":\"On Success\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-4)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1033,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1034,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1036,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":2,\"dieTrend\":\"Sneak Attack (1, 5, 11, 17)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1037,\"damageCondition\":\"Success or worse\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Sneak Attack (1, 5, 11, 17)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[{\"id\":1012,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[]},{\"id\":1016,\"condition\":\"Failure or worse\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-4)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1038,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1039,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1041,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Sneak Attack (1, 5, 11, 17)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[{\"id\":1013,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[]}]}],\"levelDiff\":0,\"description\":\"Using double slice on a Rogue. Only applying sneak attack damage to at most one attack. rapier and shortsword. Crit Spec at 5.\",\"startLevel\":1,\"endLevel\":20}`;\r\nconst rogue2strikes = `{\"id\":106,\"name\":\"Rogue 2 Strikes Sneak Attack\",\"display\":false,\"apIds\":[{\"id\":1017,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1038,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1039,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1040,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1044,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Sneak Attack (1, 5, 11, 17)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[{\"id\":1014,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[{\"id\":1018,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-4 (1x-4)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1041,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1042,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1045,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Sneak Attack (1, 5, 11, 17)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[{\"id\":1015,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[]}]}],\"levelDiff\":0,\"description\":\"Two strikes with sneak attack applied. \",\"startLevel\":1,\"endLevel\":20}`;\r\nconst preRanger4bow = `{\"id\":107,\"name\":\"Precision Ranger Shortbow 4 Strikes\",\"display\":false,\"apIds\":[{\"id\":1019,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1045,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1046,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1047,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1048,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 1(1, 11, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[{\"id\":1020,\"condition\":\"Success or better\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-5 (1x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1049,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1050,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1051,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1052,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 2(17, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[{\"id\":1022,\"condition\":\"Success or better\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1057,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1058,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1059,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1060,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 3(19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[{\"id\":1024,\"condition\":\"Success or better\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1065,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1066,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1067,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[]},{\"id\":1025,\"condition\":\"Failure or worse\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1069,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1070,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1071,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1072,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 3(19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[]}]},{\"id\":1023,\"condition\":\"Failure or worse\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1061,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1062,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1063,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1064,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 2(17, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[{\"id\":1026,\"condition\":\"Success or better\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1073,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1074,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1075,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1076,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 3(19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[]},{\"id\":1027,\"condition\":\"Failure or worse\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1077,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1078,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1079,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1080,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 2(17, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[]}]}]},{\"id\":1021,\"condition\":\"Failure or worse\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-5 (1x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1053,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1054,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1055,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1056,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 1(1, 11, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[{\"id\":1029,\"condition\":\"Success or better\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1085,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1086,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1087,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1088,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 2(17, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[{\"id\":1031,\"condition\":\"Success or better\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1093,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1094,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1095,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1096,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 3(19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[]},{\"id\":1032,\"condition\":\"Failure or worse\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1097,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1098,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1099,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1100,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 2(17, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[]}]},{\"id\":1030,\"condition\":\"Failure or worse\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1089,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1090,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1091,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1092,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 1(1, 11, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[{\"id\":1033,\"condition\":\"Success or better\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1101,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1102,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1103,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1104,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 2(17, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[]},{\"id\":1034,\"condition\":\"Failure or worse\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1105,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1106,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1107,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1108,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 1(1, 11, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[]}]}]}]}],\"levelDiff\":0,\"description\":\"4 Strikes for a Ranger with Precision Edge using a shortbow. Composite bow at 2. Str 14 boosted to 18 at 10. Runes at 8 and 15. \",\"startLevel\":1,\"endLevel\":20}`;\r\nconst preRanger2bow = `{\"id\":107,\"name\":\"Precision Ranger Shortbow 2 Strikes\",\"display\":false,\"apIds\":[{\"id\":1033,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1100,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1101,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1102,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1103,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 1(1, 11, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[{\"id\":1025,\"condition\":\"Success or better\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-5 (1x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1068,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1069,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1070,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1071,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 2(17, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[]},{\"id\":1032,\"condition\":\"Failure or worse\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-5 (1x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1096,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1097,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1098,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1099,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 1(1, 11, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[]}]}],\"levelDiff\":0,\"description\":\"2 Strikes for a Ranger with Precision Edge using a shortbow. Composite bow at 2. Str 14 boosted to 18 at 10. Runes at 8 and 15. \",\"startLevel\":1,\"endLevel\":20}`;\r\n\r\nexport const exampleRoutines = [\r\n  fighterGs2,\r\n  pickdouble,\r\n  fireball,\r\n  thaum2strikes,\r\n  disintigrate,\r\n  giantBarb3,\r\n  flurryRanger4,\r\n  doubleSliceRogue,\r\n  rogue2strikes,\r\n  preRanger4bow,\r\n  preRanger2bow,\r\n];\r\n","import { Button, Grid, Paper, TextField, Typography } from \"@mui/material\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../App/hooks\";\r\nimport { exampleRoutines } from \"../Model/exampleRoutines\";\r\nimport { importStates } from \"../Model/types\";\r\nimport {\r\n  importRoutine,\r\n  selectImportState,\r\n  selectSelectedRoutineObject,\r\n} from \"../Routines/RoutineSlice/routineSlice\";\r\n// import { useSelector } from \"react-redux\";\r\n\r\n/* TODO: \r\n  Convert to mui\r\n  Add save routines button\r\n  Add load example routines button\r\n*/\r\nconst ImportExport = () => {\r\n  const routine = useAppSelector(selectSelectedRoutineObject);\r\n  const importState = useAppSelector(selectImportState);\r\n  // const textAreaRef: RefObject<HTMLTextAreaElement> = useRef(null);\r\n  const [textValue, setTextValue] = useState(\"\");\r\n  const dispatch = useAppDispatch();\r\n  useEffect(() => {\r\n    if (importState === importStates.Failure) {\r\n      setTextValue(\"Import failed\");\r\n    } else if (importState === importStates.Successful) {\r\n      setTextValue(\"Import successful\");\r\n    }\r\n  }, [importState]);\r\n\r\n  const tryToAddRoutine = () => {\r\n    dispatch(importRoutine(textValue));\r\n  };\r\n  const paste = () => {\r\n    setTextValue(JSON.stringify(routine));\r\n  };\r\n\r\n  //   const saveRoutines = () => {try {\r\n  //       const serialState = JSON.stringify(state);\r\n  //       localStorage.setItem('appState', serialState);\r\n  //     } catch(err) {\r\n  //         console.log(err);\r\n  //     }\r\n  // };\r\n  // const loadSavedRoutines = () => {};\r\n  const addExampleRoutines = () => {\r\n    for (let r of exampleRoutines) {\r\n      dispatch(importRoutine(r));\r\n    }\r\n  };\r\n  // const copy = () => {\r\n  //   if (textAreaRef.current) {\r\n  //     textAreaRef.current.select();\r\n  //     textAreaRef!.current.setSelectionRange(0, 99999); /* For mobile devices */\r\n  //     navigator.clipboard.writeText(textAreaRef.current.value);\r\n  //     // document.execCommand(\"copy\");\r\n  //   }\r\n  // };\r\n  return (\r\n    <Paper sx={{ p: 1 }}>\r\n      <Typography variant=\"h5\">Import and Export Here:</Typography>\r\n      <Grid container>\r\n        <Grid item>\r\n          <Button onClick={tryToAddRoutine}>Import</Button>\r\n        </Grid>\r\n        <Grid item>\r\n          <Button onClick={paste}>Export</Button>\r\n        </Grid>\r\n        {/* <Grid item>\r\n          <Button onClick={saveRoutines}>Save Routines</Button>\r\n        </Grid> */}\r\n        {/* <Grid item>\r\n          <Button onClick={loadSavedRoutines}>Load Saved Routines</Button>\r\n        </Grid> */}\r\n        <Grid item>\r\n          <Button onClick={addExampleRoutines}>Add example Routines</Button>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            fullWidth\r\n            multiline\r\n            label=\"Routine code\"\r\n            placeholder=\"Enter routine code here to import.\"\r\n            value={textValue}\r\n            onChange={(e) => setTextValue(e.target.value)}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default ImportExport;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  FormControl,\r\n  Select,\r\n  InputLabel,\r\n  TextField,\r\n  Grid,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { ActionCreatorWithPayload } from \"@reduxjs/toolkit\";\r\n\r\nimport { Dispatch } from \"redux\";\r\nimport { levelOptions } from \"../../Model/options\";\r\nimport { Adjustment } from \"../RoutineSlice/RoutineTypes\";\r\nimport { ArrowRight } from \"@mui/icons-material\";\r\n\r\ntype Adjustments = {\r\n  [level: number]: number;\r\n};\r\ntype Entry = [number, string];\r\n\r\nexport const generateEntries = (adjustments: Adjustments) => {\r\n  let currentValue = 0;\r\n  const entries: Entry[] = [];\r\n  for (let level = 1; level <= 20; level++) {\r\n    if (currentValue !== adjustments[level]) {\r\n      entries.push([level, (adjustments[level] - currentValue).toString()]);\r\n      currentValue = adjustments[level];\r\n    }\r\n  }\r\n  return entries;\r\n};\r\n\r\nconst generateAdjustments = (entries: Entry[]) => {\r\n  const adjustments: Adjustments = {};\r\n  let currentValue = 0;\r\n  let total = 0;\r\n  let currentIndex = 0;\r\n  // console.log(entries);\r\n  for (let level = 1; level <= 20; level++) {\r\n    if (entries[currentIndex] && entries[currentIndex][0] === level) {\r\n      // console.log(\"here\");\r\n      currentValue = parseInt(entries[currentIndex][1]);\r\n      if (!currentValue) currentValue = 0;\r\n      currentIndex++;\r\n      total += currentValue;\r\n    }\r\n    adjustments[level] = total;\r\n  }\r\n  return adjustments;\r\n};\r\n\r\nexport const adjustmentsFromLevelChange = (\r\n  entries: Entry[],\r\n  index: number,\r\n  newLevel: number\r\n) => {\r\n  entries[index] = [newLevel, entries[index][1]];\r\n  entries.sort((a, b) => a[0] - b[0]);\r\n  return generateAdjustments(entries);\r\n};\r\n\r\nexport const adjustmentsFromValueChange = (\r\n  entries: Entry[],\r\n  index: number,\r\n  newValue: string\r\n) => {\r\n  entries[index] = [entries[index][0], newValue];\r\n  return generateAdjustments(entries);\r\n};\r\n\r\nexport const adjustmentsFromNewEntry = (entries: Entry[]) => {\r\n  let lastValue: Entry =\r\n    entries.length > 0 ? entries[entries.length - 1] : [0, \"0\"];\r\n  entries.push([lastValue[0] + 1, (0).toString()]);\r\n  return generateAdjustments(entries);\r\n};\r\n\r\nexport const LevelList = (\r\n  name: string,\r\n  dispatch: Dispatch<any>,\r\n  action: ActionCreatorWithPayload<any, string>,\r\n  id: number,\r\n  adjustments: Adjustment\r\n) => {\r\n  const baseEntries = generateEntries(adjustments);\r\n  let [entries, setEntries] = useState(baseEntries);\r\n  let be = JSON.stringify(baseEntries);\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  useEffect(() => setEntries(baseEntries), [be]);\r\n  let levelList = [];\r\n\r\n  for (let i = 0; i < entries.length; i++) {\r\n    levelList.push(\r\n      <Grid item key={i}>\r\n        <FormControl size=\"small\">\r\n          <InputLabel>Level</InputLabel>\r\n          <Select\r\n            label=\"Level\"\r\n            value={entries[i][0]}\r\n            onChange={(e) =>\r\n              dispatch(\r\n                action({\r\n                  id,\r\n                  changes: {\r\n                    [name]: adjustmentsFromLevelChange(\r\n                      entries,\r\n                      i,\r\n                      Number(e.target.value)\r\n                    ),\r\n                  },\r\n                })\r\n              )\r\n            }\r\n          >\r\n            {levelOptions}\r\n          </Select>\r\n        </FormControl>\r\n        <TextField\r\n          size=\"small\"\r\n          label=\"Bonus\"\r\n          sx={{ width: \"7ch\" }}\r\n          value={entries[i][1]}\r\n          onChange={(e) => {\r\n            let newEntries = entries.slice();\r\n            newEntries[i] = [newEntries[i][0], e.target.value];\r\n            setEntries(newEntries);\r\n            e.target.focus();\r\n          }}\r\n          onBlur={() => {\r\n            let newEntries = entries.slice();\r\n            for (let ni = 0; ni < entries.length; ni++) {\r\n              newEntries[ni] = [\r\n                newEntries[ni][0],\r\n                parseInt(newEntries[ni][1]).toString(),\r\n              ];\r\n            }\r\n            setEntries(newEntries);\r\n            dispatch(\r\n              action({\r\n                id,\r\n                changes: {\r\n                  [name]: generateAdjustments(entries),\r\n                },\r\n              })\r\n            );\r\n          }}\r\n        />\r\n        {/* <input\r\n          type=\"number\"\r\n          value={entries[i][1]}\r\n          onChange={(e) => {\r\n            let newEntries = entries.slice();\r\n            newEntries[i][1] = e.target.value;\r\n            setEntries(newEntries);\r\n            e.target.focus();\r\n          }}\r\n          onBlur={(e) =>\r\n            dispatch(\r\n              action({\r\n                id,\r\n                changes: {\r\n                  [name]: generateAdjustments(entries),\r\n                },\r\n              })\r\n            )\r\n          }\r\n        /> */}\r\n      </Grid>\r\n    );\r\n  }\r\n  levelList.push(\r\n    <Grid item key=\"addButton\">\r\n      <IconButton\r\n        color=\"primary\"\r\n        aria-label=\"Add button\"\r\n        onClick={() =>\r\n          dispatch(\r\n            action({\r\n              id,\r\n              changes: {\r\n                [name]: adjustmentsFromNewEntry(entries),\r\n              },\r\n            })\r\n          )\r\n        }\r\n      >\r\n        <AddIcon />\r\n      </IconButton>\r\n    </Grid>\r\n  );\r\n  return levelList;\r\n};\r\n","import React from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../../App/hooks\";\r\nimport { LevelList } from \"./LevelList\";\r\nimport {\r\n  damageRemoved,\r\n  damageUpdated,\r\n  selectdamageById,\r\n} from \"../RoutineSlice/routineSlice\";\r\nimport {\r\n  damageConditionOptions,\r\n  damageTrendOptions,\r\n  damageTypeOptions,\r\n  diceSizeOptions,\r\n  dieTrendOptions,\r\n  makeOptions,\r\n  materialOptions,\r\n  multiplierOptions,\r\n} from \"../../Model/options\";\r\nimport { DamageTrend, damageTrends, whenConditions } from \"../../Model/types\";\r\nimport { RootState } from \"../../App/store\";\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  FormControl,\r\n  FormControlLabel,\r\n  Grid,\r\n  IconButton,\r\n  InputLabel,\r\n  makeStyles,\r\n  Select,\r\n  Switch,\r\n} from \"@mui/material\";\r\nimport Divider from \"@mui/material/Divider\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport { Box } from \"@mui/system\";\r\n\r\n// const useStyles = makeStyles({\r\n//   transition: theme.transitions.create([\"background\", \"background-color\"], {\r\n//     duration: theme.transitions.duration.complex,\r\n//   }),\r\n//   \"&:hover\": {\r\n//     backgroundColor: \"#BBB\",\r\n//   },\r\n// });\r\nexport const Damage = ({ parentId, id }: { parentId: number; id: number }) => {\r\n  const {\r\n    damageCondition,\r\n    damageType,\r\n    material,\r\n    persistent,\r\n    multiplier,\r\n    damageWhen,\r\n\r\n    dieTrend,\r\n    dieAdjustments,\r\n    diceSize,\r\n    fatal,\r\n    fatalDie,\r\n    damageTrend,\r\n    damageAdjustments,\r\n  } = useAppSelector((state: RootState) => selectdamageById(state, id)!);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const dieLevelList = LevelList(\r\n    \"dieAdjustments\",\r\n    dispatch,\r\n    damageUpdated,\r\n    id,\r\n    dieAdjustments\r\n  );\r\n\r\n  const damageLevelList = LevelList(\r\n    \"damageAdjustments\",\r\n    dispatch,\r\n    damageUpdated,\r\n    id,\r\n    damageAdjustments\r\n  );\r\n\r\n  const damageTrendList = damageTrend.map((dt, index) => {\r\n    return (\r\n      <Grid item key={index}>\r\n        <Select\r\n          // no stable id\r\n          size=\"small\"\r\n          value={dt}\r\n          onChange={(e) => {\r\n            let newdt = damageTrend.slice();\r\n            if (e.target.value === damageTrends.NONE) {\r\n              newdt.splice(index, 1);\r\n            } else {\r\n              newdt[index] = e.target.value as DamageTrend;\r\n            }\r\n            dispatch(\r\n              damageUpdated({\r\n                id,\r\n                changes: { damageTrend: newdt },\r\n              })\r\n            );\r\n          }}\r\n        >\r\n          {damageTrendOptions}\r\n        </Select>\r\n      </Grid>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        mt: 3,\r\n        mb: 6,\r\n      }}\r\n    >\r\n      <Divider textAlign=\"left\" sx={{ mt: 1, mb: 1 }}></Divider>\r\n      <Grid container spacing={{ xs: 1, sm: 2 }} sx={{ my: 0 }}>\r\n        <Grid item xs=\"auto\">\r\n          <IconButton\r\n            color=\"primary\"\r\n            size=\"small\"\r\n            onClick={(e) => {\r\n              dispatch(damageRemoved({ id, parentId }));\r\n            }}\r\n          >\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </Grid>\r\n\r\n        <Grid item xs>\r\n          <FormControl size=\"small\" fullWidth>\r\n            <InputLabel id=\"damage-condition-input\">Condition</InputLabel>\r\n            <Select\r\n              labelId=\"damage-condition-input\"\r\n              id=\"damage-condition\"\r\n              value={damageCondition}\r\n              label=\"Condition\"\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  damageUpdated({\r\n                    id,\r\n                    changes: { damageCondition: e.target.value },\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              {damageConditionOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        {/* </Grid>\r\n      <Grid container spacing={{ xs: 1, sm: 2 }}> */}\r\n        <Grid item>\r\n          <FormControl size=\"small\">\r\n            <InputLabel id=\"damage-multiplier-input\">Multiplier</InputLabel>\r\n            <Select\r\n              labelId=\"damage-multiplier-input\"\r\n              id=\"damage-multiplier\"\r\n              value={multiplier}\r\n              label=\"Multiplier\"\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  damageUpdated({\r\n                    id,\r\n                    changes: { multiplier: Number(e.target.value) },\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              {multiplierOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item>\r\n          <FormControl size=\"small\">\r\n            <InputLabel id=\"damage-type-input\">Type</InputLabel>\r\n            <Select\r\n              labelId=\"damage-type-input\"\r\n              id=\"damage-type\"\r\n              value={damageType}\r\n              label=\"Type\"\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  damageUpdated({\r\n                    id,\r\n                    changes: { damageType: e.target.value },\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              {damageTypeOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item>\r\n          <FormControl size=\"small\">\r\n            <InputLabel id=\"damage-material-input\">Material</InputLabel>\r\n            <Select\r\n              labelId=\"damage-material-input\"\r\n              id=\"damage-material\"\r\n              value={material}\r\n              label=\"Material\"\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  damageUpdated({\r\n                    id,\r\n                    changes: { material: e.target.value },\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              {materialOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item>\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                checked={persistent}\r\n                onChange={(e) =>\r\n                  dispatch(\r\n                    damageUpdated({\r\n                      id,\r\n                      changes: { persistent: e.target.checked },\r\n                    })\r\n                  )\r\n                }\r\n              />\r\n            }\r\n            label=\"Persistent\"\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <FormControl size=\"small\">\r\n            <InputLabel id=\"damage-when-input\">When Target</InputLabel>\r\n            <Select\r\n              labelId=\"damage-when-input\"\r\n              id=\"damage-when\"\r\n              multiple\r\n              value={damageWhen}\r\n              label=\"When Target\"\r\n              renderValue={(selected) => selected.join(\" or \")}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  damageUpdated({\r\n                    id,\r\n                    changes: { damageWhen: e.target.value },\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              {makeOptions(whenConditions)}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n      </Grid>\r\n      <Divider textAlign=\"left\" sx={{ mt: 1, mb: 1 }}>\r\n        Dice\r\n      </Divider>\r\n      <Grid container spacing={{ xs: 1, sm: 2 }}>\r\n        <Grid item>\r\n          <FormControl size=\"small\">\r\n            <InputLabel id=\"dice-input\">Damage Dice</InputLabel>\r\n            <Select\r\n              labelId=\"dice-input\"\r\n              id=\"dice\"\r\n              value={dieTrend}\r\n              label=\"Damage Dice\"\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  damageUpdated({\r\n                    id,\r\n                    changes: { dieTrend: e.target.value },\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              {dieTrendOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        {dieLevelList}\r\n        <Grid item>\r\n          <FormControl size=\"small\">\r\n            <InputLabel id=\"dice-size-input\">Die Size</InputLabel>\r\n            <Select\r\n              labelId=\"dice-size-input\"\r\n              id=\"dice-size\"\r\n              value={diceSize}\r\n              label=\"Die Size\"\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  damageUpdated({\r\n                    id,\r\n                    changes: { diceSize: e.target.value },\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              {diceSizeOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item>\r\n          <FormControlLabel\r\n            control={\r\n              <Switch\r\n                checked={fatal}\r\n                onChange={(e) =>\r\n                  dispatch(\r\n                    damageUpdated({\r\n                      id,\r\n                      changes: { fatal: e.target.checked },\r\n                    })\r\n                  )\r\n                }\r\n              />\r\n            }\r\n            label=\"On Crit Die\"\r\n          />\r\n        </Grid>\r\n        {fatal ? (\r\n          <Grid item>\r\n            <FormControl size=\"small\">\r\n              <InputLabel id=\"fatal-size-input\">Die Size</InputLabel>\r\n              <Select\r\n                labelId=\"fatal-size-input\"\r\n                id=\"fatal-size\"\r\n                value={fatalDie}\r\n                label=\"Die Size\"\r\n                onChange={(e) =>\r\n                  dispatch(\r\n                    damageUpdated({\r\n                      id,\r\n                      changes: { fatalDie: e.target.value },\r\n                    })\r\n                  )\r\n                }\r\n              >\r\n                {diceSizeOptions}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </Grid>\r\n      <Divider textAlign=\"left\" sx={{ mt: 1, mb: 1 }}>\r\n        Static Damage\r\n      </Divider>\r\n      <Grid container spacing={{ xs: 1, sm: 2 }}>\r\n        {damageTrendList}\r\n        <Grid item>\r\n          <Button\r\n            onClick={() => {\r\n              let newdt = damageTrend.slice();\r\n              newdt.push(damageTrends.NONE);\r\n              dispatch(\r\n                damageUpdated({\r\n                  id,\r\n                  changes: {\r\n                    damageTrend: newdt,\r\n                  },\r\n                })\r\n              );\r\n            }}\r\n          >\r\n            Add damage scaling\r\n          </Button>\r\n        </Grid>\r\n        {damageLevelList}\r\n      </Grid>\r\n      <Divider textAlign=\"left\" sx={{ mt: 1, mb: 1 }}></Divider>\r\n    </Box>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../../App/hooks\";\r\n\r\nimport {\r\n  FormControl,\r\n  Grid,\r\n  IconButton,\r\n  InputLabel,\r\n  Select,\r\n  Slider,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\n\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport { Box } from \"@mui/system\";\r\n\r\nimport { conditionOptions, effectTypeOptions } from \"../../Model/options\";\r\nimport { RootState } from \"../../App/store\";\r\nimport {\r\n  effectRemoved,\r\n  effectUpdated,\r\n  selecteffectById,\r\n} from \"../RoutineSlice/routineSlice\";\r\nimport { effectValueTypes } from \"../../Model/types\";\r\n\r\nexport const Effect = ({ parentId, id }: { parentId: number; id: number }) => {\r\n  const { effectCondition, effectType, effectValue, startLevel, endLevel } =\r\n    useAppSelector((state: RootState) => selecteffectById(state, id)!);\r\n  const dispatch = useAppDispatch();\r\n  let [value, setValue] = useState(effectValue ? effectValue.toString() : \"0\");\r\n  let [validLevels, setValidLevels] = useState([startLevel, endLevel]);\r\n  useEffect(\r\n    () => setValidLevels([startLevel, endLevel]),\r\n    [startLevel, endLevel]\r\n  );\r\n\r\n  return (\r\n    <Box sx={{ mt: 3, mb: 6 }}>\r\n      <Grid container spacing={{ xs: 1, sm: 2 }} sx={{ my: 0 }}>\r\n        <Grid item xs=\"auto\">\r\n          <IconButton\r\n            aria-label=\"delete\"\r\n            color=\"primary\"\r\n            onClick={(e) => {\r\n              dispatch(effectRemoved({ id, parentId }));\r\n            }}\r\n          >\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </Grid>\r\n        <Grid item>\r\n          <FormControl size=\"small\" fullWidth>\r\n            <InputLabel id=\"effect-condition-input\">Condition</InputLabel>\r\n            <Select\r\n              labelId=\"effect-condition-input\"\r\n              id=\"effect-condition\"\r\n              value={effectCondition}\r\n              label=\"Condition\"\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  effectUpdated({\r\n                    id,\r\n                    changes: { effectCondition: e.target.value },\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              {conditionOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item>\r\n          <FormControl size=\"small\" fullWidth>\r\n            <InputLabel id=\"effect-type-input\">Effect</InputLabel>\r\n            <Select\r\n              labelId=\"effect-type-input\"\r\n              id=\"effect-type\"\r\n              value={effectType}\r\n              label=\"Effect\"\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  effectUpdated({\r\n                    id,\r\n                    changes: { effectType: e.target.value },\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              {effectTypeOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n\r\n        {\r\n          // @ts-ignore\r\n          Object.values(effectValueTypes).includes(effectType) ? (\r\n            <Grid item>\r\n              <TextField\r\n                size=\"small\"\r\n                label=\"Value\"\r\n                sx={{ width: \"7ch\" }}\r\n                value={value}\r\n                onChange={(e) => {\r\n                  setValue(e.target.value);\r\n                  e.target.focus();\r\n                }}\r\n                onBlur={() => {\r\n                  let newVal = parseInt(value);\r\n                  setValue(newVal.toString());\r\n                  dispatch(\r\n                    effectUpdated({\r\n                      id,\r\n                      changes: {\r\n                        effectValue: newVal,\r\n                      },\r\n                    })\r\n                  );\r\n                }}\r\n              />\r\n            </Grid>\r\n          ) : (\r\n            \"\"\r\n          )\r\n        }\r\n\r\n        <Grid item sx={{ px: 2 }}>\r\n          <Typography align=\"center\">\r\n            Valid Levels: {startLevel} to {endLevel}\r\n          </Typography>\r\n          <Slider\r\n            size=\"small\"\r\n            getAriaLabel={() => \"Valid levels\"}\r\n            value={validLevels}\r\n            min={1}\r\n            max={20}\r\n            marks\r\n            // @ts-ignore\r\n            onChange={(e, nv: number[]) => setValidLevels(nv)}\r\n            onBlur={() =>\r\n              dispatch(\r\n                effectUpdated({\r\n                  id,\r\n                  changes: {\r\n                    startLevel: validLevels[0],\r\n                    endLevel: validLevels[1],\r\n                  },\r\n                })\r\n              )\r\n            }\r\n            valueLabelDisplay=\"auto\"\r\n            getAriaValueText={(v) => `${v}`}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../../App/hooks\";\r\n\r\nimport { LevelList } from \"./LevelList\";\r\nimport {\r\n  activityPathContinued,\r\n  damageCreated,\r\n  setNewActivityParent,\r\n} from \"../RoutineSlice/routineSlice\";\r\nimport {\r\n  activityTypeOptions,\r\n  profTrendOptions,\r\n  conditionOptions,\r\n  defenseOptions,\r\n  MAPOptions,\r\n  rollOptions,\r\n  statTrendOptions,\r\n  itemBTrendOptions,\r\n} from \"../../Model/options\";\r\nimport {\r\n  activityPathRemoved,\r\n  activityPathUpdated,\r\n  selectactivityPathById,\r\n} from \"../RoutineSlice/routineSlice\";\r\nimport { activityTypes } from \"../../Model/types\";\r\nimport { Damage } from \"./Damage\";\r\nimport { Effect } from \"./Effect\";\r\nimport { effectCreated } from \"../RoutineSlice/routineSlice\";\r\nimport { RootState } from \"../../App/store\";\r\nimport {\r\n  Button,\r\n  FormControl,\r\n  Grid,\r\n  InputLabel,\r\n  List,\r\n  ListSubheader,\r\n  Paper,\r\n  Select,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport { ActivityPathStub } from \"../ActivityPathStub\";\r\n\r\nexport const ActivityPath = ({ id }: { id: number }) => {\r\n  const {\r\n    parentId,\r\n    routineId,\r\n    condition,\r\n\r\n    rollType,\r\n    type,\r\n    profTrend,\r\n    statTrend,\r\n    itemTrend,\r\n    bonusAdjustments,\r\n    MAP,\r\n    targetType,\r\n\r\n    damages,\r\n    effects,\r\n    apIds,\r\n  } = useAppSelector((state: RootState) => selectactivityPathById(state, id)!);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const bonusLevelList = LevelList(\r\n    \"bonusAdjustments\",\r\n    dispatch,\r\n    activityPathUpdated,\r\n    id,\r\n    bonusAdjustments\r\n  );\r\n\r\n  return (\r\n    <Paper sx={{ my: 2, p: 1 }}>\r\n      <Grid container spacing={{ xs: 1, sm: 2 }} sx={{ my: 0 }}>\r\n        <Grid item xs=\"auto\">\r\n          <Button\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            startIcon={<DeleteIcon />}\r\n            onClick={(e) => {\r\n              dispatch(activityPathRemoved({ id, parentId, routineId }));\r\n            }}\r\n          >\r\n            Delete\r\n          </Button>\r\n        </Grid>\r\n        {parentId !== undefined ? (\r\n          <Grid item xs>\r\n            <FormControl size=\"small\" fullWidth>\r\n              <InputLabel id=\"condition-input\">Condition</InputLabel>\r\n              <Select\r\n                labelId=\"condition-input\"\r\n                id=\"condition\"\r\n                value={condition}\r\n                label=\"Condition\"\r\n                onChange={(e) =>\r\n                  dispatch(\r\n                    activityPathUpdated({\r\n                      id,\r\n                      changes: { condition: e.target.value },\r\n                    })\r\n                  )\r\n                }\r\n              >\r\n                {conditionOptions}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </Grid>\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        Roll\r\n      </Typography>\r\n      <Grid container spacing={{ xs: 1, sm: 2 }} sx={{ my: 2 }}>\r\n        <Grid item>\r\n          <FormControl size=\"small\">\r\n            <InputLabel id=\"roll-type-input\">Roll Type</InputLabel>\r\n            <Select\r\n              labelId=\"roll-type-input\"\r\n              label=\"Roll Type\"\r\n              value={rollType}\r\n              onChange={(e) => {\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { rollType: e.target.value },\r\n                  })\r\n                );\r\n              }}\r\n            >\r\n              {rollOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item>\r\n          <FormControl size=\"small\">\r\n            <InputLabel id=\"activity-type-input\">Activity Type</InputLabel>\r\n            <Select\r\n              labelId=\"activity-type-input\"\r\n              label=\"Activity Type\"\r\n              value={type}\r\n              onChange={(e) => {\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { type: e.target.value },\r\n                  })\r\n                );\r\n              }}\r\n            >\r\n              {activityTypeOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item>\r\n          <FormControl size=\"small\">\r\n            <InputLabel id=\"proficiency-input\">Proficiency</InputLabel>\r\n            <Select\r\n              labelId=\"proficiency-type-input\"\r\n              label=\"Proficiency\"\r\n              value={profTrend}\r\n              onChange={(e) => {\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { profTrend: e.target.value },\r\n                  })\r\n                );\r\n              }}\r\n            >\r\n              {profTrendOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item>\r\n          <FormControl size=\"small\">\r\n            <InputLabel id=\"ability-score-input\">Ability Score</InputLabel>\r\n            <Select\r\n              labelId=\"ability-score-input\"\r\n              label=\"Ability Score\"\r\n              value={statTrend}\r\n              onChange={(e) => {\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { statTrend: e.target.value },\r\n                  })\r\n                );\r\n              }}\r\n            >\r\n              {statTrendOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item>\r\n          <FormControl size=\"small\">\r\n            <InputLabel id=\"item-bonus-input\">Item Bonus</InputLabel>\r\n            <Select\r\n              labelId=\"item-bonus-input\"\r\n              label=\"Item Bonus\"\r\n              value={itemTrend}\r\n              onChange={(e) => {\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { itemTrend: e.target.value },\r\n                  })\r\n                );\r\n              }}\r\n            >\r\n              {itemBTrendOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        {bonusLevelList}\r\n        {type !== activityTypes.SAVE ? (\r\n          <Grid item>\r\n            <FormControl size=\"small\">\r\n              <InputLabel id=\"MAP-input\">MAP</InputLabel>\r\n              <Select\r\n                labelId=\"MAP-input\"\r\n                label=\"MAP\"\r\n                value={MAP}\r\n                onChange={(e) => {\r\n                  dispatch(\r\n                    activityPathUpdated({\r\n                      id,\r\n                      changes: { MAP: e.target.value },\r\n                    })\r\n                  );\r\n                }}\r\n              >\r\n                {MAPOptions}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <Grid item>\r\n          <FormControl size=\"small\">\r\n            <InputLabel id=\"defense-input\">Target Defense</InputLabel>\r\n            <Select\r\n              labelId=\"defense-input\"\r\n              label=\"Target Defense\"\r\n              value={targetType}\r\n              onChange={(e) => {\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { targetType: e.target.value },\r\n                  })\r\n                );\r\n              }}\r\n            >\r\n              {defenseOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* <List subheader={<ListSubheader>Damages</ListSubheader>}> */}\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        Damages\r\n      </Typography>\r\n      {damages.map((damageId) => (\r\n        <Damage parentId={id} id={damageId} key={damageId} />\r\n      ))}\r\n      {/* </List> */}\r\n      <Button\r\n        sx={{ mb: 3 }}\r\n        variant=\"outlined\"\r\n        size=\"small\"\r\n        onClick={() => dispatch(damageCreated({ parentId: id }))}\r\n      >\r\n        Add Damage\r\n      </Button>\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        Effects\r\n      </Typography>\r\n      {effects.map((effectId) => (\r\n        <Effect parentId={id} id={effectId} key={effectId} />\r\n      ))}\r\n      <Button\r\n        sx={{ mb: 3 }}\r\n        variant=\"outlined\"\r\n        size=\"small\"\r\n        onClick={() => dispatch(effectCreated({ parentId: id }))}\r\n      >\r\n        Add Effect\r\n      </Button>\r\n\r\n      <List subheader={<ListSubheader>Child Activities</ListSubheader>}>\r\n        {apIds.map((apId) => (\r\n          <ActivityPathStub\r\n            key={apId}\r\n            id={apId}\r\n            level={0}\r\n            displayChildren={false}\r\n          />\r\n        ))}\r\n      </List>\r\n\r\n      {type === activityTypes.STRIKE ? (\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            window.location.href = \"#routine-activity-list\";\r\n            dispatch(\r\n              activityPathContinued({\r\n                parentId: id,\r\n              })\r\n            );\r\n          }}\r\n        >\r\n          Continue Attack\r\n        </Button>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <Button\r\n        variant=\"outlined\"\r\n        onClick={(event) => {\r\n          window.location.href = \"#routine-activity-list\";\r\n          dispatch(setNewActivityParent({ parentId: id }));\r\n        }}\r\n      >\r\n        New Child Activity\r\n      </Button>\r\n\r\n      {/* <div className=\"box\">\r\n        {apIds.map((apId) => (\r\n          <ActivityPath id={apId} key={apId} />\r\n        ))}\r\n        <button\r\n          className=\"add\"\r\n          onClick={() =>\r\n            dispatch(\r\n              activityPathCreated({\r\n                parentId: id,\r\n                isStrike: true,\r\n                applyMAP: true,\r\n              })\r\n            )\r\n          }\r\n        >\r\n          + Strike\r\n        </button>\r\n        <button\r\n          className=\"add\"\r\n          onClick={() =>\r\n            dispatch(activityPathCreated({ parentId: id, isStrike: false }))\r\n          }\r\n        >\r\n          + Save\r\n        </button>\r\n      </div> */}\r\n    </Paper>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport { useAppDispatch } from \"../../App/hooks\";\r\nimport {\r\n  Paper,\r\n  Grid,\r\n  Box,\r\n  Typography,\r\n  Select,\r\n  FormControl,\r\n  InputLabel,\r\n  Chip,\r\n  FormControlLabel,\r\n  Switch,\r\n  Slider,\r\n  Button,\r\n} from \"@mui/material\";\r\nimport { diceSizeOptions, makeOptions } from \"../../Model/options\";\r\nimport {\r\n  diceSizes,\r\n  DieTrend,\r\n  dieTrends,\r\n  StatTrend,\r\n  statTrends,\r\n} from \"../../Model/types\";\r\nimport { activityPathCreated } from \"../RoutineSlice/routineSlice\";\r\nimport {\r\n  activityTypes,\r\n  cantrips,\r\n  classActivities,\r\n  classes,\r\n  critSpecs,\r\n  runeTrends,\r\n  StrikeInfo,\r\n  weaponTraits,\r\n} from \"../../Model/newActivityInfo\";\r\n\r\n/*\r\n  get activity type: strike, skill, cantrip, spell\r\n\r\n  if type is strike \r\n    choose class\r\n    choose activity\r\n    attak score, damage score, cantrip score for ea/magus\r\n    choose weapon die and traits\r\n    choose number of attacks\r\n\r\n*/\r\nexport default function NewActivity({\r\n  routineId,\r\n  parentId,\r\n}: {\r\n  routineId?: number;\r\n  parentId?: number;\r\n}): JSX.Element {\r\n  const [activityType, setActivityType] = useState<string>(\r\n    activityTypes.Strike\r\n  );\r\n\r\n  return (\r\n    <Paper>\r\n      <Grid container spacing={{ xs: 1, sm: 2 }} sx={{ m: 2, p: 2 }}>\r\n        <Grid item>\r\n          <Typography>Enter activity information</Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <FormControl>\r\n            <InputLabel>Activity Type</InputLabel>\r\n            <Select\r\n              value={activityType}\r\n              label=\"Activity Type\"\r\n              onChange={(e) => {\r\n                setActivityType(e.target.value);\r\n              }}\r\n            >\r\n              {makeOptions(activityTypes)}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item>\r\n          {activityTypes.Strike === activityType ? (\r\n            <StrikeSelection />\r\n          ) : activityTypes.Skill === activityType ? (\r\n            <SkillSelection />\r\n          ) : activityTypes.Cantrip === activityType ? (\r\n            <CantripSelection />\r\n          ) : activityTypes.Spell === activityType ? (\r\n            <SpellSelection />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nfunction StrikeSelection() {\r\n  const [runes, setRunes] = useState<DieTrend>(dieTrends.RUNE);\r\n  const [cClass, setClass] = useState<string>(classes[7]);\r\n  const [activity, setActivity] = useState<string>(\"Strike\");\r\n  const [cantrip, setCantrip] = useState<string>(cantrips[0]);\r\n  const [attackScore, setAttackScore] = useState<StatTrend>(statTrends.AS18a);\r\n  const [damageScore, setDamageScore] = useState<StatTrend>(statTrends.AS18a);\r\n  const [cantripScore, setCantripScore] = useState<StatTrend>(\r\n    statTrends.AS16pp\r\n  );\r\n  const [dieSize, setDieSize] = useState<number>(diceSizes[8]);\r\n  const [numStrikes, setNumStrikes] = useState<number>(1);\r\n  const [traits, setTraits] = useState(\r\n    // Array.from(weaponTraits, () => false)\r\n    Object.fromEntries(weaponTraits.map((trait) => [trait, false]))\r\n  );\r\n  const [deadlySize, setDeadlySize] = useState<number>(diceSizes[8]);\r\n  const [fatalSize, setFatalSize] = useState<number>(diceSizes[10]);\r\n  const [critSpec, setCritSpec] = useState<boolean>(false);\r\n  const [critSpecLevel, setCritSpecLevel] = useState<number>(5);\r\n  const [critSpecType, setCritSpecType] = useState<string>(critSpecs[0]);\r\n\r\n  const strikeInfo: StrikeInfo = {\r\n    runes,\r\n    cClass,\r\n    activity,\r\n    cantrip,\r\n    attackScore,\r\n    damageScore,\r\n    cantripScore,\r\n    dieSize,\r\n    numStrikes,\r\n    traits,\r\n    deadlySize,\r\n    fatalSize,\r\n    critSpec,\r\n    critSpecLevel,\r\n    critSpecType,\r\n  };\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const showCantripScore = (activity: string): boolean => {\r\n    return false;\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={{ xs: 1, sm: 2 }}>\r\n      <Grid item>\r\n        <FormControl>\r\n          <InputLabel>Damage Rune Levels</InputLabel>\r\n          <Select\r\n            value={runes}\r\n            label=\"Damage Rune Levels\"\r\n            onChange={(e) => {\r\n              setRunes(e.target.value as DieTrend);\r\n            }}\r\n          >\r\n            {makeOptions(runeTrends)}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item>\r\n        <FormControl>\r\n          <InputLabel>Class</InputLabel>\r\n          <Select\r\n            value={cClass}\r\n            label=\"Class\"\r\n            onChange={(e) => {\r\n              setClass(e.target.value);\r\n            }}\r\n          >\r\n            {makeOptions(classes)}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n\r\n      <Grid item>\r\n        <FormControl>\r\n          <InputLabel>Activity</InputLabel>\r\n          <Select\r\n            value={activity}\r\n            label=\"Activity\"\r\n            onChange={(e) => {\r\n              setActivity(e.target.value);\r\n            }}\r\n          >\r\n            {\r\n              // @ts-ignore\r\n              makeOptions(classActivities)\r\n            }\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      {showCantripScore(activity) ? (\r\n        <Grid item>\r\n          <FormControl>\r\n            <InputLabel>Cantrip</InputLabel>\r\n            <Select\r\n              value={cantrip}\r\n              label=\"Cantrip\"\r\n              onChange={(e) => {\r\n                setCantrip(e.target.value);\r\n              }}\r\n            >\r\n              {makeOptions(cantrips)}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <Grid item>\r\n        <FormControl>\r\n          <InputLabel>Attack Abilitiy Score</InputLabel>\r\n          <Select\r\n            value={attackScore}\r\n            label=\"Attack Abilitiy Score\"\r\n            onChange={(e) => {\r\n              setAttackScore(e.target.value as StatTrend);\r\n            }}\r\n          >\r\n            {\r\n              // @ts-ignore\r\n              makeOptions(statTrends)\r\n            }\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item>\r\n        <FormControl>\r\n          <InputLabel>Damage Abilitiy Score</InputLabel>\r\n          <Select\r\n            value={damageScore}\r\n            label=\"Damage Abilitiy Score\"\r\n            onChange={(e) => {\r\n              setDamageScore(e.target.value as StatTrend);\r\n            }}\r\n          >\r\n            {\r\n              // @ts-ignore\r\n              makeOptions(statTrends)\r\n            }\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      {showCantripScore(activity) ? (\r\n        <Grid item>\r\n          <FormControl>\r\n            <InputLabel>Cantrip Abilitiy Score</InputLabel>\r\n            <Select\r\n              value={cantripScore}\r\n              label=\"Cantrip Abilitiy Score\"\r\n              onChange={(e) => {\r\n                setCantripScore(e.target.value as StatTrend);\r\n              }}\r\n            >\r\n              {\r\n                // @ts-ignore\r\n                makeOptions(statTrends)\r\n              }\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <Grid item>\r\n        <FormControl>\r\n          <InputLabel>Damage Die</InputLabel>\r\n          <Select\r\n            value={dieSize}\r\n            label=\"Damage Die\"\r\n            onChange={(e) => {\r\n              setDieSize(Number(e.target.value));\r\n            }}\r\n          >\r\n            {diceSizeOptions}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n\r\n      {/* Weapon Traits */}\r\n      <Grid item>\r\n        <Paper\r\n          variant=\"outlined\"\r\n          sx={{\r\n            display: \"flex\",\r\n            flexWrap: \"wrap\",\r\n            justifyContent: \"center\",\r\n            listStyle: \"none\",\r\n            p: 0.5,\r\n            my: 1,\r\n          }}\r\n          component=\"ul\"\r\n        >\r\n          {weaponTraits.map((traitName, index) => (\r\n            <Box component=\"li\" key={traitName} sx={{ margin: 0.5 }}>\r\n              <Chip\r\n                label={traitName}\r\n                size=\"small\"\r\n                color=\"secondary\"\r\n                variant={traits[traitName] ? \"filled\" : \"outlined\"}\r\n                onClick={() => {\r\n                  const newTraits = {\r\n                    ...traits,\r\n                    [traitName]: !traits[traitName],\r\n                  };\r\n                  // newTraits[traitName] = !traits[traitName];\r\n                  setTraits(newTraits);\r\n                }}\r\n              />\r\n            </Box>\r\n          ))}\r\n        </Paper>\r\n      </Grid>\r\n      {traits[\"deadly\"] ? (\r\n        <Grid item>\r\n          <FormControl>\r\n            <InputLabel>Deadly Die</InputLabel>\r\n            <Select\r\n              value={deadlySize}\r\n              label=\"Deadly Die\"\r\n              onChange={(e) => {\r\n                setDeadlySize(Number(e.target.value));\r\n              }}\r\n            >\r\n              {diceSizeOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {traits[\"fatal\"] ? (\r\n        <Grid item>\r\n          <FormControl>\r\n            <InputLabel>Fatal Die</InputLabel>\r\n            <Select\r\n              value={fatalSize}\r\n              label=\"Fatal Die\"\r\n              onChange={(e) => {\r\n                setFatalSize(Number(e.target.value));\r\n              }}\r\n            >\r\n              {diceSizeOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n\r\n      <Grid item>\r\n        <FormControlLabel\r\n          control={\r\n            <Switch\r\n              checked={critSpec}\r\n              onChange={(e) => setCritSpec(e.target.checked)}\r\n            />\r\n          }\r\n          label=\"Critical Specialization\"\r\n        />\r\n      </Grid>\r\n      {/* crit spec level slider */}\r\n      {critSpec ? (\r\n        <Grid item>\r\n          <Typography align=\"center\">At Level {critSpecLevel}</Typography>\r\n          <Slider\r\n            value={critSpecLevel}\r\n            min={1}\r\n            max={20}\r\n            marks\r\n            onChange={(e, nv) => setCritSpecLevel(Number(nv))}\r\n          />\r\n        </Grid>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {critSpec ? (\r\n        <Grid item>\r\n          <FormControl>\r\n            <InputLabel>Weapon Group</InputLabel>\r\n            <Select\r\n              value={critSpecType}\r\n              label=\"Weapon Group\"\r\n              onChange={(e) => setCritSpecType(e.target.value)}\r\n            >\r\n              {makeOptions(critSpecs)}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n\r\n      <Grid item xs={6} sm={3} md={4} lg={2}>\r\n        <FormControl fullWidth>\r\n          <InputLabel>Number of Strikes</InputLabel>\r\n          <Select\r\n            value={numStrikes}\r\n            label=\"Number of Strikes\"\r\n            onChange={(e) => {\r\n              setNumStrikes(Number(e.target.value));\r\n            }}\r\n          >\r\n            {makeOptions([0, 1, 2, 3, 4, 5, 6])}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n\r\n      {/* Add Strike button */}\r\n      <Grid item>\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={() => dispatch(activityPathCreated({ strikeInfo }))}\r\n        >\r\n          Creat New Activity\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nfunction SkillSelection() {\r\n  return <React.Fragment>select prof</React.Fragment>;\r\n}\r\n\r\nfunction CantripSelection() {\r\n  return <React.Fragment>select cantrip/prof/ascore/dscore</React.Fragment>;\r\n}\r\n\r\nfunction SpellSelection() {\r\n  return <React.Fragment>select spell/prof/ascore</React.Fragment>;\r\n}\r\n","import React from \"react\";\r\n\r\nimport ReactGA from \"react-ga4\";\r\nimport { Adsense } from \"@ctrl/react-adsense\";\r\n\r\nimport Display from \"../Display/Display\";\r\nimport SelectedRoutine from \"../Routines/SelectedRoutine\";\r\nimport Routines from \"../Routines/Routines\";\r\nimport Export from \"../Sharing/Export\";\r\n\r\nimport \"./PF2App.css\";\r\n\r\nimport {\r\n  selectSelectedRoutine,\r\n  selectSelectedActivityPath,\r\n  selectCreateNewActivity,\r\n} from \"../Routines/RoutineSlice/routineSlice\";\r\nimport { Container, Grid, Box } from \"@mui/material\";\r\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\r\n// import Header from \"./Header\";\r\nimport { ActivityPath } from \"../Routines/Activity/ActivityPath\";\r\nimport NewActivity from \"../Routines/NewActivity/NewActivity\";\r\nimport { useAppSelector } from \"./hooks\";\r\n\r\n// Initialize google analytics\r\nReactGA.initialize(\"G-JR2YK097BG\");\r\n\r\nfunction PF2App() {\r\n  const selectedRoutine = useAppSelector(selectSelectedRoutine);\r\n  const selectedActivityPath = useAppSelector(selectSelectedActivityPath);\r\n  const createNewActivity = useAppSelector(selectCreateNewActivity);\r\n\r\n  const isBigEnough = useMediaQuery((theme: any) => {\r\n    console.log(`Theme is ${theme}`);\r\n    return theme.breakpoints.up(\"md\");\r\n  });\r\n\r\n  ReactGA.send(\"pageview\");\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* <Header /> */}\r\n      <Container maxWidth=\"xl\">\r\n        {isBigEnough ? (\r\n          <Grid\r\n            container\r\n            columnSpacing={{ xs: 2, md: 6, lg: 6, xl: 8 }}\r\n            sx={{ height: \"100vh\" }} // \"calc(100vh - 40px)\"\r\n          >\r\n            <Grid\r\n              id=\"container\"\r\n              item\r\n              xs={12}\r\n              md={6}\r\n              sx={{ height: \"100%\", overflow: \"auto\" }}\r\n            >\r\n              <Box sx={{}}>\r\n                {/* <TargetInput id={0} /> */}\r\n                <Adsense client=\"ca-pub-8032326260699508\" slot=\"3994991926\" />\r\n                <Routines />\r\n                {selectedRoutine !== undefined ? (\r\n                  <SelectedRoutine routineId={selectedRoutine} />\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n                {selectedActivityPath !== undefined ? (\r\n                  <ActivityPath id={selectedActivityPath} />\r\n                ) : createNewActivity ? (\r\n                  <NewActivity />\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n                <Export />\r\n                <Adsense client=\"ca-pub-8032326260699508\" slot=\"3994991926\" />\r\n              </Box>\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              xs={12}\r\n              md={6}\r\n              sx={{ mt: 0, height: 1, overflow: \"auto\" }}\r\n            >\r\n              {/* <Box sx={{ height: 1 }}> */}\r\n              <Display />\r\n              {/* </Box> */}\r\n            </Grid>\r\n          </Grid>\r\n        ) : (\r\n          <React.Fragment>\r\n            {/* <TargetInput id={0} /> */}\r\n            <Adsense client=\"ca-pub-8032326260699508\" slot=\"3994991926\" />\r\n            <Display />\r\n            <Routines />\r\n            {selectedRoutine !== undefined ? (\r\n              <SelectedRoutine routineId={selectedRoutine} />\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            {selectedActivityPath !== undefined ? (\r\n              <ActivityPath id={selectedActivityPath} />\r\n            ) : createNewActivity ? (\r\n              <NewActivity />\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            <Export />\r\n            <Adsense client=\"ca-pub-8032326260699508\" slot=\"3994991926\" />\r\n          </React.Fragment>\r\n        )}\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default PF2App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport routineReducer, {\r\n  damageAdded,\r\n  effectAdded,\r\n  routineAdded,\r\n  setRoutine,\r\n} from \"../Routines/RoutineSlice/routineSlice\";\r\nimport targetReducer, { targetAdded } from \"../Target/targetSlice\";\r\nimport weaknessReducer from \"../Target/weaknessSlice\";\r\nimport {\r\n  ACTrends,\r\n  conditions,\r\n  damageTrends,\r\n  damageTypes,\r\n  dCond,\r\n  dieTrends,\r\n  effectTypes,\r\n  materials,\r\n  SaveTrends,\r\n  whenConditions,\r\n} from \"../Model/types\";\r\n\r\nconst empty: { [key: number]: number } = {};\r\nconst pickCritSpec: { [key: number]: number } = {};\r\nconst one: { [key: number]: number } = {};\r\nfor (let i = 1; i <= 20; i++) {\r\n  empty[i] = 0;\r\n  one[i] = 1;\r\n  pickCritSpec[i] = 0;\r\n  if (i >= 5) {\r\n    pickCritSpec[i] = 4;\r\n  }\r\n  if (i >= 12) {\r\n    pickCritSpec[i] = 6;\r\n  }\r\n  if (i >= 19) {\r\n    pickCritSpec[i] = 8;\r\n  }\r\n}\r\n\r\n// const activityPathRemoved = createAction(\r\n//   \"RemoveActivityPath\",\r\n//   (id, parentId) => ({ payload: { id, parentId } })\r\n// );\r\n// const globalReducer = createReducer(, (builder) => {\r\n//   builder.addCase(activityPathRemoved, (state, action) => {\r\n//     const { id, parentId } = action.payload;\r\n//     // activityPathAdapter.removeMany(state, state.entities[id].apIds);\r\n//     activityPathAdapter.removeOne(state, id);\r\n//     if (parentId !== undefined) {\r\n//       state.entities[parentId].apIds = state.entities[parentId].apIds.filter(\r\n//         (apId) => apId !== id\r\n//       );\r\n//     }\r\n//   });\r\n// });\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    routines: routineReducer,\r\n    weaknesses: weaknessReducer,\r\n    targets: targetReducer,\r\n  },\r\n});\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n// default damages and effects\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 0,\r\n    damageCondition: dCond.STRIKE,\r\n\r\n    dieTrend: dieTrends.WEAPON,\r\n    dieAdjustments: { ...empty },\r\n    diceSize: 8,\r\n    fatal: false,\r\n    fatalDie: 10,\r\n    damageTrend: [damageTrends.AS18a, damageTrends.MARTIALWEAPONSPEC],\r\n    damageAdjustments: { ...empty },\r\n\r\n    damageType: damageTypes.S,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n    damageWhen: [whenConditions.Always],\r\n  })\r\n);\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 1,\r\n    damageCondition: dCond.STRIKE,\r\n\r\n    dieTrend: dieTrends.RUNE,\r\n    dieAdjustments: { ...empty },\r\n    diceSize: 6,\r\n    fatal: false,\r\n    fatalDie: 10,\r\n    damageTrend: [],\r\n    damageAdjustments: { ...empty },\r\n\r\n    damageType: damageTypes.FIRE,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n    damageWhen: [whenConditions.Always],\r\n  })\r\n);\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 2,\r\n    damageCondition: dCond.BASIC,\r\n\r\n    dieTrend: dieTrends.SPELLLEVEL2,\r\n    dieAdjustments: { ...empty },\r\n    diceSize: 6,\r\n    fatal: false,\r\n    fatalDie: 10,\r\n    damageTrend: [],\r\n    damageAdjustments: { ...empty },\r\n\r\n    damageType: damageTypes.FIRE,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n    damageWhen: [whenConditions.Always],\r\n  })\r\n);\r\nstore.dispatch(\r\n  effectAdded({\r\n    id: 0,\r\n    effectCondition: conditions.CRIT,\r\n    effectType: effectTypes.FLATFOOT,\r\n    startLevel: 5,\r\n    endLevel: 20,\r\n    damageWhen: [whenConditions.Always],\r\n  })\r\n);\r\n\r\nstore.dispatch(\r\n  targetAdded({\r\n    id: 0,\r\n    name: \"AC: High, Saves: Moderate\",\r\n\r\n    levelDiff: 0,\r\n    persistentMultiplier: 2,\r\n\r\n    ACTrend: ACTrends.HIGH,\r\n    FortTrend: SaveTrends.MODERATE,\r\n    RefTrend: SaveTrends.MODERATE,\r\n    WillTrend: SaveTrends.MODERATE,\r\n    PerTrend: SaveTrends.MODERATE,\r\n\r\n    flatfooted: false,\r\n    percentSelectedRoutine: false,\r\n    weaknesses: [],\r\n  })\r\n);\r\n\r\n// add in some example routines\r\nstore.dispatch(\r\n  routineAdded({\r\n    id: 0,\r\n    name: \"Baseline\",\r\n    display: true,\r\n    apIds: [],\r\n    levelDiff: 0,\r\n    description: \"No damage. Just so graphs display 0 with autoscalling.\",\r\n    startLevel: 1,\r\n    endLevel: 20,\r\n  })\r\n);\r\n\r\n// store.dispatch(\r\n//   routineAdded({\r\n//     id: 1,\r\n//     name: \"Greatsword Fighter 2 strikes\",\r\n//     display: true,\r\n//     apIds: [0],\r\n//     levelDiff: 0,\r\n//     description:\r\n//       \"A simple Fighter making 2 strikes with a greatsword. 1d6 damage runes at 8 and 15. Crit specialization at 5.\",\r\n//     startLevel: 1,\r\n//     endLevel: 20,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   activityPathAdded({\r\n//     id: 0,\r\n//     routineId: 1,\r\n//     condition: conditions.ALWAYS,\r\n\r\n//     rollType: rollTypes.NORMAL,\r\n//     type: activityTypes.STRIKE,\r\n//     profTrend: profTrends.FIGHTERWEAPON,\r\n//     statTrend: statTrends.AS18a,\r\n//     itemTrend: itemTrends.WEAPON,\r\n//     bonusAdjustments: { ...empty },\r\n//     MAP: MAPs.N1,\r\n\r\n//     targetType: defenses.AC,\r\n//     targetInfoId: 0,\r\n\r\n//     damages: [3, 4],\r\n//     effects: [1],\r\n//     apIds: [1],\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 3,\r\n//     damageCondition: dCond.STRIKE,\r\n\r\n//     dieTrend: dieTrends.WEAPON,\r\n//     dieAdjustments: { ...empty },\r\n//     diceSize: 12,\r\n//     fatal: false,\r\n//     fatalDie: 10,\r\n//     damageTrend: [damageTrends.AS18a, damageTrends.FIGHTERWEAPONSPEC],\r\n//     damageAdjustments: { ...empty },\r\n\r\n//     damageType: damageTypes.S,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//     multiplier: 1,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 4,\r\n//     damageCondition: dCond.STRIKE,\r\n\r\n//     dieTrend: dieTrends.RUNE,\r\n//     dieAdjustments: { ...empty },\r\n//     diceSize: 6,\r\n//     fatal: false,\r\n//     fatalDie: 10,\r\n//     damageTrend: [],\r\n//     damageAdjustments: { ...empty },\r\n\r\n//     damageType: damageTypes.FIRE,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//     multiplier: 1,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   effectAdded({\r\n//     id: 1,\r\n//     effectCondition: conditions.CRIT,\r\n//     effectType: effectTypes.FLATFOOT,\r\n//     startLevel: 5,\r\n//     endLevel: 20,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   activityPathAdded({\r\n//     id: 1,\r\n//     parentId: 0,\r\n//     condition: conditions.ALWAYS,\r\n\r\n//     rollType: rollTypes.NORMAL,\r\n//     type: activityTypes.STRIKE,\r\n//     profTrend: profTrends.FIGHTERWEAPON,\r\n//     statTrend: statTrends.AS18a,\r\n//     itemTrend: itemTrends.WEAPON,\r\n//     bonusAdjustments: { ...empty },\r\n//     MAP: MAPs.N2,\r\n\r\n//     targetType: defenses.AC,\r\n//     targetInfoId: 0,\r\n\r\n//     damages: [5, 6],\r\n//     effects: [2],\r\n//     apIds: [],\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 5,\r\n//     damageCondition: dCond.STRIKE,\r\n\r\n//     dieTrend: dieTrends.WEAPON,\r\n//     dieAdjustments: { ...empty },\r\n//     diceSize: 12,\r\n//     fatal: false,\r\n//     fatalDie: 10,\r\n//     damageTrend: [damageTrends.AS18a, damageTrends.FIGHTERWEAPONSPEC],\r\n//     damageAdjustments: { ...empty },\r\n\r\n//     damageType: damageTypes.S,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//     multiplier: 1,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 6,\r\n//     damageCondition: dCond.STRIKE,\r\n\r\n//     dieTrend: dieTrends.RUNE,\r\n//     dieAdjustments: { ...empty },\r\n//     diceSize: 6,\r\n//     fatal: false,\r\n//     fatalDie: 10,\r\n//     damageTrend: [],\r\n//     damageAdjustments: { ...empty },\r\n\r\n//     damageType: damageTypes.FIRE,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//     multiplier: 1,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   effectAdded({\r\n//     id: 2,\r\n//     effectCondition: conditions.CRIT,\r\n//     effectType: effectTypes.FLATFOOT,\r\n//     startLevel: 5,\r\n//     endLevel: 20,\r\n//   })\r\n// );\r\n\r\n// store.dispatch(\r\n//   routineAdded({\r\n//     id: 2,\r\n//     name: \"Fireball\",\r\n//     display: true,\r\n//     apIds: [2],\r\n//     levelDiff: 0,\r\n//     description: \"A 2d6 / spell level basic reflex save.\",\r\n//     startLevel: 1,\r\n//     endLevel: 20,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   activityPathAdded({\r\n//     id: 2,\r\n//     routineId: 2,\r\n//     condition: conditions.ALWAYS,\r\n\r\n//     rollType: rollTypes.NORMAL,\r\n//     type: activityTypes.SAVE,\r\n//     profTrend: profTrends.CASTERSPELL,\r\n//     statTrend: statTrends.AS18a,\r\n//     itemTrend: itemTrends.NONE,\r\n//     bonusAdjustments: { ...empty },\r\n//     MAP: MAPs.N1,\r\n\r\n//     targetType: defenses.REF,\r\n//     targetInfoId: 0,\r\n\r\n//     damages: [7],\r\n//     effects: [],\r\n//     apIds: [],\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 7,\r\n//     damageCondition: dCond.BASIC,\r\n\r\n//     dieTrend: dieTrends.SPELLLEVEL2,\r\n//     dieAdjustments: { ...empty },\r\n//     diceSize: 6,\r\n//     fatal: false,\r\n//     fatalDie: 10,\r\n//     damageTrend: [],\r\n//     damageAdjustments: { ...empty },\r\n\r\n//     damageType: damageTypes.FIRE,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//     multiplier: 1,\r\n//   })\r\n// );\r\n\r\n// store.dispatch(\r\n//   routineAdded({\r\n//     id: 3,\r\n//     name: \"Pick Fighter Double Slice\",\r\n//     display: false,\r\n//     apIds: [3, 4],\r\n//     levelDiff: 0,\r\n//     description:\r\n//       \"A Fighter using Double Slice with a pick and a light pick. 1d6 damage runes at 8 and 15. Crit specialization at 5.\",\r\n//     startLevel: 1,\r\n//     endLevel: 20,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   activityPathAdded({\r\n//     id: 3,\r\n//     routineId: 3,\r\n//     condition: conditions.ALWAYS,\r\n\r\n//     rollType: rollTypes.NORMAL,\r\n//     type: activityTypes.STRIKE,\r\n//     profTrend: profTrends.FIGHTERWEAPON,\r\n//     statTrend: statTrends.AS18a,\r\n//     itemTrend: itemTrends.WEAPON,\r\n//     bonusAdjustments: { ...empty },\r\n//     MAP: MAPs.N1,\r\n\r\n//     targetType: defenses.AC,\r\n//     targetInfoId: 0,\r\n\r\n//     damages: [8, 9, 10],\r\n//     effects: [],\r\n//     apIds: [],\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 8,\r\n//     damageCondition: dCond.STRIKE,\r\n\r\n//     dieTrend: dieTrends.WEAPON,\r\n//     dieAdjustments: { ...empty },\r\n//     diceSize: 6,\r\n//     fatal: true,\r\n//     fatalDie: 10,\r\n//     damageTrend: [damageTrends.AS18a, damageTrends.FIGHTERWEAPONSPEC],\r\n//     damageAdjustments: { ...empty },\r\n\r\n//     damageType: damageTypes.P,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//     multiplier: 1,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 9,\r\n//     damageCondition: dCond.CRIT,\r\n\r\n//     dieTrend: dieTrends.NONE,\r\n//     dieAdjustments: { ...one },\r\n//     diceSize: 10,\r\n//     fatal: false,\r\n//     fatalDie: 10,\r\n//     damageTrend: [],\r\n//     damageAdjustments: { ...pickCritSpec },\r\n\r\n//     damageType: damageTypes.P,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//     multiplier: 1,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 10,\r\n//     damageCondition: dCond.STRIKE,\r\n\r\n//     dieTrend: dieTrends.RUNE,\r\n//     dieAdjustments: { ...empty },\r\n//     diceSize: 6,\r\n//     fatal: false,\r\n//     fatalDie: 10,\r\n//     damageTrend: [],\r\n//     damageAdjustments: { ...empty },\r\n\r\n//     damageType: damageTypes.FIRE,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//     multiplier: 1,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   activityPathAdded({\r\n//     id: 4,\r\n//     routineId: 3,\r\n//     condition: conditions.ALWAYS,\r\n\r\n//     rollType: rollTypes.NORMAL,\r\n//     type: activityTypes.STRIKE,\r\n//     profTrend: profTrends.FIGHTERWEAPON,\r\n//     statTrend: statTrends.AS18a,\r\n//     itemTrend: itemTrends.WEAPON,\r\n//     bonusAdjustments: { ...empty },\r\n//     MAP: MAPs.A1,\r\n\r\n//     targetType: defenses.AC,\r\n//     targetInfoId: 0,\r\n\r\n//     damages: [11, 12, 13],\r\n//     effects: [],\r\n//     apIds: [],\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 11,\r\n//     damageCondition: dCond.STRIKE,\r\n\r\n//     dieTrend: dieTrends.WEAPON,\r\n//     dieAdjustments: { ...empty },\r\n//     diceSize: 4,\r\n//     fatal: true,\r\n//     fatalDie: 8,\r\n//     damageTrend: [damageTrends.AS18a, damageTrends.FIGHTERWEAPONSPEC],\r\n//     damageAdjustments: { ...empty },\r\n\r\n//     damageType: damageTypes.P,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//     multiplier: 1,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 12,\r\n//     damageCondition: dCond.CRIT,\r\n\r\n//     dieTrend: dieTrends.NONE,\r\n//     dieAdjustments: { ...one },\r\n//     diceSize: 8,\r\n//     fatal: false,\r\n//     fatalDie: 10,\r\n//     damageTrend: [],\r\n//     damageAdjustments: { ...pickCritSpec },\r\n\r\n//     damageType: damageTypes.P,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//     multiplier: 1,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 13,\r\n//     damageCondition: dCond.STRIKE,\r\n\r\n//     dieTrend: dieTrends.RUNE,\r\n//     dieAdjustments: { ...empty },\r\n//     diceSize: 6,\r\n//     fatal: false,\r\n//     fatalDie: 10,\r\n//     damageTrend: [],\r\n//     damageAdjustments: { ...empty },\r\n\r\n//     damageType: damageTypes.FIRE,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//     multiplier: 1,\r\n//   })\r\n// );\r\n\r\nstore.dispatch(setRoutine(0));\r\n// store.dispatch(weaknessAdded({ id: 0, type: damageTypes.FIRE, value: 10 }));\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 0,\r\n//     damageCondition: dCond.STRIKE,\r\n//     diceNum: 1,\r\n//     diceSize: 8,\r\n//     staticDamage: 4,\r\n//     damageType: damageTypes.B,\r\n//     material: materials.COLD_IRON,\r\n//     persistent: false,\r\n//   })\r\n// );\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createTheme } from \"@mui/material/styles\";\r\nimport { red } from \"@mui/material/colors\";\r\n\r\n// A custom theme for this app\r\nconst theme = createTheme({\r\n  palette: {\r\n    primary: {\r\n      main: red[500],\r\n    },\r\n  },\r\n});\r\n\r\nexport default theme;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport PF2App from \"./App/PF2App\";\r\nimport store from \"./App/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { CssBaseline } from \"@mui/material\";\r\nimport theme from \"./App/theme\";\r\nimport { ThemeProvider } from \"@mui/material/styles\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <ThemeProvider theme={theme}>\r\n        <CssBaseline />\r\n        <PF2App />\r\n      </ThemeProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}