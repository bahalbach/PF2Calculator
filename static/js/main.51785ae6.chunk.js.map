{"version":3,"sources":["defaults.js","types.js","Target/weaknessSlice.js","Target/targetSlice.js","Target/TargetInput.js","Calculation/Distribution.js","Routine/damageSlice.js","Routine/effectSlice.js","Routine/activityPathSlice.js","Routine/routineSlice.js","Calculation/Calculation.js","Calculation/EvaluateActivityPath.js","Display/Display.js","Routine/SelectedRoutine.js","Routines.js","Export.js","PF2App.js","store.js","serviceWorker.js","index.js"],"names":["graphTypes","DISTRIBUTION","PMDEFENSE","PMRES","activityTypes","STRIKE","SAVE","defaultActivities","FIGHTER","MARTIAL","CASTER","ALCH","FIGHTERR","MARTIALR","CASTERR","ALCHR","CASTERCA","CASTERCS","CASTERBR","CASTERSA","CASTERS","defaultValuesAC","LOW","MODERATE","HIGH","EXTREME","defaultValuesSaves","TERRIBLE","defenses","AC","FORT","REF","WILL","PER","MAPs","N1","N2","N3","A1","A2","A3","R1","R2","R3","RA1","RA2","RA3","RAA1","RAA2","RAA3","nextMAPs","MAPvalues","rollTypes","NORMAL","ADVANTAGE","DISADVANTAGE","damageTypes","NONE","B","P","S","FIRE","materials","COLD_IRON","SILVER","ADAMANTINE","effectTypes","FLATFOOT","FRIGHTENED1","FRIGHTENED2","FRIGHTENED3","FRIGHTENED4","conditions","ALWAYS","CRIT","SUCC","FAIL","CRIF","AT_LEAST_SUCC","AT_LEAST_FAIL","FAIL_WORSE","SUCC_WORSE","dCond","BASIC","defaultTypes","defaultTargetTypes","defaultDamageConditions","CASTERC","zero","maxScore","score16","martialProf","alchProf","casterProf","spellProf","weaponItem","weaponDice","spellDice","spellDice2","i","Math","floor","martialSpec","casterSpec","fighterAB","martialAB","casterAB","alchAB","casterSpellAttack","casterSaveDC","fighterStatic","fighterRanged","martialStatic","martialRanged","casterStatic","casterRanged","defaultValues","defaultDiceNum","defaultStatic","extremeAC","highAC","level","moderateAC","lowAC","defaultACs","defaultSaves","weaknessAdapter","createEntityAdapter","weakness","weaknessesSlice","createSlice","name","initialState","getInitialState","reducers","weaknessAdded","addOne","weaknessUpdated","updateOne","weaknessCreated","reducer","state","action","payload","id","type","value","prepare","parentId","weaknessRemoved","removeOne","actions","getSelectors","weaknesses","selectweaknessById","selectById","selectweaknessEntities","selectIds","selectEntities","targetAdapter","selectAll","selectTotal","targetsSlice","targetAdded","targetUpdated","changes","match","target","entities","useDefaultAC","defaultAC","useDefaultFort","defaultFort","useDefaultRef","defaultRef","useDefaultWill","defaultWill","useDefaultPer","defaultPer","extraReducers","builder","addCase","weaknessId","push","filter","wid","targets","selecttargetById","selecttargetEntities","Weakness","useSelector","dispatch","useDispatch","className","onChange","e","isNaN","parseInt","AddWeakness","useState","weaknessValue","setWeaknessValue","WeaknessSelect","options","dt","key","m","TargetInput","matchRoutines","levelDiff","Fort","Ref","Will","Perception","flatfooted","ACOptions","dv","SaveOptions","htmlFor","placeholder","checked","map","convolve","vec1","vec2","length","Error","volume","kernel","displacement","convVec","j","consolidateDists","maxDamage","dists","dist","max","staticDamage","damageDist","index","applyMin","min","shift","damageAdapter","damageId","damagesSlice","damageAdded","damageUpdated","damageCreated","damageCondition","diceNum","diceSize","damageType","material","persistent","damageRemoved","damages","selectdamageById","selectdamageEntities","effectAdapter","effectId","effectsSlice","effectAdded","effectUpdated","effectCreated","effectCondition","effectType","effectRemoved","effects","selecteffectById","selecteffectEntities","setDefault","apId","setChildren","applyDefault","ap","override","defaultActivity","targetType","apIds","activityPathAdapter","activityPathId","defaultParentActivity","useDefault","MAP","activityPathsSlice","activityPathAdded","activityPathUpdated","activityPathRemoved","undefined","activityPathCreated","parentAP","applyMAP","condition","targetInfoId","routineId","did","eid","ids","activityPaths","selectactivityPathById","selectactivityPathEntities","routinesAdapter","routinesSlice","selectedRoutine","setRoutine","routineAdded","routineUpdated","routineRemoved","routineCreated","display","updateSelected","routines","selectRoutineById","selectRoutineEntities","selectAllRoutines","selectSelectedRoutine","addDamage","context","multiplier","normal","dam","newDist","newDam","oldValue","chance","newValue","diff","multiplyDist","validateCondition","degreeOfSuccess","indicies","includes","ActivityPathEvaluator","this","activityPath","targetState","defenseBonus","resistanceBonus","currentTarget","currentDamages","currentEffects","currentWeaknesses","activity","bonus","DC","frightened","console","log","critPercent","dif","getCritSuccessPercent","succPercent","getSuccessPercent","failPercent","getFailurePercent","crfaPercent","getCritFailurePercent","rollType","notcrit","nothit","notfail","notcrfa","notsucc","chances","critDamages","succDamages","failDamages","crfaDamages","damageTrees","forEach","damage","diceArray","damageTree","damageQuality","totalStaticDamage","totalDamageDist","maxW","maxR","calculateExpectedDamage","targetStates","effect","evaluations","Map","has","evalPath","pathDist","pathPDist","set","get","Plot","createPlotlyComponent","Plotly","Display","addPersistent","setAddPersistent","graphType","setGraphType","title","evaluator","initialTargetState","minbonus","maxbonus","maxPDamage","datasets","perDatasets","expectedDamages","expectedPersistentDamages","routine","bonusArray","expDbyBonus","expPDbyBonus","ACBonus","resBonus","expD","expP","routineDDist","routinePDDist","PdamageDist","dataArray","cumulative","PdataArray","Pcumulative","currentSum","toFixed","x","y","yaxis","xtitle","ytitle","labels","Plabels","damageChart","classname","data","layout","autosize","xaxis","legend","xanchor","margin","l","r","useResizeHandler","style","width","height","persistentDamageChart","graphTypeOptions","gt","conditionOptions","c","defaultActivityOptions","da","activityTypeOptions","at","MAPOptions","defenseOptions","d","rollOptions","rt","damageConditionOptions","dc","diceNumOptions","dn","diceSizeOptions","ds","damageTypeOptions","materialOptions","effectTypeOptions","et","NameInput","ActivityPath","displayCondition","onClick","Damage","Effect","SelectedRoutine","Routines","routineOptions","routineDisplays","ImportExport","ReactGA","initialize","PF2App","props","send","Export","store","configureStore","routineReducer","activityPathReducer","damageReducer","effectReducer","weaknessReducer","targetReducer","overrideDefault","addMods","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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CAC,EACA,GAEF,MAEF,KAAK5J,EAAMP,KACTkP,GACEiD,EACAlH,EACAC,EACAC,EACAjB,EACAC,EACA,GAEF,MAEF,KAAK5J,EAAMR,KACTmP,GACEgD,EACAjH,EACAC,EACAC,EACAjB,EACAC,EACA,GAEF,MAEF,KAAK5J,EAAMJ,cACT+O,GACEiD,EACAlH,EACAC,EACAC,EACAjB,EACAC,EACA,GAEF+E,GACEgD,EACAjH,EACAC,EACAC,EACAjB,EACAC,EACA,GAEF,MAEF,KAAK5J,EAAMH,cACT8O,GACEkD,EACAnH,EACAC,EACAC,EACAjB,EACAC,EACA,GAEF+E,GACEiD,EACAlH,EACAC,EACAC,EACAjB,EACAC,EACA,GAEF+E,GACEgD,EACAjH,EACAC,EACAC,EACAjB,EACAC,EACA,GAEF,MAEF,KAAK5J,EAAMF,WACT6O,GACEmD,EACApH,EACAC,EACAC,EACAjB,EACAC,EACA,GAEF+E,GACEkD,EACAnH,EACAC,EACAC,EACAjB,EACAC,EACA,GAEF,MAEF,KAAK5J,EAAMD,WACT4O,GACEmD,EACApH,EACAC,EACAC,EACAjB,EACAC,EACA,GAEF+E,GACEkD,EACAnH,EACAC,EACAC,EACAjB,EACAC,EACA,GAEF+E,GACEiD,EACAlH,EACAC,EACAC,EACAjB,EACAC,EACA,GAGF,MAEF,KAAK5J,EAAMT,OACToP,GACEmD,EACApH,EACAC,EACAC,EACAjB,EACAC,EACA,GAEF+E,GACEkD,EACAnH,EACAC,EACAC,EACAjB,EACAC,EACA,GAEF+E,GACEiD,EACAlH,EACAC,EACAC,EACAjB,EACAC,EACA,GAEF+E,GACEgD,EACAjH,EACAC,EACAC,EACAjB,EACAC,EACA,GAEF,MAEF,QACE6G,QAAQC,IAAR,2BACsBuB,EAAO9E,UAD7B,8BAQN,cAAuB4E,EAAvB,eACE,IADG,IAAII,EAAU,KACjB,MAA0B,CAAC,SAAU,cAArC,eAAoD,CAA/C,IAAIC,EAAa,KAChBC,EAAoB,EACpBC,EAAkB,CAAC,GAF2B,WAGzCvO,GACP,MACEoO,EAAWC,GAAerO,GA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","file":"static/js/main.51785ae6.chunk.js","sourcesContent":["import {\r\n  activityTypes,\r\n  dCond,\r\n  defaultActivities,\r\n  defaultValuesAC,\r\n  defaultValuesSaves,\r\n  defenses,\r\n} from \"./types\";\r\n\r\nexport const defaultTypes = {\r\n  [defaultActivities.FIGHTER]: activityTypes.STRIKE,\r\n  [defaultActivities.MARTIAL]: activityTypes.STRIKE,\r\n  [defaultActivities.CASTER]: activityTypes.STRIKE,\r\n  [defaultActivities.ALCH]: activityTypes.STRIKE,\r\n  [defaultActivities.FIGHTERR]: activityTypes.STRIKE,\r\n  [defaultActivities.MARTIALR]: activityTypes.STRIKE,\r\n  [defaultActivities.CASTERR]: activityTypes.STRIKE,\r\n  [defaultActivities.ALCHR]: activityTypes.STRIKE,\r\n  [defaultActivities.CASTERCA]: activityTypes.STRIKE,\r\n  [defaultActivities.CASTERCS]: activityTypes.SAVE,\r\n  [defaultActivities.CASTERSA]: activityTypes.STRIKE,\r\n  [defaultActivities.CASTERS]: activityTypes.SAVE,\r\n  [defaultActivities.CASTERBR]: activityTypes.SAVE,\r\n};\r\n\r\nexport const defaultTargetTypes = {\r\n  [defaultActivities.FIGHTER]: defenses.AC,\r\n  [defaultActivities.MARTIAL]: defenses.AC,\r\n  [defaultActivities.CASTER]: defenses.AC,\r\n  [defaultActivities.ALCH]: defenses.AC,\r\n  [defaultActivities.FIGHTERR]: defenses.AC,\r\n  [defaultActivities.MARTIALR]: defenses.AC,\r\n  [defaultActivities.CASTERR]: defenses.AC,\r\n  [defaultActivities.ALCHR]: defenses.AC,\r\n  [defaultActivities.CASTERCA]: defenses.AC,\r\n  [defaultActivities.CASTERCS]: defenses.REF,\r\n  [defaultActivities.CASTERSA]: defenses.AC,\r\n  [defaultActivities.CASTERS]: defenses.REF,\r\n  [defaultActivities.CASTERBR]: defenses.REF,\r\n};\r\n\r\nexport const defaultDamageConditions = {\r\n  [defaultActivities.FIGHTER]: dCond.STRIKE,\r\n  [defaultActivities.MARTIAL]: dCond.STRIKE,\r\n  [defaultActivities.CASTER]: dCond.STRIKE,\r\n  [defaultActivities.ALCH]: dCond.STRIKE,\r\n  [defaultActivities.FIGHTERR]: dCond.STRIKE,\r\n  [defaultActivities.MARTIALR]: dCond.STRIKE,\r\n  [defaultActivities.CASTERR]: dCond.STRIKE,\r\n  [defaultActivities.ALCHR]: dCond.STRIKE,\r\n  [defaultActivities.CASTERC]: dCond.STRIKE,\r\n  [defaultActivities.CASTERS]: dCond.BASIC,\r\n  [defaultActivities.CASTERCA]: dCond.STRIKE,\r\n  [defaultActivities.CASTERCS]: dCond.BASIC,\r\n  [defaultActivities.CASTERSA]: dCond.STRIKE,\r\n  [defaultActivities.CASTERS]: dCond.BASIC,\r\n  [defaultActivities.CASTERBR]: dCond.BASIC,\r\n};\r\n\r\nconst zero = {};\r\n\r\nconst maxScore = {};\r\nconst score16 = {};\r\nconst martialProf = {};\r\nconst alchProf = {};\r\nconst casterProf = {};\r\n\r\nconst spellProf = {};\r\n\r\nconst weaponItem = {};\r\nconst weaponDice = {};\r\nconst spellDice = {};\r\nconst spellDice2 = {};\r\nfor (let i = 1; i <= 20; i++) {\r\n  spellDice[i] = Math.floor((i + 1) / 2);\r\n  spellDice2[i] = 2 * Math.floor((i + 1) / 2);\r\n}\r\n\r\nconst martialSpec = {};\r\nconst casterSpec = {};\r\n\r\nconst fighterAB = {};\r\nconst martialAB = {};\r\nconst casterAB = {};\r\nconst alchAB = {};\r\n\r\nconst casterSpellAttack = {};\r\nconst casterSaveDC = {};\r\n\r\nconst fighterStatic = {};\r\nconst fighterRanged = {};\r\nconst martialStatic = {};\r\nconst martialRanged = {};\r\nconst casterStatic = {};\r\nconst casterRanged = {};\r\n\r\nfor (let i = 1; i <= 20; i++) {\r\n  zero[i] = 0;\r\n\r\n  maxScore[i] = 4;\r\n  score16[i] = 3;\r\n\r\n  martialProf[i] = 2;\r\n  alchProf[i] = 2;\r\n  casterProf[i] = 2;\r\n\r\n  spellProf[i] = 2;\r\n\r\n  weaponItem[i] = 0;\r\n  weaponDice[i] = 1;\r\n\r\n  martialSpec[i] = 0;\r\n  casterSpec[i] = 0;\r\n\r\n  if (i >= 2) {\r\n    weaponItem[i] = 1;\r\n  }\r\n  if (i >= 4) {\r\n    weaponDice[i] = 2;\r\n  }\r\n  if (i >= 5) {\r\n    martialProf[i] = 4;\r\n    score16[i] = 4;\r\n  }\r\n  if (i >= 7) {\r\n    alchProf[i] = 4;\r\n    martialSpec[i] = 1;\r\n    spellProf[i] = 4;\r\n  }\r\n  if (i >= 10) {\r\n    weaponItem[i] = 2;\r\n    maxScore[i] = 5;\r\n  }\r\n  if (i >= 11) {\r\n    casterProf[i] = 4;\r\n  }\r\n  if (i >= 12) {\r\n    weaponDice[i] = 3;\r\n  }\r\n  if (i >= 13) {\r\n    martialProf[i] = 6;\r\n    casterSpec[i] = 1;\r\n  }\r\n  if (i >= 15) {\r\n    martialSpec[i] = 2;\r\n    score16[i] = 5;\r\n    spellProf[i] = 6;\r\n  }\r\n  if (i >= 16) {\r\n    weaponItem[i] = 3;\r\n  }\r\n  if (i >= 17) {\r\n    maxScore[i] = 6;\r\n  }\r\n  if (i >= 19) {\r\n    weaponDice[i] = 4;\r\n    spellProf[i] = 8;\r\n  }\r\n  if (i >= 20) {\r\n    maxScore[i] = 7;\r\n  }\r\n\r\n  fighterAB[i] = i + martialProf[i] + maxScore[i] + weaponItem[i] + 2;\r\n  martialAB[i] = i + martialProf[i] + maxScore[i] + weaponItem[i];\r\n  casterAB[i] = i + casterProf[i] + score16[i] + weaponItem[i];\r\n  alchAB[i] = i + alchProf[i] + score16[i] + weaponItem[i];\r\n  casterSpellAttack[i] = i + spellProf[i] + maxScore[i];\r\n  casterSaveDC[i] = 10 + i + spellProf[i] + maxScore[i];\r\n\r\n  fighterStatic[i] = maxScore[i] + (martialSpec[i] * (martialProf[i] + 2)) / 2;\r\n  fighterRanged[i] = (martialSpec[i] * (martialProf[i] + 2)) / 2;\r\n  martialStatic[i] = maxScore[i] + (martialSpec[i] * martialProf[i]) / 2;\r\n  martialRanged[i] = (martialSpec[i] * martialProf[i]) / 2;\r\n  casterStatic[i] = score16[i] + (casterSpec[i] * casterProf[i]) / 2;\r\n  casterRanged[i] = (casterSpec[i] * casterProf[i]) / 2;\r\n}\r\n\r\nexport const defaultValues = {\r\n  [defaultActivities.FIGHTER]: fighterAB,\r\n  [defaultActivities.MARTIAL]: martialAB,\r\n  [defaultActivities.CASTER]: casterAB,\r\n  [defaultActivities.ALCH]: alchAB,\r\n  [defaultActivities.FIGHTERR]: fighterAB,\r\n  [defaultActivities.MARTIALR]: martialAB,\r\n  [defaultActivities.CASTERR]: casterAB,\r\n  [defaultActivities.ALCHR]: alchAB,\r\n  [defaultActivities.CASTERCA]: casterSpellAttack,\r\n  [defaultActivities.CASTERCS]: casterSaveDC,\r\n  [defaultActivities.CASTERSA]: casterSpellAttack,\r\n  [defaultActivities.CASTERS]: casterSaveDC,\r\n  [defaultActivities.CASTERBR]: casterSaveDC,\r\n};\r\n\r\nexport const defaultDiceNum = {\r\n  [defaultActivities.FIGHTER]: weaponDice,\r\n  [defaultActivities.MARTIAL]: weaponDice,\r\n  [defaultActivities.CASTER]: weaponDice,\r\n  [defaultActivities.ALCH]: weaponDice,\r\n  [defaultActivities.FIGHTERR]: weaponDice,\r\n  [defaultActivities.MARTIALR]: weaponDice,\r\n  [defaultActivities.CASTERR]: weaponDice,\r\n  [defaultActivities.ALCHR]: weaponDice,\r\n  [defaultActivities.CASTERCA]: spellDice,\r\n  [defaultActivities.CASTERCS]: spellDice,\r\n  [defaultActivities.CASTERSA]: zero,\r\n  [defaultActivities.CASTERS]: zero,\r\n  [defaultActivities.CASTERBR]: spellDice2,\r\n};\r\n\r\nexport const defaultStatic = {\r\n  [defaultActivities.FIGHTER]: fighterStatic,\r\n  [defaultActivities.MARTIAL]: martialStatic,\r\n  [defaultActivities.CASTER]: casterStatic,\r\n  [defaultActivities.ALCH]: casterStatic,\r\n  [defaultActivities.FIGHTERR]: fighterRanged,\r\n  [defaultActivities.MARTIALR]: martialRanged,\r\n  [defaultActivities.CASTERR]: casterRanged,\r\n  [defaultActivities.ALCHR]: casterRanged,\r\n  [defaultActivities.CASTERCA]: maxScore,\r\n  [defaultActivities.CASTERCS]: maxScore,\r\n  [defaultActivities.CASTERSA]: zero,\r\n  [defaultActivities.CASTERS]: zero,\r\n  [defaultActivities.CASTERBR]: zero,\r\n};\r\n\r\nconst extremeAC = {\r\n  \"-1\": 18,\r\n  0: 19,\r\n  1: 19,\r\n  2: 21,\r\n  3: 22,\r\n  4: 24,\r\n  5: 25,\r\n  6: 27,\r\n  7: 28,\r\n  8: 30,\r\n  9: 31,\r\n  10: 33,\r\n  11: 34,\r\n  12: 36,\r\n  13: 37,\r\n  14: 39,\r\n  15: 40,\r\n  16: 42,\r\n  17: 43,\r\n  18: 45,\r\n  19: 46,\r\n  20: 48,\r\n  21: 49,\r\n  22: 51,\r\n  23: 52,\r\n  24: 54,\r\n};\r\nconst highAC = { ...extremeAC };\r\nfor (let level in highAC) highAC[level] -= 3;\r\n\r\nconst moderateAC = { ...extremeAC };\r\nfor (let level in moderateAC) moderateAC[level] -= 4;\r\n\r\nconst lowAC = { ...extremeAC };\r\nfor (let level in lowAC) lowAC[level] -= 6;\r\n\r\nexport const defaultACs = {\r\n  [defaultValuesAC.EXTREME]: extremeAC,\r\n  [defaultValuesAC.HIGH]: highAC,\r\n  [defaultValuesAC.MODERATE]: moderateAC,\r\n  [defaultValuesAC.LOW]: lowAC,\r\n};\r\n\r\nconst extremeSaves = {\r\n  \"-1\": 9,\r\n  0: 10,\r\n  1: 11,\r\n  2: 12,\r\n  3: 14,\r\n  4: 15,\r\n  5: 17,\r\n  6: 18,\r\n  7: 20,\r\n  8: 21,\r\n  9: 23,\r\n  10: 24,\r\n  11: 26,\r\n  12: 27,\r\n  13: 29,\r\n  14: 30,\r\n  15: 32,\r\n  16: 33,\r\n  17: 35,\r\n  18: 36,\r\n  19: 38,\r\n  20: 39,\r\n  21: 41,\r\n  22: 43,\r\n  23: 44,\r\n  24: 46,\r\n};\r\nconst highSaves = {\r\n  \"-1\": 8,\r\n  0: 9,\r\n  1: 10,\r\n  2: 11,\r\n  3: 12,\r\n  4: 14,\r\n  5: 15,\r\n  6: 17,\r\n  7: 18,\r\n  8: 19,\r\n  9: 21,\r\n  10: 22,\r\n  11: 24,\r\n  12: 25,\r\n  13: 26,\r\n  14: 28,\r\n  15: 29,\r\n  16: 30,\r\n  17: 32,\r\n  18: 33,\r\n  19: 35,\r\n  20: 36,\r\n  21: 38,\r\n  22: 39,\r\n  23: 40,\r\n  24: 42,\r\n};\r\nconst moderateSaves = {\r\n  \"-1\": 5,\r\n  0: 6,\r\n  1: 7,\r\n  2: 8,\r\n  3: 9,\r\n  4: 11,\r\n  5: 12,\r\n  6: 14,\r\n  7: 15,\r\n  8: 16,\r\n  9: 18,\r\n  10: 19,\r\n  11: 21,\r\n  12: 22,\r\n  13: 23,\r\n  14: 25,\r\n  15: 26,\r\n  16: 28,\r\n  17: 29,\r\n  18: 30,\r\n  19: 32,\r\n  20: 33,\r\n  21: 35,\r\n  22: 36,\r\n  23: 37,\r\n  24: 38,\r\n};\r\nconst lowSaves = {\r\n  \"-1\": 2,\r\n  0: 3,\r\n  1: 4,\r\n  2: 5,\r\n  3: 6,\r\n  4: 8,\r\n  5: 9,\r\n  6: 11,\r\n  7: 12,\r\n  8: 13,\r\n  9: 15,\r\n  10: 16,\r\n  11: 18,\r\n  12: 19,\r\n  13: 20,\r\n  14: 22,\r\n  15: 23,\r\n  16: 25,\r\n  17: 26,\r\n  18: 27,\r\n  19: 29,\r\n  20: 30,\r\n  21: 32,\r\n  22: 33,\r\n  23: 34,\r\n  24: 36,\r\n};\r\nconst terribleSaves = {\r\n  \"-1\": 0,\r\n  0: 1,\r\n  1: 2,\r\n  2: 3,\r\n  3: 4,\r\n  4: 6,\r\n  5: 7,\r\n  6: 8,\r\n  7: 10,\r\n  8: 11,\r\n  9: 12,\r\n  10: 14,\r\n  11: 15,\r\n  12: 16,\r\n  13: 18,\r\n  14: 19,\r\n  15: 20,\r\n  16: 22,\r\n  17: 23,\r\n  18: 24,\r\n  19: 26,\r\n  20: 27,\r\n  21: 28,\r\n  22: 30,\r\n  23: 31,\r\n  24: 32,\r\n};\r\nexport const defaultSaves = {\r\n  [defaultValuesSaves.EXTREME]: extremeSaves,\r\n  [defaultValuesSaves.HIGH]: highSaves,\r\n  [defaultValuesSaves.MODERATE]: moderateSaves,\r\n  [defaultValuesSaves.LOW]: lowSaves,\r\n  [defaultValuesSaves.TERRIBLE]: terribleSaves,\r\n};\r\n","export const graphTypes = {\r\n  DISTRIBUTION: \"Damage Distribution\",\r\n  PMDEFENSE: \"+/- AC/Save Bonus\",\r\n  PMRES: \"+/- Resistance/Weakness\",\r\n};\r\n\r\nexport const activityTypes = {\r\n  STRIKE: \"Strike\",\r\n  SAVE: \"Save\",\r\n};\r\n\r\nexport const defaultActivities = {\r\n  FIGHTER: \"Fighter Melee\",\r\n  MARTIAL: \"Martial Melee\",\r\n  CASTER: \"Caster(16str) Melee\",\r\n  ALCH: \"Alchemist(16str) Melee\",\r\n  FIGHTERR: \"Fighter Ranged\",\r\n  MARTIALR: \"Martial Ranged\",\r\n  CASTERR: \"Caster(16dex) Ranged\",\r\n  ALCHR: \"Alchemist(16dex) Ranged\",\r\n  CASTERCA: \"Caster Cantrip Attack\",\r\n  CASTERCS: \"Caster Cantrip Save\",\r\n  CASTERBR: \"Caster 2dX Basic Save\",\r\n  CASTERSA: \"Caster Spell Attack\",\r\n  CASTERS: \"Caster Save\",\r\n};\r\n\r\nexport const defaultValuesAC = {\r\n  LOW: \"Low\",\r\n  MODERATE: \"Moderate\",\r\n  HIGH: \"High\",\r\n  EXTREME: \"Extreme\",\r\n};\r\n\r\nexport const defaultValuesSaves = {\r\n  TERRIBLE: \"Terrible\",\r\n  LOW: \"Low\",\r\n  MODERATE: \"Moderate\",\r\n  HIGH: \"High\",\r\n  EXTREME: \"Extreme\",\r\n};\r\n\r\nexport const defenses = {\r\n  AC: \"AC\",\r\n  FORT: \"Fort\",\r\n  REF: \"Ref\",\r\n  WILL: \"Will\",\r\n  PER: \"Perception\",\r\n};\r\n\r\nexport const MAPs = {\r\n  N1: \"0 (0x-5)\",\r\n  N2: \"-5 (1x-5)\",\r\n  N3: \"-10 (2x-5)\",\r\n  A1: \"0 (0x-4)\",\r\n  A2: \"-4 (1x-4)\",\r\n  A3: \"-8 (2x-4)\",\r\n  R1: \"0 (0x-3)\",\r\n  R2: \"-3 (1x-3)\",\r\n  R3: \"-6 (2x-3)\",\r\n  RA1: \"0 (0x-2)\",\r\n  RA2: \"-2 (1x-2)\",\r\n  RA3: \"-4 (2x-2)\",\r\n  RAA1: \"0 (0x-1)\",\r\n  RAA2: \"-1 (1x-1)\",\r\n  RAA3: \"-2 (2x-1)\",\r\n};\r\n\r\nexport const nextMAPs = {\r\n  \"0 (0x-5)\": \"-5 (1x-5)\",\r\n  \"-5 (1x-5)\": \"-10 (2x-5)\",\r\n  \"-10 (2x-5)\": \"-10 (2x-5)\",\r\n  \"0 (0x-4)\": \"-4 (1x-4)\",\r\n  \"-4 (1x-4)\": \"-8 (2x-4)\",\r\n  \"-8 (2x-4)\": \"-8 (2x-4)\",\r\n  \"0 (0x-3)\": \"-3 (1x-3)\",\r\n  \"-3 (1x-3)\": \"-6 (2x-3)\",\r\n  \"-6 (2x-3)\": \"-6 (2x-3)\",\r\n  \"0 (0x-2)\": \"-2 (1x-2)\",\r\n  \"-2 (1x-2)\": \"-4 (2x-2)\",\r\n  \"-4 (2x-2)\": \"-4 (2x-2)\",\r\n  \"0 (0x-1)\": \"-1 (1x-1)\",\r\n  \"-1 (1x-1)\": \"-2 (2x-1)\",\r\n  \"-2 (2x-1)\": \"-2 (2x-1)\",\r\n};\r\n\r\nexport const MAPvalues = {\r\n  \"0 (0x-5)\": 0,\r\n  \"-5 (1x-5)\": -5,\r\n  \"-10 (2x-5)\": -10,\r\n  \"0 (0x-4)\": 0,\r\n  \"-4 (1x-4)\": -4,\r\n  \"-8 (2x-4)\": -8,\r\n  \"0 (0x-3)\": 0,\r\n  \"-3 (1x-3)\": -3,\r\n  \"-6 (2x-3)\": -6,\r\n  \"0 (0x-2)\": 0,\r\n  \"-2 (1x-2)\": -2,\r\n  \"-4 (2x-2)\": -4,\r\n  \"0 (0x-1)\": 0,\r\n  \"-1 (1x-1)\": -1,\r\n  \"-2 (2x-1)\": -2,\r\n};\r\n\r\nexport const rollTypes = {\r\n  NORMAL: \"Normal\",\r\n  ADVANTAGE: \"Advantage\",\r\n  DISADVANTAGE: \"Disadvantage\",\r\n};\r\n\r\nexport const damageTypes = {\r\n  NONE: \"None\",\r\n  B: \"bludgeoning\",\r\n  P: \"piercing\",\r\n  S: \"slashing\",\r\n  FIRE: \"fire\",\r\n};\r\n\r\nexport const materials = {\r\n  NONE: \"none\",\r\n  COLD_IRON: \"cold iron\",\r\n  SILVER: \"silver\",\r\n  ADAMANTINE: \"adamantine\",\r\n};\r\n\r\nexport const effectTypes = {\r\n  FLATFOOT: \"Flatfooted\",\r\n  FRIGHTENED1: \"Frightened 1\",\r\n  FRIGHTENED2: \"Frightened 2\",\r\n  FRIGHTENED3: \"Frightened 3\",\r\n  FRIGHTENED4: \"Frightened 4\",\r\n};\r\n\r\nexport const conditions = {\r\n  ALWAYS: \"Always\",\r\n  CRIT: \"On Crit\",\r\n  SUCC: \"On Success\",\r\n  FAIL: \"On Failure\",\r\n  CRIF: \"On Crit Fail\",\r\n  AT_LEAST_SUCC: \"Success or better\",\r\n  AT_LEAST_FAIL: \"Failure or better\",\r\n  FAIL_WORSE: \"Failure or worse\",\r\n  SUCC_WORSE: \"Success or worse\",\r\n};\r\n\r\nexport const dCond = {\r\n  STRIKE: \"x1 hit, x2 crit\",\r\n  BASIC: \"Basic save\",\r\n  ALWAYS: \"Always\",\r\n  CRIT: \"On Crit\",\r\n  SUCC: \"On Success\",\r\n  FAIL: \"On Failure\",\r\n  CRIF: \"On Crit Fail\",\r\n  AT_LEAST_SUCC: \"Success or better\",\r\n  AT_LEAST_FAIL: \"Failure or better\",\r\n  FAIL_WORSE: \"Failure or worse\",\r\n  SUCC_WORSE: \"Success or worse\",\r\n};\r\n\r\nexport const diceNums = {\r\n  0: 0,\r\n  1: 1,\r\n  2: 2,\r\n  3: 3,\r\n  4: 4,\r\n  5: 5,\r\n  6: 6,\r\n  7: 7,\r\n  8: 8,\r\n  9: 9,\r\n  10: 10,\r\n  11: 11,\r\n  12: 12,\r\n  13: 13,\r\n  14: 14,\r\n  15: 15,\r\n  16: 16,\r\n  17: 17,\r\n  18: 18,\r\n  19: 19,\r\n  20: 20,\r\n};\r\n\r\nexport const diceSizes = {\r\n  4: 4,\r\n  6: 6,\r\n  8: 8,\r\n  10: 10,\r\n  12: 12,\r\n};\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const weaknessAdapter = createEntityAdapter();\r\n\r\nlet weakness = 0;\r\n\r\nexport const weaknessesSlice = createSlice({\r\n  name: \"weaknesses\",\r\n  initialState: weaknessAdapter.getInitialState(),\r\n  reducers: {\r\n    weaknessAdded: weaknessAdapter.addOne,\r\n    weaknessUpdated: weaknessAdapter.updateOne,\r\n    weaknessCreated: {\r\n      reducer: (state, action) => {\r\n        const { id, type, value } = action.payload;\r\n        weaknessAdapter.addOne(state, { id, type, value });\r\n      },\r\n      prepare: ({ parentId, type, value }) => {\r\n        const id = ++weakness;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n            type,\r\n            value,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    weaknessRemoved: weaknessAdapter.removeOne,\r\n  },\r\n});\r\n\r\nexport const {\r\n  weaknessRemoved,\r\n  weaknessCreated,\r\n  weaknessAdded,\r\n  weaknessUpdated,\r\n} = weaknessesSlice.actions;\r\n\r\nexport default weaknessesSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selectweaknessById,\r\n  selectIds: selectweaknessIds,\r\n  selectEntities: selectweaknessEntities,\r\n  selectAll: selectAllweaknesses,\r\n  selectTotal: selectTotalweaknesses,\r\n} = weaknessAdapter.getSelectors((state) => state.weaknesses);\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\nimport { defaultACs, defaultSaves } from \"../defaults\";\r\nimport { defenses } from \"../types\";\r\nimport { weaknessCreated, weaknessRemoved } from \"./weaknessSlice\";\r\n\r\nexport const targetAdapter = createEntityAdapter();\r\n\r\nexport const targetsSlice = createSlice({\r\n  name: \"targets\",\r\n  initialState: targetAdapter.getInitialState(),\r\n  reducers: {\r\n    targetAdded: targetAdapter.addOne,\r\n    targetUpdated: {\r\n      prepare: ({ id, changes, match, level }) => {\r\n        if (!level) level = 1;\r\n        if (level < 1) level = 1;\r\n        if (level > 20) level = 20;\r\n        return { payload: { id, changes, match, level } };\r\n      },\r\n      reducer: (state, action) => {\r\n        targetAdapter.updateOne(state, action.payload);\r\n        const target = state.entities[action.payload.id];\r\n        if (!target.level) target.level = 0;\r\n        if (target.level < -1) target.level = -1;\r\n        if (target.level > 24) target.level = 24;\r\n        if (target.useDefaultAC) {\r\n          target[defenses.AC] = defaultACs[target.defaultAC][target.level];\r\n        }\r\n        if (target.useDefaultFort) {\r\n          target[defenses.FORT] =\r\n            defaultSaves[target.defaultFort][target.level];\r\n        }\r\n        if (target.useDefaultRef) {\r\n          target[defenses.REF] = defaultSaves[target.defaultRef][target.level];\r\n        }\r\n        if (target.useDefaultWill) {\r\n          target[defenses.WILL] =\r\n            defaultSaves[target.defaultWill][target.level];\r\n        }\r\n        if (target.useDefaultPer) {\r\n          target[defenses.PER] = defaultSaves[target.defaultPer][target.level];\r\n        }\r\n      },\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(weaknessCreated, (state, action) => {\r\n        const { parentId: id, id: weaknessId } = action.payload;\r\n        state.entities[id].weaknesses.push(weaknessId);\r\n        // targetAdded.updateOne(state, { id, changes: { weaknesses: [...weaknesses, weaknessId] }});\r\n      })\r\n      .addCase(weaknessRemoved, (state, action) => {\r\n        const { parentId: id, id: weaknessId } = action.payload;\r\n        state.entities[id].weaknesses = state.entities[id].weaknesses.filter(\r\n          (wid) => wid !== weaknessId\r\n        );\r\n      });\r\n  },\r\n});\r\n\r\nexport const { targetAdded, targetUpdated } = targetsSlice.actions;\r\n\r\nexport default targetsSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selecttargetById,\r\n  selectIds: selecttargetIds,\r\n  selectEntities: selecttargetEntities,\r\n  selectAll: selectAlltargets,\r\n  selectTotal: selectTotaltargets,\r\n} = targetAdapter.getSelectors((state) => state.targets);\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { selecttargetById, targetUpdated } from \"./targetSlice\";\r\nimport {\r\n  damageTypes,\r\n  defaultValuesAC,\r\n  defaultValuesSaves,\r\n  defenses,\r\n  materials,\r\n} from \"../types\";\r\nimport {\r\n  selectweaknessById,\r\n  weaknessCreated,\r\n  weaknessRemoved,\r\n  weaknessUpdated,\r\n} from \"./weaknessSlice\";\r\n\r\nfunction TargetInput({ id }) {\r\n  const {\r\n    name,\r\n    level,\r\n    matchRoutines,\r\n    levelDiff,\r\n    [defenses.AC]: AC,\r\n    defaultAC,\r\n    useDefaultAC,\r\n    [defenses.FORT]: Fort,\r\n    defaultFort,\r\n    useDefaultFort,\r\n    [defenses.REF]: Ref,\r\n    defaultRef,\r\n    useDefaultRef,\r\n    [defenses.WILL]: Will,\r\n    defaultWill,\r\n    useDefaultWill,\r\n    [defenses.PER]: Perception,\r\n    defaultPer,\r\n    useDefaultPer,\r\n    flatfooted,\r\n    weaknesses,\r\n  } = useSelector((state) => selecttargetById(state, 0));\r\n  const dispatch = useDispatch();\r\n\r\n  const ACOptions = [];\r\n  for (let dv in defaultValuesAC) {\r\n    ACOptions.push(<option key={dv}>{defaultValuesAC[dv]}</option>);\r\n  }\r\n  const SaveOptions = [];\r\n  for (let dv in defaultValuesSaves) {\r\n    SaveOptions.push(<option key={dv}>{defaultValuesSaves[dv]}</option>);\r\n  }\r\n\r\n  // name, level, ac, fort, ref, will, perception, resistances/weaknesses\r\n  return (\r\n    <div className=\"box flexbox\">\r\n      <span className=\"input\">\r\n        <label htmlFor=\"targetName\">{\"Target Name: \"}</label>\r\n        <input\r\n          id=\"targetName\"\r\n          type=\"text\"\r\n          placeholder=\"Enter Target name\"\r\n          value={name}\r\n          onChange={(e) =>\r\n            dispatch(targetUpdated({ id, changes: { name: e.target.value } }))\r\n          }\r\n        />\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"Level\">{\" Level: \"}</label>\r\n        <input\r\n          id=\"Level\"\r\n          type=\"number\"\r\n          value={level}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: {\r\n                  level: parseInt(e.target.value),\r\n                },\r\n                match: matchRoutines,\r\n                level: parseInt(e.target.value) - levelDiff,\r\n              })\r\n            )\r\n          }\r\n        />\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"match\">{\" Match routine levels: \"}</label>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={matchRoutines}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { matchRoutines: e.target.checked },\r\n                match: e.target.checked,\r\n                level: level - levelDiff,\r\n              })\r\n            )\r\n          }\r\n        />\r\n        <input\r\n          type=\"number\"\r\n          value={levelDiff}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: {\r\n                  levelDiff: parseInt(e.target.value),\r\n                },\r\n                match: matchRoutines,\r\n                level: level - parseInt(e.target.value),\r\n              })\r\n            )\r\n          }\r\n        />\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"AC\">{\" AC: \"}</label>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={useDefaultAC}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { useDefaultAC: e.target.checked } })\r\n            )\r\n          }\r\n        />\r\n        <select\r\n          value={defaultAC}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { defaultAC: e.target.value } })\r\n            )\r\n          }\r\n        >\r\n          {ACOptions}\r\n        </select>\r\n        <input\r\n          id=\"AC\"\r\n          type=\"number\"\r\n          value={AC}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: {\r\n                  useDefaultAC: false,\r\n                  [defenses.AC]: parseInt(e.target.value),\r\n                },\r\n              })\r\n            )\r\n          }\r\n        />\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"Fort\">{\" Fort: \"}</label>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={useDefaultFort}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { useDefaultFort: e.target.checked },\r\n              })\r\n            )\r\n          }\r\n        />\r\n        <select\r\n          value={defaultFort}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { defaultFort: e.target.value } })\r\n            )\r\n          }\r\n        >\r\n          {SaveOptions}\r\n        </select>\r\n        <input\r\n          id=\"Fort\"\r\n          type=\"number\"\r\n          value={Fort}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { [defenses.FORT]: parseInt(e.target.value) },\r\n              })\r\n            )\r\n          }\r\n        />\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"Ref\">{\" Ref: \"}</label>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={useDefaultRef}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { useDefaultRef: e.target.checked },\r\n              })\r\n            )\r\n          }\r\n        />\r\n        <select\r\n          value={defaultRef}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { defaultRef: e.target.value } })\r\n            )\r\n          }\r\n        >\r\n          {SaveOptions}\r\n        </select>\r\n        <input\r\n          id=\"Ref\"\r\n          type=\"number\"\r\n          value={Ref}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { [defenses.REF]: parseInt(e.target.value) },\r\n              })\r\n            )\r\n          }\r\n        />\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"Will\">{\" Will: \"}</label>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={useDefaultWill}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { useDefaultWill: e.target.checked },\r\n              })\r\n            )\r\n          }\r\n        />\r\n        <select\r\n          value={defaultWill}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { defaultWill: e.target.value } })\r\n            )\r\n          }\r\n        >\r\n          {SaveOptions}\r\n        </select>\r\n        <input\r\n          id=\"Will\"\r\n          type=\"number\"\r\n          value={Will}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { [defenses.WILL]: parseInt(e.target.value) },\r\n              })\r\n            )\r\n          }\r\n        />\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"Perception\">{\" Perception: \"}</label>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={useDefaultPer}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { useDefaultPer: e.target.checked },\r\n              })\r\n            )\r\n          }\r\n        />\r\n        <select\r\n          value={defaultPer}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { defaultPer: e.target.value } })\r\n            )\r\n          }\r\n        >\r\n          {SaveOptions}\r\n        </select>\r\n        <input\r\n          id=\"Perception\"\r\n          type=\"number\"\r\n          value={Perception}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { [defenses.PER]: parseInt(e.target.value) },\r\n              })\r\n            )\r\n          }\r\n        />\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"Flatfooted\">{\" Flatfooted: \"}</label>\r\n        <input\r\n          id=\"Flatfooted\"\r\n          type=\"checkbox\"\r\n          checked={flatfooted}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { flatfooted: e.target.checked } })\r\n            )\r\n          }\r\n        />\r\n      </span>\r\n\r\n      <div className=\"box flexbox\">\r\n        {\" Resistance/Weakness: \"}\r\n        {weaknesses.map((weaknessId) => (\r\n          <Weakness parentId={id} id={weaknessId} key={weaknessId} />\r\n        ))}\r\n        <AddWeakness parentId={id} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// const TargetInfo = ({ id }) => {\r\n//   const { overrideDefault, type, value, weaknesses } = useSelector((state) =>\r\n//     selecttargetInfoById(state, id)\r\n//   );\r\n//   const dispatch = useDispatch();\r\n\r\n//   const defenseOptions = [];\r\n//   for (let d in defenses) {\r\n//     defenseOptions.push(<option key={d}>{defenses[d]}</option>);\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"box\">\r\n//       {\"Override Target: \"}\r\n//       <input\r\n//         type=\"checkbox\"\r\n//         checked={overrideDefault}\r\n//         onChange={(e) =>\r\n//           dispatch(\r\n//             targetInfoUpdated({\r\n//               id,\r\n//               changes: { overrideDefault: e.target.checked },\r\n//             })\r\n//           )\r\n//         }\r\n//       />\r\n\r\n// {/* <Weaknesses parentId={id} weaknessIds={weaknesses} /> */}\r\n\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const Weaknesses = ({ parentId, weaknessIds }) => {\r\n//   return (\r\n//     <span>\r\n//       {weaknessIds.map((weaknessId) => (\r\n//         <Weakness id={weaknessId} key={weaknessId} />\r\n//       ))}\r\n//       <AddWeakness id={parentId} />\r\n//     </span>\r\n//   );\r\n// };\r\n\r\nconst Weakness = ({ id, parentId }) => {\r\n  // needs to have parent id to remove weakness\r\n  const { type, value } = useSelector((state) => selectweaknessById(state, id));\r\n  const dispatch = useDispatch();\r\n\r\n  const updateOrRemoveWeakness = (e) => {\r\n    if (e.target.value === damageTypes.NONE) {\r\n      // remove this weakness\r\n      dispatch(weaknessRemoved({ id, parentId }));\r\n    } else {\r\n      dispatch(weaknessUpdated({ id, changes: { type: e.target.value } }));\r\n    }\r\n  };\r\n  const updateWeaknessValue = (e) => {\r\n    if (!isNaN(e.target.value)) {\r\n      dispatch(\r\n        weaknessUpdated({ id, changes: { value: parseInt(e.target.value) } })\r\n      );\r\n    }\r\n  };\r\n  return (\r\n    <span className=\"input\">\r\n      <WeaknessSelect value={type} onChange={updateOrRemoveWeakness} />\r\n      <input type=\"number\" value={value} onChange={updateWeaknessValue} />\r\n    </span>\r\n  );\r\n};\r\n\r\nlet weaknessId = 0;\r\n\r\nconst AddWeakness = ({ parentId }) => {\r\n  const dispatch = useDispatch();\r\n  let [weaknessValue, setWeaknessValue] = useState(0);\r\n\r\n  // add a Weakness to TargetInfo id\r\n  const addWeakness = (e) => {\r\n    if (e.target.value !== damageTypes.NONE) {\r\n      // need to create a new weakness\r\n      weaknessId++;\r\n      dispatch(\r\n        weaknessCreated({\r\n          id: weaknessId,\r\n          type: e.target.value,\r\n          value: weaknessValue,\r\n          parentId: parentId,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <span className=\"input\">\r\n      <WeaknessSelect value={damageTypes.NONE} onChange={addWeakness} />\r\n      <input\r\n        type=\"number\"\r\n        value={weaknessValue}\r\n        onChange={(e) => setWeaknessValue(parseInt(e.target.value))}\r\n      />\r\n    </span>\r\n  );\r\n};\r\n\r\nconst WeaknessSelect = ({ value, onChange }) => {\r\n  const options = [];\r\n  for (let dt in damageTypes) {\r\n    options.push(<option key={dt}>{damageTypes[dt]}</option>);\r\n  }\r\n  for (let m in materials) {\r\n    if (materials[m] === materials.NONE) continue;\r\n    options.push(<option key={m}>{materials[m]}</option>);\r\n  }\r\n  return (\r\n    <span>\r\n      <select value={value} onChange={(e) => onChange(e)}>\r\n        {options}\r\n      </select>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default TargetInput;\r\n","export const convolve = (vec1, vec2) => {\r\n  if (vec1.length === 0 || vec2.length === 0) {\r\n    throw new Error(\"Vectors can not be empty!\");\r\n  }\r\n  const volume = vec1;\r\n  const kernel = vec2;\r\n  let displacement = 0;\r\n  const convVec = [];\r\n\r\n  for (let i = 0; i < volume.length; i++) {\r\n    for (let j = 0; j < kernel.length; j++) {\r\n      if (displacement + j !== convVec.length) {\r\n        convVec[displacement + j] =\r\n          convVec[displacement + j] + volume[i] * kernel[j];\r\n      } else {\r\n        convVec.push(volume[i] * kernel[j]);\r\n      }\r\n    }\r\n    displacement++;\r\n  }\r\n\r\n  return convVec;\r\n};\r\n\r\nexport const multiplyDist = (dam, dist, multiplier) => {\r\n  if (multiplier === 0) return [0, [1]];\r\n  if (multiplier === 1) return [dam, [...dist]];\r\n\r\n  const newDist = [0];\r\n  let index = 0;\r\n  const newDam = Math.floor(dam * multiplier);\r\n\r\n  let i = 0;\r\n  let oldValue = newDam;\r\n  for (let chance of dist) {\r\n    let newValue = Math.floor((dam + i) * multiplier);\r\n    if (newValue === oldValue) {\r\n      // console.log(`adding ${newValue} at ${index} with ${chance}`);\r\n      newDist[index] += chance;\r\n    } else {\r\n      if (newValue > oldValue + 1) {\r\n        for (let diff = 0; diff < newValue - (oldValue + 1); diff++) {\r\n          index++;\r\n          // console.log(`adding ${newValue} at ${index} with ${0}`);\r\n          newDist[index] = 0;\r\n        }\r\n      }\r\n      index++;\r\n      // console.log(`adding ${newValue} at ${index} with ${chance}`);\r\n      newDist[index] = chance;\r\n    }\r\n    oldValue = newValue;\r\n    i++;\r\n  }\r\n\r\n  return [newDam, newDist];\r\n};\r\n\r\nexport const consolidateDists = (...dists) => {\r\n  // dists = [[{staticDamage, damageDist}, chance]]...]\r\n  // console.log(dists);\r\n  let maxDamage = 0;\r\n  for (let dist of dists) {\r\n    // console.log(`chance is ${dist[1]}`);\r\n    maxDamage = Math.max(\r\n      maxDamage,\r\n      dist[0].staticDamage + dist[0].damageDist.length\r\n    );\r\n  }\r\n  let damageDist = [];\r\n  for (let i = 0; i < maxDamage; i++) {\r\n    damageDist.push(0);\r\n    // console.log(`i is ${i}`);\r\n    for (let dist of dists) {\r\n      if (dist[0].staticDamage <= i) {\r\n        let index = i - dist[0].staticDamage;\r\n        // console.log(`val ${dist[0].damageDist[index]} at index ${index}`);\r\n        if (index < dist[0].damageDist.length)\r\n          damageDist[i] += dist[0].damageDist[index] * dist[1];\r\n      }\r\n    }\r\n  }\r\n  // console.log([staticDamage, damageDist]);\r\n  return damageDist;\r\n};\r\n\r\nexport const applyMin = (staticDamage, damageDist, min) => {\r\n  while (staticDamage < min) {\r\n    if (damageDist.length >= 2) {\r\n      damageDist[1] += damageDist[0];\r\n      damageDist.shift();\r\n    }\r\n    staticDamage++;\r\n  }\r\n  return [staticDamage, damageDist];\r\n};\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\nimport { damageTypes, dCond, materials } from \"../types\";\r\n\r\nexport const damageAdapter = createEntityAdapter();\r\n\r\n// damageAdded({\r\n//   id: 0,\r\n//   condition: dCond.STRIKE,\r\n//   diceNum: 1,\r\n//   diceSize: 8,\r\n//   staticDamage: 6,\r\n//   type: damageTypes.PIERCE,\r\n//   material: materials.COLD_IRON,\r\n// });\r\n\r\nlet damageId = 1;\r\nexport const damagesSlice = createSlice({\r\n  name: \"damages\",\r\n  initialState: damageAdapter.getInitialState(),\r\n  reducers: {\r\n    damageAdded: damageAdapter.addOne,\r\n    damageUpdated: damageAdapter.updateOne,\r\n    damageCreated: {\r\n      reducer: (state, action) => {\r\n        const {\r\n          id,\r\n          damageCondition,\r\n          diceNum,\r\n          diceSize,\r\n          staticDamage,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n        } = action.payload;\r\n        damageAdapter.addOne(state, {\r\n          id,\r\n          damageCondition,\r\n          diceNum,\r\n          diceSize,\r\n          staticDamage,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n        });\r\n      },\r\n      prepare: ({ parentId }) => {\r\n        const id = ++damageId;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n            damageCondition: dCond.STRIKE,\r\n            diceNum: 0,\r\n            diceSize: 8,\r\n            staticDamage: 0,\r\n            damageType: damageTypes.S,\r\n            material: materials.NONE,\r\n            persistent: false,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    damageRemoved: (state, action) => {\r\n      damageAdapter.removeOne(state, action.payload.id);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { damageRemoved, damageCreated, damageAdded, damageUpdated } =\r\n  damagesSlice.actions;\r\n\r\nexport default damagesSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selectdamageById,\r\n  selectIds: selectdamageIds,\r\n  selectEntities: selectdamageEntities,\r\n  selectAll: selectAlldamages,\r\n  selectTotal: selectTotaldamages,\r\n} = damageAdapter.getSelectors((state) => state.damages);\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\nimport { conditions, effectTypes } from \"../types\";\r\n\r\nexport const effectAdapter = createEntityAdapter();\r\n\r\nlet effectId = 1;\r\nexport const effectsSlice = createSlice({\r\n  name: \"effects\",\r\n  initialState: effectAdapter.getInitialState(),\r\n  reducers: {\r\n    effectAdded: effectAdapter.addOne,\r\n    effectUpdated: effectAdapter.updateOne,\r\n    effectCreated: {\r\n      reducer: (state, action) => {\r\n        const { id } = action.payload;\r\n        effectAdapter.addOne(state, {\r\n          id,\r\n          effectCondition: conditions.ALWAYS,\r\n          effectType: effectTypes.FLATFOOT,\r\n        });\r\n      },\r\n      prepare: ({ parentId }) => {\r\n        const id = ++effectId;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    effectRemoved: (state, action) => {\r\n      effectAdapter.removeOne(state, action.payload.id);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { effectAdded, effectUpdated, effectCreated, effectRemoved } =\r\n  effectsSlice.actions;\r\n\r\nexport default effectsSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selecteffectById,\r\n  selectIds: selecteffectIds,\r\n  selectEntities: selecteffectEntities,\r\n  selectAll: selectAlleffects,\r\n  selectTotal: selectTotaleffects,\r\n} = effectAdapter.getSelectors((state) => state.effects);\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\nimport {\r\n  defaultDamageConditions,\r\n  defaultDiceNum,\r\n  defaultStatic,\r\n  defaultTargetTypes,\r\n  defaultTypes,\r\n  defaultValues,\r\n} from \"../defaults\";\r\nimport { targetUpdated } from \"../Target/targetSlice\";\r\nimport {\r\n  activityTypes,\r\n  conditions,\r\n  damageTypes,\r\n  dCond,\r\n  defaultActivities,\r\n  defenses,\r\n  MAPs,\r\n  materials,\r\n  nextMAPs,\r\n} from \"../types\";\r\nimport { damageCreated, damageRemoved } from \"./damageSlice\";\r\nimport { effectCreated, effectRemoved } from \"./effectSlice\";\r\n\r\nfunction setDefault(state, apId, setChildren = true) {\r\n  function applyDefault(apId) {\r\n    const ap = state.entities[apId];\r\n    if (ap.override) {\r\n      return;\r\n    }\r\n    const defaultActivity = ap.defaultActivity;\r\n    ap.type = defaultTypes[defaultActivity];\r\n    ap.targetType = defaultTargetTypes[defaultActivity];\r\n    ap.value = defaultValues[defaultActivity][ap.level];\r\n    ap.damageCondition = defaultDamageConditions[defaultActivity];\r\n    ap.diceNum = defaultDiceNum[defaultActivity][ap.level];\r\n    ap.staticDamage = defaultStatic[defaultActivity][ap.level];\r\n    if (setChildren) {\r\n      for (let apId of ap.apIds) {\r\n        state.entities[apId].level = ap.level;\r\n        applyDefault(apId);\r\n      }\r\n    }\r\n  }\r\n  applyDefault(apId);\r\n}\r\nexport const activityPathAdapter = createEntityAdapter();\r\n\r\nlet activityPathId = 1;\r\nconst defaultParentActivity = {\r\n  level: 1,\r\n  useDefault: false,\r\n  defaultActivity: defaultActivities.FIGHTER,\r\n  type: activityTypes.STRIKE,\r\n  targetType: defenses.AC,\r\n  value: 9,\r\n  MAP: MAPs.N1,\r\n  damageCondition: dCond.STRIKE,\r\n  diceNum: 1,\r\n  diceSize: 8,\r\n  staticDamage: 4,\r\n  damageType: damageTypes.S,\r\n  material: materials.NONE,\r\n};\r\n\r\nexport const activityPathsSlice = createSlice({\r\n  name: \"activityPaths\",\r\n  initialState: activityPathAdapter.getInitialState(),\r\n  reducers: {\r\n    activityPathAdded: activityPathAdapter.addOne,\r\n    activityPathUpdated: (state, action) => {\r\n      activityPathAdapter.updateOne(state, action.payload);\r\n      setDefault(state, action.payload.id);\r\n    },\r\n    activityPathRemoved: (state, action) => {\r\n      const { id, parentId } = action.payload;\r\n      activityPathAdapter.removeOne(state, id);\r\n      if (parentId !== undefined) {\r\n        state.entities[parentId].apIds = state.entities[parentId].apIds.filter(\r\n          (apId) => apId !== id\r\n        );\r\n      }\r\n    },\r\n    activityPathCreated: {\r\n      reducer: (state, action) => {\r\n        const { id, parentId, applyMAP } = action.payload;\r\n\r\n        let parentAP;\r\n        if (parentId !== undefined) {\r\n          parentAP = state.entities[parentId];\r\n        } else {\r\n          parentAP = defaultParentActivity;\r\n        }\r\n\r\n        activityPathAdapter.addOne(state, {\r\n          id,\r\n          condition: conditions.ALWAYS,\r\n          override: false,\r\n          level: parentAP.level,\r\n          useDefault: parentAP.useDefault,\r\n          defaultActivity: parentAP.defaultActivity,\r\n          type: parentAP.type,\r\n          targetType: parentAP.targetType,\r\n          targetInfoId: 0,\r\n          value: parentAP.value,\r\n          MAP: applyMAP ? nextMAPs[parentAP.MAP] : parentAP.MAP,\r\n          damageCondition: parentAP.damageCondition,\r\n          diceNum: parentAP.diceNum,\r\n          diceSize: parentAP.diceSize,\r\n          staticDamage: parentAP.staticDamage,\r\n          damageType: parentAP.damageType,\r\n          material: parentAP.material,\r\n          damages: [],\r\n          effects: [],\r\n          apIds: [],\r\n        });\r\n\r\n        if (parentId !== undefined) state.entities[parentId].apIds.push(id);\r\n      },\r\n      prepare: ({ parentId, routineId, applyMAP }) => {\r\n        const id = ++activityPathId;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n            routineId,\r\n            applyMAP,\r\n          },\r\n        };\r\n      },\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(damageCreated, (state, action) => {\r\n        const { parentId: id, id: damageId } = action.payload;\r\n        state.entities[id].damages.push(damageId);\r\n      })\r\n      .addCase(damageRemoved, (state, action) => {\r\n        const { parentId: id, id: damageId } = action.payload;\r\n        state.entities[id].damages = state.entities[id].damages.filter(\r\n          (did) => did !== damageId\r\n        );\r\n      })\r\n      .addCase(effectCreated, (state, action) => {\r\n        const { parentId: id, id: effectId } = action.payload;\r\n        state.entities[id].effects.push(effectId);\r\n      })\r\n      .addCase(effectRemoved, (state, action) => {\r\n        const { parentId: id, id: effectId } = action.payload;\r\n        state.entities[id].effects = state.entities[id].effects.filter(\r\n          (eid) => eid !== effectId\r\n        );\r\n      })\r\n      .addCase(targetUpdated, (state, action) => {\r\n        const { match, level } = action.payload;\r\n        defaultParentActivity.level = level;\r\n        if (match) {\r\n          for (let id of state.ids) {\r\n            state.entities[id].level = level;\r\n            setDefault(state, id, false);\r\n          }\r\n        }\r\n      });\r\n  },\r\n});\r\n\r\nexport const {\r\n  activityPathCreated,\r\n  activityPathAdded,\r\n  activityPathUpdated,\r\n  activityPathRemoved,\r\n} = activityPathsSlice.actions;\r\n\r\nexport default activityPathsSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selectactivityPathById,\r\n  selectIds: selectactivityPathIds,\r\n  selectEntities: selectactivityPathEntities,\r\n  selectAll: selectAllactivityPaths,\r\n  selectTotal: selectTotalactivityPaths,\r\n} = activityPathAdapter.getSelectors((state) => state.activityPaths);\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\nimport { activityPathCreated, activityPathRemoved } from \"./activityPathSlice\";\r\n\r\nexport const routinesAdapter = createEntityAdapter();\r\n\r\nlet routineId = 1;\r\nexport const routinesSlice = createSlice({\r\n  name: \"routines\",\r\n  initialState: routinesAdapter.getInitialState({ selectedRoutine: 0 }),\r\n  reducers: {\r\n    setRoutine: (state, action) => {\r\n      state.selectedRoutine = action.payload || 0;\r\n    },\r\n    routineAdded: routinesAdapter.addOne,\r\n    routineUpdated: routinesAdapter.updateOne,\r\n    routineRemoved: (state, action) => {\r\n      routinesAdapter.removeOne(state, action);\r\n      if (action.payload === state.selectedRoutine)\r\n        state.selectedRoutine = state.ids ? state.ids[0] : undefined;\r\n    },\r\n    routineCreated: {\r\n      reducer: (state, action) => {\r\n        const { id, name, apIds } = action.payload;\r\n        state.selectedRoutine = id;\r\n        routinesAdapter.addOne(state, { id, name, display: true, apIds });\r\n      },\r\n      prepare: () => {\r\n        const id = ++routineId;\r\n        return { payload: { id, name: \"New Routine\", apIds: [] } };\r\n      },\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(activityPathCreated, (state, action) => {\r\n        const { routineId: id, id: apId } = action.payload;\r\n        if (id !== undefined) state.entities[id].apIds.push(apId);\r\n      })\r\n      .addCase(activityPathRemoved, (state, action) => {\r\n        const { routineId, id } = action.payload;\r\n        if (routineId !== undefined) {\r\n          state.entities[routineId].apIds = state.entities[\r\n            routineId\r\n          ].apIds.filter((apId) => apId !== id);\r\n        }\r\n      });\r\n  },\r\n});\r\n\r\nexport const {\r\n  routineCreated,\r\n  setRoutine,\r\n  updateSelected,\r\n  routineAdded,\r\n  routineUpdated,\r\n  routineRemoved,\r\n} = routinesSlice.actions;\r\n\r\nexport default routinesSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selectRoutineById,\r\n  selectIds: selectRoutineIds,\r\n  selectEntities: selectRoutineEntities,\r\n  selectAll: selectAllRoutines,\r\n  selectTotal: selectTotalRoutines,\r\n} = routinesAdapter.getSelectors((state) => state.routines);\r\n\r\nexport const selectSelectedRoutine = (state) => state.routines.selectedRoutine;\r\n","import {\r\n  activityTypes,\r\n  dCond,\r\n  defenses,\r\n  MAPvalues,\r\n  materials,\r\n  rollTypes,\r\n} from \"../types\";\r\nimport { applyMin, convolve, multiplyDist } from \"./Distribution\";\r\n\r\nfunction getCritSuccessPercent(bonus, DC, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -20) {\r\n    chance = 0;\r\n  } else if (dif === -20) {\r\n    chance = 5;\r\n  } else if (dif < -9) {\r\n    chance = keen ? 10 : 5;\r\n  } else if (dif < 8) {\r\n    chance = (11 + dif) * 5;\r\n  } else {\r\n    chance = 95;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nfunction getSuccessPercent(bonus, DC, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -29) {\r\n    chance = 0;\r\n  } else if (dif < -20) {\r\n    chance = 5;\r\n  } else if (dif === -20) {\r\n    chance = 0;\r\n  } else if (dif < -9) {\r\n    chance = (keen ? 19 : 20 + dif) * 5;\r\n  } else if (dif < -1) {\r\n    chance = 50;\r\n  } else if (dif < 9) {\r\n    chance = (8 - dif) * 5;\r\n  } else {\r\n    chance = 5;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nfunction getFailurePercent(bonus, DC, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -29) {\r\n    chance = 5;\r\n  } else if (dif < -20) {\r\n    chance = (29 + dif) * 5;\r\n  } else if (dif < -10) {\r\n    chance = 45;\r\n  } else if (dif < -1) {\r\n    chance = (-2 - dif) * 5;\r\n  } else if (dif < 9) {\r\n    chance = 5;\r\n  } else {\r\n    chance = 0;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nfunction getCritFailurePercent(bonus, DC, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -29) {\r\n    chance = 95;\r\n  } else if (dif < -10) {\r\n    chance = (-10 - dif) * 5;\r\n  } else if (dif < -1) {\r\n    chance = 5;\r\n  } else {\r\n    chance = 0;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nconst addDamage = (\r\n  context,\r\n  type,\r\n  material,\r\n  persistent,\r\n  staticDamage,\r\n  damageDist,\r\n  multiplier\r\n) => {\r\n  if (persistent) {\r\n    context = context.persistent;\r\n  } else {\r\n    context = context.normal;\r\n  }\r\n  [staticDamage, damageDist] = multiplyDist(\r\n    staticDamage,\r\n    damageDist,\r\n    multiplier\r\n  );\r\n  if (!(type in context)) {\r\n    context[type] = { material, staticDamage, damageDist };\r\n  } else {\r\n    context[type].staticDamage += staticDamage;\r\n    context[type].damageDist = convolve(context[type].damageDist, damageDist);\r\n    if (material !== materials.NONE) context[type].material = material;\r\n  }\r\n};\r\n\r\nfunction calculateExpectedDamage(\r\n  activity,\r\n  damages,\r\n  target,\r\n  targetState,\r\n  weaknesses,\r\n  defenseBonus,\r\n  resistanceBonus\r\n) {\r\n  let bonus;\r\n  let DC;\r\n  switch (activity.type) {\r\n    case activityTypes.STRIKE:\r\n      bonus = activity.value;\r\n      bonus += MAPvalues[activity.MAP];\r\n      DC = target[activity.targetType] + defenseBonus - targetState.frightened;\r\n      if (activity.targetType === defenses.AC) {\r\n        if (target.flatfooted || targetState.flatfooted) DC -= 2;\r\n      } else {\r\n        DC += 10;\r\n      }\r\n      break;\r\n\r\n    case activityTypes.SAVE:\r\n      bonus =\r\n        target[activity.targetType] + defenseBonus - targetState.frightened;\r\n      DC = activity.value;\r\n      if (activity.targetType === defenses.AC) {\r\n        bonus -= 10;\r\n      }\r\n      break;\r\n\r\n    default:\r\n      console.log(`Activity type ${activity.type} not implemented`);\r\n  }\r\n\r\n  let critPercent = getCritSuccessPercent(bonus, DC);\r\n  let succPercent = getSuccessPercent(bonus, DC);\r\n  let failPercent = getFailurePercent(bonus, DC);\r\n  let crfaPercent = getCritFailurePercent(bonus, DC);\r\n  if (activity.rollType === rollTypes.ADVANTAGE) {\r\n    let notcrit = 100 - critPercent;\r\n    critPercent = 100 - (notcrit * notcrit) / 100;\r\n    let nothit = notcrit - succPercent;\r\n    succPercent = 100 - (nothit * nothit) / 100 - critPercent;\r\n    let notfail = nothit - failPercent;\r\n    failPercent = 100 - (notfail * notfail) / 100 - succPercent - critPercent;\r\n    crfaPercent = (crfaPercent * crfaPercent) / 100;\r\n  } else if (activity.rollType === rollTypes.DISADVANTAGE) {\r\n    let notcrfa = 100 - crfaPercent;\r\n    crfaPercent = 100 - (notcrfa * notcrfa) / 100;\r\n    let notfail = notcrfa - failPercent;\r\n    failPercent = 100 - (notfail * notfail) / 100 - crfaPercent;\r\n    let notsucc = notfail - succPercent;\r\n    succPercent = 100 - (notsucc * notsucc) / 100 - failPercent - crfaPercent;\r\n    critPercent = (critPercent * critPercent) / 100;\r\n  }\r\n  const chances = [\r\n    critPercent / 100,\r\n    succPercent / 100,\r\n    failPercent / 100,\r\n    crfaPercent / 100,\r\n  ];\r\n  const critDamages = { normal: {}, persistent: {} };\r\n  const succDamages = { normal: {}, persistent: {} };\r\n  const failDamages = { normal: {}, persistent: {} };\r\n  const crfaDamages = { normal: {}, persistent: {} };\r\n  const damageTrees = [critDamages, succDamages, failDamages, crfaDamages];\r\n\r\n  // go through each damage and evaluate it, put damage types together\r\n  damages.forEach((damage) => {\r\n    let {\r\n      damageCondition,\r\n      diceNum,\r\n      diceSize,\r\n      staticDamage,\r\n      damageType,\r\n      material,\r\n      persistent,\r\n    } = damage;\r\n    if (!staticDamage) staticDamage = 0;\r\n\r\n    let damageDist = [1];\r\n    const diceArray = [];\r\n    for (let i = 0; i < diceSize; i++) {\r\n      diceArray.push(1 / diceSize);\r\n    }\r\n    for (let i = 0; i < diceNum; i++) {\r\n      damageDist = convolve(damageDist, diceArray);\r\n    }\r\n    staticDamage += diceNum;\r\n\r\n    switch (damageCondition) {\r\n      case dCond.STRIKE:\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        addDamage(\r\n          critDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          2\r\n        );\r\n        break;\r\n\r\n      case dCond.BASIC:\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          0.5\r\n        );\r\n        addDamage(\r\n          failDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        addDamage(\r\n          crfaDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          2\r\n        );\r\n        break;\r\n\r\n      case dCond.CRIF:\r\n        addDamage(\r\n          crfaDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        break;\r\n\r\n      case dCond.FAIL:\r\n        addDamage(\r\n          failDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        break;\r\n\r\n      case dCond.SUCC:\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        break;\r\n\r\n      case dCond.CRIT:\r\n        addDamage(\r\n          critDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        break;\r\n\r\n      case dCond.AT_LEAST_SUCC:\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        addDamage(\r\n          critDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        break;\r\n\r\n      case dCond.AT_LEAST_FAIL:\r\n        addDamage(\r\n          failDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        addDamage(\r\n          critDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        break;\r\n\r\n      case dCond.FAIL_WORSE:\r\n        addDamage(\r\n          crfaDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        addDamage(\r\n          failDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        break;\r\n\r\n      case dCond.SUCC_WORSE:\r\n        addDamage(\r\n          crfaDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        addDamage(\r\n          failDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n\r\n        break;\r\n\r\n      case dCond.ALWAYS:\r\n        addDamage(\r\n          crfaDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        addDamage(\r\n          failDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        addDamage(\r\n          critDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        break;\r\n\r\n      default:\r\n        console.log(\r\n          `Damage condition ${damage.condition} not implemented yet.`\r\n        );\r\n    }\r\n  });\r\n\r\n  // for each damage group\r\n  // console.log(damageTrees);\r\n  for (let damageTree of damageTrees) {\r\n    for (let damageQuality of [\"normal\", \"persistent\"]) {\r\n      let totalStaticDamage = 0;\r\n      let totalDamageDist = [1];\r\n      for (let type in damageTree[damageQuality]) {\r\n        let { material, staticDamage, damageDist } =\r\n          damageTree[damageQuality][type];\r\n\r\n        // ignore if there's 0 damage\r\n        if (damageDist.length === 1 && staticDamage <= 0) continue;\r\n\r\n        // make min damage 1 before resistances\r\n        [staticDamage, damageDist] = applyMin(staticDamage, damageDist, 1);\r\n\r\n        // find max weakness and resistance, weaknesses are negative numbers\r\n        let maxW = 0;\r\n        let maxR = 0;\r\n        weaknesses.forEach((weakness) => {\r\n          if (weakness.type === type || weakness.type === material) {\r\n            if (weakness.value + resistanceBonus < 0) {\r\n              maxW = Math.min(maxW, weakness.value + resistanceBonus);\r\n            } else if (weakness.value + resistanceBonus > 0) {\r\n              maxR = Math.max(maxR, weakness.value + resistanceBonus);\r\n            }\r\n          }\r\n        });\r\n        staticDamage = staticDamage - (maxR + maxW);\r\n\r\n        // make min damage 0 after resistances\r\n        [staticDamage, damageDist] = applyMin(staticDamage, damageDist, 0);\r\n\r\n        // console.log([staticDamage, damageDist]);\r\n\r\n        // damageTree[damageQuality][type].staticDamage = staticDamage;\r\n        // damageTree[damageQuality][type].damageDist = damageDist;\r\n        totalStaticDamage += staticDamage;\r\n        totalDamageDist = convolve(totalDamageDist, damageDist);\r\n      }\r\n      damageTree[damageQuality].staticDamage = totalStaticDamage;\r\n      damageTree[damageQuality].damageDist = totalDamageDist;\r\n    }\r\n  }\r\n\r\n  return [damageTrees, chances];\r\n}\r\n\r\nexport { calculateExpectedDamage };\r\n","import { convolve, consolidateDists } from \"./Distribution\";\r\nimport { calculateExpectedDamage } from \"./Calculation\";\r\nimport { conditions, effectTypes } from \"../types\";\r\n\r\nfunction validateCondition(condition, degreeOfSuccess) {\r\n  let indicies = [];\r\n  // console.log(`cond is: ${ap.condition}`);\r\n  switch (condition) {\r\n    case conditions.ALWAYS:\r\n      indicies = [0, 1, 2, 3];\r\n      break;\r\n\r\n    case conditions.AT_LEAST_FAIL:\r\n      indicies = [0, 1, 2];\r\n      break;\r\n\r\n    case conditions.AT_LEAST_SUCC:\r\n      indicies = [0, 1];\r\n      break;\r\n\r\n    case conditions.CRIF:\r\n      indicies = [3];\r\n      break;\r\n\r\n    case conditions.CRIT:\r\n      indicies = [0];\r\n      break;\r\n\r\n    case conditions.FAIL:\r\n      indicies = [2];\r\n      break;\r\n\r\n    case conditions.FAIL_WORSE:\r\n      indicies = [2, 3];\r\n      break;\r\n\r\n    case conditions.SUCC:\r\n      indicies = [1];\r\n      break;\r\n\r\n    case conditions.SUCC_WORSE:\r\n      indicies = [1, 2, 3];\r\n      break;\r\n\r\n    default:\r\n  }\r\n  return indicies.includes(degreeOfSuccess);\r\n}\r\n\r\nclass ActivityPathEvaluator {\r\n  constructor(activityPaths, targets, damages, effects, weaknesses) {\r\n    this.activityPaths = activityPaths;\r\n    this.targets = targets;\r\n    this.damages = damages;\r\n    this.effects = effects;\r\n    this.weaknesses = weaknesses;\r\n  }\r\n\r\n  evalPath(activityPath, targetState, defenseBonus, resistanceBonus) {\r\n    // evaluate this and all following APs\r\n    let currentTarget = this.targets[0];\r\n    let currentDamages = activityPath.damages.map(\r\n      (damageId) => this.damages[damageId]\r\n    );\r\n    currentDamages.push(activityPath);\r\n    let currentEffects = activityPath.effects.map(\r\n      (effectId) => this.effects[effectId]\r\n    );\r\n    let currentWeaknesses = currentTarget.weaknesses.map(\r\n      (weaknessId) => this.weaknesses[weaknessId]\r\n    );\r\n\r\n    // calculate the expected damage for this activity\r\n    let [damageTrees, chances] = calculateExpectedDamage(\r\n      activityPath,\r\n      currentDamages,\r\n      currentTarget,\r\n      targetState,\r\n      currentWeaknesses,\r\n      defenseBonus,\r\n      resistanceBonus\r\n    );\r\n\r\n    const targetStates = [targetState, targetState, targetState, targetState];\r\n    // go through each degree of success\r\n    for (let i = 0; i < 4; i++) {\r\n      // go though each effect and update targetStates\r\n      currentEffects.forEach((effect) => {\r\n        let { effectCondition, effectType } = effect;\r\n        if (validateCondition(effectCondition, i)) {\r\n          switch (effectType) {\r\n            case effectTypes.FLATFOOT:\r\n              if (targetStates[i].flatfooted !== true)\r\n                targetStates[i] = { ...targetStates[i], flatfooted: true };\r\n              break;\r\n\r\n            case effectTypes.FRIGHTENED1:\r\n              if (targetStates[i].frightened < 1)\r\n                targetStates[i] = {\r\n                  ...targetStates[i],\r\n                  frightened: 1,\r\n                };\r\n              break;\r\n            case effectTypes.FRIGHTENED2:\r\n              if (targetStates[i].frightened < 2)\r\n                targetStates[i] = {\r\n                  ...targetStates[i],\r\n                  frightened: 2,\r\n                };\r\n              break;\r\n            case effectTypes.FRIGHTENED3:\r\n              if (targetStates[i].frightened < 3)\r\n                targetStates[i] = {\r\n                  ...targetStates[i],\r\n                  frightened: 3,\r\n                };\r\n              break;\r\n            case effectTypes.FRIGHTENED4:\r\n              if (targetStates[i].frightened < 4)\r\n                targetStates[i] = {\r\n                  ...targetStates[i],\r\n                  frightened: 4,\r\n                };\r\n              break;\r\n\r\n            default:\r\n              console.log(`Effect type ${effectType} not implemented`);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // go through each activity path, depending on its condition add its damage distributions to this activities appropriately\r\n    activityPath.apIds.forEach((apId) => {\r\n      let ap = this.activityPaths[apId];\r\n\r\n      const evaluations = new Map();\r\n      // go through each degree of success\r\n      for (let i = 0; i < 4; i++) {\r\n        // evaluate if necessary and add distribution to damageTrees\r\n        if (validateCondition(ap.condition, i)) {\r\n          if (evaluations.has(targetStates[i])) {\r\n            // already evaluated\r\n          } else {\r\n            let [pathDist, pathPDist] = this.evalPath(\r\n              ap,\r\n              targetStates[i],\r\n              defenseBonus\r\n            );\r\n            evaluations.set(targetStates[i], { pathDist, pathPDist });\r\n          }\r\n          damageTrees[i].normal.damageDist = convolve(\r\n            damageTrees[i].normal.damageDist,\r\n            evaluations.get(targetStates[i]).pathDist\r\n          );\r\n          damageTrees[i].persistent.damageDist = convolve(\r\n            damageTrees[i].persistent.damageDist,\r\n            evaluations.get(targetStates[i]).pathPDist\r\n          );\r\n        }\r\n      }\r\n    });\r\n\r\n    let damageDist = consolidateDists(\r\n      [damageTrees[0].normal, chances[0]],\r\n      [damageTrees[1].normal, chances[1]],\r\n      [damageTrees[2].normal, chances[2]],\r\n      [damageTrees[3].normal, chances[3]]\r\n    );\r\n    let PdamageDist = consolidateDists(\r\n      [damageTrees[0].persistent, chances[0]],\r\n      [damageTrees[1].persistent, chances[1]],\r\n      [damageTrees[2].persistent, chances[2]],\r\n      [damageTrees[3].persistent, chances[3]]\r\n    );\r\n\r\n    return [damageDist, PdamageDist];\r\n  }\r\n}\r\n\r\nexport default ActivityPathEvaluator;\r\n","import React, { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { convolve } from \"../Calculation/Distribution\";\r\nimport { selectactivityPathEntities } from \"../Routine/activityPathSlice\";\r\nimport { selectdamageEntities } from \"../Routine/damageSlice\";\r\nimport { selectRoutineEntities } from \"../Routine/routineSlice\";\r\nimport { selecttargetEntities } from \"../Target/targetSlice\";\r\nimport { selectweaknessEntities } from \"../Target/weaknessSlice\";\r\n\r\nimport ActivityPathEvaluator from \"../Calculation/EvaluateActivityPath\";\r\n\r\n// import Plot from \"react-plotly.js\";\r\nimport Plotly from \"plotly.js-basic-dist\";\r\nimport createPlotlyComponent from \"react-plotly.js/factory\";\r\nimport { defenses, graphTypes } from \"../types\";\r\nimport { selecteffectEntities } from \"../Routine/effectSlice\";\r\nconst Plot = createPlotlyComponent(Plotly);\r\n\r\nconst Display = () => {\r\n  // evaluates routines and displays appropriate graphs\r\n\r\n  const [addPersistent, setAddPersistent] = useState(false);\r\n  const [graphType, setGraphType] = useState(graphTypes.DISTRIBUTION);\r\n  // const [perMulti, setPerMulti] = useState(2);\r\n\r\n  const routines = useSelector(selectRoutineEntities);\r\n  const activityPaths = useSelector(selectactivityPathEntities);\r\n  const targets = useSelector(selecttargetEntities);\r\n  const damages = useSelector(selectdamageEntities);\r\n  const effects = useSelector(selecteffectEntities);\r\n  const weaknesses = useSelector(selectweaknessEntities);\r\n\r\n  const currentTarget = targets[0];\r\n  let title = \"Expected Damage\";\r\n  if (\r\n    graphType === graphTypes.DISTRIBUTION ||\r\n    graphType === graphTypes.PMDEFENSE ||\r\n    graphType === graphTypes.PMRES\r\n  ) {\r\n    title += \" Vs \";\r\n    title += \" AC: \" + currentTarget[defenses.AC];\r\n    title += \" Fort: \" + currentTarget[defenses.FORT];\r\n    title += \" Ref: \" + currentTarget[defenses.REF];\r\n    title += \" Will: \" + currentTarget[defenses.WILL];\r\n    title += \" Per: \" + currentTarget[defenses.PER];\r\n  }\r\n\r\n  const evaluator = new ActivityPathEvaluator(\r\n    activityPaths,\r\n    targets,\r\n    damages,\r\n    effects,\r\n    weaknesses\r\n  );\r\n  const initialTargetState = {\r\n    flatfooted: false,\r\n    frightened: 0,\r\n  };\r\n\r\n  let minbonus = 0;\r\n  let maxbonus = 0;\r\n  if (graphType === graphTypes.PMDEFENSE || graphType === graphTypes.PMRES) {\r\n    minbonus = -5;\r\n    maxbonus = 5;\r\n  }\r\n\r\n  let maxDamage = 0;\r\n  let maxPDamage = 0;\r\n  const datasets = [];\r\n  const perDatasets = [];\r\n  const expectedDamages = [];\r\n  const expectedPersistentDamages = [];\r\n\r\n  // go through routines, evaluate them, and put data together for use in charts\r\n  for (let id in routines) {\r\n    let routine = routines[id];\r\n    if (!routine.display) continue;\r\n\r\n    const bonusArray = [];\r\n    const expDbyBonus = [];\r\n    const expPDbyBonus = [];\r\n    // if not doing a +/- graph, bonus is just 0\r\n    for (let bonus = minbonus; bonus <= maxbonus; bonus++) {\r\n      bonusArray.push(bonus);\r\n      // calculate distribution for this routine with this bonus\r\n      let ACBonus = bonus;\r\n      let resBonus = 0;\r\n      if (graphType === graphTypes.PMRES) {\r\n        ACBonus = 0;\r\n        resBonus = bonus;\r\n      }\r\n      let expD = 0;\r\n      let expP = 0;\r\n      let routineDDist = [1];\r\n      let routinePDDist = [1];\r\n      for (let i = 0; i < routine.apIds.length; i++) {\r\n        let activityPath = activityPaths[routine.apIds[i]];\r\n        let [damageDist, PdamageDist] = evaluator.evalPath(\r\n          activityPath,\r\n          initialTargetState,\r\n          ACBonus,\r\n          resBonus\r\n        );\r\n        routineDDist = convolve(routineDDist, damageDist);\r\n        routinePDDist = convolve(routinePDDist, PdamageDist);\r\n      }\r\n      maxDamage = Math.max(maxDamage, routineDDist.length - 1);\r\n      maxPDamage = Math.max(maxPDamage, routinePDDist.length - 1);\r\n\r\n      const dataArray = [];\r\n      const cumulative = [];\r\n      const PdataArray = [];\r\n      const Pcumulative = [];\r\n\r\n      let currentSum = 1;\r\n      for (let i = 0; i < routineDDist.length; i++) {\r\n        if (graphType === graphTypes.DISTRIBUTION) {\r\n          dataArray.push(i);\r\n          cumulative.push(currentSum);\r\n          currentSum -= routineDDist[i];\r\n        }\r\n        expD += routineDDist[i] * i;\r\n      }\r\n      currentSum = 1;\r\n      for (let i = 0; i < routinePDDist.length; i++) {\r\n        if (graphType === graphTypes.DISTRIBUTION) {\r\n          PdataArray.push(i);\r\n          Pcumulative.push(currentSum);\r\n          currentSum -= routinePDDist[i];\r\n        }\r\n        expP += routinePDDist[i] * i;\r\n      }\r\n\r\n      // add data depending on chart type\r\n      if (bonus === 0) {\r\n        expectedDamages.push(\r\n          <div key={routine.id}>\r\n            {routine.name}\r\n            {\": \"}\r\n            {expD.toFixed(2)}\r\n          </div>\r\n        );\r\n        expectedPersistentDamages.push(\r\n          <div key={routine.id}>\r\n            {routine.name}\r\n            {\": \"}\r\n            {expP.toFixed(2)}\r\n          </div>\r\n        );\r\n      }\r\n      if (graphType === graphTypes.DISTRIBUTION) {\r\n        datasets.push({\r\n          type: \"scatter\",\r\n          name: routine.name,\r\n          x: dataArray,\r\n          y: cumulative,\r\n          yaxis: \"y\",\r\n        });\r\n        datasets.push({\r\n          type: \"bar\",\r\n          name: expD.toFixed(2),\r\n          x: dataArray,\r\n          y: routineDDist,\r\n        });\r\n        perDatasets.push({\r\n          type: \"scatter\",\r\n          name: routine.name,\r\n          x: PdataArray,\r\n          y: Pcumulative,\r\n        });\r\n        perDatasets.push({\r\n          type: \"bar\",\r\n          name: expP.toFixed(2),\r\n          x: PdataArray,\r\n          y: routinePDDist,\r\n        });\r\n      } else if (\r\n        graphType === graphTypes.PMDEFENSE ||\r\n        graphType === graphTypes.PMRES\r\n      ) {\r\n        expDbyBonus.push(expD);\r\n        expPDbyBonus.push(expP);\r\n      }\r\n    }\r\n    if (graphType === graphTypes.PMDEFENSE || graphType === graphTypes.PMRES) {\r\n      datasets.push({\r\n        type: \"scatter\",\r\n        name: routine.name,\r\n        x: bonusArray,\r\n        y: expDbyBonus,\r\n        yaxis: \"y\",\r\n      });\r\n      perDatasets.push({\r\n        type: \"scatter\",\r\n        name: routine.name,\r\n        x: bonusArray,\r\n        y: expPDbyBonus,\r\n        yaxis: \"y\",\r\n      });\r\n    }\r\n  }\r\n  // Done evaluating routines and putting data together\r\n\r\n  // create appropriate labels and charts\r\n  const labels = [];\r\n  const Plabels = [];\r\n  let xtitle;\r\n  let ytitle;\r\n  if (graphType === graphTypes.DISTRIBUTION) {\r\n    xtitle = \"damage\";\r\n    ytitle = \"chance\";\r\n    for (let i = 0; i <= maxDamage; i++) {\r\n      labels.push(i);\r\n    }\r\n    for (let i = 0; i <= maxPDamage; i++) {\r\n      Plabels.push(i);\r\n    }\r\n  } else if (graphType === graphTypes.PMDEFENSE) {\r\n    xtitle = \"+/- AC/Save Bonus\";\r\n    ytitle = \"Expected Damage\";\r\n    for (let i = minbonus; i <= maxbonus; i++) {\r\n      labels.push(i);\r\n      Plabels.push(i);\r\n    }\r\n  } else if (graphType === graphTypes.PMRES) {\r\n    xtitle = \"+/- Resistance/Weakness\";\r\n    ytitle = \"Expected Damage\";\r\n    for (let i = minbonus; i <= maxbonus; i++) {\r\n      labels.push(i);\r\n      Plabels.push(i);\r\n    }\r\n  }\r\n\r\n  let damageChart = (\r\n    <Plot\r\n      classname=\"plot\"\r\n      data={datasets}\r\n      layout={{\r\n        title: title,\r\n        autosize: true,\r\n        xaxis: { title: xtitle },\r\n        yaxis: { title: ytitle },\r\n        legend: {\r\n          x: 1,\r\n          y: 1,\r\n          xanchor: \"right\",\r\n        },\r\n        margin: {\r\n          l: 40,\r\n          r: 40,\r\n        },\r\n      }}\r\n      useResizeHandler={true}\r\n      style={{ width: \"100%\", height: \"100%\" }}\r\n    />\r\n  );\r\n  let persistentDamageChart = (\r\n    <Plot\r\n      classname=\"plot\"\r\n      data={perDatasets}\r\n      layout={{\r\n        title: \"Expected Persistent Damage\",\r\n        autosize: true,\r\n        xaxis: { title: \"persistent damage\" },\r\n        yaxis: { title: \"chance\" },\r\n        legend: {\r\n          x: 1,\r\n          y: 1,\r\n          xanchor: \"right\",\r\n        },\r\n        margin: {\r\n          l: 40,\r\n          r: 40,\r\n        },\r\n      }}\r\n      useResizeHandler={true}\r\n      style={{ width: \"100%\", height: \"100%\" }}\r\n    />\r\n  );\r\n\r\n  const graphTypeOptions = [];\r\n  for (let gt in graphTypes) {\r\n    graphTypeOptions.push(<option key={gt}>{graphTypes[gt]}</option>);\r\n  }\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      {\"Graph Type: \"}\r\n      <select value={graphType} onChange={(e) => setGraphType(e.target.value)}>\r\n        {graphTypeOptions}\r\n      </select>\r\n      {\" Show persistent damage: \"}\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={addPersistent}\r\n        onChange={(e) => setAddPersistent(e.target.checked)}\r\n      />\r\n      {/* , persistent damage multiplier:\r\n      <input\r\n        type=\"number\"\r\n        value={perMulti ? perMulti : 0}\r\n        onChange={(e) => setPerMulti(e.target.valueAsNumber)}\r\n      /> */}\r\n      <div>\r\n        Expected Damage:\r\n        {expectedDamages}\r\n      </div>\r\n      {damageChart}\r\n      {!addPersistent ? (\r\n        \"\"\r\n      ) : (\r\n        <div>\r\n          <div>\r\n            Expected Persistent Damage:\r\n            {expectedPersistentDamages}\r\n          </div>\r\n          {persistentDamageChart}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Display;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  activityTypes,\r\n  conditions,\r\n  damageTypes,\r\n  dCond,\r\n  defaultActivities,\r\n  defenses,\r\n  diceNums,\r\n  diceSizes,\r\n  effectTypes,\r\n  MAPs,\r\n  materials,\r\n  rollTypes,\r\n} from \"../types\";\r\nimport {\r\n  activityPathCreated,\r\n  activityPathUpdated,\r\n  activityPathRemoved,\r\n  selectactivityPathById,\r\n} from \"./activityPathSlice\";\r\n\r\nimport {\r\n  damageCreated,\r\n  damageRemoved,\r\n  damageUpdated,\r\n  selectdamageById,\r\n} from \"./damageSlice\";\r\nimport {\r\n  effectCreated,\r\n  effectRemoved,\r\n  effectUpdated,\r\n  selecteffectById,\r\n} from \"./effectSlice\";\r\nimport { routineUpdated, selectRoutineById } from \"./routineSlice\";\r\n\r\nconst conditionOptions = [];\r\nfor (let c in conditions) {\r\n  conditionOptions.push(<option key={c}>{conditions[c]}</option>);\r\n}\r\nconst defaultActivityOptions = [];\r\nfor (let da in defaultActivities) {\r\n  defaultActivityOptions.push(\r\n    <option key={da}>{defaultActivities[da]}</option>\r\n  );\r\n}\r\n\r\nconst activityTypeOptions = [];\r\nfor (let at in activityTypes) {\r\n  activityTypeOptions.push(<option key={at}>{activityTypes[at]}</option>);\r\n}\r\nconst MAPOptions = [];\r\nfor (let m in MAPs) {\r\n  MAPOptions.push(<option key={m}>{MAPs[m]}</option>);\r\n}\r\nconst defenseOptions = [];\r\nfor (let d in defenses) {\r\n  defenseOptions.push(<option key={d}>{defenses[d]}</option>);\r\n}\r\nconst rollOptions = [];\r\nfor (let rt in rollTypes) {\r\n  rollOptions.push(<option key={rt}>{rollTypes[rt]}</option>);\r\n}\r\n\r\nconst damageConditionOptions = [];\r\nfor (let dc in dCond) {\r\n  damageConditionOptions.push(<option key={dc}>{dCond[dc]}</option>);\r\n}\r\nconst diceNumOptions = [];\r\nfor (let dn in diceNums) {\r\n  diceNumOptions.push(<option key={dn}>{dn}</option>);\r\n}\r\nconst diceSizeOptions = [];\r\nfor (let ds in diceSizes) {\r\n  diceSizeOptions.push(<option key={ds}>{ds}</option>);\r\n}\r\nconst damageTypeOptions = [];\r\nfor (let dt in damageTypes) {\r\n  damageTypeOptions.push(<option key={dt}>{damageTypes[dt]}</option>);\r\n}\r\nconst materialOptions = [];\r\nfor (let m in materials) {\r\n  materialOptions.push(<option key={m}>{materials[m]}</option>);\r\n}\r\nconst effectTypeOptions = [];\r\nfor (let et in effectTypes) {\r\n  effectTypeOptions.push(<option key={et}>{effectTypes[et]}</option>);\r\n}\r\n\r\nfunction SelectedRoutine({ routineId }) {\r\n  // const selectedRoutine = useSelector(selectSelectedRoutine);\r\n  const apIds = useSelector((state) =>\r\n    selectRoutineById(state, routineId)\r\n  ).apIds;\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className=\"selectedRoutine\">\r\n      <NameInput id={routineId} />\r\n      {apIds.map((apId) => (\r\n        <ActivityPath\r\n          id={apId}\r\n          routineId={routineId}\r\n          key={apId}\r\n          displayCondition={false}\r\n        />\r\n      ))}\r\n      <button\r\n        className=\"add\"\r\n        onClick={() => dispatch(activityPathCreated({ routineId: routineId }))}\r\n      >\r\n        +\r\n      </button>\r\n      {/* <EffectInput /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst NameInput = ({ id }) => {\r\n  const dispatch = useDispatch();\r\n  const name = useSelector((state) => selectRoutineById(state, id)).name;\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      <label htmlFor=\"routineName\">Routine Name:</label>\r\n      <input\r\n        id=\"routineName\"\r\n        type=\"text\"\r\n        placeholder=\"Enter routine name\"\r\n        value={name}\r\n        onChange={(e) =>\r\n          dispatch(routineUpdated({ id, changes: { name: e.target.value } }))\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ActivityPath = ({ id, parentId, routineId, displayCondition = true }) => {\r\n  const {\r\n    condition,\r\n    level,\r\n    override,\r\n    defaultActivity,\r\n    type,\r\n    targetType,\r\n    value,\r\n    MAP,\r\n    rollType,\r\n    damageCondition,\r\n    diceNum,\r\n    diceSize,\r\n    staticDamage,\r\n    damageType,\r\n    material,\r\n    damages,\r\n    effects,\r\n    apIds,\r\n  } = useSelector((state) => selectactivityPathById(state, id));\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      {displayCondition ? (\r\n        <div>\r\n          {\"Condition: \"}\r\n          <select\r\n            value={condition}\r\n            onChange={(e) =>\r\n              dispatch(\r\n                activityPathUpdated({\r\n                  id,\r\n                  changes: { condition: e.target.value },\r\n                })\r\n              )\r\n            }\r\n          >\r\n            {conditionOptions}\r\n          </select>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n\r\n      <div className=\"\">\r\n        <div className=\"flexbox\">\r\n          <button\r\n            className=\"delete\"\r\n            onClick={(e) => {\r\n              dispatch(activityPathRemoved({ id, parentId, routineId }));\r\n            }}\r\n          >\r\n            -\r\n          </button>\r\n          <span className=\"input\">\r\n            <label htmlFor=\"override\">{\"Override: \"}</label>\r\n            <input\r\n              id=\"override\"\r\n              type=\"checkbox\"\r\n              checked={override}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { override: e.target.checked },\r\n                  })\r\n                )\r\n              }\r\n            />\r\n          </span>\r\n          <span className=\"input\">\r\n            <label htmlFor=\"Level\">{\" Level: \"}</label>\r\n            <input\r\n              id=\"Level\"\r\n              type=\"number\"\r\n              value={level}\r\n              min={1}\r\n              max={20}\r\n              onChange={(e) => {\r\n                let level = parseInt(e.target.value) || 1;\r\n                if (level > 20) level = 20;\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: {\r\n                      level,\r\n                    },\r\n                  })\r\n                );\r\n              }}\r\n            />\r\n          </span>\r\n\r\n          <span className=\"input\">\r\n            {/* <input\r\n              type=\"checkbox\"\r\n              checked={useDefault}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { useDefault: e.target.checked },\r\n                  })\r\n                )\r\n              }\r\n            /> */}\r\n            <select\r\n              value={defaultActivity}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { defaultActivity: e.target.value },\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              {defaultActivityOptions}\r\n            </select>\r\n          </span>\r\n\r\n          <span className=\"input\">\r\n            <select\r\n              value={type}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  activityPathUpdated({ id, changes: { type: e.target.value } })\r\n                )\r\n              }\r\n            >\r\n              {activityTypeOptions}\r\n            </select>\r\n            {type === activityTypes.STRIKE ? \" +\" : \" DC: \"}\r\n            <input\r\n              type=\"number\"\r\n              value={value ? value : 0}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { value: parseInt(e.target.value) },\r\n                  })\r\n                )\r\n              }\r\n            />\r\n          </span>\r\n          <span className=\"input\">\r\n            {\" MAP: \"}\r\n            <select\r\n              value={MAP}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  activityPathUpdated({ id, changes: { MAP: e.target.value } })\r\n                )\r\n              }\r\n            >\r\n              {MAPOptions}\r\n            </select>\r\n          </span>\r\n          <span className=\"input\">\r\n            {\" VS: \"}\r\n            <select\r\n              value={targetType}\r\n              onChange={(e) => {\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { targetType: e.target.value },\r\n                  })\r\n                );\r\n              }}\r\n            >\r\n              {defenseOptions}\r\n            </select>\r\n          </span>\r\n          <span className=\"input\">\r\n            <select\r\n              value={rollType}\r\n              onChange={(e) => {\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { rollType: e.target.value },\r\n                  })\r\n                );\r\n              }}\r\n            >\r\n              {rollOptions}\r\n            </select>\r\n          </span>\r\n        </div>\r\n        <div className=\"flexbox\">\r\n          Damage:\r\n          <select\r\n            value={damageCondition}\r\n            onChange={(e) =>\r\n              dispatch(\r\n                activityPathUpdated({\r\n                  id,\r\n                  changes: { damageCondition: e.target.value },\r\n                })\r\n              )\r\n            }\r\n          >\r\n            {damageConditionOptions}\r\n          </select>\r\n          <select\r\n            value={diceNum}\r\n            onChange={(e) =>\r\n              dispatch(\r\n                activityPathUpdated({\r\n                  id,\r\n                  changes: { diceNum: parseInt(e.target.value) },\r\n                })\r\n              )\r\n            }\r\n          >\r\n            {diceNumOptions}\r\n          </select>\r\n          d\r\n          <select\r\n            value={diceSize}\r\n            onChange={(e) =>\r\n              dispatch(\r\n                activityPathUpdated({\r\n                  id,\r\n                  changes: { diceSize: parseInt(e.target.value) },\r\n                })\r\n              )\r\n            }\r\n          >\r\n            {diceSizeOptions}\r\n          </select>\r\n          {\" + \"}\r\n          <input\r\n            type=\"number\"\r\n            value={staticDamage ? staticDamage : 0}\r\n            onChange={(e) =>\r\n              dispatch(\r\n                activityPathUpdated({\r\n                  id,\r\n                  changes: { staticDamage: parseInt(e.target.value) },\r\n                })\r\n              )\r\n            }\r\n          />\r\n          <select\r\n            value={damageType}\r\n            onChange={(e) => {\r\n              dispatch(\r\n                activityPathUpdated({\r\n                  id,\r\n                  changes: { damageType: e.target.value },\r\n                })\r\n              );\r\n            }}\r\n          >\r\n            {damageTypeOptions}\r\n          </select>\r\n          <select\r\n            value={material}\r\n            onChange={(e) => {\r\n              dispatch(\r\n                damageUpdated({ id, changes: { material: e.target.value } })\r\n              );\r\n            }}\r\n          >\r\n            {materialOptions}\r\n          </select>\r\n        </div>\r\n        <div className=\"box\">\r\n          {\"Additional Damage: \"}\r\n          {damages.map((damageId) => (\r\n            <Damage parentId={id} id={damageId} key={damageId} />\r\n          ))}\r\n          <button\r\n            className=\"add\"\r\n            onClick={() => dispatch(damageCreated({ parentId: id }))}\r\n          >\r\n            +\r\n          </button>\r\n        </div>\r\n        <div className=\"box\">\r\n          {\"Effects: \"}\r\n          {effects.map((effectId) => (\r\n            <Effect parentId={id} id={effectId} key={effectId} />\r\n          ))}\r\n          <button\r\n            className=\"add\"\r\n            onClick={() => dispatch(effectCreated({ parentId: id }))}\r\n          >\r\n            +\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"box\">\r\n        {apIds.map((apId) => (\r\n          <ActivityPath id={apId} parentId={id} key={apId} />\r\n        ))}\r\n        <button\r\n          className=\"add\"\r\n          onClick={() => dispatch(activityPathCreated({ parentId: id }))}\r\n        >\r\n          +\r\n        </button>\r\n        <button\r\n          className=\"add\"\r\n          onClick={() =>\r\n            dispatch(activityPathCreated({ parentId: id, applyMAP: true }))\r\n          }\r\n        >\r\n          +MAP\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Damage = ({ parentId, id }) => {\r\n  const {\r\n    damageCondition,\r\n    diceNum,\r\n    diceSize,\r\n    staticDamage,\r\n    damageType,\r\n    material,\r\n    persistent,\r\n  } = useSelector((state) => selectdamageById(state, id));\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      <button\r\n        className=\"delete\"\r\n        onClick={(e) => {\r\n          dispatch(damageRemoved({ id, parentId }));\r\n        }}\r\n      >\r\n        -\r\n      </button>\r\n      <select\r\n        value={damageCondition}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            damageUpdated({ id, changes: { damageCondition: e.target.value } })\r\n          )\r\n        }\r\n      >\r\n        {damageConditionOptions}\r\n      </select>\r\n      <select\r\n        value={diceNum}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            damageUpdated({\r\n              id,\r\n              changes: { diceNum: parseInt(e.target.value) },\r\n            })\r\n          )\r\n        }\r\n      >\r\n        {diceNumOptions}\r\n      </select>\r\n      d\r\n      <select\r\n        value={diceSize}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            damageUpdated({\r\n              id,\r\n              changes: { diceSize: parseInt(e.target.value) },\r\n            })\r\n          )\r\n        }\r\n      >\r\n        {diceSizeOptions}\r\n      </select>\r\n      {\" + \"}\r\n      <input\r\n        type=\"number\"\r\n        value={staticDamage}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            damageUpdated({\r\n              id,\r\n              changes: { staticDamage: parseInt(e.target.value) },\r\n            })\r\n          )\r\n        }\r\n      />\r\n      <select\r\n        value={damageType}\r\n        onChange={(e) => {\r\n          dispatch(\r\n            damageUpdated({ id, changes: { damageType: e.target.value } })\r\n          );\r\n        }}\r\n      >\r\n        {damageTypeOptions}\r\n      </select>\r\n      <select\r\n        value={material}\r\n        onChange={(e) => {\r\n          dispatch(\r\n            damageUpdated({ id, changes: { material: e.target.value } })\r\n          );\r\n        }}\r\n      >\r\n        {materialOptions}\r\n      </select>\r\n      {\" Persistent: \"}\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={persistent}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            damageUpdated({\r\n              id,\r\n              changes: { persistent: e.target.checked },\r\n            })\r\n          )\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Effect = ({ parentId, id }) => {\r\n  const { effectCondition, effectType } = useSelector((state) =>\r\n    selecteffectById(state, id)\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      <button\r\n        className=\"delete\"\r\n        onClick={(e) => {\r\n          dispatch(effectRemoved({ id, parentId }));\r\n        }}\r\n      >\r\n        -\r\n      </button>\r\n      <select\r\n        value={effectCondition}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            effectUpdated({ id, changes: { effectCondition: e.target.value } })\r\n          )\r\n        }\r\n      >\r\n        {conditionOptions}\r\n      </select>\r\n      <select\r\n        value={effectType}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            effectUpdated({ id, changes: { effectType: e.target.value } })\r\n          )\r\n        }\r\n      >\r\n        {effectTypeOptions}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectedRoutine;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  routineCreated,\r\n  routineRemoved,\r\n  routineUpdated,\r\n  selectAllRoutines,\r\n  selectSelectedRoutine,\r\n  setRoutine,\r\n} from \"./Routine/routineSlice\";\r\n\r\nconst Routines = () => {\r\n  const routines = useSelector(selectAllRoutines);\r\n  const selectedRoutine = useSelector(selectSelectedRoutine);\r\n  const dispatch = useDispatch();\r\n\r\n  const routineOptions = [];\r\n  const routineDisplays = [];\r\n  routines.forEach((routine) => {\r\n    routineOptions.push(\r\n      <option value={routine.id} key={routine.id}>\r\n        {routine.name}\r\n      </option>\r\n    );\r\n    routineDisplays.push(\r\n      <div className=\"flexbox\" key={routine.id}>\r\n        <button\r\n          className=\"remove\"\r\n          onClick={() => dispatch(routineRemoved(routine.id))}\r\n        >\r\n          -\r\n        </button>\r\n        <span\r\n          className={routine.display ? \"routineOn\" : \"routineOff\"}\r\n          onClick={() =>\r\n            dispatch(\r\n              routineUpdated({\r\n                id: routine.id,\r\n                changes: { display: !routine.display },\r\n              })\r\n            )\r\n          }\r\n        >\r\n          {routine.name}\r\n        </span>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      Selected Routine:\r\n      <select\r\n        value={selectedRoutine}\r\n        onChange={(e) => dispatch(setRoutine(e.target.value))}\r\n      >\r\n        {routineOptions}\r\n      </select>\r\n      <button className=\"add\" onClick={() => dispatch(routineCreated())}>\r\n        +\r\n      </button>\r\n      <div className=\"routines\">{routineDisplays}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Routines;\r\n","import React from \"react\";\r\n// import { useSelector } from \"react-redux\";\r\n\r\nconst ImportExport = () => {\r\n  return <div className=\"box\">Import and Export Here</div>;\r\n};\r\n\r\nexport default ImportExport;\r\n","import React from \"react\";\r\nimport ReactGA from \"react-ga4\";\r\n// import { useSelector } from \"react-redux\";\r\n// import update from \"immutability-helper\";\r\n\r\n// //import { useSelector, useDispatch } from 'react-redux';\r\n// import { selectCurrentEffect } from \"./Effect/effectSlice\";\r\n\r\n// import {\r\n//   CheckboxInput,\r\n//   CollapsableInput,\r\n//   ByLevelInput,\r\n// } from \"./Effect/Inputs/CommonInputs.js\";\r\n\r\n// import MAP from \"./Effect/Model/MAP.js\";\r\n// import Proficiency from \"./Effect/Model/Proficiency.js\";\r\n// import AbilityScore from \"./Effect/Model/AbilityScore.js\";\r\n// import Modifier from \"./Effect/Model/Modifier.js\";\r\n// import AdditionalEffectArray from \"./Effect/Model/AdditionalEffectArray.js\";\r\n\r\n// import {\r\n//   totalBonusDescription,\r\n//   attackBonusDescription,\r\n//   totalDamageDescription,\r\n//   calculateExpectedDamage,\r\n// } from \"./Calculation.js\";\r\n\r\nimport TargetInput from \"./Target/TargetInput\";\r\nimport Display from \"./Display/Display\";\r\n// import { selectTarget, selectLevel } from \"./Target/targetSlice\";\r\n\r\nimport SelectedRoutine from \"./Routine/SelectedRoutine\";\r\nimport Routines from \"./Routines\";\r\nimport Export from \"./Export\";\r\n\r\nimport \"./PF2App.css\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectSelectedRoutine } from \"./Routine/routineSlice\";\r\n\r\n// function DisplayOutput(props) {\r\n//   // props: effect, target\r\n//   const target = useSelector(selectTarget);\r\n//   const effect = useSelector(selectCurrentEffect);\r\n//   return (\r\n//     <div className=\"Display\">\r\n//       <CollapsableInput\r\n//         description={\r\n//           \"Expected Damage: \" + calculateExpectedDamage(effect, target)\r\n//         }\r\n//         listInput=\"\"\r\n//       />\r\n//     </div>\r\n//   );\r\n// }\r\nReactGA.initialize(\"G-JR2YK097BG\");\r\n\r\nfunction PF2App(props) {\r\n  const selectedRoutine = useSelector(selectSelectedRoutine);\r\n  ReactGA.send(\"pageview\");\r\n\r\n  return (\r\n    <div className=\"PF2App\">\r\n      <TargetInput id={0} />\r\n      <Display />\r\n      <Routines />\r\n      {selectedRoutine !== undefined ? (\r\n        <SelectedRoutine routineId={selectedRoutine} />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {/* <SelectedRoutine /> */}\r\n\r\n      <Export />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PF2App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport routineReducer, { routineAdded } from \"./Routine/routineSlice\";\r\nimport activityPathReducer, {\r\n  activityPathAdded,\r\n} from \"./Routine/activityPathSlice\";\r\nimport damageReducer from \"./Routine/damageSlice\";\r\nimport effectReducer from \"./Routine/effectSlice\";\r\nimport targetReducer, { targetAdded } from \"./Target/targetSlice\";\r\nimport weaknessReducer from \"./Target/weaknessSlice\";\r\nimport {\r\n  activityTypes,\r\n  conditions,\r\n  damageTypes,\r\n  dCond,\r\n  defaultActivities,\r\n  defaultValuesAC,\r\n  defaultValuesSaves,\r\n  defenses,\r\n  MAPs,\r\n  materials,\r\n  rollTypes,\r\n} from \"./types\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    routines: routineReducer,\r\n    activityPaths: activityPathReducer,\r\n    damages: damageReducer,\r\n    effects: effectReducer,\r\n    weaknesses: weaknessReducer,\r\n    targets: targetReducer,\r\n  },\r\n});\r\n\r\nstore.dispatch(\r\n  routineAdded({ id: 0, name: \"Fighter\", display: true, apIds: [0] })\r\n);\r\n\r\nstore.dispatch(\r\n  activityPathAdded({\r\n    id: 0,\r\n    condition: conditions.ALWAYS,\r\n    override: false,\r\n    level: 1,\r\n    useDefault: false,\r\n    defaultActivity: defaultActivities.FIGHTER,\r\n    type: activityTypes.STRIKE,\r\n    targetType: defenses.AC,\r\n    targetInfoId: 0,\r\n    value: 9,\r\n    MAP: MAPs.N1,\r\n    rollType: rollTypes.NORMAL,\r\n    damageCondition: dCond.STRIKE,\r\n    diceNum: 1,\r\n    diceSize: 8,\r\n    staticDamage: 4,\r\n    damageType: damageTypes.S,\r\n    material: materials.NONE,\r\n    damages: [],\r\n    effects: [],\r\n    apIds: [],\r\n  })\r\n);\r\n\r\nstore.dispatch(\r\n  targetAdded({\r\n    id: 0,\r\n    name: \"Custom Target\",\r\n    overrideDefault: true,\r\n    addMods: false,\r\n    level: 1,\r\n    matchRoutines: true,\r\n    levelDiff: 0,\r\n    useDefaultAC: true,\r\n    defaultAC: defaultValuesAC.HIGH,\r\n    [defenses.AC]: 16,\r\n    useDefaultFort: true,\r\n    defaultFort: defaultValuesSaves.MODERATE,\r\n    [defenses.FORT]: 7,\r\n    useDefaultRef: true,\r\n    defaultRef: defaultValuesSaves.MODERATE,\r\n    [defenses.REF]: 7,\r\n    useDefaultWill: true,\r\n    defaultWill: defaultValuesSaves.MODERATE,\r\n    [defenses.WILL]: 7,\r\n    useDefaultPer: true,\r\n    defaultPer: defaultValuesSaves.MODERATE,\r\n    [defenses.PER]: 7,\r\n    flatfooted: false,\r\n    weaknesses: [],\r\n  })\r\n);\r\n// store.dispatch(weaknessAdded({ id: 0, type: damageTypes.FIRE, value: 10 }));\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 0,\r\n//     damageCondition: dCond.STRIKE,\r\n//     diceNum: 1,\r\n//     diceSize: 8,\r\n//     staticDamage: 4,\r\n//     damageType: damageTypes.B,\r\n//     material: materials.COLD_IRON,\r\n//     persistent: false,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 1,\r\n//     condition: dCond.CRIT,\r\n//     diceNum: 0,\r\n//     diceSize: 8,\r\n//     staticDamage: 10,\r\n//     type: damageTypes.FIRE,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//   })\r\n// );\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport PF2App from \"./PF2App\";\r\nimport store from \"./store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <PF2App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}