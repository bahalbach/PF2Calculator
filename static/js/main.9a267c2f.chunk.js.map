{"version":3,"sources":["Target/weaknessSlice.js","Target/targetSlice.js","Model/types.js","SelectedRoutine/damageSlice.js","Target/TargetInput.js","SelectedRoutine/activityPathSlice.js","SelectedRoutine/effectSlice.js","Model/defaults.js","Routines/routineSlice.js","Calculation/Distribution.js","Calculation/Calculation.js","Calculation/EvaluateActivityPath.js","Model/options.js","Display/useGenerateGraphs.js","Display/Display.js","SelectedRoutine/LevelList.js","SelectedRoutine/Damage.js","SelectedRoutine/Effect.js","SelectedRoutine/ActivityPath.js","SelectedRoutine/SelectedRoutine.js","Routines/Routines.js","Export.js","PF2App.js","store.js","serviceWorker.js","index.js"],"names":["weaknessAdapter","createEntityAdapter","weakness","weaknessesSlice","createSlice","name","initialState","getInitialState","reducers","weaknessAdded","addOne","weaknessUpdated","updateOne","weaknessCreated","reducer","state","action","payload","id","type","value","prepare","parentId","weaknessRemoved","removeOne","actions","getSelectors","weaknesses","selectweaknessById","selectById","selectweaknessEntities","selectIds","selectEntities","targetAdapter","selectAll","selectTotal","targetsSlice","targetAdded","targetUpdated","changes","match","level","extraReducers","builder","addCase","weaknessId","entities","push","filter","wid","targets","selecttargetById","selecttargetEntities","graphTypes","DISTRIBUTION","PMDEFENSE","PMRES","ACTrends","LOW","MODERATE","HIGH","EXTREME","SaveTrends","TERRIBLE","conditions","ALWAYS","CRIT","SUCC","FAIL","CRIF","AT_LEAST_SUCC","AT_LEAST_FAIL","FAIL_WORSE","SUCC_WORSE","rollTypes","NORMAL","ADVANTAGE","DISADVANTAGE","activityTypes","STRIKE","SAVE","profTrends","TRAINED","FIGHTERWEAPON","MARTIALWEAPON","CASTERWEAPON","ALCHWEAPON","CASTERSPELL","MAGUSSPELL","MCSPELL","MAXSKILL","statTrends","AS10","AS18a","AS16a","AS16pp","AS16p","AS14pp","AS14p","itemTrends","NONE","WEAPON","SKILL","MAPs","N1","N2","N3","A1","A2","A3","R1","R2","R3","RA1","RA2","RA3","RAA1","RAA2","RAA3","nextMAPs","defenses","AC","FORT","REF","WILL","PER","dCond","BASIC","dieTrends","SPELLLEVEL1","SPELLLEVEL2","RUNE","DEADLY","SNEAK","STRATEGIC","PRECISE","damageTrends","FIGHTERWEAPONSPEC","MARTIALWEAPONSPEC","CASTERWEAPONSPEC","RAGE","ANIMALRAGE","DRAGONRAGE","GIANTRAGE","damageTypes","B","P","S","FIRE","materials","COLD_IRON","SILVER","ADAMANTINE","effectTypes","FLATFOOT","FRIGHTENED1","FRIGHTENED2","FRIGHTENED3","FRIGHTENED4","Weakness","useSelector","dispatch","useDispatch","className","onChange","e","target","isNaN","parseInt","AddWeakness","useState","weaknessValue","setWeaknessValue","WeaknessSelect","options","dt","key","m","TargetInput","levelDiff","ACTrend","FortTrend","RefTrend","WillTrend","PerTrend","flatfooted","ACOptions","dv","SaveOptions","htmlFor","placeholder","checked","map","damageAdapter","empty","i","damageId","damagesSlice","damageAdded","damageUpdated","damageCreated","damageCondition","damageType","material","persistent","multiplier","dieTrend","dieAdjustments","diceSize","fatal","fatalDie","damageTrend","damageAdjustments","damageRemoved","damages","selectdamageById","selectdamageEntities","effectAdapter","effectId","effectsSlice","effectAdded","effectUpdated","effectCreated","effectCondition","effectType","startLevel","endLevel","effectRemoved","effects","selecteffectById","selecteffectEntities","activityPathAdapter","activityPathId","defaultParentActivity","rollType","profTrend","statTrend","itemTrend","bonusAdjustments","MAP","targetType","activityPathsSlice","activityPathAdded","activityPathUpdated","activityPathRemoved","undefined","apIds","apId","activityPathCreated","parentAP","applyMAP","condition","routineId","did","eid","activityPaths","selectactivityPathById","selectactivityPathEntities","routinesAdapter","routinesSlice","selectedRoutine","setRoutine","routineAdded","routineUpdated","routineRemoved","ids","routineCreated","display","description","updateSelected","routines","selectRoutineById","selectRoutineEntities","selectAllRoutines","selectSelectedRoutine","convolve","vec1","vec2","length","Error","volume","kernel","displacement","convVec","j","consolidateDists","maxDamage","dists","dist","Math","max","staticDamage","damageDist","index","applyMin","min","shift","zero","trained","maxSkill","maxScore","score16pp","score16p","score16","score14p","score14","martialProf","alchProf","casterProf","spellProf","weaponItem","skillItem","weaponDice","spellDice","spellDice2","floor","runes","deadly","sneak","strategic","precise","martialSpec","casterSpec","rage","animalrage","dragonrage","giantrage","fighterAB","martialAB","casterAB","alchAB","casterSpellAttack","casterSaveDC","magusspell","mcspell","fighterStatic","fighterRanged","martialStatic","martialRanged","casterStatic","casterRanged","profTrendValues","statTrendValues","itemTrendValues","MAPvalues","dieTrendValues","damageTrendValues","extremeAC","highAC","moderateAC","lowAC","defaultACs","defaultSaves","addDamage","context","normal","dam","newDist","newDam","oldValue","chance","newValue","diff","multiplyDist","validateCondition","degreeOfSuccess","indicies","includes","ActivityPathEvaluator","this","routine","ACBonus","resBonus","initialTargetState","frightened","dataArray","cumulative","PdataArray","Pcumulative","expD","expP","routineDDist","routinePDDist","activityPath","evalPath","PdamageDist","currentSum","targetState","defenseBonus","resistanceBonus","currentTarget","currentDamages","currentEffects","currentWeaknesses","activity","bonus","DC","targetValue","console","log","critPercent","dif","getCritSuccessPercent","succPercent","getSuccessPercent","failPercent","getFailurePercent","crfaPercent","getCritFailurePercent","notcrit","nothit","notfail","notcrfa","notsucc","chances","critDamages","succDamages","failDamages","crfaDamages","damageTrees","forEach","damage","diceNum","fatalDist","diceArray","damageTree","damageQuality","totalStaticDamage","totalDamageDist","maxW","maxR","calculateExpectedDamage","targetStates","effect","ap","evaluations","Map","has","pathDist","pathPDist","set","get","Plot","createPlotlyComponent","Plotly","evaluateByLevel","evaluator","datasets","perDatasets","levelArray","expDbyLevel","expPDbyLevel","canEvaluate","evalRoutine","x","y","yaxis","evaluatePM","displayLevel","defense","expectedDamages","expectedPersistentDamages","bonusArray","expDbyBonus","expPDbyBonus","toFixed","evaluateDistribution","useGenerateGraphs","graphType","title","byLevelTile","xtitle","ytitle","byLeveldatasets","byLevelperDatasets","damageChart","classname","data","layout","autosize","xaxis","legend","xanchor","margin","l","r","useResizeHandler","style","width","height","persistentDamageChart","byLevelDamageChart","byLevelPerDamageChart","Display","addPersistent","setAddPersistent","setGraphType","setDisplayLevel","graphTypeOptions","gt","displayLevelOptions","BYLEVEL","levelOptions","conditionOptions","c","rollOptions","rt","activityTypeOptions","at","profTrendOptions","bt","statTrendOptions","itemBTrendOptions","MAPOptions","defenseOptions","d","damageConditionOptions","dc","dieTrendOptions","diceSizeOptions","ds","damageTrendOptions","damageTypeOptions","materialOptions","multiplierOptions","effectTypeOptions","et","generateAdjustments","entries","adjustments","currentValue","currentIndex","adjustmentsFromNewEntry","lastValue","LevelList","dieEntries","generateEntries","dieLevelList","newLevel","sort","a","b","onClick","Damage","damageLevelList","damageTrendList","newdt","slice","splice","parseFloat","Effect","ActivityPath","displayCondition","bonusLevelList","NameInput","SelectedRoutine","Routines","routineOptions","routineDisplays","ImportExport","ReactGA","initialize","PF2App","props","send","Export","pickCritSpec","one","store","configureStore","routineReducer","activityPathReducer","damageReducer","effectReducer","weaknessReducer","targetReducer","targetInfoId","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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CAC,EACa,GAAbvF,GAEFoJ,GACEgE,EACAvN,EACAC,EACAC,EACAuF,EACAC,EACa,EAAbvF,GAEFoJ,GACEiE,EACAxN,EACAC,EACAC,EACAuF,EACAC,EACa,EAAbvF,GAEF,MAEF,KAAK/E,EAAMzD,KACT4R,GACEiE,EACAxN,EACAC,EACAC,EACAuF,EACAC,EACa,EAAbvF,GAEF,MAEF,KAAK/E,EAAM1D,KACT6R,GACEgE,EACAvN,EACAC,EACAC,EACAuF,EACAC,EACa,EAAbvF,GAEF,MAEF,KAAK/E,EAAM3D,KACT8R,GACE+D,EACAtN,EACAC,EACAC,EACAuF,EACAC,EACa,EAAbvF,GAEF,MAEF,KAAK/E,EAAM5D,KACT+R,GACE8D,EACArN,EACAC,EACAC,EACAuF,EACAC,EACa,EAAbvF,GAEF,MAEF,KAAK/E,EAAMxD,cACT2R,GACE+D,EACAtN,EACAC,EACAC,EACAuF,EACAC,EACa,EAAbvF,GAEFoJ,GACE8D,EACArN,EACAC,EACAC,EACAuF,EACAC,EACa,EAAbvF,GAEF,MAEF,KAAK/E,EAAMvD,cACT0R,GACEgE,EACAvN,EACAC,EACAC,EACAuF,EACAC,EACa,EAAbvF,GAEFoJ,GACE+D,EACAtN,EACAC,EACAC,EACAuF,EACAC,EACa,EAAbvF,GAEFoJ,GACE8D,EACArN,EACAC,EACAC,EACAuF,EACAC,EACa,EAAbvF,GAEF,MAEF,KAAK/E,EAAMtD,WACTyR,GACEiE,EACAxN,EACAC,EACAC,EACAuF,EACAC,EACa,EAAbvF,GAEFoJ,GACEgE,EACAvN,EACAC,EACAC,EACAuF,EACAC,EACa,EAAbvF,GAEF,MAEF,KAAK/E,EAAMrD,WACTwR,GACEiE,EACAxN,EACAC,EACAC,EACAuF,EACAC,EACa,EAAbvF,GAEFoJ,GACEgE,EACAvN,EACAC,EACAC,EACAuF,EACAC,EACa,EAAbvF,GAEFoJ,GACE+D,EACAtN,EACAC,EACAC,EACAuF,EACAC,EACa,EAAbvF,GAGF,MAEF,KAAK/E,EAAM7D,OACTgS,GACEiE,EACAxN,EACAC,EACAC,EACAuF,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","file":"static/js/main.9a267c2f.chunk.js","sourcesContent":["import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const weaknessAdapter = createEntityAdapter();\r\n\r\nlet weakness = 0;\r\n\r\nexport const weaknessesSlice = createSlice({\r\n  name: \"weaknesses\",\r\n  initialState: weaknessAdapter.getInitialState(),\r\n  reducers: {\r\n    weaknessAdded: weaknessAdapter.addOne,\r\n    weaknessUpdated: weaknessAdapter.updateOne,\r\n    weaknessCreated: {\r\n      reducer: (state, action) => {\r\n        const { id, type, value } = action.payload;\r\n        weaknessAdapter.addOne(state, { id, type, value });\r\n      },\r\n      prepare: ({ parentId, type, value }) => {\r\n        const id = ++weakness;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n            type,\r\n            value,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    weaknessRemoved: weaknessAdapter.removeOne,\r\n  },\r\n});\r\n\r\nexport const {\r\n  weaknessRemoved,\r\n  weaknessCreated,\r\n  weaknessAdded,\r\n  weaknessUpdated,\r\n} = weaknessesSlice.actions;\r\n\r\nexport default weaknessesSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selectweaknessById,\r\n  selectIds: selectweaknessIds,\r\n  selectEntities: selectweaknessEntities,\r\n  selectAll: selectAllweaknesses,\r\n  selectTotal: selectTotalweaknesses,\r\n} = weaknessAdapter.getSelectors((state) => state.weaknesses);\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\n// import { defaultACs, defaultSaves } from \"../defaults\";\r\n// import { defenses } from \"../types\";\r\nimport { weaknessCreated, weaknessRemoved } from \"./weaknessSlice\";\r\n\r\nexport const targetAdapter = createEntityAdapter();\r\n\r\nexport const targetsSlice = createSlice({\r\n  name: \"targets\",\r\n  initialState: targetAdapter.getInitialState(),\r\n  reducers: {\r\n    targetAdded: targetAdapter.addOne,\r\n    targetUpdated: {\r\n      prepare: ({ id, changes, match, level }) => {\r\n        if (!level) level = 1;\r\n        if (level < 1) level = 1;\r\n        if (level > 20) level = 20;\r\n        return { payload: { id, changes, match, level } };\r\n      },\r\n      reducer: (state, action) => {\r\n        targetAdapter.updateOne(state, action.payload);\r\n        // const target = state.entities[action.payload.id];\r\n        // if (!target.level) target.level = 0;\r\n        // if (target.level < -1) target.level = -1;\r\n        // if (target.level > 24) target.level = 24;\r\n        // if (target.useDefaultAC) {\r\n        //   target[defenses.AC] = defaultACs[target.defaultAC][target.level];\r\n        // }\r\n        // if (target.useDefaultFort) {\r\n        //   target[defenses.FORT] =\r\n        //     defaultSaves[target.defaultFort][target.level];\r\n        // }\r\n        // if (target.useDefaultRef) {\r\n        //   target[defenses.REF] = defaultSaves[target.defaultRef][target.level];\r\n        // }\r\n        // if (target.useDefaultWill) {\r\n        //   target[defenses.WILL] =\r\n        //     defaultSaves[target.defaultWill][target.level];\r\n        // }\r\n        // if (target.useDefaultPer) {\r\n        //   target[defenses.PER] = defaultSaves[target.defaultPer][target.level];\r\n        // }\r\n      },\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(weaknessCreated, (state, action) => {\r\n        const { parentId: id, id: weaknessId } = action.payload;\r\n        state.entities[id].weaknesses.push(weaknessId);\r\n        // targetAdded.updateOne(state, { id, changes: { weaknesses: [...weaknesses, weaknessId] }});\r\n      })\r\n      .addCase(weaknessRemoved, (state, action) => {\r\n        const { parentId: id, id: weaknessId } = action.payload;\r\n        state.entities[id].weaknesses = state.entities[id].weaknesses.filter(\r\n          (wid) => wid !== weaknessId\r\n        );\r\n      });\r\n  },\r\n});\r\n\r\nexport const { targetAdded, targetUpdated } = targetsSlice.actions;\r\n\r\nexport default targetsSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selecttargetById,\r\n  selectIds: selecttargetIds,\r\n  selectEntities: selecttargetEntities,\r\n  selectAll: selectAlltargets,\r\n  selectTotal: selectTotaltargets,\r\n} = targetAdapter.getSelectors((state) => state.targets);\r\n","export const graphTypes = {\r\n  DISTRIBUTION: \"Damage Distribution\",\r\n  PMDEFENSE: \"+/- AC/Save Bonus\",\r\n  PMRES: \"+/- Resistance/Weakness\",\r\n};\r\n\r\nexport const ACTrends = {\r\n  LOW: \"Low\",\r\n  MODERATE: \"Moderate\",\r\n  HIGH: \"High\",\r\n  EXTREME: \"Extreme\",\r\n};\r\n\r\nexport const SaveTrends = {\r\n  TERRIBLE: \"Terrible\",\r\n  LOW: \"Low\",\r\n  MODERATE: \"Moderate\",\r\n  HIGH: \"High\",\r\n  EXTREME: \"Extreme\",\r\n};\r\n\r\nexport const conditions = {\r\n  ALWAYS: \"Always\",\r\n  CRIT: \"On Crit\",\r\n  SUCC: \"On Success\",\r\n  FAIL: \"On Failure\",\r\n  CRIF: \"On Crit Fail\",\r\n  AT_LEAST_SUCC: \"Success or better\",\r\n  AT_LEAST_FAIL: \"Failure or better\",\r\n  FAIL_WORSE: \"Failure or worse\",\r\n  SUCC_WORSE: \"Success or worse\",\r\n};\r\n\r\nexport const rollTypes = {\r\n  NORMAL: \"Normal\",\r\n  ADVANTAGE: \"Advantage\",\r\n  DISADVANTAGE: \"Disadvantage\",\r\n};\r\n\r\nexport const activityTypes = {\r\n  STRIKE: \"Strike\",\r\n  SAVE: \"Save\",\r\n};\r\n\r\nexport const profTrends = {\r\n  TRAINED: \"Trained Proficiency\",\r\n  FIGHTERWEAPON: \"Fighter Weapon (1, 5, 13)\",\r\n  MARTIALWEAPON: \"Martial Weapon (5, 13)\",\r\n  CASTERWEAPON: \"Caster Weapon (11)\",\r\n  ALCHWEAPON: \"Alchemist Weapon (7)\",\r\n  CASTERSPELL: \"Caster Spell (7, 15, 19)\",\r\n  MAGUSSPELL: \"Magus Spell (9, 17)\",\r\n  MCSPELL: \"MC Spell (12, 18)\",\r\n  MAXSKILL: \"Max skill (3, 7, 15)\",\r\n};\r\n\r\nexport const statTrends = {\r\n  AS10: \"10\",\r\n  AS18a: \"18 to 24 apex(17)\",\r\n  AS16a: \"16 to 22 apex(17)\",\r\n  AS16pp: \"16 to 20\",\r\n  AS16p: \"16 to 18\",\r\n  AS14pp: \"14 to 20\",\r\n  AS14p: \"14 to 18\",\r\n};\r\n\r\nexport const itemTrends = {\r\n  NONE: \"None\",\r\n  WEAPON: \"Weapon (2, 10, 16)\",\r\n  SKILL: \"Skill (3, 9, 17)\",\r\n};\r\n\r\nexport const MAPs = {\r\n  N1: \"0 (0x-5)\",\r\n  N2: \"-5 (1x-5)\",\r\n  N3: \"-10 (2x-5)\",\r\n  A1: \"0 (0x-4)\",\r\n  A2: \"-4 (1x-4)\",\r\n  A3: \"-8 (2x-4)\",\r\n  R1: \"0 (0x-3)\",\r\n  R2: \"-3 (1x-3)\",\r\n  R3: \"-6 (2x-3)\",\r\n  RA1: \"0 (0x-2)\",\r\n  RA2: \"-2 (1x-2)\",\r\n  RA3: \"-4 (2x-2)\",\r\n  RAA1: \"0 (0x-1)\",\r\n  RAA2: \"-1 (1x-1)\",\r\n  RAA3: \"-2 (2x-1)\",\r\n};\r\n\r\nexport const nextMAPs = {\r\n  \"0 (0x-5)\": \"-5 (1x-5)\",\r\n  \"-5 (1x-5)\": \"-10 (2x-5)\",\r\n  \"-10 (2x-5)\": \"-10 (2x-5)\",\r\n  \"0 (0x-4)\": \"-4 (1x-4)\",\r\n  \"-4 (1x-4)\": \"-8 (2x-4)\",\r\n  \"-8 (2x-4)\": \"-8 (2x-4)\",\r\n  \"0 (0x-3)\": \"-3 (1x-3)\",\r\n  \"-3 (1x-3)\": \"-6 (2x-3)\",\r\n  \"-6 (2x-3)\": \"-6 (2x-3)\",\r\n  \"0 (0x-2)\": \"-2 (1x-2)\",\r\n  \"-2 (1x-2)\": \"-4 (2x-2)\",\r\n  \"-4 (2x-2)\": \"-4 (2x-2)\",\r\n  \"0 (0x-1)\": \"-1 (1x-1)\",\r\n  \"-1 (1x-1)\": \"-2 (2x-1)\",\r\n  \"-2 (2x-1)\": \"-2 (2x-1)\",\r\n};\r\n\r\nexport const defenses = {\r\n  AC: \"AC\",\r\n  FORT: \"Fort\",\r\n  REF: \"Ref\",\r\n  WILL: \"Will\",\r\n  PER: \"Perception\",\r\n};\r\n\r\nexport const dCond = {\r\n  STRIKE: \"x1 hit, x2 crit\",\r\n  BASIC: \"Basic save\",\r\n  ALWAYS: \"Always\",\r\n  CRIT: \"On Crit\",\r\n  SUCC: \"On Success\",\r\n  FAIL: \"On Failure\",\r\n  CRIF: \"On Crit Fail\",\r\n  AT_LEAST_SUCC: \"Success or better\",\r\n  AT_LEAST_FAIL: \"Failure or better\",\r\n  FAIL_WORSE: \"Failure or worse\",\r\n  SUCC_WORSE: \"Success or worse\",\r\n};\r\n\r\nexport const dieTrends = {\r\n  NONE: \"None\",\r\n  WEAPON: \"Weapon (1, 4, 12, 19)\",\r\n  SPELLLEVEL1: \"1 x Spell Level\",\r\n  SPELLLEVEL2: \"2 x Spell Level\",\r\n  RUNE: \"Runes (8, 15)\",\r\n  DEADLY: \"Deadly (1, 12, 19)\",\r\n  SNEAK: \"Sneak Attack (1, 5, 11, 17)\",\r\n  STRATEGIC: \"Strategic Strike (1, 5, 9, 13, 17)\",\r\n  PRECISE: \"Precise Strike (1, 1, 5, 9, 13, 17)\",\r\n};\r\n\r\nexport const damageTrends = {\r\n  NONE: \"None\",\r\n  FIGHTERWEAPONSPEC: \"Fighter Weapon Specialization\",\r\n  MARTIALWEAPONSPEC: \"Martial Weapon Specializaton\",\r\n  CASTERWEAPONSPEC: \"Caster Weapon Specializaton\",\r\n  ...statTrends,\r\n  WEAPON: \"Weapon (1, 4, 12, 19)\",\r\n  SPELLLEVEL1: \"1 x Spell Level\",\r\n  RAGE: \"Rage\",\r\n  ANIMALRAGE: \"Animal Rage\",\r\n  DRAGONRAGE: \"Dragon Rage\",\r\n  GIANTRAGE: \"Giant Rage\",\r\n};\r\n\r\nexport const damageTypes = {\r\n  NONE: \"None\",\r\n  B: \"bludgeoning\",\r\n  P: \"piercing\",\r\n  S: \"slashing\",\r\n  FIRE: \"fire\",\r\n};\r\n\r\nexport const materials = {\r\n  NONE: \"none\",\r\n  COLD_IRON: \"cold iron\",\r\n  SILVER: \"silver\",\r\n  ADAMANTINE: \"adamantine\",\r\n};\r\n\r\nexport const effectTypes = {\r\n  FLATFOOT: \"Flatfooted\",\r\n  FRIGHTENED1: \"Frightened 1\",\r\n  FRIGHTENED2: \"Frightened 2\",\r\n  FRIGHTENED3: \"Frightened 3\",\r\n  FRIGHTENED4: \"Frightened 4\",\r\n};\r\n\r\nexport const diceNums = {\r\n  0: 0,\r\n  1: 1,\r\n  2: 2,\r\n  3: 3,\r\n  4: 4,\r\n  5: 5,\r\n  6: 6,\r\n  7: 7,\r\n  8: 8,\r\n  9: 9,\r\n  10: 10,\r\n  11: 11,\r\n  12: 12,\r\n  13: 13,\r\n  14: 14,\r\n  15: 15,\r\n  16: 16,\r\n  17: 17,\r\n  18: 18,\r\n  19: 19,\r\n  20: 20,\r\n};\r\n\r\nexport const diceSizes = {\r\n  4: 4,\r\n  6: 6,\r\n  8: 8,\r\n  10: 10,\r\n  12: 12,\r\n};\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\nimport { damageTypes, dCond, dieTrends, materials } from \"../Model/types\";\r\n\r\nexport const damageAdapter = createEntityAdapter();\r\n\r\n// damageAdded({\r\n//   id: 0,\r\n//   condition: dCond.STRIKE,\r\n//   diceNum: 1,\r\n//   diceSize: 8,\r\n//   staticDamage: 6,\r\n//   type: damageTypes.PIERCE,\r\n//   material: materials.COLD_IRON,\r\n// });\r\nconst empty = {};\r\nfor (let i = 1; i <= 20; i++) {\r\n  empty[i] = 0;\r\n}\r\n\r\nlet damageId = 1000;\r\nexport const damagesSlice = createSlice({\r\n  name: \"damages\",\r\n  initialState: damageAdapter.getInitialState(),\r\n  reducers: {\r\n    damageAdded: damageAdapter.addOne,\r\n    damageUpdated: damageAdapter.updateOne,\r\n    damageCreated: {\r\n      reducer: (state, action) => {\r\n        const { id } = action.payload;\r\n        damageAdapter.addOne(state, {\r\n          id,\r\n          damageCondition: dCond.STRIKE,\r\n          damageType: damageTypes.S,\r\n          material: materials.NONE,\r\n          persistent: false,\r\n          multiplier: 1,\r\n\r\n          dieTrend: dieTrends.NONE,\r\n          dieAdjustments: { ...empty },\r\n          diceSize: 6,\r\n          fatal: false,\r\n          fatalDie: 10,\r\n          damageTrend: [],\r\n          damageAdjustments: { ...empty },\r\n        });\r\n      },\r\n      prepare: ({ parentId }) => {\r\n        const id = ++damageId;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    damageRemoved: (state, action) => {\r\n      damageAdapter.removeOne(state, action.payload.id);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { damageRemoved, damageCreated, damageAdded, damageUpdated } =\r\n  damagesSlice.actions;\r\n\r\nexport default damagesSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selectdamageById,\r\n  selectIds: selectdamageIds,\r\n  selectEntities: selectdamageEntities,\r\n  selectAll: selectAlldamages,\r\n  selectTotal: selectTotaldamages,\r\n} = damageAdapter.getSelectors((state) => state.damages);\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { selecttargetById, targetUpdated } from \"./targetSlice\";\r\nimport { ACTrends, damageTypes, materials, SaveTrends } from \"../Model/types\";\r\nimport {\r\n  selectweaknessById,\r\n  weaknessCreated,\r\n  weaknessRemoved,\r\n  weaknessUpdated,\r\n} from \"./weaknessSlice\";\r\n\r\nfunction TargetInput({ id }) {\r\n  const {\r\n    name,\r\n\r\n    // level,\r\n    // matchRoutines,\r\n    levelDiff,\r\n\r\n    // [defenses.AC]: AC,\r\n    // defaultAC,\r\n    // useDefaultAC,\r\n    // [defenses.FORT]: Fort,\r\n    // defaultFort,\r\n    // useDefaultFort,\r\n    // [defenses.REF]: Ref,\r\n    // defaultRef,\r\n    // useDefaultRef,\r\n    // [defenses.WILL]: Will,\r\n    // defaultWill,\r\n    // useDefaultWill,\r\n    // [defenses.PER]: Perception,\r\n    // defaultPer,\r\n    // useDefaultPer,\r\n\r\n    ACTrend,\r\n    FortTrend,\r\n    RefTrend,\r\n    WillTrend,\r\n    PerTrend,\r\n\r\n    flatfooted,\r\n    weaknesses,\r\n  } = useSelector((state) => selecttargetById(state, 0));\r\n  const dispatch = useDispatch();\r\n\r\n  const ACOptions = [];\r\n  for (let dv in ACTrends) {\r\n    ACOptions.push(<option key={dv}>{ACTrends[dv]}</option>);\r\n  }\r\n  const SaveOptions = [];\r\n  for (let dv in SaveTrends) {\r\n    SaveOptions.push(<option key={dv}>{SaveTrends[dv]}</option>);\r\n  }\r\n\r\n  // name, level, ac, fort, ref, will, perception, resistances/weaknesses\r\n  return (\r\n    <div className=\"box flexbox\">\r\n      <span className=\"input\">\r\n        <label htmlFor=\"targetName\">{\"Target Name: \"}</label>\r\n        <input\r\n          id=\"targetName\"\r\n          type=\"text\"\r\n          placeholder=\"Enter Target name\"\r\n          value={name}\r\n          onChange={(e) =>\r\n            dispatch(targetUpdated({ id, changes: { name: e.target.value } }))\r\n          }\r\n        />\r\n      </span>\r\n\r\n      {/* <span className=\"input\">\r\n        <label htmlFor=\"Level\">{\" Level: \"}</label>\r\n        <input\r\n          id=\"Level\"\r\n          type=\"number\"\r\n          value={level}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: {\r\n                  level: parseInt(e.target.value),\r\n                },\r\n                match: matchRoutines,\r\n                level: parseInt(e.target.value) - levelDiff,\r\n              })\r\n            )\r\n          }\r\n        />\r\n      </span> */}\r\n\r\n      {/* <span className=\"input\">\r\n        <label htmlFor=\"match\">{\" Match routine levels: \"}</label>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={matchRoutines}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { matchRoutines: e.target.checked },\r\n                match: e.target.checked,\r\n                level: level - levelDiff,\r\n              })\r\n            )\r\n          }\r\n        />\r\n        <input\r\n          type=\"number\"\r\n          value={levelDiff}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: {\r\n                  levelDiff: parseInt(e.target.value),\r\n                },\r\n                match: matchRoutines,\r\n                level: level - parseInt(e.target.value),\r\n              })\r\n            )\r\n          }\r\n        />\r\n      </span> */}\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"levelDiff\">{\" Level Difference: \"}</label>\r\n        <input\r\n          type=\"number\"\r\n          id=\"levelDiff\"\r\n          value={levelDiff}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: {\r\n                  levelDiff: parseInt(e.target.value),\r\n                },\r\n              })\r\n            )\r\n          }\r\n        />\r\n      </span>\r\n      <span className=\"input\">\r\n        <label htmlFor=\"AC\">{\" AC: \"}</label>\r\n        {/* <input\r\n          type=\"checkbox\"\r\n          checked={useDefaultAC}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { useDefaultAC: e.target.checked } })\r\n            )\r\n          }\r\n        /> */}\r\n        <select\r\n          id=\"AC\"\r\n          value={ACTrend}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { ACTrend: e.target.value } })\r\n            )\r\n          }\r\n        >\r\n          {ACOptions}\r\n        </select>\r\n        {/* <input\r\n          id=\"AC\"\r\n          type=\"number\"\r\n          value={AC}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: {\r\n                  useDefaultAC: false,\r\n                  [defenses.AC]: parseInt(e.target.value),\r\n                },\r\n              })\r\n            )\r\n          }\r\n        /> */}\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"Fort\">{\" Fort: \"}</label>\r\n        {/* <input\r\n          type=\"checkbox\"\r\n          checked={useDefaultFort}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { useDefaultFort: e.target.checked },\r\n              })\r\n            )\r\n          }\r\n        /> */}\r\n        <select\r\n          id=\"Fort\"\r\n          value={FortTrend}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { FortTrend: e.target.value } })\r\n            )\r\n          }\r\n        >\r\n          {SaveOptions}\r\n        </select>\r\n        {/* <input\r\n          id=\"Fort\"\r\n          type=\"number\"\r\n          value={Fort}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { [defenses.FORT]: parseInt(e.target.value) },\r\n              })\r\n            )\r\n          }\r\n        /> */}\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"Ref\">{\" Ref: \"}</label>\r\n        {/* <input\r\n          type=\"checkbox\"\r\n          checked={useDefaultRef}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { useDefaultRef: e.target.checked },\r\n              })\r\n            )\r\n          }\r\n        /> */}\r\n        <select\r\n          id=\"Red\"\r\n          value={RefTrend}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { RefTrend: e.target.value } })\r\n            )\r\n          }\r\n        >\r\n          {SaveOptions}\r\n        </select>\r\n        {/* <input\r\n          id=\"Ref\"\r\n          type=\"number\"\r\n          value={Ref}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { [defenses.REF]: parseInt(e.target.value) },\r\n              })\r\n            )\r\n          }\r\n        /> */}\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"Will\">{\" Will: \"}</label>\r\n        {/* <input\r\n          type=\"checkbox\"\r\n          checked={useDefaultWill}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { useDefaultWill: e.target.checked },\r\n              })\r\n            )\r\n          }\r\n        /> */}\r\n        <select\r\n          id=\"Will\"\r\n          value={WillTrend}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { WillTrend: e.target.value } })\r\n            )\r\n          }\r\n        >\r\n          {SaveOptions}\r\n        </select>\r\n        {/* <input\r\n          id=\"Will\"\r\n          type=\"number\"\r\n          value={Will}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { [defenses.WILL]: parseInt(e.target.value) },\r\n              })\r\n            )\r\n          }\r\n        /> */}\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"Perception\">{\" Perception: \"}</label>\r\n        {/* <input\r\n          type=\"checkbox\"\r\n          checked={useDefaultPer}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { useDefaultPer: e.target.checked },\r\n              })\r\n            )\r\n          }\r\n        /> */}\r\n        <select\r\n          id=\"Perception\"\r\n          value={PerTrend}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { PerTrend: e.target.value } })\r\n            )\r\n          }\r\n        >\r\n          {SaveOptions}\r\n        </select>\r\n        {/* <input\r\n          id=\"Perception\"\r\n          type=\"number\"\r\n          value={Perception}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { [defenses.PER]: parseInt(e.target.value) },\r\n              })\r\n            )\r\n          }\r\n        /> */}\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"Flatfooted\">{\" Flatfooted: \"}</label>\r\n        <input\r\n          id=\"Flatfooted\"\r\n          type=\"checkbox\"\r\n          checked={flatfooted}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { flatfooted: e.target.checked } })\r\n            )\r\n          }\r\n        />\r\n      </span>\r\n\r\n      <div className=\"box flexbox\">\r\n        {\" Resistance/Weakness: \"}\r\n        {weaknesses.map((weaknessId) => (\r\n          <Weakness parentId={id} id={weaknessId} key={weaknessId} />\r\n        ))}\r\n        <AddWeakness parentId={id} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// const TargetInfo = ({ id }) => {\r\n//   const { overrideDefault, type, value, weaknesses } = useSelector((state) =>\r\n//     selecttargetInfoById(state, id)\r\n//   );\r\n//   const dispatch = useDispatch();\r\n\r\n//   const defenseOptions = [];\r\n//   for (let d in defenses) {\r\n//     defenseOptions.push(<option key={d}>{defenses[d]}</option>);\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"box\">\r\n//       {\"Override Target: \"}\r\n//       <input\r\n//         type=\"checkbox\"\r\n//         checked={overrideDefault}\r\n//         onChange={(e) =>\r\n//           dispatch(\r\n//             targetInfoUpdated({\r\n//               id,\r\n//               changes: { overrideDefault: e.target.checked },\r\n//             })\r\n//           )\r\n//         }\r\n//       />\r\n\r\n// {/* <Weaknesses parentId={id} weaknessIds={weaknesses} /> */}\r\n\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const Weaknesses = ({ parentId, weaknessIds }) => {\r\n//   return (\r\n//     <span>\r\n//       {weaknessIds.map((weaknessId) => (\r\n//         <Weakness id={weaknessId} key={weaknessId} />\r\n//       ))}\r\n//       <AddWeakness id={parentId} />\r\n//     </span>\r\n//   );\r\n// };\r\n\r\nconst Weakness = ({ id, parentId }) => {\r\n  // needs to have parent id to remove weakness\r\n  const { type, value } = useSelector((state) => selectweaknessById(state, id));\r\n  const dispatch = useDispatch();\r\n\r\n  const updateOrRemoveWeakness = (e) => {\r\n    if (e.target.value === damageTypes.NONE) {\r\n      // remove this weakness\r\n      dispatch(weaknessRemoved({ id, parentId }));\r\n    } else {\r\n      dispatch(weaknessUpdated({ id, changes: { type: e.target.value } }));\r\n    }\r\n  };\r\n  const updateWeaknessValue = (e) => {\r\n    if (!isNaN(e.target.value)) {\r\n      dispatch(\r\n        weaknessUpdated({ id, changes: { value: parseInt(e.target.value) } })\r\n      );\r\n    }\r\n  };\r\n  return (\r\n    <span className=\"input\">\r\n      <WeaknessSelect value={type} onChange={updateOrRemoveWeakness} />\r\n      <input type=\"number\" value={value} onChange={updateWeaknessValue} />\r\n    </span>\r\n  );\r\n};\r\n\r\nlet weaknessId = 0;\r\n\r\nconst AddWeakness = ({ parentId }) => {\r\n  const dispatch = useDispatch();\r\n  let [weaknessValue, setWeaknessValue] = useState(0);\r\n\r\n  // add a Weakness to TargetInfo id\r\n  const addWeakness = (e) => {\r\n    if (e.target.value !== damageTypes.NONE) {\r\n      // need to create a new weakness\r\n      weaknessId++;\r\n      dispatch(\r\n        weaknessCreated({\r\n          id: weaknessId,\r\n          type: e.target.value,\r\n          value: weaknessValue,\r\n          parentId: parentId,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <span className=\"input\">\r\n      <WeaknessSelect value={damageTypes.NONE} onChange={addWeakness} />\r\n      <input\r\n        type=\"number\"\r\n        value={weaknessValue}\r\n        onChange={(e) => setWeaknessValue(parseInt(e.target.value))}\r\n      />\r\n    </span>\r\n  );\r\n};\r\n\r\nconst WeaknessSelect = ({ value, onChange }) => {\r\n  const options = [];\r\n  for (let dt in damageTypes) {\r\n    options.push(<option key={dt}>{damageTypes[dt]}</option>);\r\n  }\r\n  for (let m in materials) {\r\n    if (materials[m] === materials.NONE) continue;\r\n    options.push(<option key={m}>{materials[m]}</option>);\r\n  }\r\n  return (\r\n    <span>\r\n      <select value={value} onChange={(e) => onChange(e)}>\r\n        {options}\r\n      </select>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default TargetInput;\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\nimport {\r\n  activityTypes,\r\n  conditions,\r\n  profTrends,\r\n  defenses,\r\n  MAPs,\r\n  nextMAPs,\r\n  rollTypes,\r\n  statTrends,\r\n  itemTrends,\r\n} from \"../Model/types\";\r\nimport { damageCreated, damageRemoved } from \"./damageSlice\";\r\nimport { effectCreated, effectRemoved } from \"./effectSlice\";\r\n\r\nexport const activityPathAdapter = createEntityAdapter();\r\n\r\nconst empty = {};\r\nfor (let i = 1; i <= 20; i++) {\r\n  empty[i] = 0;\r\n}\r\nlet activityPathId = 1000;\r\nconst defaultParentActivity = {\r\n  rollType: rollTypes.NORMAL,\r\n  type: activityTypes.STRIKE,\r\n  profTrend: profTrends.MARTIALWEAPON,\r\n  statTrend: statTrends.AS18a,\r\n  itemTrend: itemTrends.WEAPON,\r\n  bonusAdjustments: { ...empty },\r\n  MAP: MAPs.N1,\r\n  targetType: defenses.AC,\r\n};\r\n\r\nexport const activityPathsSlice = createSlice({\r\n  name: \"activityPaths\",\r\n  initialState: activityPathAdapter.getInitialState(),\r\n  reducers: {\r\n    activityPathAdded: activityPathAdapter.addOne,\r\n    activityPathUpdated: (state, action) => {\r\n      activityPathAdapter.updateOne(state, action.payload);\r\n    },\r\n    activityPathRemoved: (state, action) => {\r\n      const { id, parentId } = action.payload;\r\n      activityPathAdapter.removeOne(state, id);\r\n      if (parentId !== undefined) {\r\n        state.entities[parentId].apIds = state.entities[parentId].apIds.filter(\r\n          (apId) => apId !== id\r\n        );\r\n      }\r\n    },\r\n    activityPathCreated: {\r\n      reducer: (state, action) => {\r\n        const { id, parentId, applyMAP } = action.payload;\r\n\r\n        let parentAP;\r\n        if (parentId !== undefined) {\r\n          parentAP = state.entities[parentId];\r\n        } else {\r\n          parentAP = defaultParentActivity;\r\n        }\r\n\r\n        activityPathAdapter.addOne(state, {\r\n          id,\r\n          condition: conditions.ALWAYS,\r\n\r\n          rollType: rollTypes.NORMAL,\r\n          type: activityTypes.STRIKE,\r\n          profTrend: parentAP.profTrend,\r\n          statTrend: parentAP.statTrend,\r\n          itemTrend: parentAP.itemTrend,\r\n          bonusAdjustments: { ...parentAP.bonusAdjustments },\r\n          MAP: applyMAP ? nextMAPs[parentAP.MAP] : parentAP.MAP,\r\n\r\n          targetType: defenses.AC,\r\n\r\n          damages: [],\r\n          effects: [],\r\n          apIds: [],\r\n        });\r\n\r\n        if (parentId !== undefined) state.entities[parentId].apIds.push(id);\r\n      },\r\n      prepare: ({ parentId, routineId, applyMAP }) => {\r\n        const id = ++activityPathId;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n            routineId,\r\n            applyMAP,\r\n          },\r\n        };\r\n      },\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(damageCreated, (state, action) => {\r\n        const { parentId: id, id: damageId } = action.payload;\r\n        state.entities[id].damages.push(damageId);\r\n      })\r\n      .addCase(damageRemoved, (state, action) => {\r\n        const { parentId: id, id: damageId } = action.payload;\r\n        state.entities[id].damages = state.entities[id].damages.filter(\r\n          (did) => did !== damageId\r\n        );\r\n      })\r\n      .addCase(effectCreated, (state, action) => {\r\n        const { parentId: id, id: effectId } = action.payload;\r\n        state.entities[id].effects.push(effectId);\r\n      })\r\n      .addCase(effectRemoved, (state, action) => {\r\n        const { parentId: id, id: effectId } = action.payload;\r\n        state.entities[id].effects = state.entities[id].effects.filter(\r\n          (eid) => eid !== effectId\r\n        );\r\n      });\r\n  },\r\n});\r\n\r\nexport const {\r\n  activityPathCreated,\r\n  activityPathAdded,\r\n  activityPathUpdated,\r\n  activityPathRemoved,\r\n} = activityPathsSlice.actions;\r\n\r\nexport default activityPathsSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selectactivityPathById,\r\n  selectIds: selectactivityPathIds,\r\n  selectEntities: selectactivityPathEntities,\r\n  selectAll: selectAllactivityPaths,\r\n  selectTotal: selectTotalactivityPaths,\r\n} = activityPathAdapter.getSelectors((state) => state.activityPaths);\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\nimport { conditions, effectTypes } from \"../Model/types\";\r\n\r\nexport const effectAdapter = createEntityAdapter();\r\n\r\nlet effectId = 1000;\r\nexport const effectsSlice = createSlice({\r\n  name: \"effects\",\r\n  initialState: effectAdapter.getInitialState(),\r\n  reducers: {\r\n    effectAdded: effectAdapter.addOne,\r\n    effectUpdated: effectAdapter.updateOne,\r\n    effectCreated: {\r\n      reducer: (state, action) => {\r\n        const { id } = action.payload;\r\n        effectAdapter.addOne(state, {\r\n          id,\r\n          effectCondition: conditions.ALWAYS,\r\n          effectType: effectTypes.FLATFOOT,\r\n          startLevel: 1,\r\n          endLevel: 20,\r\n        });\r\n      },\r\n      prepare: ({ parentId }) => {\r\n        const id = ++effectId;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    effectRemoved: (state, action) => {\r\n      effectAdapter.removeOne(state, action.payload.id);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { effectAdded, effectUpdated, effectCreated, effectRemoved } =\r\n  effectsSlice.actions;\r\n\r\nexport default effectsSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selecteffectById,\r\n  selectIds: selecteffectIds,\r\n  selectEntities: selecteffectEntities,\r\n  selectAll: selectAlleffects,\r\n  selectTotal: selectTotaleffects,\r\n} = effectAdapter.getSelectors((state) => state.effects);\r\n","import {\r\n  ACTrends,\r\n  profTrends,\r\n  damageTrends,\r\n  dieTrends,\r\n  SaveTrends,\r\n  statTrends,\r\n  itemTrends,\r\n} from \"./types\";\r\n\r\nconst zero = {};\r\nconst level = {};\r\nconst trained = {};\r\nconst maxSkill = {};\r\n\r\nconst maxScore = {};\r\nconst score16pp = {};\r\nconst score16p = {};\r\nconst score16 = {};\r\nconst score14p = {};\r\nconst score14 = {};\r\n\r\nconst martialProf = {};\r\nconst alchProf = {};\r\nconst casterProf = {};\r\n\r\nconst spellProf = {};\r\n\r\nconst weaponItem = {};\r\nconst skillItem = {};\r\n\r\nconst weaponDice = {};\r\nconst spellDice = {};\r\nconst spellDice2 = {};\r\nfor (let i = 1; i <= 20; i++) {\r\n  spellDice[i] = Math.floor((i + 1) / 2);\r\n  spellDice2[i] = 2 * Math.floor((i + 1) / 2);\r\n}\r\nconst runes = {};\r\nconst deadly = {};\r\n\r\nconst sneak = {};\r\nconst strategic = {};\r\nconst precise = {};\r\n\r\nconst martialSpec = {};\r\nconst casterSpec = {};\r\n\r\nconst rage = {};\r\nconst animalrage = {};\r\nconst dragonrage = {};\r\nconst giantrage = {};\r\n\r\nconst fighterAB = {};\r\nconst martialAB = {};\r\nconst casterAB = {};\r\nconst alchAB = {};\r\n\r\nconst casterSpellAttack = {};\r\nconst casterSaveDC = {};\r\nconst magusspell = {};\r\nconst mcspell = {};\r\n\r\nconst fighterStatic = {};\r\nconst fighterRanged = {};\r\nconst martialStatic = {};\r\nconst martialRanged = {};\r\nconst casterStatic = {};\r\nconst casterRanged = {};\r\n\r\nfor (let i = 1; i <= 20; i++) {\r\n  zero[i] = 0;\r\n  level[i] = i;\r\n  trained[i] = i + 2;\r\n  maxSkill[i] = i + 2;\r\n\r\n  maxScore[i] = 4;\r\n  score16pp[i] = 3;\r\n  score16p[i] = 3;\r\n  score16[i] = 3;\r\n  score14p[i] = 2;\r\n  score14[i] = 2;\r\n\r\n  martialProf[i] = 2;\r\n  alchProf[i] = 2;\r\n  casterProf[i] = 2;\r\n\r\n  spellProf[i] = 2;\r\n  magusspell[i] = i + 2;\r\n  mcspell[i] = i + 2;\r\n\r\n  weaponItem[i] = 0;\r\n  skillItem[i] = 0;\r\n  weaponDice[i] = 1;\r\n  runes[i] = 0;\r\n  deadly[i] = 1;\r\n\r\n  sneak[i] = 1;\r\n  strategic[i] = 1;\r\n  precise[i] = 2;\r\n\r\n  martialSpec[i] = 0;\r\n  casterSpec[i] = 0;\r\n\r\n  rage[i] = 2;\r\n  animalrage[i] = 2;\r\n  dragonrage[i] = 4;\r\n  giantrage[i] = 6;\r\n\r\n  if (i >= 2) {\r\n    weaponItem[i] = 1;\r\n  }\r\n  if (i >= 3) {\r\n    maxSkill[i] = i + 4;\r\n    skillItem[i] = 1;\r\n  }\r\n  if (i >= 4) {\r\n    weaponDice[i] = 2;\r\n  }\r\n  if (i >= 5) {\r\n    martialProf[i] = 4;\r\n    score16pp[i] = 4;\r\n    score16p[i] = 4;\r\n    score16[i] = 4;\r\n    score14p[i] = 3;\r\n    score14[i] = 3;\r\n\r\n    sneak[i] = 2;\r\n    strategic[i] = 2;\r\n    precise[i] = 3;\r\n  }\r\n  if (i >= 7) {\r\n    alchProf[i] = 4;\r\n    martialSpec[i] = 1;\r\n    spellProf[i] = 4;\r\n    maxSkill[i] = i + 6;\r\n\r\n    rage[i] = 6;\r\n    animalrage[i] = 5;\r\n    dragonrage[i] = 8;\r\n    giantrage[i] = 10;\r\n  }\r\n  if (i >= 8) {\r\n    runes[i] = 1;\r\n  }\r\n  if (i >= 9) {\r\n    skillItem[i] = 2;\r\n    magusspell[i] = i + 4;\r\n\r\n    strategic[i] = 3;\r\n    precise[i] = 4;\r\n  }\r\n  if (i >= 10) {\r\n    weaponItem[i] = 2;\r\n    maxScore[i] = 5;\r\n    score14p[i] = 4;\r\n    score14[i] = 4;\r\n  }\r\n  if (i >= 11) {\r\n    casterProf[i] = 4;\r\n\r\n    sneak[i] = 3;\r\n  }\r\n  if (i >= 12) {\r\n    weaponDice[i] = 3;\r\n    mcspell[i] = i + 4;\r\n    deadly[i] = 2;\r\n  }\r\n  if (i >= 13) {\r\n    martialProf[i] = 6;\r\n    casterSpec[i] = 1;\r\n\r\n    strategic[i] = 4;\r\n    precise[i] = 5;\r\n  }\r\n  if (i >= 15) {\r\n    martialSpec[i] = 2;\r\n    score16pp[i] = 5;\r\n    score16p[i] = 5;\r\n    spellProf[i] = 6;\r\n    maxSkill[i] = i + 8;\r\n    runes[i] = 2;\r\n\r\n    rage[i] = 12;\r\n    animalrage[i] = 12;\r\n    dragonrage[i] = 16;\r\n    giantrage[i] = 18;\r\n  }\r\n  if (i >= 16) {\r\n    weaponItem[i] = 3;\r\n  }\r\n  if (i >= 17) {\r\n    score16pp[i] = 6;\r\n    maxScore[i] = 6;\r\n    skillItem[i] = 3;\r\n    magusspell[i] = i + 6;\r\n\r\n    sneak[i] = 4;\r\n    strategic[i] = 5;\r\n    precise[i] = 6;\r\n  }\r\n  if (i >= 18) {\r\n    mcspell[i] = i + 6;\r\n  }\r\n  if (i >= 19) {\r\n    weaponDice[i] = 4;\r\n    spellProf[i] = 8;\r\n    deadly[i] = 3;\r\n  }\r\n  if (i >= 20) {\r\n    maxScore[i] = 7;\r\n  }\r\n\r\n  fighterAB[i] = i + martialProf[i] + 2;\r\n  martialAB[i] = i + martialProf[i];\r\n  casterAB[i] = i + casterProf[i];\r\n  alchAB[i] = i + alchProf[i];\r\n  casterSpellAttack[i] = i + spellProf[i];\r\n  casterSaveDC[i] = 10 + i + spellProf[i] + maxScore[i];\r\n\r\n  fighterStatic[i] = maxScore[i] + (martialSpec[i] * (martialProf[i] + 2)) / 2;\r\n  fighterRanged[i] = (martialSpec[i] * (martialProf[i] + 2)) / 2;\r\n  martialStatic[i] = maxScore[i] + (martialSpec[i] * martialProf[i]) / 2;\r\n  martialRanged[i] = (martialSpec[i] * martialProf[i]) / 2;\r\n  casterStatic[i] = score16[i] + (casterSpec[i] * casterProf[i]) / 2;\r\n  casterRanged[i] = (casterSpec[i] * casterProf[i]) / 2;\r\n}\r\nexport const profTrendValues = {\r\n  [profTrends.TRAINED]: trained,\r\n  [profTrends.FIGHTERWEAPON]: fighterAB,\r\n  [profTrends.MARTIALWEAPON]: martialAB,\r\n  [profTrends.CASTERWEAPON]: casterAB,\r\n  [profTrends.ALCHWEAPON]: alchAB,\r\n  [profTrends.CASTERSPELL]: casterSpellAttack,\r\n  [profTrends.MAGUSSPELL]: magusspell,\r\n  [profTrends.MCSPELL]: mcspell,\r\n  [profTrends.MAXSKILL]: maxSkill,\r\n};\r\nexport const statTrendValues = {\r\n  [statTrends.AS10]: zero,\r\n  [statTrends.AS18a]: maxScore,\r\n  [statTrends.AS16a]: score16pp,\r\n  [statTrends.AS16pp]: score16p,\r\n  [statTrends.AS16p]: score16,\r\n  [statTrends.AS14pp]: score14p,\r\n  [statTrends.AS14p]: score14,\r\n};\r\nexport const itemTrendValues = {\r\n  [itemTrends.NONE]: zero,\r\n  [itemTrends.WEAPON]: weaponItem,\r\n  [itemTrends.SKILL]: skillItem,\r\n};\r\n\r\nexport const MAPvalues = {\r\n  \"0 (0x-5)\": 0,\r\n  \"-5 (1x-5)\": -5,\r\n  \"-10 (2x-5)\": -10,\r\n  \"0 (0x-4)\": 0,\r\n  \"-4 (1x-4)\": -4,\r\n  \"-8 (2x-4)\": -8,\r\n  \"0 (0x-3)\": 0,\r\n  \"-3 (1x-3)\": -3,\r\n  \"-6 (2x-3)\": -6,\r\n  \"0 (0x-2)\": 0,\r\n  \"-2 (1x-2)\": -2,\r\n  \"-4 (2x-2)\": -4,\r\n  \"0 (0x-1)\": 0,\r\n  \"-1 (1x-1)\": -1,\r\n  \"-2 (2x-1)\": -2,\r\n};\r\n\r\nexport const dieTrendValues = {\r\n  [dieTrends.NONE]: zero,\r\n  [dieTrends.WEAPON]: weaponDice,\r\n  [dieTrends.SPELLLEVEL1]: spellDice,\r\n  [dieTrends.SPELLLEVEL2]: spellDice2,\r\n  [dieTrends.RUNE]: runes,\r\n  [dieTrends.DEADLY]: deadly,\r\n  [dieTrends.SNEAK]: sneak,\r\n  [dieTrends.STRATEGIC]: strategic,\r\n  [dieTrends.PRECISE]: precise,\r\n};\r\n\r\nexport const damageTrendValues = {\r\n  ...statTrendValues,\r\n  [damageTrends.NONE]: zero,\r\n  [damageTrends.FIGHTERWEAPONSPEC]: fighterRanged,\r\n  [damageTrends.MARTIALWEAPONSPEC]: martialRanged,\r\n  [damageTrends.CASTERWEAPONSPEC]: casterRanged,\r\n  [damageTrends.WEAPON]: weaponDice,\r\n  [damageTrends.SPELLLEVEL1]: spellDice,\r\n  [damageTrends.RAGE]: rage,\r\n  [damageTrends.ANIMALRAGE]: animalrage,\r\n  [damageTrends.DRAGONRAGE]: dragonrage,\r\n  [damageTrends.GIANTRAGE]: giantrage,\r\n};\r\n\r\nconst extremeAC = {\r\n  \"-1\": 18,\r\n  0: 19,\r\n  1: 19,\r\n  2: 21,\r\n  3: 22,\r\n  4: 24,\r\n  5: 25,\r\n  6: 27,\r\n  7: 28,\r\n  8: 30,\r\n  9: 31,\r\n  10: 33,\r\n  11: 34,\r\n  12: 36,\r\n  13: 37,\r\n  14: 39,\r\n  15: 40,\r\n  16: 42,\r\n  17: 43,\r\n  18: 45,\r\n  19: 46,\r\n  20: 48,\r\n  21: 49,\r\n  22: 51,\r\n  23: 52,\r\n  24: 54,\r\n};\r\nconst highAC = { ...extremeAC };\r\nfor (let level in highAC) highAC[level] -= 3;\r\n\r\nconst moderateAC = { ...extremeAC };\r\nfor (let level in moderateAC) moderateAC[level] -= 4;\r\n\r\nconst lowAC = { ...extremeAC };\r\nfor (let level in lowAC) lowAC[level] -= 6;\r\n\r\nexport const defaultACs = {\r\n  [ACTrends.EXTREME]: extremeAC,\r\n  [ACTrends.HIGH]: highAC,\r\n  [ACTrends.MODERATE]: moderateAC,\r\n  [ACTrends.LOW]: lowAC,\r\n};\r\n\r\nconst extremeSaves = {\r\n  \"-1\": 9,\r\n  0: 10,\r\n  1: 11,\r\n  2: 12,\r\n  3: 14,\r\n  4: 15,\r\n  5: 17,\r\n  6: 18,\r\n  7: 20,\r\n  8: 21,\r\n  9: 23,\r\n  10: 24,\r\n  11: 26,\r\n  12: 27,\r\n  13: 29,\r\n  14: 30,\r\n  15: 32,\r\n  16: 33,\r\n  17: 35,\r\n  18: 36,\r\n  19: 38,\r\n  20: 39,\r\n  21: 41,\r\n  22: 43,\r\n  23: 44,\r\n  24: 46,\r\n};\r\nconst highSaves = {\r\n  \"-1\": 8,\r\n  0: 9,\r\n  1: 10,\r\n  2: 11,\r\n  3: 12,\r\n  4: 14,\r\n  5: 15,\r\n  6: 17,\r\n  7: 18,\r\n  8: 19,\r\n  9: 21,\r\n  10: 22,\r\n  11: 24,\r\n  12: 25,\r\n  13: 26,\r\n  14: 28,\r\n  15: 29,\r\n  16: 30,\r\n  17: 32,\r\n  18: 33,\r\n  19: 35,\r\n  20: 36,\r\n  21: 38,\r\n  22: 39,\r\n  23: 40,\r\n  24: 42,\r\n};\r\nconst moderateSaves = {\r\n  \"-1\": 5,\r\n  0: 6,\r\n  1: 7,\r\n  2: 8,\r\n  3: 9,\r\n  4: 11,\r\n  5: 12,\r\n  6: 14,\r\n  7: 15,\r\n  8: 16,\r\n  9: 18,\r\n  10: 19,\r\n  11: 21,\r\n  12: 22,\r\n  13: 23,\r\n  14: 25,\r\n  15: 26,\r\n  16: 28,\r\n  17: 29,\r\n  18: 30,\r\n  19: 32,\r\n  20: 33,\r\n  21: 35,\r\n  22: 36,\r\n  23: 37,\r\n  24: 38,\r\n};\r\nconst lowSaves = {\r\n  \"-1\": 2,\r\n  0: 3,\r\n  1: 4,\r\n  2: 5,\r\n  3: 6,\r\n  4: 8,\r\n  5: 9,\r\n  6: 11,\r\n  7: 12,\r\n  8: 13,\r\n  9: 15,\r\n  10: 16,\r\n  11: 18,\r\n  12: 19,\r\n  13: 20,\r\n  14: 22,\r\n  15: 23,\r\n  16: 25,\r\n  17: 26,\r\n  18: 27,\r\n  19: 29,\r\n  20: 30,\r\n  21: 32,\r\n  22: 33,\r\n  23: 34,\r\n  24: 36,\r\n};\r\nconst terribleSaves = {\r\n  \"-1\": 0,\r\n  0: 1,\r\n  1: 2,\r\n  2: 3,\r\n  3: 4,\r\n  4: 6,\r\n  5: 7,\r\n  6: 8,\r\n  7: 10,\r\n  8: 11,\r\n  9: 12,\r\n  10: 14,\r\n  11: 15,\r\n  12: 16,\r\n  13: 18,\r\n  14: 19,\r\n  15: 20,\r\n  16: 22,\r\n  17: 23,\r\n  18: 24,\r\n  19: 26,\r\n  20: 27,\r\n  21: 28,\r\n  22: 30,\r\n  23: 31,\r\n  24: 32,\r\n};\r\nexport const defaultSaves = {\r\n  [SaveTrends.EXTREME]: extremeSaves,\r\n  [SaveTrends.HIGH]: highSaves,\r\n  [SaveTrends.MODERATE]: moderateSaves,\r\n  [SaveTrends.LOW]: lowSaves,\r\n  [SaveTrends.TERRIBLE]: terribleSaves,\r\n};\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\nimport {\r\n  activityPathCreated,\r\n  activityPathRemoved,\r\n} from \"../SelectedRoutine/activityPathSlice\";\r\n\r\nexport const routinesAdapter = createEntityAdapter();\r\n\r\nlet routineId = 100;\r\nexport const routinesSlice = createSlice({\r\n  name: \"routines\",\r\n  initialState: routinesAdapter.getInitialState({ selectedRoutine: 0 }),\r\n  reducers: {\r\n    setRoutine: (state, action) => {\r\n      state.selectedRoutine = action.payload || 0;\r\n    },\r\n    routineAdded: routinesAdapter.addOne,\r\n    routineUpdated: routinesAdapter.updateOne,\r\n    routineRemoved: (state, action) => {\r\n      routinesAdapter.removeOne(state, action);\r\n      if (action.payload === state.selectedRoutine)\r\n        state.selectedRoutine = state.ids ? state.ids[0] : undefined;\r\n    },\r\n    routineCreated: {\r\n      reducer: (state, action) => {\r\n        const { id } = action.payload;\r\n        state.selectedRoutine = id;\r\n        routinesAdapter.addOne(state, {\r\n          id,\r\n          name: \"New Routine\",\r\n          display: true,\r\n          apIds: [],\r\n          levelDiff: 0,\r\n          description: \"Enter a description here.\",\r\n          startLevel: 1,\r\n          endLevel: 20,\r\n        });\r\n      },\r\n      prepare: () => {\r\n        const id = ++routineId;\r\n        return { payload: { id } };\r\n      },\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(activityPathCreated, (state, action) => {\r\n        const { routineId: id, id: apId } = action.payload;\r\n        if (id !== undefined) state.entities[id].apIds.push(apId);\r\n      })\r\n      .addCase(activityPathRemoved, (state, action) => {\r\n        const { routineId, id } = action.payload;\r\n        if (routineId !== undefined) {\r\n          state.entities[routineId].apIds = state.entities[\r\n            routineId\r\n          ].apIds.filter((apId) => apId !== id);\r\n        }\r\n      });\r\n  },\r\n});\r\n\r\nexport const {\r\n  routineCreated,\r\n  setRoutine,\r\n  updateSelected,\r\n  routineAdded,\r\n  routineUpdated,\r\n  routineRemoved,\r\n} = routinesSlice.actions;\r\n\r\nexport default routinesSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selectRoutineById,\r\n  selectIds: selectRoutineIds,\r\n  selectEntities: selectRoutineEntities,\r\n  selectAll: selectAllRoutines,\r\n  selectTotal: selectTotalRoutines,\r\n} = routinesAdapter.getSelectors((state) => state.routines);\r\n\r\nexport const selectSelectedRoutine = (state) => state.routines.selectedRoutine;\r\n","export const convolve = (vec1, vec2) => {\r\n  if (vec1.length === 0 || vec2.length === 0) {\r\n    throw new Error(\"Vectors can not be empty!\");\r\n  }\r\n  const volume = vec1;\r\n  const kernel = vec2;\r\n  let displacement = 0;\r\n  const convVec = [];\r\n\r\n  for (let i = 0; i < volume.length; i++) {\r\n    for (let j = 0; j < kernel.length; j++) {\r\n      if (displacement + j !== convVec.length) {\r\n        convVec[displacement + j] =\r\n          convVec[displacement + j] + volume[i] * kernel[j];\r\n      } else {\r\n        convVec.push(volume[i] * kernel[j]);\r\n      }\r\n    }\r\n    displacement++;\r\n  }\r\n\r\n  return convVec;\r\n};\r\n\r\nexport const multiplyDist = (dam, dist, multiplier) => {\r\n  if (multiplier === 0) return [0, [1]];\r\n  if (multiplier === 1) return [dam, [...dist]];\r\n\r\n  const newDist = [0];\r\n  let index = 0;\r\n  const newDam = Math.floor(dam * multiplier);\r\n\r\n  let i = 0;\r\n  let oldValue = newDam;\r\n  for (let chance of dist) {\r\n    let newValue = Math.floor((dam + i) * multiplier);\r\n    if (newValue === oldValue) {\r\n      newDist[index] += chance;\r\n    } else {\r\n      if (newValue > oldValue + 1) {\r\n        for (let diff = 0; diff < newValue - (oldValue + 1); diff++) {\r\n          index++;\r\n          newDist[index] = 0;\r\n        }\r\n      }\r\n      index++;\r\n      newDist[index] = chance;\r\n    }\r\n    oldValue = newValue;\r\n    i++;\r\n  }\r\n\r\n  return [newDam, newDist];\r\n};\r\n\r\n/**\r\n * Combine multiple distributions with their chances into one distribution starting from 0\r\n * @param  {...[{staticDamage, distribution}, chance]} dists\r\n * @returns\r\n */\r\nexport const consolidateDists = (...dists) => {\r\n  let maxDamage = 0;\r\n  for (let dist of dists) {\r\n    maxDamage = Math.max(\r\n      maxDamage,\r\n      dist[0].staticDamage + dist[0].damageDist.length\r\n    );\r\n  }\r\n  let damageDist = [];\r\n  for (let i = 0; i < maxDamage; i++) {\r\n    damageDist.push(0);\r\n    for (let dist of dists) {\r\n      if (dist[0].staticDamage <= i) {\r\n        let index = i - dist[0].staticDamage;\r\n        if (index < dist[0].damageDist.length)\r\n          damageDist[i] += dist[0].damageDist[index] * dist[1];\r\n      }\r\n    }\r\n  }\r\n  return damageDist;\r\n};\r\n\r\n/**\r\n * apply a minimum to a distribution, like for damage penalties or resistances\r\n * @param {number} staticDamage\r\n * @param {[number]} damageDist\r\n * @param {number} min\r\n * @returns\r\n */\r\nexport const applyMin = (staticDamage, damageDist, min) => {\r\n  while (staticDamage < min) {\r\n    if (damageDist.length >= 2) {\r\n      damageDist[1] += damageDist[0];\r\n      damageDist.shift();\r\n    }\r\n    staticDamage++;\r\n  }\r\n  return [staticDamage, damageDist];\r\n};\r\n","import {\r\n  damageTrendValues,\r\n  dieTrendValues,\r\n  defaultACs,\r\n  defaultSaves,\r\n  profTrendValues,\r\n  statTrendValues,\r\n  itemTrendValues,\r\n  MAPvalues,\r\n} from \"../Model/defaults\";\r\nimport {\r\n  activityTypes,\r\n  dCond,\r\n  defenses,\r\n  materials,\r\n  rollTypes,\r\n} from \"../Model/types\";\r\nimport { applyMin, convolve, multiplyDist } from \"./Distribution\";\r\n\r\nfunction getCritSuccessPercent(bonus, DC, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -20) {\r\n    chance = 0;\r\n  } else if (dif === -20) {\r\n    chance = 5;\r\n  } else if (dif < -9) {\r\n    chance = keen ? 10 : 5;\r\n  } else if (dif < 8) {\r\n    chance = (11 + dif) * 5;\r\n  } else {\r\n    chance = 95;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nfunction getSuccessPercent(bonus, DC, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -29) {\r\n    chance = 0;\r\n  } else if (dif < -20) {\r\n    chance = 5;\r\n  } else if (dif === -20) {\r\n    chance = 0;\r\n  } else if (dif < -9) {\r\n    chance = (keen ? 19 : 20 + dif) * 5;\r\n  } else if (dif < -1) {\r\n    chance = 50;\r\n  } else if (dif < 9) {\r\n    chance = (8 - dif) * 5;\r\n  } else {\r\n    chance = 5;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nfunction getFailurePercent(bonus, DC, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -29) {\r\n    chance = 5;\r\n  } else if (dif < -20) {\r\n    chance = (29 + dif) * 5;\r\n  } else if (dif < -10) {\r\n    chance = 45;\r\n  } else if (dif < -1) {\r\n    chance = (-2 - dif) * 5;\r\n  } else if (dif < 9) {\r\n    chance = 5;\r\n  } else {\r\n    chance = 0;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nfunction getCritFailurePercent(bonus, DC, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -29) {\r\n    chance = 95;\r\n  } else if (dif < -10) {\r\n    chance = (-10 - dif) * 5;\r\n  } else if (dif < -1) {\r\n    chance = 5;\r\n  } else {\r\n    chance = 0;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\n// combine the probability distributions of the given damages into context\r\nconst addDamage = (\r\n  context,\r\n  type,\r\n  material,\r\n  persistent,\r\n  staticDamage,\r\n  damageDist,\r\n  multiplier\r\n) => {\r\n  if (persistent) {\r\n    context = context.persistent;\r\n  } else {\r\n    context = context.normal;\r\n  }\r\n  [staticDamage, damageDist] = multiplyDist(\r\n    staticDamage,\r\n    damageDist,\r\n    multiplier\r\n  );\r\n  if (!(type in context)) {\r\n    context[type] = { material, staticDamage, damageDist };\r\n  } else {\r\n    context[type].staticDamage += staticDamage;\r\n    context[type].damageDist = convolve(context[type].damageDist, damageDist);\r\n    if (material !== materials.NONE) context[type].material = material;\r\n  }\r\n};\r\n\r\n/**\r\n * Calculate the chance of each result and the appropriate damage\r\n * distributions for a given activity at level vs target with targetState\r\n * adds defenseBonus or resistanceBonus to target if given\r\n * @param {Number} level\r\n * @param {*} activity\r\n * @param {*} damages\r\n * @param {*} target\r\n * @param {*} targetState\r\n * @param {*} weaknesses\r\n * @param {*} defenseBonus\r\n * @param {*} resistanceBonus\r\n * @returns [damageTrees, chances];\r\n */\r\nfunction calculateExpectedDamage(\r\n  level,\r\n  activity,\r\n  damages,\r\n  target,\r\n  targetState,\r\n  weaknesses,\r\n  defenseBonus,\r\n  resistanceBonus\r\n) {\r\n  /**\r\n   * Get the check bonus and DC\r\n   * Calculate the chance of each outcome\r\n   * Go through each damage and evaluate it, put damage types together\r\n   * Go through each damage type and apply weakness/resistance\r\n   * Return damage trees and chances\r\n   */\r\n  let bonus;\r\n  let DC;\r\n  let targetValue;\r\n  switch (activity.targetType) {\r\n    case defenses.AC:\r\n      targetValue = defaultACs[target.ACTrend];\r\n      break;\r\n    case defenses.FORT:\r\n      targetValue = defaultSaves[target.FortTrend];\r\n      break;\r\n    case defenses.REF:\r\n      targetValue = defaultSaves[target.RefTrend];\r\n      break;\r\n    case defenses.WILL:\r\n      targetValue = defaultSaves[target.WillTrend];\r\n      break;\r\n    case defenses.PER:\r\n      targetValue = defaultSaves[target.PerTrend];\r\n      break;\r\n\r\n    default:\r\n      targetValue = defaultACs[target.ACTrend];\r\n      break;\r\n  }\r\n\r\n  targetValue = targetValue[level + target.levelDiff];\r\n  switch (activity.type) {\r\n    case activityTypes.STRIKE:\r\n      bonus = profTrendValues[activity.profTrend][level];\r\n      bonus += statTrendValues[activity.statTrend][level];\r\n      bonus += itemTrendValues[activity.itemTrend][level];\r\n      bonus += activity.bonusAdjustments[level];\r\n      bonus += MAPvalues[activity.MAP];\r\n      DC = targetValue + defenseBonus - targetState.frightened;\r\n      if (activity.targetType === defenses.AC) {\r\n        if (target.flatfooted || targetState.flatfooted) DC -= 2;\r\n      } else {\r\n        DC += 10;\r\n      }\r\n      break;\r\n\r\n    case activityTypes.SAVE:\r\n      bonus = targetValue + defenseBonus - targetState.frightened;\r\n      DC = 10 + profTrendValues[activity.profTrend][level];\r\n      DC += statTrendValues[activity.statTrend][level];\r\n      DC += itemTrendValues[activity.itemTrend][level];\r\n      DC += activity.bonusAdjustments[level];\r\n      if (activity.targetType === defenses.AC) {\r\n        bonus -= 10;\r\n      }\r\n      break;\r\n\r\n    default:\r\n      console.log(`Activity type ${activity.type} not implemented`);\r\n  }\r\n\r\n  let critPercent = getCritSuccessPercent(bonus, DC);\r\n  let succPercent = getSuccessPercent(bonus, DC);\r\n  let failPercent = getFailurePercent(bonus, DC);\r\n  let crfaPercent = getCritFailurePercent(bonus, DC);\r\n  if (activity.rollType === rollTypes.ADVANTAGE) {\r\n    let notcrit = 100 - critPercent;\r\n    critPercent = 100 - (notcrit * notcrit) / 100;\r\n    let nothit = notcrit - succPercent;\r\n    succPercent = 100 - (nothit * nothit) / 100 - critPercent;\r\n    let notfail = nothit - failPercent;\r\n    failPercent = 100 - (notfail * notfail) / 100 - succPercent - critPercent;\r\n    crfaPercent = (crfaPercent * crfaPercent) / 100;\r\n  } else if (activity.rollType === rollTypes.DISADVANTAGE) {\r\n    let notcrfa = 100 - crfaPercent;\r\n    crfaPercent = 100 - (notcrfa * notcrfa) / 100;\r\n    let notfail = notcrfa - failPercent;\r\n    failPercent = 100 - (notfail * notfail) / 100 - crfaPercent;\r\n    let notsucc = notfail - succPercent;\r\n    succPercent = 100 - (notsucc * notsucc) / 100 - failPercent - crfaPercent;\r\n    critPercent = (critPercent * critPercent) / 100;\r\n  }\r\n  const chances = [\r\n    critPercent / 100,\r\n    succPercent / 100,\r\n    failPercent / 100,\r\n    crfaPercent / 100,\r\n  ];\r\n  const critDamages = { normal: {}, persistent: {} };\r\n  const succDamages = { normal: {}, persistent: {} };\r\n  const failDamages = { normal: {}, persistent: {} };\r\n  const crfaDamages = { normal: {}, persistent: {} };\r\n  const damageTrees = [critDamages, succDamages, failDamages, crfaDamages];\r\n\r\n  // Start going through each damage and evaluate it, put damage types together\r\n  damages.forEach((damage) => {\r\n    let {\r\n      damageCondition,\r\n      diceSize,\r\n      fatal,\r\n      fatalDie,\r\n\r\n      damageTrend,\r\n      damageType,\r\n      material,\r\n      persistent,\r\n      multiplier,\r\n    } = damage;\r\n\r\n    let diceNum = dieTrendValues[damage.dieTrend][level];\r\n    diceNum += damage.dieAdjustments[level];\r\n    if (diceNum < 0) diceNum = 0;\r\n    let staticDamage = 0;\r\n    for (let i = 0; i < damageTrend.length; i++) {\r\n      staticDamage += damageTrendValues[damageTrend[i]][level];\r\n    }\r\n    staticDamage += damage.damageAdjustments[level];\r\n    let damageDist = [1];\r\n    let fatalDist = [1];\r\n    let diceArray = [];\r\n    for (let i = 0; i < diceSize; i++) {\r\n      diceArray.push(1 / diceSize);\r\n    }\r\n    for (let i = 0; i < diceNum; i++) {\r\n      damageDist = convolve(damageDist, diceArray);\r\n    }\r\n    if (fatal) {\r\n      let diceArray = [];\r\n      for (let i = 0; i < fatalDie; i++) {\r\n        diceArray.push(1 / fatalDie);\r\n      }\r\n      for (let i = 0; i < diceNum; i++) {\r\n        fatalDist = convolve(fatalDist, diceArray);\r\n      }\r\n    }\r\n    staticDamage += diceNum;\r\n\r\n    // Add damage to damage trees appropriately\r\n    switch (damageCondition) {\r\n      case dCond.STRIKE:\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          critDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          fatal ? fatalDist : damageDist,\r\n          multiplier * 2\r\n        );\r\n        break;\r\n\r\n      case dCond.BASIC:\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 0.5\r\n        );\r\n        addDamage(\r\n          failDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          crfaDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 2\r\n        );\r\n        break;\r\n\r\n      case dCond.CRIF:\r\n        addDamage(\r\n          crfaDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.FAIL:\r\n        addDamage(\r\n          failDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.SUCC:\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.CRIT:\r\n        addDamage(\r\n          critDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.AT_LEAST_SUCC:\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          critDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.AT_LEAST_FAIL:\r\n        addDamage(\r\n          failDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          critDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.FAIL_WORSE:\r\n        addDamage(\r\n          crfaDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          failDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.SUCC_WORSE:\r\n        addDamage(\r\n          crfaDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          failDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n\r\n        break;\r\n\r\n      case dCond.ALWAYS:\r\n        addDamage(\r\n          crfaDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          failDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          succDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          critDamages,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      default:\r\n        console.log(\r\n          `Damage condition ${damage.condition} not implemented yet.`\r\n        );\r\n    }\r\n  });\r\n  // end going through each damage and evaluate it, put damage types together\r\n\r\n  // Start going through each damage type and apply weakness/resistance\r\n  for (let damageTree of damageTrees) {\r\n    for (let damageQuality of [\"normal\", \"persistent\"]) {\r\n      let totalStaticDamage = 0;\r\n      let totalDamageDist = [1];\r\n      for (let type in damageTree[damageQuality]) {\r\n        let { material, staticDamage, damageDist } =\r\n          damageTree[damageQuality][type];\r\n\r\n        // ignore if there's 0 damage\r\n        if (damageDist.length === 1 && staticDamage <= 0) continue;\r\n\r\n        // make min damage 1 before resistances\r\n        [staticDamage, damageDist] = applyMin(staticDamage, damageDist, 1);\r\n\r\n        // find max weakness and resistance, weaknesses are negative numbers\r\n        let maxW = 0;\r\n        let maxR = 0;\r\n        weaknesses.forEach((weakness) => {\r\n          if (weakness.type === type || weakness.type === material) {\r\n            if (weakness.value + resistanceBonus < 0) {\r\n              maxW = Math.min(maxW, weakness.value + resistanceBonus);\r\n            } else if (weakness.value + resistanceBonus > 0) {\r\n              maxR = Math.max(maxR, weakness.value + resistanceBonus);\r\n            }\r\n          }\r\n        });\r\n        staticDamage = staticDamage - (maxR + maxW);\r\n\r\n        // make min damage 0 after resistances\r\n        [staticDamage, damageDist] = applyMin(staticDamage, damageDist, 0);\r\n\r\n        totalStaticDamage += staticDamage;\r\n        totalDamageDist = convolve(totalDamageDist, damageDist);\r\n      }\r\n      damageTree[damageQuality].staticDamage = totalStaticDamage;\r\n      damageTree[damageQuality].damageDist = totalDamageDist;\r\n    }\r\n  }\r\n  // End going through each damage type and apply weakness/resistance\r\n\r\n  return [damageTrees, chances];\r\n}\r\n\r\nexport { calculateExpectedDamage };\r\n","import { convolve, consolidateDists } from \"./Distribution\";\r\nimport { calculateExpectedDamage } from \"./Calculation\";\r\nimport { conditions, effectTypes } from \"../Model/types\";\r\n\r\n/**\r\n * Checks given degreeOfSuccess is in the condition\r\n * like Success is in Success or better\r\n * @param {*} condition\r\n * @param {*} degreeOfSuccess\r\n * @returns\r\n */\r\nfunction validateCondition(condition, degreeOfSuccess) {\r\n  let indicies = [];\r\n  // console.log(`cond is: ${ap.condition}`);\r\n  switch (condition) {\r\n    case conditions.ALWAYS:\r\n      indicies = [0, 1, 2, 3];\r\n      break;\r\n\r\n    case conditions.AT_LEAST_FAIL:\r\n      indicies = [0, 1, 2];\r\n      break;\r\n\r\n    case conditions.AT_LEAST_SUCC:\r\n      indicies = [0, 1];\r\n      break;\r\n\r\n    case conditions.CRIF:\r\n      indicies = [3];\r\n      break;\r\n\r\n    case conditions.CRIT:\r\n      indicies = [0];\r\n      break;\r\n\r\n    case conditions.FAIL:\r\n      indicies = [2];\r\n      break;\r\n\r\n    case conditions.FAIL_WORSE:\r\n      indicies = [2, 3];\r\n      break;\r\n\r\n    case conditions.SUCC:\r\n      indicies = [1];\r\n      break;\r\n\r\n    case conditions.SUCC_WORSE:\r\n      indicies = [1, 2, 3];\r\n      break;\r\n\r\n    default:\r\n  }\r\n  return indicies.includes(degreeOfSuccess);\r\n}\r\n\r\nclass ActivityPathEvaluator {\r\n  constructor(activityPaths, targets, damages, effects, weaknesses) {\r\n    this.activityPaths = activityPaths;\r\n    this.targets = targets;\r\n    this.damages = damages;\r\n    this.effects = effects;\r\n    this.weaknesses = weaknesses;\r\n  }\r\n\r\n  canEvaluate(level) {\r\n    const levelDiff = this.targets[0].levelDiff;\r\n    // console.log(`level ${level}, levelDiff ${levelDiff}`);\r\n    if (level + levelDiff < -1 || level + levelDiff > 24) return false;\r\n    return true;\r\n  }\r\n\r\n  evalRoutine(routine, level, ACBonus, resBonus) {\r\n    const initialTargetState = {\r\n      flatfooted: false,\r\n      frightened: 0,\r\n    };\r\n    const dataArray = [];\r\n    const cumulative = [];\r\n    const PdataArray = [];\r\n    const Pcumulative = [];\r\n\r\n    let expD = 0;\r\n    let expP = 0;\r\n    let routineDDist = [1];\r\n    let routinePDDist = [1];\r\n    for (let i = 0; i < routine.apIds.length; i++) {\r\n      let activityPath = this.activityPaths[routine.apIds[i]];\r\n      let [damageDist, PdamageDist] = this.evalPath(\r\n        activityPath,\r\n        initialTargetState,\r\n        level,\r\n        ACBonus,\r\n        resBonus\r\n      );\r\n      routineDDist = convolve(routineDDist, damageDist);\r\n      routinePDDist = convolve(routinePDDist, PdamageDist);\r\n    }\r\n    let currentSum = 1;\r\n    for (let i = 0; i < routineDDist.length; i++) {\r\n      dataArray.push(i);\r\n      cumulative.push(currentSum);\r\n      currentSum -= routineDDist[i];\r\n\r\n      expD += routineDDist[i] * i;\r\n    }\r\n    currentSum = 1;\r\n    for (let i = 0; i < routinePDDist.length; i++) {\r\n      PdataArray.push(i);\r\n      Pcumulative.push(currentSum);\r\n      currentSum -= routinePDDist[i];\r\n\r\n      expP += routinePDDist[i] * i;\r\n    }\r\n    return {\r\n      expD,\r\n      expP,\r\n      dataArray,\r\n      routineDDist,\r\n      cumulative,\r\n      PdataArray,\r\n      routinePDDist,\r\n      Pcumulative,\r\n    };\r\n  }\r\n\r\n  evalPath(activityPath, targetState, level, defenseBonus, resistanceBonus) {\r\n    // evaluate this and all following APs\r\n    let currentTarget = this.targets[0];\r\n    let currentDamages = activityPath.damages.map(\r\n      (damageId) => this.damages[damageId]\r\n    );\r\n    //currentDamages.push(activityPath);\r\n    let currentEffects = activityPath.effects.map(\r\n      (effectId) => this.effects[effectId]\r\n    );\r\n    let currentWeaknesses = currentTarget.weaknesses.map(\r\n      (weaknessId) => this.weaknesses[weaknessId]\r\n    );\r\n\r\n    // calculate the expected damage for this activity\r\n    let [damageTrees, chances] = calculateExpectedDamage(\r\n      level,\r\n      activityPath,\r\n      currentDamages,\r\n      currentTarget,\r\n      targetState,\r\n      currentWeaknesses,\r\n      defenseBonus,\r\n      resistanceBonus\r\n    );\r\n\r\n    const targetStates = [targetState, targetState, targetState, targetState];\r\n    // go through each degree of success\r\n    for (let i = 0; i < 4; i++) {\r\n      // go though each effect and update targetStates\r\n      currentEffects.forEach((effect) => {\r\n        let { effectCondition, effectType, startLevel, endLevel } = effect;\r\n        if (level < startLevel || level > endLevel) return;\r\n        if (validateCondition(effectCondition, i)) {\r\n          switch (effectType) {\r\n            case effectTypes.FLATFOOT:\r\n              if (targetStates[i].flatfooted !== true)\r\n                targetStates[i] = { ...targetStates[i], flatfooted: true };\r\n              break;\r\n\r\n            case effectTypes.FRIGHTENED1:\r\n              if (targetStates[i].frightened < 1)\r\n                targetStates[i] = {\r\n                  ...targetStates[i],\r\n                  frightened: 1,\r\n                };\r\n              break;\r\n            case effectTypes.FRIGHTENED2:\r\n              if (targetStates[i].frightened < 2)\r\n                targetStates[i] = {\r\n                  ...targetStates[i],\r\n                  frightened: 2,\r\n                };\r\n              break;\r\n            case effectTypes.FRIGHTENED3:\r\n              if (targetStates[i].frightened < 3)\r\n                targetStates[i] = {\r\n                  ...targetStates[i],\r\n                  frightened: 3,\r\n                };\r\n              break;\r\n            case effectTypes.FRIGHTENED4:\r\n              if (targetStates[i].frightened < 4)\r\n                targetStates[i] = {\r\n                  ...targetStates[i],\r\n                  frightened: 4,\r\n                };\r\n              break;\r\n\r\n            default:\r\n              console.log(`Effect type ${effectType} not implemented`);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // go through each activity path, depending on its condition add its damage distributions to this activities appropriately\r\n    activityPath.apIds.forEach((apId) => {\r\n      let ap = this.activityPaths[apId];\r\n\r\n      const evaluations = new Map();\r\n      // go through each degree of success\r\n      for (let i = 0; i < 4; i++) {\r\n        // evaluate if necessary and add distribution to damageTrees\r\n        if (validateCondition(ap.condition, i)) {\r\n          if (evaluations.has(targetStates[i])) {\r\n            // already evaluated\r\n          } else {\r\n            let [pathDist, pathPDist] = this.evalPath(\r\n              ap,\r\n              targetStates[i],\r\n              level,\r\n              defenseBonus,\r\n              resistanceBonus\r\n            );\r\n            evaluations.set(targetStates[i], { pathDist, pathPDist });\r\n          }\r\n\r\n          damageTrees[i].normal.damageDist = convolve(\r\n            damageTrees[i].normal.damageDist,\r\n            evaluations.get(targetStates[i]).pathDist\r\n          );\r\n          damageTrees[i].persistent.damageDist = convolve(\r\n            damageTrees[i].persistent.damageDist,\r\n            evaluations.get(targetStates[i]).pathPDist\r\n          );\r\n        }\r\n      }\r\n    });\r\n\r\n    let damageDist = consolidateDists(\r\n      [damageTrees[0].normal, chances[0]],\r\n      [damageTrees[1].normal, chances[1]],\r\n      [damageTrees[2].normal, chances[2]],\r\n      [damageTrees[3].normal, chances[3]]\r\n    );\r\n    let PdamageDist = consolidateDists(\r\n      [damageTrees[0].persistent, chances[0]],\r\n      [damageTrees[1].persistent, chances[1]],\r\n      [damageTrees[2].persistent, chances[2]],\r\n      [damageTrees[3].persistent, chances[3]]\r\n    );\r\n    // console.log(damageDist);\r\n\r\n    return [damageDist, PdamageDist];\r\n  }\r\n}\r\n\r\nconst evaluateRoutine = (evaluator, routine) => {};\r\nexport { ActivityPathEvaluator, evaluateRoutine };\r\n","import React from \"react\";\r\n\r\nimport {\r\n  activityTypes,\r\n  profTrends,\r\n  conditions,\r\n  damageTrends,\r\n  damageTypes,\r\n  dCond,\r\n  defenses,\r\n  diceSizes,\r\n  dieTrends,\r\n  effectTypes,\r\n  MAPs,\r\n  materials,\r\n  rollTypes,\r\n  statTrends,\r\n  itemTrends,\r\n} from \"../Model/types\";\r\n\r\nexport const levelOptions = [];\r\nfor (let level = 1; level <= 20; level++) {\r\n  levelOptions.push(<option key={level}>{level}</option>);\r\n}\r\n\r\nexport const conditionOptions = [];\r\nfor (let c in conditions) {\r\n  conditionOptions.push(<option key={c}>{conditions[c]}</option>);\r\n}\r\n\r\nexport const rollOptions = [];\r\nfor (let rt in rollTypes) {\r\n  rollOptions.push(<option key={rt}>{rollTypes[rt]}</option>);\r\n}\r\n\r\nexport const activityTypeOptions = [];\r\nfor (let at in activityTypes) {\r\n  activityTypeOptions.push(<option key={at}>{activityTypes[at]}</option>);\r\n}\r\n\r\nexport const profTrendOptions = [];\r\nfor (let bt in profTrends) {\r\n  profTrendOptions.push(<option key={bt}>{profTrends[bt]}</option>);\r\n}\r\nexport const statTrendOptions = [];\r\nfor (let bt in statTrends) {\r\n  statTrendOptions.push(<option key={bt}>{statTrends[bt]}</option>);\r\n}\r\nexport const itemBTrendOptions = [];\r\nfor (let bt in itemTrends) {\r\n  itemBTrendOptions.push(<option key={bt}>{itemTrends[bt]}</option>);\r\n}\r\n\r\nexport const MAPOptions = [];\r\nfor (let m in MAPs) {\r\n  MAPOptions.push(<option key={m}>{MAPs[m]}</option>);\r\n}\r\nexport const defenseOptions = [];\r\nfor (let d in defenses) {\r\n  defenseOptions.push(<option key={d}>{defenses[d]}</option>);\r\n}\r\n\r\nexport const damageConditionOptions = [];\r\nfor (let dc in dCond) {\r\n  damageConditionOptions.push(<option key={dc}>{dCond[dc]}</option>);\r\n}\r\nexport const dieTrendOptions = [];\r\nfor (let dt in dieTrends) {\r\n  dieTrendOptions.push(<option key={dt}>{dieTrends[dt]}</option>);\r\n}\r\nexport const diceSizeOptions = [];\r\nfor (let ds in diceSizes) {\r\n  diceSizeOptions.push(<option key={ds}>{ds}</option>);\r\n}\r\nexport const damageTrendOptions = [];\r\nfor (let dt in damageTrends) {\r\n  damageTrendOptions.push(<option key={dt}>{damageTrends[dt]}</option>);\r\n}\r\nexport const damageTypeOptions = [];\r\nfor (let dt in damageTypes) {\r\n  damageTypeOptions.push(<option key={dt}>{damageTypes[dt]}</option>);\r\n}\r\nexport const materialOptions = [];\r\nfor (let m in materials) {\r\n  materialOptions.push(<option key={m}>{materials[m]}</option>);\r\n}\r\nexport const multiplierOptions = [];\r\nfor (let m of [0.5, 1, 2]) {\r\n  multiplierOptions.push(<option key={m}>{m}</option>);\r\n}\r\n\r\nexport const effectTypeOptions = [];\r\nfor (let et in effectTypes) {\r\n  effectTypeOptions.push(<option key={et}>{effectTypes[et]}</option>);\r\n}\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectactivityPathEntities } from \"../SelectedRoutine/activityPathSlice\";\r\nimport { selectdamageEntities } from \"../SelectedRoutine/damageSlice\";\r\nimport { selectRoutineEntities } from \"../Routines/routineSlice\";\r\nimport { selecttargetEntities } from \"../Target/targetSlice\";\r\nimport { selectweaknessEntities } from \"../Target/weaknessSlice\";\r\nimport { graphTypes } from \"../Model/types\";\r\nimport { selecteffectEntities } from \"../SelectedRoutine/effectSlice\";\r\n\r\nimport { ActivityPathEvaluator } from \"../Calculation/EvaluateActivityPath\";\r\n\r\nimport Plotly from \"plotly.js-basic-dist\";\r\nimport createPlotlyComponent from \"react-plotly.js/factory\";\r\nimport { defaultACs, defaultSaves } from \"../Model/defaults\";\r\nconst Plot = createPlotlyComponent(Plotly);\r\n\r\nconst useGenerateGraphs = (graphType, displayLevel) => {\r\n  const routines = useSelector(selectRoutineEntities);\r\n  const activityPaths = useSelector(selectactivityPathEntities);\r\n  const targets = useSelector(selecttargetEntities);\r\n  const damages = useSelector(selectdamageEntities);\r\n  const effects = useSelector(selecteffectEntities);\r\n  const weaknesses = useSelector(selectweaknessEntities);\r\n\r\n  const evaluator = new ActivityPathEvaluator(\r\n    activityPaths,\r\n    targets,\r\n    damages,\r\n    effects,\r\n    weaknesses\r\n  );\r\n\r\n  const currentTarget = targets[0];\r\n  let title = \"\";\r\n  let byLevelTile = currentTarget.name;\r\n\r\n  title += \" Vs \";\r\n  title += \" AC: \" + defaultACs[currentTarget.ACTrend][displayLevel];\r\n  title += \" Fort: \" + defaultSaves[currentTarget.FortTrend][displayLevel];\r\n  title += \" Ref: \" + defaultSaves[currentTarget.RefTrend][displayLevel];\r\n  title += \" Will: \" + defaultSaves[currentTarget.WillTrend][displayLevel];\r\n  title += \" Per: \" + defaultSaves[currentTarget.PerTrend][displayLevel];\r\n\r\n  // byLevelTile += \" Vs \";\r\n  // byLevelTile += \" AC: \" + currentTarget.ACTrend;\r\n  // byLevelTile += \" Fort: \" + currentTarget.FortTrend;\r\n  // byLevelTile += \" Ref: \" + currentTarget.RefTrend;\r\n  // byLevelTile += \" Will: \" + currentTarget.WillTrend;\r\n  // byLevelTile += \" Per: \" + currentTarget.PerTrend;\r\n\r\n  let datasets;\r\n  let perDatasets;\r\n  let expectedDamages;\r\n  let expectedPersistentDamages;\r\n  switch (graphType) {\r\n    case graphTypes.DISTRIBUTION:\r\n      ({ expectedDamages, expectedPersistentDamages, datasets, perDatasets } =\r\n        evaluateDistribution(routines, evaluator, displayLevel));\r\n      break;\r\n    case graphTypes.PMDEFENSE:\r\n      ({ expectedDamages, expectedPersistentDamages, datasets, perDatasets } =\r\n        evaluatePM(routines, evaluator, displayLevel, true));\r\n      break;\r\n    case graphTypes.PMRES:\r\n      ({ expectedDamages, expectedPersistentDamages, datasets, perDatasets } =\r\n        evaluatePM(routines, evaluator, displayLevel, false));\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  let { datasets: byLeveldatasets, perDatasets: byLevelperDatasets } =\r\n    evaluateByLevel(routines, evaluator);\r\n\r\n  let xtitle;\r\n  let ytitle;\r\n  if (graphType === graphTypes.DISTRIBUTION) {\r\n    xtitle = \"damage\";\r\n    ytitle = \"chance\";\r\n  } else if (graphType === graphTypes.PMDEFENSE) {\r\n    xtitle = \"+/- AC/Save Bonus\";\r\n    ytitle = \"Expected Damage\";\r\n  } else if (graphType === graphTypes.PMRES) {\r\n    xtitle = \"+/- Resistance/Weakness\";\r\n    ytitle = \"Expected Damage\";\r\n  }\r\n\r\n  let damageChart = (\r\n    <Plot\r\n      classname=\"plot\"\r\n      data={datasets}\r\n      layout={{\r\n        title: title,\r\n        autosize: true,\r\n        xaxis: { title: xtitle },\r\n        yaxis: { title: ytitle },\r\n        legend: {\r\n          x: 1,\r\n          y: 1,\r\n          xanchor: \"right\",\r\n        },\r\n        margin: {\r\n          l: 40,\r\n          r: 40,\r\n        },\r\n      }}\r\n      useResizeHandler={true}\r\n      style={{ width: \"100%\", height: \"100%\" }}\r\n    />\r\n  );\r\n  let persistentDamageChart = (\r\n    <Plot\r\n      classname=\"plot\"\r\n      data={perDatasets}\r\n      layout={{\r\n        title: \"Expected Persistent Damage\",\r\n        autosize: true,\r\n        xaxis: { title: \"persistent damage\" },\r\n        yaxis: { title: \"chance\" },\r\n        legend: {\r\n          x: 1,\r\n          y: 1,\r\n          xanchor: \"right\",\r\n        },\r\n        margin: {\r\n          l: 40,\r\n          r: 40,\r\n        },\r\n      }}\r\n      useResizeHandler={true}\r\n      style={{ width: \"100%\", height: \"100%\" }}\r\n    />\r\n  );\r\n  let byLevelDamageChart = (\r\n    <Plot\r\n      classname=\"plot\"\r\n      data={byLeveldatasets}\r\n      layout={{\r\n        title: byLevelTile,\r\n        autosize: true,\r\n        xaxis: { title: \"Level\" },\r\n        yaxis: { title: \"Expected Damage\" },\r\n        legend: {\r\n          x: 1,\r\n          y: 1,\r\n          xanchor: \"right\",\r\n        },\r\n        margin: {\r\n          l: 40,\r\n          r: 40,\r\n        },\r\n      }}\r\n      useResizeHandler={true}\r\n      style={{ width: \"100%\", height: \"100%\" }}\r\n    />\r\n  );\r\n  let byLevelPerDamageChart = (\r\n    <Plot\r\n      classname=\"plot\"\r\n      data={byLevelperDatasets}\r\n      layout={{\r\n        title: byLevelTile,\r\n        autosize: true,\r\n        xaxis: { title: \"Level\" },\r\n        yaxis: { title: \"Expected Persistent Damage\" },\r\n        legend: {\r\n          x: 1,\r\n          y: 1,\r\n          xanchor: \"right\",\r\n        },\r\n        margin: {\r\n          l: 40,\r\n          r: 40,\r\n        },\r\n      }}\r\n      useResizeHandler={true}\r\n      style={{ width: \"100%\", height: \"100%\" }}\r\n    />\r\n  );\r\n  return {\r\n    expectedDamages,\r\n    expectedPersistentDamages,\r\n    damageChart,\r\n    persistentDamageChart,\r\n    byLevelDamageChart,\r\n    byLevelPerDamageChart,\r\n  };\r\n};\r\n\r\nconst evaluateByLevel = (routines, evaluator) => {\r\n  let datasets = [];\r\n  let perDatasets = [];\r\n\r\n  for (let id in routines) {\r\n    let routine = routines[id];\r\n    if (!routine.display) continue;\r\n\r\n    const levelArray = [];\r\n    const expDbyLevel = [];\r\n    const expPDbyLevel = [];\r\n    for (let level = 1; level <= 20; level++) {\r\n      if (!evaluator.canEvaluate(level)) continue;\r\n      levelArray.push(level);\r\n      let { expD, expP } = evaluator.evalRoutine(routine, level, 0, 0);\r\n      expDbyLevel.push(expD);\r\n      expPDbyLevel.push(expP);\r\n    }\r\n    datasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: levelArray,\r\n      y: expDbyLevel,\r\n      yaxis: \"y\",\r\n    });\r\n    perDatasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: levelArray,\r\n      y: expPDbyLevel,\r\n      yaxis: \"y\",\r\n    });\r\n  }\r\n\r\n  return { datasets, perDatasets };\r\n};\r\n\r\nconst evaluatePM = (routines, evaluator, displayLevel, defense = true) => {\r\n  let datasets = [];\r\n  let perDatasets = [];\r\n  let expectedDamages = [];\r\n  let expectedPersistentDamages = [];\r\n\r\n  if (!evaluator.canEvaluate(displayLevel))\r\n    return {\r\n      expectedDamages,\r\n      expectedPersistentDamages,\r\n      datasets,\r\n      perDatasets,\r\n    };\r\n\r\n  for (let id in routines) {\r\n    let routine = routines[id];\r\n    if (!routine.display) continue;\r\n\r\n    const bonusArray = [];\r\n    const expDbyBonus = [];\r\n    const expPDbyBonus = [];\r\n\r\n    for (let bonus = -5; bonus <= 5; bonus++) {\r\n      bonusArray.push(bonus);\r\n      let { expD, expP } = evaluator.evalRoutine(\r\n        routine,\r\n        displayLevel,\r\n        defense ? bonus : 0,\r\n        defense ? 0 : bonus\r\n      );\r\n\r\n      if (bonus === 0) {\r\n        expectedDamages.push(\r\n          <div key={routine.id}>\r\n            {routine.name}\r\n            {\": \"}\r\n            {expD.toFixed(2)}\r\n          </div>\r\n        );\r\n        expectedPersistentDamages.push(\r\n          <div key={routine.id}>\r\n            {routine.name}\r\n            {\": \"}\r\n            {expP.toFixed(2)}\r\n          </div>\r\n        );\r\n      }\r\n\r\n      expDbyBonus.push(expD);\r\n      expPDbyBonus.push(expP);\r\n    }\r\n\r\n    datasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: bonusArray,\r\n      y: expDbyBonus,\r\n      yaxis: \"y\",\r\n    });\r\n    perDatasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: bonusArray,\r\n      y: expPDbyBonus,\r\n      yaxis: \"y\",\r\n    });\r\n  }\r\n  return { expectedDamages, expectedPersistentDamages, datasets, perDatasets };\r\n};\r\n\r\nconst evaluateDistribution = (routines, evaluator, displayLevel) => {\r\n  let datasets = [];\r\n  let perDatasets = [];\r\n  let expectedDamages = [];\r\n  let expectedPersistentDamages = [];\r\n\r\n  if (!evaluator.canEvaluate(displayLevel))\r\n    return {\r\n      expectedDamages,\r\n      expectedPersistentDamages,\r\n      datasets,\r\n      perDatasets,\r\n    };\r\n\r\n  for (let id in routines) {\r\n    let routine = routines[id];\r\n    if (!routine.display) continue;\r\n    let {\r\n      expD,\r\n      expP,\r\n      dataArray,\r\n      routineDDist,\r\n      cumulative,\r\n      PdataArray,\r\n      routinePDDist,\r\n      Pcumulative,\r\n    } = evaluator.evalRoutine(routine, displayLevel, 0, 0);\r\n    expectedDamages.push(\r\n      <div key={routine.id}>\r\n        {routine.name}\r\n        {\": \"}\r\n        {expD.toFixed(2)}\r\n      </div>\r\n    );\r\n    expectedPersistentDamages.push(\r\n      <div key={routine.id}>\r\n        {routine.name}\r\n        {\": \"}\r\n        {expP.toFixed(2)}\r\n      </div>\r\n    );\r\n    datasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: dataArray,\r\n      y: cumulative,\r\n      yaxis: \"y\",\r\n    });\r\n    datasets.push({\r\n      type: \"bar\",\r\n      name: expD.toFixed(2),\r\n      x: dataArray,\r\n      y: routineDDist,\r\n    });\r\n    perDatasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: PdataArray,\r\n      y: Pcumulative,\r\n    });\r\n    perDatasets.push({\r\n      type: \"bar\",\r\n      name: expP.toFixed(2),\r\n      x: PdataArray,\r\n      y: routinePDDist,\r\n    });\r\n  }\r\n  return { expectedDamages, expectedPersistentDamages, datasets, perDatasets };\r\n};\r\n\r\nexport default useGenerateGraphs;\r\n","import React, { useState } from \"react\";\r\nimport { graphTypes } from \"../Model/types\";\r\n\r\nimport useGenerateGraphs from \"./useGenerateGraphs\";\r\n\r\nconst Display = () => {\r\n  // evaluates routines and displays appropriate graphs\r\n\r\n  const [addPersistent, setAddPersistent] = useState(false);\r\n  const [graphType, setGraphType] = useState(graphTypes.DISTRIBUTION);\r\n  const [displayLevel, setDisplayLevel] = useState(1);\r\n  const {\r\n    expectedDamages,\r\n    expectedPersistentDamages,\r\n    damageChart,\r\n    persistentDamageChart,\r\n    byLevelDamageChart,\r\n    byLevelPerDamageChart,\r\n  } = useGenerateGraphs(graphType, displayLevel);\r\n  // const [perMulti, setPerMulti] = useState(2);\r\n\r\n  const graphTypeOptions = [];\r\n  for (let gt in graphTypes) {\r\n    graphTypeOptions.push(<option key={gt}>{graphTypes[gt]}</option>);\r\n  }\r\n  const displayLevelOptions = [];\r\n  for (let i = 1; i <= 20; i++) {\r\n    displayLevelOptions.push(\r\n      <option key={i} value={i}>\r\n        {i}\r\n      </option>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      {\"Graph Type: \"}\r\n      <select value={graphType} onChange={(e) => setGraphType(e.target.value)}>\r\n        {graphTypeOptions}\r\n      </select>\r\n      {graphType === graphTypes.BYLEVEL ? (\r\n        \"\"\r\n      ) : (\r\n        <select\r\n          value={displayLevel}\r\n          onChange={(e) => setDisplayLevel(parseInt(e.target.value))}\r\n        >\r\n          {displayLevelOptions}\r\n        </select>\r\n      )}\r\n      {\" Show persistent damage: \"}\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={addPersistent}\r\n        onChange={(e) => setAddPersistent(e.target.checked)}\r\n      />\r\n      {/* , persistent damage multiplier:\r\n      <input\r\n        type=\"number\"\r\n        value={perMulti ? perMulti : 0}\r\n        onChange={(e) => setPerMulti(e.target.valueAsNumber)}\r\n      /> */}\r\n      <div>\r\n        Expected Damage:\r\n        {expectedDamages}\r\n      </div>\r\n      {damageChart}\r\n      {byLevelDamageChart}\r\n      {!addPersistent ? (\r\n        \"\"\r\n      ) : (\r\n        <div>\r\n          <div>\r\n            Expected Persistent Damage:\r\n            {expectedPersistentDamages}\r\n          </div>\r\n          {persistentDamageChart}\r\n          {byLevelPerDamageChart}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Display;\r\n","import React from \"react\";\r\nimport { levelOptions } from \"../Model/options\";\r\n\r\nexport const generateEntries = (adjustments) => {\r\n  let currentValue = 0;\r\n  const entries = [];\r\n  for (let level = 1; level <= 20; level++) {\r\n    if (currentValue !== adjustments[level]) {\r\n      currentValue = adjustments[level];\r\n      entries.push([level, currentValue]);\r\n    }\r\n  }\r\n  return entries;\r\n};\r\n\r\nconst generateAdjustments = (entries) => {\r\n  const adjustments = {};\r\n  let currentValue = 0;\r\n  let currentIndex = 0;\r\n  // console.log(entries);\r\n  for (let level = 1; level <= 20; level++) {\r\n    if (entries[currentIndex] && entries[currentIndex][0] === level) {\r\n      // console.log(\"here\");\r\n      currentValue = entries[currentIndex][1];\r\n      if (!currentValue) currentValue = 0;\r\n      currentIndex++;\r\n    }\r\n    adjustments[level] = currentValue;\r\n  }\r\n  return adjustments;\r\n};\r\n\r\nexport const adjustmentsFromLevelChange = (entries, index, newLevel) => {\r\n  entries[index] = [newLevel, entries[index][1]];\r\n  entries.sort((a, b) => a[0] - b[0]);\r\n  return generateAdjustments(entries);\r\n};\r\n\r\nexport const adjustmentsFromValueChange = (entries, index, newValue) => {\r\n  entries[index] = [entries[index][0], newValue];\r\n  return generateAdjustments(entries);\r\n};\r\n\r\nexport const adjustmentsFromNewEntry = (entries) => {\r\n  let lastValue = entries.length > 0 ? entries[entries.length - 1] : [0, 0];\r\n  entries.push([lastValue[0] + 1, lastValue[1] + 1]);\r\n  return generateAdjustments(entries);\r\n};\r\n\r\nexport const LevelList = (name, dispatch, action, id, adjustments) => {\r\n  const dieEntries = generateEntries(adjustments);\r\n\r\n  let dieLevelList = [];\r\n\r\n  for (let i = 0; i < dieEntries.length; i++) {\r\n    dieLevelList.push(\r\n      <span className=\"input\" key={i}>\r\n        @\r\n        <select\r\n          value={dieEntries[i][0]}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              action({\r\n                id,\r\n                changes: {\r\n                  [name]: adjustmentsFromLevelChange(\r\n                    dieEntries,\r\n                    i,\r\n                    parseInt(e.target.value)\r\n                  ),\r\n                },\r\n              })\r\n            )\r\n          }\r\n        >\r\n          {levelOptions}\r\n        </select>\r\n        +\r\n        <input\r\n          type=\"number\"\r\n          value={dieEntries[i][1]}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              action({\r\n                id,\r\n                changes: {\r\n                  [name]: adjustmentsFromValueChange(\r\n                    dieEntries,\r\n                    i,\r\n                    parseInt(e.target.value)\r\n                  ),\r\n                },\r\n              })\r\n            )\r\n          }\r\n        />\r\n      </span>\r\n    );\r\n  }\r\n  dieLevelList.push(\r\n    <button\r\n      key=\"addButton\"\r\n      className=\"add\"\r\n      onClick={() =>\r\n        dispatch(\r\n          action({\r\n            id,\r\n            changes: {\r\n              [name]: adjustmentsFromNewEntry(dieEntries),\r\n            },\r\n          })\r\n        )\r\n      }\r\n    >\r\n      +\r\n    </button>\r\n  );\r\n  return dieLevelList;\r\n};\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { LevelList } from \"./LevelList\";\r\nimport { damageRemoved, damageUpdated, selectdamageById } from \"./damageSlice\";\r\nimport {\r\n  damageConditionOptions,\r\n  damageTrendOptions,\r\n  damageTypeOptions,\r\n  diceSizeOptions,\r\n  dieTrendOptions,\r\n  materialOptions,\r\n  multiplierOptions,\r\n} from \"../Model/options\";\r\nimport { damageTrends } from \"../Model/types\";\r\n\r\nexport const Damage = ({ parentId, id }) => {\r\n  const {\r\n    damageCondition,\r\n    damageType,\r\n    material,\r\n    persistent,\r\n    multiplier,\r\n\r\n    dieTrend,\r\n    dieAdjustments,\r\n    diceSize,\r\n    fatal,\r\n    fatalDie,\r\n    damageTrend,\r\n    damageAdjustments,\r\n  } = useSelector((state) => selectdamageById(state, id));\r\n  const dispatch = useDispatch();\r\n\r\n  const dieLevelList = LevelList(\r\n    \"dieAdjustments\",\r\n    dispatch,\r\n    damageUpdated,\r\n    id,\r\n    dieAdjustments\r\n  );\r\n\r\n  const damageLevelList = LevelList(\r\n    \"damageAdjustments\",\r\n    dispatch,\r\n    damageUpdated,\r\n    id,\r\n    damageAdjustments\r\n  );\r\n\r\n  const damageTrendList = damageTrend.map((dt, index) => {\r\n    return (\r\n      <select\r\n        key={index} // no stable id\r\n        value={dt}\r\n        onChange={(e) => {\r\n          let newdt = damageTrend.slice();\r\n          if (e.target.value === damageTrends.NONE) {\r\n            newdt.splice(index, 1);\r\n          } else {\r\n            newdt[index] = e.target.value;\r\n          }\r\n          dispatch(\r\n            damageUpdated({\r\n              id,\r\n              changes: { damageTrend: newdt },\r\n            })\r\n          );\r\n        }}\r\n      >\r\n        {damageTrendOptions}\r\n      </select>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      <button\r\n        className=\"delete\"\r\n        onClick={(e) => {\r\n          dispatch(damageRemoved({ id, parentId }));\r\n        }}\r\n      >\r\n        -\r\n      </button>\r\n      <select\r\n        value={damageCondition}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            damageUpdated({ id, changes: { damageCondition: e.target.value } })\r\n          )\r\n        }\r\n      >\r\n        {damageConditionOptions}\r\n      </select>\r\n      {\": \"}\r\n      <div>\r\n        <span className=\"input\">\r\n          {\"Dice: (\"}\r\n          <select\r\n            value={dieTrend}\r\n            onChange={(e) =>\r\n              dispatch(\r\n                damageUpdated({\r\n                  id,\r\n                  changes: { dieTrend: e.target.value },\r\n                })\r\n              )\r\n            }\r\n          >\r\n            {dieTrendOptions}\r\n          </select>\r\n          +{dieLevelList})\r\n        </span>\r\n        <span className=\"input\">\r\n          {\" d\"}\r\n          <select\r\n            value={diceSize}\r\n            onChange={(e) =>\r\n              dispatch(\r\n                damageUpdated({\r\n                  id,\r\n                  changes: { diceSize: parseInt(e.target.value) },\r\n                })\r\n              )\r\n            }\r\n          >\r\n            {diceSizeOptions}\r\n          </select>\r\n        </span>\r\n        <span className=\"input\">\r\n          {\" Fatal \"}\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={fatal}\r\n            onChange={(e) =>\r\n              dispatch(\r\n                damageUpdated({\r\n                  id,\r\n                  changes: { fatal: e.target.checked },\r\n                })\r\n              )\r\n            }\r\n          />\r\n          {fatal ? (\r\n            <select\r\n              value={fatalDie}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  damageUpdated({\r\n                    id,\r\n                    changes: { fatalDie: parseInt(e.target.value) },\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              {diceSizeOptions}\r\n            </select>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </span>\r\n        <div>\r\n          <span className=\"input\">\r\n            {\"Static: (\"}\r\n            {damageTrendList}\r\n            <button\r\n              key=\"addButton\"\r\n              className=\"add\"\r\n              onClick={() => {\r\n                let newdt = damageTrend.slice();\r\n                newdt.push(damageTrends.NONE);\r\n                dispatch(\r\n                  damageUpdated({\r\n                    id,\r\n                    changes: {\r\n                      damageTrend: newdt,\r\n                    },\r\n                  })\r\n                );\r\n              }}\r\n            >\r\n              +\r\n            </button>\r\n            +{damageLevelList})\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <span className=\"input\">\r\n        {\" Type: \"}\r\n        <select\r\n          value={damageType}\r\n          onChange={(e) => {\r\n            dispatch(\r\n              damageUpdated({ id, changes: { damageType: e.target.value } })\r\n            );\r\n          }}\r\n        >\r\n          {damageTypeOptions}\r\n        </select>\r\n        <select\r\n          value={material}\r\n          onChange={(e) => {\r\n            dispatch(\r\n              damageUpdated({ id, changes: { material: e.target.value } })\r\n            );\r\n          }}\r\n        >\r\n          {materialOptions}\r\n        </select>\r\n      </span>\r\n      <span className=\"input\">\r\n        {\" Persistent: \"}\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={persistent}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              damageUpdated({\r\n                id,\r\n                changes: { persistent: e.target.checked },\r\n              })\r\n            )\r\n          }\r\n        />\r\n      </span>{\" \"}\r\n      <span className=\"input\">\r\n        {\" x \"}\r\n        <select\r\n          value={multiplier}\r\n          onChange={(e) => {\r\n            dispatch(\r\n              damageUpdated({\r\n                id,\r\n                changes: { multiplier: parseFloat(e.target.value) },\r\n              })\r\n            );\r\n          }}\r\n        >\r\n          {multiplierOptions}\r\n        </select>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  conditionOptions,\r\n  effectTypeOptions,\r\n  levelOptions,\r\n} from \"../Model/options\";\r\nimport { effectRemoved, effectUpdated, selecteffectById } from \"./effectSlice\";\r\n\r\nexport const Effect = ({ parentId, id }) => {\r\n  const { effectCondition, effectType, startLevel, endLevel } = useSelector(\r\n    (state) => selecteffectById(state, id)\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      <button\r\n        className=\"delete\"\r\n        onClick={(e) => {\r\n          dispatch(effectRemoved({ id, parentId }));\r\n        }}\r\n      >\r\n        -\r\n      </button>\r\n      <select\r\n        value={effectCondition}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            effectUpdated({ id, changes: { effectCondition: e.target.value } })\r\n          )\r\n        }\r\n      >\r\n        {conditionOptions}\r\n      </select>\r\n      {\": \"}\r\n      <select\r\n        value={effectType}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            effectUpdated({ id, changes: { effectType: e.target.value } })\r\n          )\r\n        }\r\n      >\r\n        {effectTypeOptions}\r\n      </select>\r\n      @\r\n      <select\r\n        value={startLevel}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            effectUpdated({\r\n              id,\r\n              changes: { startLevel: parseInt(e.target.value) },\r\n            })\r\n          )\r\n        }\r\n      >\r\n        {levelOptions}\r\n      </select>\r\n      to\r\n      <select\r\n        value={endLevel}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            effectUpdated({\r\n              id,\r\n              changes: { endLevel: parseInt(e.target.value) },\r\n            })\r\n          )\r\n        }\r\n      >\r\n        {levelOptions}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { LevelList } from \"./LevelList\";\r\nimport { damageCreated } from \"./damageSlice\";\r\nimport {\r\n  activityTypeOptions,\r\n  profTrendOptions,\r\n  conditionOptions,\r\n  defenseOptions,\r\n  MAPOptions,\r\n  rollOptions,\r\n  statTrendOptions,\r\n  itemBTrendOptions,\r\n} from \"../Model/options\";\r\nimport {\r\n  activityPathCreated,\r\n  activityPathRemoved,\r\n  activityPathUpdated,\r\n  selectactivityPathById,\r\n} from \"./activityPathSlice\";\r\nimport { activityTypes } from \"../Model/types\";\r\nimport { Damage } from \"./Damage\";\r\nimport { Effect } from \"./Effect\";\r\nimport { effectCreated } from \"./effectSlice\";\r\n\r\nexport const ActivityPath = ({\r\n  id,\r\n  parentId,\r\n  routineId,\r\n  displayCondition = true,\r\n}) => {\r\n  const {\r\n    condition,\r\n\r\n    rollType,\r\n    type,\r\n    profTrend,\r\n    statTrend,\r\n    itemTrend,\r\n    bonusAdjustments,\r\n    MAP,\r\n    targetType,\r\n\r\n    damages,\r\n    effects,\r\n    apIds,\r\n  } = useSelector((state) => selectactivityPathById(state, id));\r\n  const dispatch = useDispatch();\r\n\r\n  const bonusLevelList = LevelList(\r\n    \"bonusAdjustments\",\r\n    dispatch,\r\n    activityPathUpdated,\r\n    id,\r\n    bonusAdjustments\r\n  );\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      {displayCondition ? (\r\n        <div>\r\n          {\"Condition: \"}\r\n          <select\r\n            value={condition}\r\n            onChange={(e) =>\r\n              dispatch(\r\n                activityPathUpdated({\r\n                  id,\r\n                  changes: { condition: e.target.value },\r\n                })\r\n              )\r\n            }\r\n          >\r\n            {conditionOptions}\r\n          </select>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n\r\n      <div className=\"\">\r\n        <div className=\"flexbox\">\r\n          <button\r\n            className=\"delete\"\r\n            onClick={(e) => {\r\n              dispatch(activityPathRemoved({ id, parentId, routineId }));\r\n            }}\r\n          >\r\n            -\r\n          </button>\r\n          <span className=\"input\">\r\n            <select\r\n              value={rollType}\r\n              onChange={(e) => {\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { rollType: e.target.value },\r\n                  })\r\n                );\r\n              }}\r\n            >\r\n              {rollOptions}\r\n            </select>\r\n          </span>\r\n          <span className=\"input\">\r\n            <select\r\n              value={type}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  activityPathUpdated({ id, changes: { type: e.target.value } })\r\n                )\r\n              }\r\n            >\r\n              {activityTypeOptions}\r\n            </select>\r\n          </span>{\" \"}\r\n          <span className=\"input\">\r\n            {type === activityTypes.SAVE ? \"DC: (10 + \" : \"Bonus: (\"}\r\n            <select\r\n              value={profTrend}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { profTrend: e.target.value },\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              {profTrendOptions}\r\n            </select>\r\n            <select\r\n              value={statTrend}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { statTrend: e.target.value },\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              {statTrendOptions}\r\n            </select>\r\n            <select\r\n              value={itemTrend}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { itemTrend: e.target.value },\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              {itemBTrendOptions}\r\n            </select>\r\n            +{bonusLevelList})\r\n          </span>\r\n          {type === activityTypes.STRIKE ? (\r\n            <span className=\"input\">\r\n              {\" MAP: \"}\r\n              <select\r\n                value={MAP}\r\n                onChange={(e) =>\r\n                  dispatch(\r\n                    activityPathUpdated({\r\n                      id,\r\n                      changes: { MAP: e.target.value },\r\n                    })\r\n                  )\r\n                }\r\n              >\r\n                {MAPOptions}\r\n              </select>\r\n            </span>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <span className=\"input\">\r\n            {\" VS: \"}\r\n            <select\r\n              value={targetType}\r\n              onChange={(e) => {\r\n                dispatch(\r\n                  activityPathUpdated({\r\n                    id,\r\n                    changes: { targetType: e.target.value },\r\n                  })\r\n                );\r\n              }}\r\n            >\r\n              {defenseOptions}\r\n            </select>\r\n          </span>\r\n        </div>\r\n        <div className=\"box\">\r\n          {\"Damage: \"}\r\n          {damages.map((damageId) => (\r\n            <Damage parentId={id} id={damageId} key={damageId} />\r\n          ))}\r\n          <button\r\n            className=\"add\"\r\n            onClick={() => dispatch(damageCreated({ parentId: id }))}\r\n          >\r\n            +\r\n          </button>\r\n        </div>\r\n        <div className=\"box\">\r\n          {\"Effects: \"}\r\n          {effects.map((effectId) => (\r\n            <Effect parentId={id} id={effectId} key={effectId} />\r\n          ))}\r\n          <button\r\n            className=\"add\"\r\n            onClick={() => dispatch(effectCreated({ parentId: id }))}\r\n          >\r\n            +\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"box\">\r\n        {apIds.map((apId) => (\r\n          <ActivityPath id={apId} parentId={id} key={apId} />\r\n        ))}\r\n        <button\r\n          className=\"add\"\r\n          onClick={() => dispatch(activityPathCreated({ parentId: id }))}\r\n        >\r\n          +\r\n        </button>\r\n        <button\r\n          className=\"add\"\r\n          onClick={() =>\r\n            dispatch(activityPathCreated({ parentId: id, applyMAP: true }))\r\n          }\r\n        >\r\n          +MAP\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { activityPathCreated } from \"./activityPathSlice\";\r\nimport { routineUpdated, selectRoutineById } from \"../Routines/routineSlice\";\r\nimport { ActivityPath } from \"./ActivityPath\";\r\n\r\nfunction SelectedRoutine({ routineId }) {\r\n  // const selectedRoutine = useSelector(selectSelectedRoutine);\r\n  const apIds = useSelector((state) =>\r\n    selectRoutineById(state, routineId)\r\n  ).apIds;\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className=\"selectedRoutine\">\r\n      <NameInput id={routineId} />\r\n      {apIds.map((apId) => (\r\n        <ActivityPath\r\n          id={apId}\r\n          routineId={routineId}\r\n          key={apId}\r\n          displayCondition={false}\r\n        />\r\n      ))}\r\n      <button\r\n        className=\"add\"\r\n        onClick={() => dispatch(activityPathCreated({ routineId: routineId }))}\r\n      >\r\n        +\r\n      </button>\r\n      {/* <EffectInput /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst NameInput = ({ id }) => {\r\n  const dispatch = useDispatch();\r\n  const name = useSelector((state) => selectRoutineById(state, id)).name;\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      <label htmlFor=\"routineName\">Routine Name:</label>\r\n      <input\r\n        id=\"routineName\"\r\n        type=\"text\"\r\n        placeholder=\"Enter routine name\"\r\n        value={name}\r\n        onChange={(e) =>\r\n          dispatch(routineUpdated({ id, changes: { name: e.target.value } }))\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectedRoutine;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  routineCreated,\r\n  routineRemoved,\r\n  routineUpdated,\r\n  selectAllRoutines,\r\n  selectSelectedRoutine,\r\n  setRoutine,\r\n} from \"./routineSlice\";\r\n\r\nconst Routines = () => {\r\n  const routines = useSelector(selectAllRoutines);\r\n  const selectedRoutine = useSelector(selectSelectedRoutine);\r\n  const dispatch = useDispatch();\r\n\r\n  const routineOptions = [];\r\n  const routineDisplays = [];\r\n  routines.forEach((routine) => {\r\n    routineOptions.push(\r\n      <option value={routine.id} key={routine.id}>\r\n        {routine.name}\r\n      </option>\r\n    );\r\n    routineDisplays.push(\r\n      <div className=\"flexbox\" key={routine.id}>\r\n        <button\r\n          className=\"remove\"\r\n          onClick={() => dispatch(routineRemoved(routine.id))}\r\n        >\r\n          -\r\n        </button>\r\n        <span\r\n          className={routine.display ? \"routineOn\" : \"routineOff\"}\r\n          onClick={() =>\r\n            dispatch(\r\n              routineUpdated({\r\n                id: routine.id,\r\n                changes: { display: !routine.display },\r\n              })\r\n            )\r\n          }\r\n        >\r\n          {routine.name}\r\n        </span>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      Selected Routine:\r\n      <select\r\n        value={selectedRoutine}\r\n        onChange={(e) => dispatch(setRoutine(e.target.value))}\r\n      >\r\n        {routineOptions}\r\n      </select>\r\n      <button className=\"add\" onClick={() => dispatch(routineCreated())}>\r\n        +\r\n      </button>\r\n      <div className=\"routines\">{routineDisplays}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Routines;\r\n","import React from \"react\";\r\n// import { useSelector } from \"react-redux\";\r\n\r\nconst ImportExport = () => {\r\n  return <div className=\"box\">Import and Export Here</div>;\r\n};\r\n\r\nexport default ImportExport;\r\n","import React from \"react\";\r\nimport ReactGA from \"react-ga4\";\r\n\r\nimport TargetInput from \"./Target/TargetInput\";\r\nimport Display from \"./Display/Display\";\r\nimport SelectedRoutine from \"./SelectedRoutine/SelectedRoutine\";\r\nimport Routines from \"./Routines/Routines\";\r\nimport Export from \"./Export\";\r\n\r\nimport \"./PF2App.css\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectSelectedRoutine } from \"./Routines/routineSlice\";\r\n\r\n// Initialize google analytics\r\nReactGA.initialize(\"G-JR2YK097BG\");\r\n\r\nfunction PF2App(props) {\r\n  const selectedRoutine = useSelector(selectSelectedRoutine);\r\n  ReactGA.send(\"pageview\");\r\n\r\n  return (\r\n    <div className=\"PF2App\">\r\n      <TargetInput id={0} />\r\n      <Display />\r\n      <Routines />\r\n      {selectedRoutine !== undefined ? (\r\n        <SelectedRoutine routineId={selectedRoutine} />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <Export />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PF2App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport routineReducer, { routineAdded } from \"./Routines/routineSlice\";\r\nimport activityPathReducer, {\r\n  activityPathAdded,\r\n} from \"./SelectedRoutine/activityPathSlice\";\r\nimport damageReducer, { damageAdded } from \"./SelectedRoutine/damageSlice\";\r\nimport effectReducer, { effectAdded } from \"./SelectedRoutine/effectSlice\";\r\nimport targetReducer, { targetAdded } from \"./Target/targetSlice\";\r\nimport weaknessReducer from \"./Target/weaknessSlice\";\r\nimport {\r\n  activityTypes,\r\n  ACTrends,\r\n  conditions,\r\n  damageTrends,\r\n  damageTypes,\r\n  dCond,\r\n  defenses,\r\n  dieTrends,\r\n  effectTypes,\r\n  itemTrends,\r\n  MAPs,\r\n  materials,\r\n  profTrends,\r\n  rollTypes,\r\n  SaveTrends,\r\n  statTrends,\r\n} from \"./Model/types\";\r\n\r\nconst empty = {};\r\nconst pickCritSpec = {};\r\nconst one = {};\r\nfor (let i = 1; i <= 20; i++) {\r\n  empty[i] = 0;\r\n  one[i] = 1;\r\n  pickCritSpec[i] = 0;\r\n  if (i >= 5) {\r\n    pickCritSpec[i] = 4;\r\n  }\r\n  if (i >= 12) {\r\n    pickCritSpec[i] = 6;\r\n  }\r\n  if (i >= 19) {\r\n    pickCritSpec[i] = 8;\r\n  }\r\n}\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    routines: routineReducer,\r\n    activityPaths: activityPathReducer,\r\n    damages: damageReducer,\r\n    effects: effectReducer,\r\n    weaknesses: weaknessReducer,\r\n    targets: targetReducer,\r\n  },\r\n});\r\n\r\nstore.dispatch(\r\n  targetAdded({\r\n    id: 0,\r\n    name: \"AC: High, saves: Moderate\",\r\n\r\n    levelDiff: 0,\r\n\r\n    ACTrend: ACTrends.HIGH,\r\n    FortTrend: SaveTrends.MODERATE,\r\n    RefTrend: SaveTrends.MODERATE,\r\n    WillTrend: SaveTrends.MODERATE,\r\n    PerTrend: SaveTrends.MODERATE,\r\n\r\n    flatfooted: false,\r\n    weaknesses: [],\r\n  })\r\n);\r\n\r\nstore.dispatch(\r\n  routineAdded({\r\n    id: 0,\r\n    name: \"Baseline\",\r\n    display: true,\r\n    apIds: [],\r\n    levelDiff: 0,\r\n    description: \"No damage. Just so graphs display 0 with autoscalling.\",\r\n    startLevel: 1,\r\n    endLevel: 20,\r\n  })\r\n);\r\n\r\nstore.dispatch(\r\n  routineAdded({\r\n    id: 1,\r\n    name: \"Greatsword Fighter 2 strikes\",\r\n    display: true,\r\n    apIds: [0],\r\n    levelDiff: 0,\r\n    description:\r\n      \"A simple Fighter making 2 strikes with a greatsword. 1d6 damage runes at 8 and 15. Crit specialization at 5.\",\r\n    startLevel: 1,\r\n    endLevel: 20,\r\n  })\r\n);\r\nstore.dispatch(\r\n  activityPathAdded({\r\n    id: 0,\r\n    condition: conditions.ALWAYS,\r\n\r\n    rollType: rollTypes.NORMAL,\r\n    type: activityTypes.STRIKE,\r\n    profTrend: profTrends.FIGHTERWEAPON,\r\n    statTrend: statTrends.AS18a,\r\n    itemTrend: itemTrends.WEAPON,\r\n    bonusAdjustments: { ...empty },\r\n    MAP: MAPs.N1,\r\n\r\n    targetType: defenses.AC,\r\n    targetInfoId: 0,\r\n\r\n    damages: [0, 1],\r\n    effects: [0],\r\n    apIds: [1],\r\n  })\r\n);\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 0,\r\n    damageCondition: dCond.STRIKE,\r\n\r\n    dieTrend: dieTrends.WEAPON,\r\n    dieAdjustments: { ...empty },\r\n    diceSize: 12,\r\n    fatal: false,\r\n    fatalDie: 10,\r\n    damageTrend: [damageTrends.AS18a, damageTrends.FIGHTERWEAPONSPEC],\r\n    damageAdjustments: { ...empty },\r\n\r\n    damageType: damageTypes.S,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n  })\r\n);\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 1,\r\n    damageCondition: dCond.STRIKE,\r\n\r\n    dieTrend: dieTrends.RUNE,\r\n    dieAdjustments: { ...empty },\r\n    diceSize: 6,\r\n    fatal: false,\r\n    fatalDie: 10,\r\n    damageTrend: [],\r\n    damageAdjustments: { ...empty },\r\n\r\n    damageType: damageTypes.FIRE,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n  })\r\n);\r\nstore.dispatch(\r\n  effectAdded({\r\n    id: 0,\r\n    effectCondition: conditions.CRIT,\r\n    effectType: effectTypes.FLATFOOT,\r\n    startLevel: 5,\r\n    endLevel: 20,\r\n  })\r\n);\r\nstore.dispatch(\r\n  activityPathAdded({\r\n    id: 1,\r\n    condition: conditions.ALWAYS,\r\n\r\n    rollType: rollTypes.NORMAL,\r\n    type: activityTypes.STRIKE,\r\n    profTrend: profTrends.FIGHTERWEAPON,\r\n    statTrend: statTrends.AS18a,\r\n    itemTrend: itemTrends.WEAPON,\r\n    bonusAdjustments: { ...empty },\r\n    MAP: MAPs.N2,\r\n\r\n    targetType: defenses.AC,\r\n    targetInfoId: 0,\r\n\r\n    damages: [2, 3],\r\n    effects: [1],\r\n    apIds: [],\r\n  })\r\n);\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 2,\r\n    damageCondition: dCond.STRIKE,\r\n\r\n    dieTrend: dieTrends.WEAPON,\r\n    dieAdjustments: { ...empty },\r\n    diceSize: 12,\r\n    fatal: false,\r\n    fatalDie: 10,\r\n    damageTrend: [damageTrends.AS18a, damageTrends.FIGHTERWEAPONSPEC],\r\n    damageAdjustments: { ...empty },\r\n\r\n    damageType: damageTypes.S,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n  })\r\n);\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 3,\r\n    damageCondition: dCond.STRIKE,\r\n\r\n    dieTrend: dieTrends.RUNE,\r\n    dieAdjustments: { ...empty },\r\n    diceSize: 6,\r\n    fatal: false,\r\n    fatalDie: 10,\r\n    damageTrend: [],\r\n    damageAdjustments: { ...empty },\r\n\r\n    damageType: damageTypes.FIRE,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n  })\r\n);\r\nstore.dispatch(\r\n  effectAdded({\r\n    id: 1,\r\n    effectCondition: conditions.CRIT,\r\n    effectType: effectTypes.FLATFOOT,\r\n    startLevel: 5,\r\n    endLevel: 20,\r\n  })\r\n);\r\n\r\nstore.dispatch(\r\n  routineAdded({\r\n    id: 2,\r\n    name: \"Fireball\",\r\n    display: true,\r\n    apIds: [2],\r\n    levelDiff: 0,\r\n    description: \"A 2d6 / spell level basic reflex save.\",\r\n    startLevel: 1,\r\n    endLevel: 20,\r\n  })\r\n);\r\nstore.dispatch(\r\n  activityPathAdded({\r\n    id: 2,\r\n    condition: conditions.ALWAYS,\r\n\r\n    rollType: rollTypes.NORMAL,\r\n    type: activityTypes.SAVE,\r\n    profTrend: profTrends.CASTERSPELL,\r\n    statTrend: statTrends.AS18a,\r\n    itemTrend: itemTrends.NONE,\r\n    bonusAdjustments: { ...empty },\r\n    MAP: MAPs.N1,\r\n\r\n    targetType: defenses.REF,\r\n    targetInfoId: 0,\r\n\r\n    damages: [4],\r\n    effects: [],\r\n    apIds: [],\r\n  })\r\n);\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 4,\r\n    damageCondition: dCond.BASIC,\r\n\r\n    dieTrend: dieTrends.SPELLLEVEL2,\r\n    dieAdjustments: { ...empty },\r\n    diceSize: 6,\r\n    fatal: false,\r\n    fatalDie: 10,\r\n    damageTrend: [],\r\n    damageAdjustments: { ...empty },\r\n\r\n    damageType: damageTypes.FIRE,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n  })\r\n);\r\n\r\nstore.dispatch(\r\n  routineAdded({\r\n    id: 3,\r\n    name: \"Pick Fighter Double Slice\",\r\n    display: false,\r\n    apIds: [3, 4],\r\n    levelDiff: 0,\r\n    description:\r\n      \"A Fighter using Double Slice with a pick and a light pick. 1d6 damage runes at 8 and 15. Crit specialization at 5.\",\r\n    startLevel: 1,\r\n    endLevel: 20,\r\n  })\r\n);\r\nstore.dispatch(\r\n  activityPathAdded({\r\n    id: 3,\r\n    condition: conditions.ALWAYS,\r\n\r\n    rollType: rollTypes.NORMAL,\r\n    type: activityTypes.STRIKE,\r\n    profTrend: profTrends.FIGHTERWEAPON,\r\n    statTrend: statTrends.AS18a,\r\n    itemTrend: itemTrends.WEAPON,\r\n    bonusAdjustments: { ...empty },\r\n    MAP: MAPs.N1,\r\n\r\n    targetType: defenses.AC,\r\n    targetInfoId: 0,\r\n\r\n    damages: [5, 6, 7],\r\n    effects: [],\r\n    apIds: [],\r\n  })\r\n);\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 5,\r\n    damageCondition: dCond.STRIKE,\r\n\r\n    dieTrend: dieTrends.WEAPON,\r\n    dieAdjustments: { ...empty },\r\n    diceSize: 6,\r\n    fatal: true,\r\n    fatalDie: 10,\r\n    damageTrend: [damageTrends.AS18a, damageTrends.FIGHTERWEAPONSPEC],\r\n    damageAdjustments: { ...empty },\r\n\r\n    damageType: damageTypes.P,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n  })\r\n);\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 6,\r\n    damageCondition: dCond.CRIT,\r\n\r\n    dieTrend: dieTrends.NONE,\r\n    dieAdjustments: { ...one },\r\n    diceSize: 10,\r\n    fatal: false,\r\n    fatalDie: 10,\r\n    damageTrend: [],\r\n    damageAdjustments: { ...pickCritSpec },\r\n\r\n    damageType: damageTypes.P,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n  })\r\n);\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 7,\r\n    damageCondition: dCond.STRIKE,\r\n\r\n    dieTrend: dieTrends.RUNE,\r\n    dieAdjustments: { ...empty },\r\n    diceSize: 6,\r\n    fatal: false,\r\n    fatalDie: 10,\r\n    damageTrend: [],\r\n    damageAdjustments: { ...empty },\r\n\r\n    damageType: damageTypes.FIRE,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n  })\r\n);\r\nstore.dispatch(\r\n  activityPathAdded({\r\n    id: 4,\r\n    condition: conditions.ALWAYS,\r\n\r\n    rollType: rollTypes.NORMAL,\r\n    type: activityTypes.STRIKE,\r\n    profTrend: profTrends.FIGHTERWEAPON,\r\n    statTrend: statTrends.AS18a,\r\n    itemTrend: itemTrends.WEAPON,\r\n    bonusAdjustments: { ...empty },\r\n    MAP: MAPs.A1,\r\n\r\n    targetType: defenses.AC,\r\n    targetInfoId: 0,\r\n\r\n    damages: [8, 9, 10],\r\n    effects: [],\r\n    apIds: [],\r\n  })\r\n);\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 8,\r\n    damageCondition: dCond.STRIKE,\r\n\r\n    dieTrend: dieTrends.WEAPON,\r\n    dieAdjustments: { ...empty },\r\n    diceSize: 4,\r\n    fatal: true,\r\n    fatalDie: 8,\r\n    damageTrend: [damageTrends.AS18a, damageTrends.FIGHTERWEAPONSPEC],\r\n    damageAdjustments: { ...empty },\r\n\r\n    damageType: damageTypes.P,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n  })\r\n);\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 9,\r\n    damageCondition: dCond.CRIT,\r\n\r\n    dieTrend: dieTrends.NONE,\r\n    dieAdjustments: { ...one },\r\n    diceSize: 8,\r\n    fatal: false,\r\n    fatalDie: 10,\r\n    damageTrend: [],\r\n    damageAdjustments: { ...pickCritSpec },\r\n\r\n    damageType: damageTypes.P,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n  })\r\n);\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 10,\r\n    damageCondition: dCond.STRIKE,\r\n\r\n    dieTrend: dieTrends.RUNE,\r\n    dieAdjustments: { ...empty },\r\n    diceSize: 6,\r\n    fatal: false,\r\n    fatalDie: 10,\r\n    damageTrend: [],\r\n    damageAdjustments: { ...empty },\r\n\r\n    damageType: damageTypes.FIRE,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n  })\r\n);\r\n// store.dispatch(weaknessAdded({ id: 0, type: damageTypes.FIRE, value: 10 }));\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 0,\r\n//     damageCondition: dCond.STRIKE,\r\n//     diceNum: 1,\r\n//     diceSize: 8,\r\n//     staticDamage: 4,\r\n//     damageType: damageTypes.B,\r\n//     material: materials.COLD_IRON,\r\n//     persistent: false,\r\n//   })\r\n// );\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport PF2App from \"./PF2App\";\r\nimport store from \"./store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <PF2App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}