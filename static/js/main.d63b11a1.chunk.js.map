{"version":3,"sources":["Model/defaults.ts","Model/types.ts","App/hooks.ts","Display/weaknessSlice.ts","Model/options.tsx","Display/targetSlice.ts","Display/ByLevelInput.tsx","Model/newActivityInfo.ts","Routines/RoutineSlice/RoutineTypes.ts","Routines/RoutineSlice/routineSlice.ts","Calculation/Distribution.ts","Calculation/Calculation.ts","Calculation/EvaluateActivityPath.ts","Display/sharingSlice.ts","Display/useGenerateGraphs.tsx","Display/SingleLevelInput.tsx","Display/JointInput.tsx","Sharing/Upload.tsx","Display/Display.tsx","Routines/ActivityPathStub.tsx","TooltipSelect.tsx","Routines/Activity/LevelList.tsx","Routines/Activity/Damage.tsx","Routines/Activity/Effect.tsx","Routines/Activity/ActivityPath.tsx","Routines/SelectedRoutine.tsx","Routines/Routines.tsx","Model/exampleRoutines.ts","Sharing/Export.tsx","Routines/NewActivity/NewActivity.tsx","App/PF2App.tsx","App/store.ts","serviceWorker.js","App/theme.ts","index.js"],"names":["graphTypes","DISTRIBUTION","PMDEFENSE","PMRES","importStates","ACTrends","LOW","MODERATE","HIGH","EXTREME","SaveTrends","TERRIBLE","conditions","ALWAYS","CRIT","SUCC","FAIL","CRIF","AT_LEAST_SUCC","AT_LEAST_FAIL","FAIL_WORSE","SUCC_WORSE","rollTypes","NORMAL","ADVANTAGE","DISADVANTAGE","activityTypes","STRIKE","SAVE","SKILL","SPELLATTACK","profTrends","UNTRAINED","TRAINED","FIGHTERWEAPON","MARTIALWEAPON","CASTERWEAPON","ALCHWEAPON","CASTERSPELL","CLASSDC1","CLASSDC2","MCSPELL","MAXSKILL","ANIMALCOMPANION","SAVAGEACATHLETICS","statTrends","AS10","AS18a","AS16a","AS16pp","AS16p","AS14pp","AS14p","AS12p","AS10p","NIMBLEAC","SAVAGEAC","itemTrends","NONE","WEAPON","BOMB","MUTAGEN","MAPs","N1","N2","N3","A1","A2","A3","R1","R2","R3","RA1","RA2","RA3","RAA1","RAA2","RAA3","nextMAPs","defenses","AC","FORT","REF","WILL","PER","selfDC","targetDC","dCond","BASIC","dieTrends","SPELLLEVEL1","SPELLLEVEL2","LEVEL","HALFLEVEL","RUNE","RUNE2","DEADLY","SNEAK","STRATEGIC","PRECISE","PRECISIONEDGE","PRECISIONEDGE2","PRECISIONEDGE3","KISTRIKE","damageTrends","FIGHTERWEAPONSPEC","MARTIALWEAPONSPEC","CASTERWEAPONSPEC","BOMBPLUS","RAGE","ANIMALRAGE","DRAGONRAGE","GIANTRAGE","SPIRITRAGE","ARCANECASCADE","OVERDRIVES","OVERDRIVEC","IMPLEMENT","CONSTRUCT","NIMBLE","SAVAGE","damageTypes","B","P","S","BLEED","FIRE","COLD","MENTAL","FORCE","PRECISION","materials","COLD_IRON","SILVER","ADAMANTINE","effectStateTypes","FLATFOOT","PRONE","GRAPPLED","RESTRAINED","effectValueTypes","FRIGHTENED","CLUMSY","effectTypes","whenConditions","Always","diceSizes","useAppDispatch","useDispatch","useAppSelector","useSelector","weaknessAdapter","createEntityAdapter","weakness","weaknessesSlice","createSlice","name","initialState","getInitialState","reducers","weaknessAdded","addOne","weaknessUpdated","updateOne","weaknessCreated","reducer","state","action","payload","id","type","value","prepare","parentId","weaknessRemoved","removeOne","actions","getSelectors","weaknesses","selectweaknessById","selectById","selectweaknessEntities","selectIds","selectEntities","selectAll","selectTotal","valuesFromBonusLevels","levels","addLevel","currentValue","values","i","level","zero","halfLevel","trained","maxSkill","maxScore","score16pp","score16p","score16","score14p","score14","score12","score10","DexNimbleAC","StrSavageAC","martialProf","alchProf","casterProf","spellProf","weaponItem","skillItem","bomb","mutagen","weaponDice","spellDice","spellDice2","Math","floor","runes","runes2","deadly","sneak","strategic","precise","kiStrike","preEdge1","preEdge2","preEdge3","acDice","martialSpec","casterSpec","constructDamage","nimbleDamage","savageDamage","bombPlusSplash","rage","animalrage","dragonrage","giantrage","spiritrage","arcaneCascade","overdriveSuccess","overdriveCritical","implementEmpower","fighterAB","martialAB","casterAB","alchAB","casterSpellAttack","casterSaveDC","classdc1","classdc2","mcspell","ACunarmedPro","ACathleticsProf","fighterStatic","fighterRanged","martialStatic","martialRanged","casterStatic","casterRanged","profTrendValues","statTrendValues","itemTrendValues","MAPvalues","dieTrendValues","damageTrendValues","extremeAC","highAC","moderateAC","lowAC","gt","defaultACs","defaultSaves","standardDC","targetAdapter","targetsSlice","targetAdded","targetUpdated","changes","updateTargetLevel","targetLevel","extraReducers","builder","addCase","weaknessId","entities","push","filter","wid","targets","selecttargetById","selecttargetEntities","overrideAC","ACTrend","overrideFort","FortTrend","overrideRef","RefTrend","overrideWill","WillTrend","overridePer","PerTrend","makeOptions","options","element","optionElements","graphTypeOptions","c","levelOptions","rt","conditionOptions","at","rollOptions","pt","activityTypeOptions","st","profTrendOptions","it","statTrendOptions","m","itemBTrendOptions","d","MAPOptions","act","defenseOptions","svt","ACOptions","dc","SaveOptions","dieT","damageConditionOptions","ds","dieTrendOptions","damT","diceSizeOptions","dt","damageTrendOptions","mat","damageTypeOptions","materialOptions","weaknessOptions","multiplierOptions","est","evt","effectTypeOptions","ByLevelInput","levelDiff","useState","tempName","setTempName","dispatch","container","spacing","xs","sm","sx","my","py","item","md","lg","fullWidth","label","placeholder","onChange","e","target","onBlur","step","min","max","marks","nv","labelId","Strike","Skill","Cantrip","Spell","runeTrends","classes","noOptions","strikeActivities","classOptions","Alchemist","Barbarian","Bard","Champion","Cleric","Druid","Fighter","Gunslinger","Inventor","Investigator","Magus","Monk","Oracle","Ranger","Rogue","Sorcerer","Summoner","Swashbuckler","Witch","Wizard","weaponTraits","critSpecs","skillProfTrends","spellProfTrends","skillActivities","cantrips","spells","classAdjustments","strikeInfo","strikeNumber","adjustments","cClass","activity","activityWeaponDiceAdjustments","classWeaponDamageTrends","trends","traits","damageScore","includes","classOption","classDamageAdjustments","bonus","cantripScore","hasDeadly","hasFatal","hasPickCritSpec","critSpec","critSpecType","hasSwordCritSpec","hasHammerCritSpec","hasSpearCritSpec","critSpecDice","critSpecLevel","critSpecDamage","getSkillTarget","skillInfo","skillActivity","isRoutineObject","routine","display","description","isActivityPaths","apIds","startLevel","endLevel","Array","isArray","apId","Object","condition","rollType","profTrend","statTrend","itemTrend","isAdjustment","bonusAdjustments","MAP","targetType","isDamages","damages","isEffects","effects","damage","damageTrend","damageWhen","dw","damageCondition","dieTrend","dieAdjustments","diceSize","fatal","fatalDie","damageAdjustments","damageType","material","persistent","multiplier","effect","effectCondition","effectType","routinesAdapter","activityPathAdapter","damageAdapter","effectAdapter","routineId","activityPathId","damageId","effectId","empty","one","selectedRoutine","selectedActivityPath","undefined","parentRoutine","parentActivity","routines","activityPaths","importRoutine","defaultActivity","defaultStrikeParent","defaultSaveParent","defaultDamage","defaultEffect","effectValue","routinesSlice","setRoutine","setActivityPath","routineAdded","routineUpdated","activityPathAdded","activityPathUpdated","damageAdded","damageUpdated","effectAdded","effectUpdated","routineCreated","copy","copyActivityPaths","routineRemoved","childrenIds","removeActivityPaths","setNewActivityParent","emptyActivityPathCreated","activityType","ap","copyDamages","copyEffects","activityPathCreated","cantripInfo","spellInfo","ids","createStrikeActivity","numPrevStrikes","createSkillActivity","createCantripActivity","createSpellActivity","activityPathContinued","parentAP","newDamages","newEffects","activityPathRemoved","damageCreated","damageRemoved","did","effectCreated","effectRemoved","eid","routineObject","JSON","parse","insertRoutine","error","console","log","selectRoutineById","selectRoutineEntities","selectAllRoutines","selectactivityPathById","selectactivityPathEntities","selectdamageById","selectdamageEntities","selecteffectById","selecteffectEntities","selectSelectedRoutine","selectSelectedActivityPath","selectParentActivityId","selectCreateNewActivity","selectSelectedRoutineObject","getActivityPaths","selectRoutineDescriptions","map","selectImportState","index","length","removeMany","numStrikes","className","createStrikeDamages","createStrikeEffects","classWeaponMAP","attackScore","weaponDamage","dieSize","fatalSize","runeDamage","hasClassDamageDice","classDamageDice","classDamage","hasActivityDamageDice","activityDamageDice","activityDamage","critDamage","deadlySize","hasKnifeCritSpec","hasCritSpecEffect","critSpecEffect","createSkillDamages","createSkillEffects","proficiency","abilityScore","itemBonus","hasSkillDamage","skillDamage","getSkillEffects","skillEffect","createCantripDamages","cantrip","getCantripTarget","cantripDamage","getCantripDamage","createSpellDamages","createSpellEffects","spell","getSpellTarget","spellDamage","crfa","fail","succ","newApIds","newAps","aps","getDamages","getEffects","insertActivityPaths","insertDamages","insertEffects","convolve","vec1","vec2","Error","volume","kernel","displacement","convVec","j","multiplyDist","dam","dist","staticDamage","damageDist","newDist","newDam","oldValue","chance","newValue","diff","consolidateDists","maxDamage","dists","distribution","applyMin","shift","damageQualities","normal","addDamage","baseContext","context","validateCondition","degreeOfSuccess","indicies","ActivityPathEvaluator","this","routineLevel","ACBonus","resBonus","initialTargetState","Flatfooted","flatfooted","dataArray","cumulative","PdataArray","Pcumulative","expD","expP","routineDDist","routinePDDist","activityPath","evalPath","PdamageDist","currentSum","targetState","defenseBonus","resistanceBonus","currentTarget","currentDamages","currentEffects","currentWeaknesses","targetValue","DC","targetPenalty","Frightened","Clumsy","critPercent","dif","getCritSuccessPercent","succPercent","getSuccessPercent","failPercent","getFailurePercent","crfaPercent","getCritFailurePercent","notcrit","nothit","notfail","notcrfa","notsucc","chances","critDamagesByType","succDamagesByType","failDamagesByType","crfaDamagesByType","damageTreesByType","damageTrees","forEach","shouldAddThisDamage","val","diceNum","fatalDist","diceArray","damageTreeIndex","damageTree","finalTree","damageQuality","totalStaticDamage","totalDamageDist","maxW","maxR","persistentMultiplier","calculateExpectedDamage","targetStates","shouldAddThisEffect","Restrained","Grappled","Prone","evaluations","Map","has","pathDist","pathPDist","set","get","sharingSlice","graphUrl","singleLevelGraphUrl","imgLink","graphSaved","singleLevelGraphSaved","saveImgLink","Plot","createPlotlyComponent","Plotly","evaluateByLevel","evaluator","datasets","perDatasets","selectedRoutineDamage","selectedRoutinePDamage","percentSelectedRoutine","canEvaluate","evalRoutine","levelArray","expDbyLevel","expPDbyLevel","x","y","yaxis","evaluatePM","defense","expectedDamages","expectedPersistentDamages","canEvaluateSingleLevel","bonusArray","expDbyBonus","expPDbyBonus","toFixed","evaluateDistribution","useGenerateGraphs","graphType","saveGraph","_figure","graphDiv","toImage","format","height","width","then","url","saveSingleLevelGraph","title","byLevelTile","xtitle","ytitle","byLeveldatasets","byLevelperDatasets","damageChart","data","layout","autosize","xaxis","legend","xanchor","margin","l","r","useResizeHandler","style","onInitialized","onUpdate","persistentDamageChart","byLevelDamageChart","byLevelPerDamageChart","SingleLevelInput","toString","setAC","Fort","setFort","Ref","setRef","Will","setWill","Per","setPer","useEffect","columns","p","px","focus","newVal","parseInt","inputProps","alignItems","WeaknessInput","tempVal","setTempVal","size","AddWeakness","WeaknessSelect","JointInput","perMul","setPerMul","control","checked","parseFloat","Upload","byLevel","sharing","selectGraphUrl","split","routineDescriptions","isBigEnough","useMediaQuery","theme","breakpoints","up","fd","FormData","append","requestOptions","method","headers","Authorization","body","onClick","tab","window","open","fetch","response","json","link","location","catch","alert","close","variant","color","endIcon","Display","showByLevel","setShowByLevel","showSingleLevel","setShowSingleLevel","setGraphType","Fragment","in","ActivityPathStub","displayChildren","parentActivityId","icon","disablePadding","secondaryAction","edge","selected","pl","primary","secondary","TooltipSelect","children","setOpen","onFocus","onMouseEnter","onMouseLeave","generateAdjustments","entries","total","currentIndex","adjustmentsFromLevelChange","newLevel","sort","a","b","adjustmentsFromNewEntry","lastValue","LevelList","baseEntries","generateEntries","setEntries","be","stringify","levelList","Number","newEntries","slice","ni","Damage","showContent","setShowContent","dieLevelList","damageLevelList","damageTrendList","newdt","splice","damageInfo","mt","mb","bgcolor","multiple","renderValue","join","Divider","textAlign","DamageDisplay","setLevel","diceNumber","averageDamage","fatalString","damageString","columnSpacing","ml","_","valueLabelDisplay","component","Effect","setValue","showValue","validLevels","setValidLevels","align","getAriaLabel","getAriaValueText","v","ActivityPath","showMAP","startIcon","mountOnEnter","subheader","justifyContent","href","Roll","isSave","bonusLevelList","rollInfo","RollBonusDisplay","totalBonus","SelectedRoutine","createNewActivity","tempDescription","setTempDescription","displayAllRoutines","multiline","Routines","routineOptions","routineDisplays","onDelete","flexWrap","listStyle","exampleRoutines","ImportExport","importState","textValue","setTextValue","NewActivity","setActivityType","StrikeSelection","SkillSelection","CantripSelection","SpellSelection","setRunes","setCClass","setActivity","setClassOption","setAttackScore","setDamageScore","setCantripScore","setDieSize","setNumStrikes","setNumPrevStrikes","fromEntries","trait","setTraits","setDeadlySize","setFatalSize","setCritSpec","setCritSpecLevel","setCritSpecType","traitName","newTraits","setProficiency","setAbilityScore","setItemBonus","setSkillActivity","setCantrip","setSpell","ReactGA","initialize","Controls","Export","Donate","src","alt","Contact","PF2App","send","maxWidth","xl","overflow","pickCritSpec","store","configureStore","routineReducer","weaknessReducer","targetReducer","sharingReducer","Boolean","hostname","match","createTheme","palette","main","red","background","default","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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,EACA1O,EACAC,EACAC,EACAmK,EACAxK,EAAQuP,EAAY9E,EACP,EAAbnK,GAEF,MAEF,KAAK3Y,EAAMC,MACT4jB,GACEsD,EACA3O,EACAC,EACAC,EACAmK,EACAC,EACa,GAAbnK,GAEFkL,GACEuD,EACA5O,EACAC,EACAC,EACAmK,EACAC,EACa,EAAbnK,GAEFkL,GACEwD,EACA7O,EACAC,EACAC,EACAmK,EACAC,EACa,EAAbnK,GAEF,MAEF,KAAK3Y,EAAMtE,KACTmoB,GACEwD,EACA7O,EACAC,EACAC,EACAmK,EACAC,EACa,EAAbnK,GAEF,MAEF,KAAK3Y,EAAMvE,KACTooB,GACEuD,EACA5O,EACAC,EACAC,EACAmK,EACAC,EACa,EAAbnK,GAEF,MAEF,KAAK3Y,EAAMxE,KACTqoB,GACEsD,EACA3O,EACAC,EACAC,EACAmK,EACAC,EACa,EAAbnK,GAEF,MAEF,KAAK3Y,EAAMzE,KACTsoB,GACEqD,EACA1O,EACAC,EACAC,EACAmK,EACAC,EACa,EAAbnK,GAEF,MAEF,KAAK3Y,EAAMrE,cACTkoB,GACEsD,EACA3O,EACAC,EACAC,EACAmK,EACAC,EACa,EAAbnK,GAEFkL,GACEqD,EACA1O,EACAC,EACAC,EACAmK,EACAC,EACa,EAAbnK,GAEF,MAEF,KAAK3Y,EAAMpE,cACTioB,GACEuD,EACA5O,EACAC,EACAC,EACAmK,EACAC,EACa,EAAbnK,GAEFkL,GACEsD,EACA3O,EACAC,EACAC,EACAmK,EACAC,EACa,EAAbnK,GAEFkL,GACEqD,EACA1O,EACAC,EACAC,EACAmK,EACAC,EACa,EAAbnK,GAEF,MAEF,KAAK3Y,EAAMnE,WACTgoB,GACEwD,EACA7O,EACAC,EACAC,EACAmK,EACAC,EACa,EAAbnK,GAEFkL,GACEuD,EACA5O,EACAC,EACAC,EACAmK,EACAC,EACa,EAAbnK,GAEF,MAEF,KAAK3Y,EAAMlE,WACT+nB,GACEwD,EACA7O,EACAC,EACAC,EACAmK,EACAC,EACa,EAAbnK,GAEFkL,GACEuD,EACA5O,EACAC,EACAC,EACAmK,EACAC,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","file":"static/js/main.d63b11a1.chunk.js","sourcesContent":["import { activityDamageDice } from \"./newActivityInfo\";\r\nimport {\r\n  ACTrends,\r\n  profTrends,\r\n  damageTrends,\r\n  dieTrends,\r\n  SaveTrends,\r\n  statTrends,\r\n  itemTrends,\r\n} from \"./types\";\r\n\r\ninterface defaultValue {\r\n  [x: number]: number;\r\n}\r\n\r\nexport const valuesFromBonusLevels = (levels: number[], addLevel = false) => {\r\n  let currentValue = 0;\r\n  let values: defaultValue = {};\r\n  for (let i = 1; i <= 20; i++) {\r\n    for (let level of levels) {\r\n      if (level === i) {\r\n        currentValue += 1;\r\n      }\r\n    }\r\n    values[i] = addLevel ? currentValue + i : currentValue;\r\n  }\r\n  return values;\r\n};\r\nconst zero: defaultValue = {};\r\nconst level: defaultValue = {};\r\nconst halfLevel: defaultValue = {};\r\n\r\nconst trained: defaultValue = {};\r\nconst maxSkill: defaultValue = {};\r\n\r\nconst maxScore: defaultValue = {};\r\nconst score16pp: defaultValue = {};\r\nconst score16p: defaultValue = {};\r\nconst score16: defaultValue = {};\r\nconst score14p: defaultValue = {};\r\nconst score14: defaultValue = {};\r\nconst score12: defaultValue = {};\r\nconst score10: defaultValue = {};\r\nconst DexNimbleAC: defaultValue = {};\r\nconst StrSavageAC: defaultValue = {};\r\n\r\nconst martialProf: defaultValue = {};\r\nconst alchProf: defaultValue = {};\r\nconst casterProf: defaultValue = {};\r\n\r\nconst spellProf: defaultValue = {};\r\n\r\nconst weaponItem: defaultValue = {};\r\nconst skillItem: defaultValue = {};\r\nconst bomb: defaultValue = {};\r\nconst mutagen: defaultValue = {};\r\n\r\nconst weaponDice: defaultValue = {};\r\nconst spellDice: defaultValue = {};\r\nconst spellDice2: defaultValue = {};\r\nfor (let i = 1; i <= 20; i++) {\r\n  spellDice[i] = Math.floor((i + 1) / 2);\r\n  spellDice2[i] = 2 * Math.floor((i + 1) / 2);\r\n}\r\nconst runes: defaultValue = {};\r\nconst runes2: defaultValue = {};\r\nconst deadly: defaultValue = {};\r\n\r\nconst sneak: defaultValue = {};\r\nconst strategic: defaultValue = {};\r\nconst precise: defaultValue = {};\r\n\r\nconst kiStrike: defaultValue = {};\r\n\r\nconst preEdge1: defaultValue = {};\r\nconst preEdge2: defaultValue = {};\r\nconst preEdge3: defaultValue = {};\r\n\r\nconst acDice: defaultValue = {};\r\n\r\nconst martialSpec: defaultValue = {};\r\nconst casterSpec: defaultValue = {};\r\n\r\nconst constructDamage: defaultValue = {};\r\nconst nimbleDamage: defaultValue = {};\r\nconst savageDamage: defaultValue = {};\r\n\r\nconst bombPlusSplash: defaultValue = {};\r\n\r\nconst rage: defaultValue = {};\r\nconst animalrage: defaultValue = {};\r\nconst dragonrage: defaultValue = {};\r\nconst giantrage: defaultValue = {};\r\nconst spiritrage: defaultValue = {};\r\n\r\nconst arcaneCascade: defaultValue = {};\r\n\r\nconst overdriveSuccess: defaultValue = {};\r\nconst overdriveCritical: defaultValue = {};\r\n\r\nconst implementEmpower: defaultValue = {};\r\n\r\nconst fighterAB: defaultValue = {};\r\nconst martialAB: defaultValue = {};\r\nconst casterAB: defaultValue = {};\r\nconst alchAB: defaultValue = {};\r\n\r\nconst casterSpellAttack: defaultValue = {};\r\nconst casterSaveDC: defaultValue = {};\r\nconst classdc1: defaultValue = {};\r\nconst classdc2: defaultValue = {};\r\nconst mcspell: defaultValue = {};\r\n\r\nconst ACunarmedPro: defaultValue = {};\r\nconst ACathleticsProf: defaultValue = {};\r\n\r\nconst fighterStatic: defaultValue = {};\r\nconst fighterRanged: defaultValue = {};\r\nconst martialStatic: defaultValue = {};\r\nconst martialRanged: defaultValue = {};\r\nconst casterStatic: defaultValue = {};\r\nconst casterRanged: defaultValue = {};\r\n\r\nfor (let i = 1; i <= 20; i++) {\r\n  zero[i] = 0;\r\n  level[i] = i;\r\n  halfLevel[i] = Math.floor(i / 2);\r\n  trained[i] = i + 2;\r\n  maxSkill[i] = i + 2;\r\n\r\n  maxScore[i] = 4;\r\n  score16pp[i] = 3;\r\n  score16p[i] = 3;\r\n  score16[i] = 3;\r\n  score14p[i] = 2;\r\n  score14[i] = 2;\r\n  score12[i] = 1;\r\n  score10[i] = 0;\r\n  DexNimbleAC[i] = 3;\r\n  StrSavageAC[i] = 3;\r\n\r\n  martialProf[i] = 2;\r\n  alchProf[i] = 2;\r\n  casterProf[i] = 2;\r\n\r\n  spellProf[i] = 2;\r\n  classdc1[i] = i + 2;\r\n  classdc2[i] = i + 2;\r\n  mcspell[i] = i + 2;\r\n\r\n  ACunarmedPro[i] = i + 2;\r\n  ACathleticsProf[i] = i + 2;\r\n\r\n  weaponItem[i] = 0;\r\n  skillItem[i] = 0;\r\n  bomb[i] = 0;\r\n  mutagen[i] = 1;\r\n\r\n  weaponDice[i] = 1;\r\n  runes[i] = 0;\r\n  runes2[i] = 0;\r\n  deadly[i] = 1;\r\n\r\n  sneak[i] = 1;\r\n  strategic[i] = 1;\r\n  precise[i] = 2;\r\n\r\n  kiStrike[i] = 1;\r\n\r\n  acDice[i] = 1;\r\n\r\n  preEdge1[i] = 1;\r\n  preEdge2[i] = 0;\r\n  preEdge3[i] = 0;\r\n\r\n  martialSpec[i] = 0;\r\n  casterSpec[i] = 0;\r\n\r\n  constructDamage[i] = 3;\r\n  nimbleDamage[i] = 2;\r\n  savageDamage[i] = 3;\r\n\r\n  bombPlusSplash[i] = 1;\r\n\r\n  rage[i] = 2;\r\n  animalrage[i] = 2;\r\n  dragonrage[i] = 4;\r\n  giantrage[i] = 6;\r\n  spiritrage[i] = 3;\r\n\r\n  arcaneCascade[i] = 1;\r\n\r\n  overdriveSuccess[i] = 2;\r\n  overdriveCritical[i] = 4;\r\n\r\n  implementEmpower[i] = 2;\r\n\r\n  if (i >= 2) {\r\n    weaponItem[i] = 1;\r\n  }\r\n  if (i >= 3) {\r\n    maxSkill[i] = i + 4;\r\n    skillItem[i] = 1;\r\n    bomb[i] = 1;\r\n    mutagen[i] = 2;\r\n\r\n    bombPlusSplash[i] = 2;\r\n\r\n    overdriveSuccess[i] = 3;\r\n    overdriveCritical[i] = 5;\r\n\r\n    implementEmpower[i] = 4;\r\n  }\r\n  if (i >= 4) {\r\n    weaponDice[i] = 2;\r\n    acDice[i] = 2;\r\n\r\n    constructDamage[i] = 4;\r\n    nimbleDamage[i] = 3;\r\n    savageDamage[i] = 4;\r\n\r\n    bombPlusSplash[i] = 4;\r\n\r\n    DexNimbleAC[i] = 4;\r\n    StrSavageAC[i] = 4;\r\n  }\r\n  if (i >= 5) {\r\n    martialProf[i] = 4;\r\n    score16pp[i] = 4;\r\n    score16p[i] = 4;\r\n    score16[i] = 4;\r\n    score14p[i] = 3;\r\n    score14[i] = 3;\r\n    score12[i] = 2;\r\n    score10[i] = 1;\r\n\r\n    sneak[i] = 2;\r\n    strategic[i] = 2;\r\n    precise[i] = 3;\r\n  }\r\n  if (i >= 7) {\r\n    alchProf[i] = 4;\r\n    martialSpec[i] = 1;\r\n    spellProf[i] = 4;\r\n    maxSkill[i] = i + 6;\r\n\r\n    rage[i] = 6;\r\n    animalrage[i] = 5;\r\n    dragonrage[i] = 8;\r\n    giantrage[i] = 10;\r\n    spiritrage[i] = 7;\r\n\r\n    arcaneCascade[i] = 2;\r\n\r\n    overdriveSuccess[i] = 4;\r\n    overdriveCritical[i] = 6;\r\n  }\r\n  if (i >= 8) {\r\n    ACathleticsProf[i] = i + 4;\r\n\r\n    runes[i] = 1;\r\n    runes2[i] = 1;\r\n\r\n    constructDamage[i] = 8;\r\n    nimbleDamage[i] = 6;\r\n    savageDamage[i] = 9;\r\n\r\n    DexNimbleAC[i] = 6;\r\n    StrSavageAC[i] = 6;\r\n  }\r\n  if (i >= 9) {\r\n    skillItem[i] = 2;\r\n    classdc1[i] = i + 4;\r\n\r\n    strategic[i] = 3;\r\n    precise[i] = 4;\r\n\r\n    kiStrike[i] = 2;\r\n  }\r\n  if (i >= 10) {\r\n    weaponItem[i] = 2;\r\n    maxScore[i] = 5;\r\n    score14p[i] = 4;\r\n    score14[i] = 4;\r\n    score12[i] = 3;\r\n    score10[i] = 2;\r\n\r\n    runes2[i] = 2;\r\n\r\n    bombPlusSplash[i] = 7;\r\n\r\n    overdriveCritical[i] = 7;\r\n  }\r\n  if (i >= 11) {\r\n    casterProf[i] = 4;\r\n    classdc2[i] = i + 4;\r\n\r\n    bomb[i] = 2;\r\n    mutagen[i] = 3;\r\n\r\n    bombPlusSplash[i] = 8;\r\n\r\n    sneak[i] = 3;\r\n    implementEmpower[i] = 6;\r\n\r\n    preEdge1[i] = 2;\r\n  }\r\n  if (i >= 12) {\r\n    weaponDice[i] = 3;\r\n    mcspell[i] = i + 4;\r\n    deadly[i] = 2;\r\n  }\r\n  if (i >= 13) {\r\n    martialProf[i] = 6;\r\n    casterSpec[i] = 1;\r\n\r\n    strategic[i] = 4;\r\n    precise[i] = 5;\r\n  }\r\n  if (i >= 14) {\r\n    ACunarmedPro[i] = i + 4;\r\n    ACathleticsProf[i] = i + 6;\r\n\r\n    acDice[i] = 3;\r\n    constructDamage[i] = 11;\r\n    nimbleDamage[i] = 8;\r\n    savageDamage[i] = 13;\r\n\r\n    DexNimbleAC[i] = 8;\r\n    StrSavageAC[i] = 7;\r\n  }\r\n  if (i >= 15) {\r\n    martialSpec[i] = 2;\r\n    score16pp[i] = 5;\r\n    score16p[i] = 5;\r\n    score12[i] = 4;\r\n    score10[i] = 3;\r\n    spellProf[i] = 6;\r\n    maxSkill[i] = i + 8;\r\n    runes[i] = 2;\r\n\r\n    rage[i] = 12;\r\n    animalrage[i] = 12;\r\n    dragonrage[i] = 16;\r\n    giantrage[i] = 18;\r\n    spiritrage[i] = 13;\r\n\r\n    arcaneCascade[i] = 1;\r\n\r\n    overdriveSuccess[i] = 5;\r\n    overdriveCritical[i] = 8;\r\n  }\r\n  if (i >= 16) {\r\n    weaponItem[i] = 3;\r\n    runes2[i] = 3;\r\n  }\r\n  if (i >= 17) {\r\n    score16pp[i] = 6;\r\n    maxScore[i] = 6;\r\n    skillItem[i] = 3;\r\n    classdc1[i] = i + 6;\r\n    bomb[i] = 3;\r\n    mutagen[i] = 4;\r\n    bombPlusSplash[i] = 10;\r\n\r\n    sneak[i] = 4;\r\n    strategic[i] = 5;\r\n    precise[i] = 6;\r\n\r\n    kiStrike[i] = 3;\r\n\r\n    preEdge2[i] = 1;\r\n\r\n    overdriveSuccess[i] = 6;\r\n    overdriveCritical[i] = 9;\r\n  }\r\n  if (i >= 18) {\r\n    mcspell[i] = i + 6;\r\n  }\r\n  if (i >= 19) {\r\n    weaponDice[i] = 4;\r\n    spellProf[i] = 8;\r\n    classdc2[i] = i + 6;\r\n    deadly[i] = 3;\r\n\r\n    implementEmpower[i] = 8;\r\n\r\n    preEdge1[i] = 3;\r\n    preEdge2[i] = 2;\r\n    preEdge3[i] = 1;\r\n  }\r\n  if (i >= 20) {\r\n    maxScore[i] = 7;\r\n    score10[i] = 4;\r\n    bombPlusSplash[i] = 11;\r\n\r\n    overdriveCritical[i] = 10;\r\n  }\r\n\r\n  fighterAB[i] = i + martialProf[i] + 2;\r\n  martialAB[i] = i + martialProf[i];\r\n  casterAB[i] = i + casterProf[i];\r\n  alchAB[i] = i + alchProf[i];\r\n  casterSpellAttack[i] = i + spellProf[i];\r\n  casterSaveDC[i] = 10 + i + spellProf[i] + maxScore[i];\r\n\r\n  fighterStatic[i] = maxScore[i] + (martialSpec[i] * (martialProf[i] + 2)) / 2;\r\n  fighterRanged[i] = (martialSpec[i] * (martialProf[i] + 2)) / 2;\r\n  martialStatic[i] = maxScore[i] + (martialSpec[i] * martialProf[i]) / 2;\r\n  martialRanged[i] = (martialSpec[i] * martialProf[i]) / 2;\r\n  casterStatic[i] = score16[i] + (casterSpec[i] * casterProf[i]) / 2;\r\n  casterRanged[i] = (casterSpec[i] * casterProf[i]) / 2;\r\n}\r\nexport const profTrendValues = {\r\n  [profTrends.UNTRAINED]: valuesFromBonusLevels([]),\r\n  [profTrends.TRAINED]: valuesFromBonusLevels([1, 1], true),\r\n  [profTrends.FIGHTERWEAPON]: valuesFromBonusLevels(\r\n    [1, 1, 1, 1, 5, 5, 13, 13],\r\n    true\r\n  ),\r\n  [profTrends.MARTIALWEAPON]: valuesFromBonusLevels([1, 1, 5, 5, 13, 13], true),\r\n  [profTrends.CASTERWEAPON]: valuesFromBonusLevels([1, 1, 11, 11], true),\r\n  [profTrends.ALCHWEAPON]: valuesFromBonusLevels([1, 1, 7, 7], true),\r\n  [profTrends.CASTERSPELL]: valuesFromBonusLevels(\r\n    [1, 1, 7, 7, 15, 15, 19, 19],\r\n    true\r\n  ),\r\n  [profTrends.CLASSDC1]: valuesFromBonusLevels([1, 1, 9, 9, 17, 17], true),\r\n  [profTrends.CLASSDC2]: valuesFromBonusLevels([1, 1, 11, 11, 19, 19], true),\r\n  [profTrends.MCSPELL]: valuesFromBonusLevels([1, 1, 12, 12, 18, 18], true),\r\n  [profTrends.MAXSKILL]: valuesFromBonusLevels(\r\n    [1, 1, 3, 3, 7, 7, 15, 15],\r\n    true\r\n  ),\r\n  [profTrends.ANIMALCOMPANION]: valuesFromBonusLevels([1, 1, 14, 14], true),\r\n  [profTrends.SAVAGEACATHLETICS]: valuesFromBonusLevels(\r\n    [1, 1, 4, 4, 14, 14],\r\n    true\r\n  ),\r\n};\r\nexport const statTrendValues = {\r\n  [statTrends.AS10]: valuesFromBonusLevels([]),\r\n  [statTrends.AS18a]: valuesFromBonusLevels([1, 1, 1, 1, 10, 17, 20]),\r\n  [statTrends.AS16a]: score16pp,\r\n  [statTrends.AS16pp]: score16p,\r\n  [statTrends.AS16p]: score16,\r\n  [statTrends.AS14pp]: score14p,\r\n  [statTrends.AS14p]: score14,\r\n  [statTrends.AS12p]: score12,\r\n  [statTrends.AS10p]: score10,\r\n  [statTrends.NIMBLEAC]: DexNimbleAC,\r\n  [statTrends.SAVAGEAC]: StrSavageAC,\r\n};\r\nexport const itemTrendValues = {\r\n  [itemTrends.NONE]: zero,\r\n  [itemTrends.WEAPON]: weaponItem,\r\n  [itemTrends.SKILL]: skillItem,\r\n  [itemTrends.BOMB]: bomb,\r\n  [itemTrends.MUTAGEN]: mutagen,\r\n};\r\n\r\nexport const MAPvalues = {\r\n  \"0 (0x-5)\": 0,\r\n  \"-5 (1x-5)\": -5,\r\n  \"-10 (2x-5)\": -10,\r\n  \"0 (0x-4)\": 0,\r\n  \"-4 (1x-4)\": -4,\r\n  \"-8 (2x-4)\": -8,\r\n  \"0 (0x-3)\": 0,\r\n  \"-3 (1x-3)\": -3,\r\n  \"-6 (2x-3)\": -6,\r\n  \"0 (0x-2)\": 0,\r\n  \"-2 (1x-2)\": -2,\r\n  \"-4 (2x-2)\": -4,\r\n  \"0 (0x-1)\": 0,\r\n  \"-1 (1x-1)\": -1,\r\n  \"-2 (2x-1)\": -2,\r\n};\r\n\r\nexport const dieTrendValues = {\r\n  [dieTrends.NONE]: zero,\r\n  [dieTrends.WEAPON]: weaponDice,\r\n  [dieTrends.SPELLLEVEL1]: spellDice,\r\n  [dieTrends.SPELLLEVEL2]: spellDice2,\r\n  [dieTrends.LEVEL]: level,\r\n  [dieTrends.HALFLEVEL]: halfLevel,\r\n  [dieTrends.RUNE]: runes,\r\n  [dieTrends.RUNE2]: runes2,\r\n  [dieTrends.DEADLY]: deadly,\r\n  [dieTrends.BOMB]: mutagen,\r\n  [dieTrends.SNEAK]: sneak,\r\n  [dieTrends.STRATEGIC]: strategic,\r\n  [dieTrends.PRECISE]: precise,\r\n  [dieTrends.PRECISIONEDGE]: preEdge1,\r\n  [dieTrends.PRECISIONEDGE2]: preEdge2,\r\n  [dieTrends.PRECISIONEDGE3]: preEdge3,\r\n  [dieTrends.KISTRIKE]: kiStrike,\r\n  [dieTrends.ANIMALCOMPANION]: acDice,\r\n};\r\n\r\nexport const damageTrendValues = {\r\n  ...statTrendValues,\r\n  [damageTrends.NONE]: zero,\r\n  [damageTrends.FIGHTERWEAPONSPEC]: fighterRanged,\r\n  [damageTrends.MARTIALWEAPONSPEC]: martialRanged,\r\n  [damageTrends.CASTERWEAPONSPEC]: casterRanged,\r\n  [damageTrends.WEAPON]: weaponDice,\r\n  [damageTrends.SPELLLEVEL1]: spellDice,\r\n  [damageTrends.LEVEL]: level,\r\n  [damageTrends.HALFLEVEL]: halfLevel,\r\n  [damageTrends.BOMB]: mutagen,\r\n  [damageTrends.BOMBPLUS]: bombPlusSplash,\r\n  [damageTrends.RAGE]: rage,\r\n  [damageTrends.ANIMALRAGE]: animalrage,\r\n  [damageTrends.DRAGONRAGE]: dragonrage,\r\n  [damageTrends.GIANTRAGE]: giantrage,\r\n  [damageTrends.SPIRITRAGE]: spiritrage,\r\n  [damageTrends.PRECISE]: precise,\r\n  [damageTrends.ARCANECASCADE]: arcaneCascade,\r\n  [damageTrends.OVERDRIVES]: overdriveSuccess,\r\n  [damageTrends.OVERDRIVEC]: overdriveCritical,\r\n  [damageTrends.IMPLEMENT]: implementEmpower,\r\n  [damageTrends.CONSTRUCT]: constructDamage,\r\n  [damageTrends.NIMBLE]: nimbleDamage,\r\n  [damageTrends.SAVAGE]: savageDamage,\r\n};\r\n\r\nconst extremeAC: defaultValue = {\r\n  \"-1\": 18,\r\n  0: 19,\r\n  1: 19,\r\n  2: 21,\r\n  3: 22,\r\n  4: 24,\r\n  5: 25,\r\n  6: 27,\r\n  7: 28,\r\n  8: 30,\r\n  9: 31,\r\n  10: 33,\r\n  11: 34,\r\n  12: 36,\r\n  13: 37,\r\n  14: 39,\r\n  15: 40,\r\n  16: 42,\r\n  17: 43,\r\n  18: 45,\r\n  19: 46,\r\n  20: 48,\r\n  21: 49,\r\n  22: 51,\r\n  23: 52,\r\n  24: 54,\r\n};\r\nconst highAC = { ...extremeAC };\r\nfor (let level in highAC) highAC[level] -= 3;\r\n\r\nconst moderateAC = { ...extremeAC };\r\nfor (let level in moderateAC) moderateAC[level] -= 4;\r\n\r\nconst lowAC = { ...extremeAC };\r\nfor (let level in lowAC) lowAC[level] -= 6;\r\n\r\nexport const defaultACs = {\r\n  [ACTrends.EXTREME]: extremeAC,\r\n  [ACTrends.HIGH]: highAC,\r\n  [ACTrends.MODERATE]: moderateAC,\r\n  [ACTrends.LOW]: lowAC,\r\n};\r\n\r\nconst extremeSaves: defaultValue = {\r\n  \"-1\": 9,\r\n  0: 10,\r\n  1: 11,\r\n  2: 12,\r\n  3: 14,\r\n  4: 15,\r\n  5: 17,\r\n  6: 18,\r\n  7: 20,\r\n  8: 21,\r\n  9: 23,\r\n  10: 24,\r\n  11: 26,\r\n  12: 27,\r\n  13: 29,\r\n  14: 30,\r\n  15: 32,\r\n  16: 33,\r\n  17: 35,\r\n  18: 36,\r\n  19: 38,\r\n  20: 39,\r\n  21: 41,\r\n  22: 43,\r\n  23: 44,\r\n  24: 46,\r\n};\r\nconst highSaves: defaultValue = {\r\n  \"-1\": 8,\r\n  0: 9,\r\n  1: 10,\r\n  2: 11,\r\n  3: 12,\r\n  4: 14,\r\n  5: 15,\r\n  6: 17,\r\n  7: 18,\r\n  8: 19,\r\n  9: 21,\r\n  10: 22,\r\n  11: 24,\r\n  12: 25,\r\n  13: 26,\r\n  14: 28,\r\n  15: 29,\r\n  16: 30,\r\n  17: 32,\r\n  18: 33,\r\n  19: 35,\r\n  20: 36,\r\n  21: 38,\r\n  22: 39,\r\n  23: 40,\r\n  24: 42,\r\n};\r\nconst moderateSaves: defaultValue = {\r\n  \"-1\": 5,\r\n  0: 6,\r\n  1: 7,\r\n  2: 8,\r\n  3: 9,\r\n  4: 11,\r\n  5: 12,\r\n  6: 14,\r\n  7: 15,\r\n  8: 16,\r\n  9: 18,\r\n  10: 19,\r\n  11: 21,\r\n  12: 22,\r\n  13: 23,\r\n  14: 25,\r\n  15: 26,\r\n  16: 28,\r\n  17: 29,\r\n  18: 30,\r\n  19: 32,\r\n  20: 33,\r\n  21: 35,\r\n  22: 36,\r\n  23: 37,\r\n  24: 38,\r\n};\r\nconst lowSaves: defaultValue = {\r\n  \"-1\": 2,\r\n  0: 3,\r\n  1: 4,\r\n  2: 5,\r\n  3: 6,\r\n  4: 8,\r\n  5: 9,\r\n  6: 11,\r\n  7: 12,\r\n  8: 13,\r\n  9: 15,\r\n  10: 16,\r\n  11: 18,\r\n  12: 19,\r\n  13: 20,\r\n  14: 22,\r\n  15: 23,\r\n  16: 25,\r\n  17: 26,\r\n  18: 27,\r\n  19: 29,\r\n  20: 30,\r\n  21: 32,\r\n  22: 33,\r\n  23: 34,\r\n  24: 36,\r\n};\r\nconst terribleSaves: defaultValue = {\r\n  \"-1\": 0,\r\n  0: 1,\r\n  1: 2,\r\n  2: 3,\r\n  3: 4,\r\n  4: 6,\r\n  5: 7,\r\n  6: 8,\r\n  7: 10,\r\n  8: 11,\r\n  9: 12,\r\n  10: 14,\r\n  11: 15,\r\n  12: 16,\r\n  13: 18,\r\n  14: 19,\r\n  15: 20,\r\n  16: 22,\r\n  17: 23,\r\n  18: 24,\r\n  19: 26,\r\n  20: 27,\r\n  21: 28,\r\n  22: 30,\r\n  23: 31,\r\n  24: 32,\r\n};\r\nexport const defaultSaves = {\r\n  [SaveTrends.EXTREME]: extremeSaves,\r\n  [SaveTrends.HIGH]: highSaves,\r\n  [SaveTrends.MODERATE]: moderateSaves,\r\n  [SaveTrends.LOW]: lowSaves,\r\n  [SaveTrends.TERRIBLE]: terribleSaves,\r\n};\r\nexport const standardDC: defaultValue = {\r\n  \"-1\": 12,\r\n  0: 14,\r\n  1: 15,\r\n  2: 16,\r\n  3: 18,\r\n  4: 19,\r\n  5: 20,\r\n  6: 22,\r\n  7: 23,\r\n  8: 24,\r\n  9: 26,\r\n  10: 27,\r\n  11: 28,\r\n  12: 30,\r\n  13: 31,\r\n  14: 32,\r\n  15: 34,\r\n  16: 35,\r\n  17: 36,\r\n  18: 38,\r\n  19: 39,\r\n  20: 40,\r\n  21: 42,\r\n  22: 44,\r\n  23: 46,\r\n  24: 48,\r\n  25: 50,\r\n} as const;\r\n","export const graphTypes = {\r\n  DISTRIBUTION: \"Damage Distribution\",\r\n  PMDEFENSE: \"+/- AC/Save Bonus\",\r\n  PMRES: \"+/- Resistance/Weakness\",\r\n} as const;\r\nexport type GraphType = typeof graphTypes[keyof typeof graphTypes];\r\n\r\nexport const importStates = {\r\n  Importing: \"Importing\",\r\n  Successful: \"Successful\",\r\n  Failure: \"Failure\",\r\n  MessageSeen: \"Message Seen\",\r\n} as const;\r\nexport type ImportStates = typeof importStates[keyof typeof importStates];\r\n\r\nexport const ACTrends = {\r\n  LOW: \"Low\",\r\n  MODERATE: \"Moderate\",\r\n  HIGH: \"High\",\r\n  EXTREME: \"Extreme\",\r\n} as const;\r\nexport type ACTrend = typeof ACTrends[keyof typeof ACTrends];\r\n\r\nexport const SaveTrends = {\r\n  TERRIBLE: \"Terrible\",\r\n  LOW: \"Low\",\r\n  MODERATE: \"Moderate\",\r\n  HIGH: \"High\",\r\n  EXTREME: \"Extreme\",\r\n} as const;\r\nexport type SaveTrend = typeof SaveTrends[keyof typeof SaveTrends];\r\n\r\nexport const conditions = {\r\n  ALWAYS: \"Always\",\r\n  CRIT: \"On Crit\",\r\n  SUCC: \"On Success\",\r\n  FAIL: \"On Failure\",\r\n  CRIF: \"On Crit Fail\",\r\n  AT_LEAST_SUCC: \"Success or better\",\r\n  AT_LEAST_FAIL: \"Failure or better\",\r\n  FAIL_WORSE: \"Failure or worse\",\r\n  SUCC_WORSE: \"Success or worse\",\r\n} as const;\r\nexport type Condition = typeof conditions[keyof typeof conditions];\r\n\r\nexport const rollTypes = {\r\n  NORMAL: \"Normal\",\r\n  ADVANTAGE: \"Advantage\",\r\n  DISADVANTAGE: \"Disadvantage\",\r\n} as const;\r\nexport type RollType = typeof rollTypes[keyof typeof rollTypes];\r\n\r\nexport const activityTypes = {\r\n  STRIKE: \"Strike\",\r\n  SAVE: \"Save\",\r\n  SKILL: \"Skill Check\",\r\n  SPELLATTACK: \"Spell Attack\",\r\n} as const;\r\nexport type ActivityType = typeof activityTypes[keyof typeof activityTypes];\r\n\r\nexport const profTrends = {\r\n  UNTRAINED: \"Untrained\",\r\n  TRAINED: \"Trained Proficiency\",\r\n  FIGHTERWEAPON: \"Fighter Weapon (1, 5, 13)\",\r\n  MARTIALWEAPON: \"Martial Weapon (5, 13)\",\r\n  CASTERWEAPON: \"Caster Weapon (11)\",\r\n  ALCHWEAPON: \"Alchemist Weapon (7)\",\r\n  CASTERSPELL: \"Caster Spell (7, 15, 19)\",\r\n  CLASSDC1: \"Class/Spell (9, 17)\",\r\n  CLASSDC2: \"Class/Spell (11, 19)\",\r\n  MCSPELL: \"MC Spell (12, 18)\",\r\n  MAXSKILL: \"Max skill (3, 7, 15)\",\r\n  ANIMALCOMPANION: \"Animal/Construct Companion (14)\",\r\n  SAVAGEACATHLETICS: \"Construct/Savage AC Atheletics (8, 14)\",\r\n} as const;\r\nexport type ProfTrend = typeof profTrends[keyof typeof profTrends];\r\n\r\nexport const statTrends = {\r\n  AS10: \"10\",\r\n  AS18a: \"18 to 24 apex(17)\",\r\n  AS16a: \"16 to 22 apex(17)\",\r\n  AS16pp: \"16 to 20\",\r\n  AS16p: \"16 to 18\",\r\n  AS14pp: \"14 to 20\",\r\n  AS14p: \"14 to 18\",\r\n  AS12p: \"12 to 18\",\r\n  AS10p: \"10 to 18\",\r\n  NIMBLEAC: \"Dex 16 Nimble AC\",\r\n  SAVAGEAC: \"Str 16 Construct/Savage AC\",\r\n} as const;\r\nexport type StatTrend = typeof statTrends[keyof typeof statTrends];\r\n\r\nexport const itemTrends = {\r\n  NONE: \"None\",\r\n  WEAPON: \"Weapon (2, 10, 16)\",\r\n  SKILL: \"Skill (3, 9, 17)\",\r\n  BOMB: \"Bomb (3, 11, 17)\",\r\n  MUTAGEN: \"Mutagen (1, 3, 11, 17)\",\r\n} as const;\r\nexport type ItemTrend = typeof itemTrends[keyof typeof itemTrends];\r\n\r\nexport const MAPs = {\r\n  N1: \"0 (0x-5)\",\r\n  N2: \"-5 (1x-5)\",\r\n  N3: \"-10 (2x-5)\",\r\n  A1: \"0 (0x-4)\",\r\n  A2: \"-4 (1x-4)\",\r\n  A3: \"-8 (2x-4)\",\r\n  R1: \"0 (0x-3)\",\r\n  R2: \"-3 (1x-3)\",\r\n  R3: \"-6 (2x-3)\",\r\n  RA1: \"0 (0x-2)\",\r\n  RA2: \"-2 (1x-2)\",\r\n  RA3: \"-4 (2x-2)\",\r\n  RAA1: \"0 (0x-1)\",\r\n  RAA2: \"-1 (1x-1)\",\r\n  RAA3: \"-2 (2x-1)\",\r\n} as const;\r\nexport type MAP = typeof MAPs[keyof typeof MAPs];\r\n\r\nexport const nextMAPs = {\r\n  \"0 (0x-5)\": \"-5 (1x-5)\",\r\n  \"-5 (1x-5)\": \"-10 (2x-5)\",\r\n  \"-10 (2x-5)\": \"-10 (2x-5)\",\r\n  \"0 (0x-4)\": \"-4 (1x-4)\",\r\n  \"-4 (1x-4)\": \"-8 (2x-4)\",\r\n  \"-8 (2x-4)\": \"-8 (2x-4)\",\r\n  \"0 (0x-3)\": \"-3 (1x-3)\",\r\n  \"-3 (1x-3)\": \"-6 (2x-3)\",\r\n  \"-6 (2x-3)\": \"-6 (2x-3)\",\r\n  \"0 (0x-2)\": \"-2 (1x-2)\",\r\n  \"-2 (1x-2)\": \"-4 (2x-2)\",\r\n  \"-4 (2x-2)\": \"-4 (2x-2)\",\r\n  \"0 (0x-1)\": \"-1 (1x-1)\",\r\n  \"-1 (1x-1)\": \"-2 (2x-1)\",\r\n  \"-2 (2x-1)\": \"-2 (2x-1)\",\r\n} as const;\r\n\r\nexport const defenses = {\r\n  AC: \"AC\",\r\n  FORT: \"Fort\",\r\n  REF: \"Ref\",\r\n  WILL: \"Will\",\r\n  PER: \"Perception\",\r\n  selfDC: \"Self Standard DC\",\r\n  targetDC: \"Target Standard DC\",\r\n} as const;\r\nexport type Defense = typeof defenses[keyof typeof defenses];\r\n\r\nexport const dCond = {\r\n  STRIKE: \"x1 hit, x2 crit\",\r\n  BASIC: \"Basic save\",\r\n  ALWAYS: \"Always\",\r\n  CRIT: \"On Crit\",\r\n  SUCC: \"On Success\",\r\n  FAIL: \"On Failure\",\r\n  CRIF: \"On Crit Fail\",\r\n  AT_LEAST_SUCC: \"Success or better\",\r\n  AT_LEAST_FAIL: \"Failure or better\",\r\n  FAIL_WORSE: \"Failure or worse\",\r\n  SUCC_WORSE: \"Success or worse\",\r\n} as const;\r\nexport type DamageCond = typeof dCond[keyof typeof dCond];\r\n\r\nexport const dieTrends = {\r\n  NONE: \"None\",\r\n  WEAPON: \"Weapon (1, 4, 12, 19)\",\r\n  SPELLLEVEL1: \"1 x Spell Level\",\r\n  SPELLLEVEL2: \"2 x Spell Level\",\r\n  LEVEL: \"Level\",\r\n  HALFLEVEL: \"1/2 Level\",\r\n  RUNE: \"Runes (8, 15)\",\r\n  RUNE2: \"Runes (8, 10, 16)\",\r\n  DEADLY: \"Deadly (1, 12, 19)\",\r\n  BOMB: \"Bomb (1, 3, 11, 17)\",\r\n  SNEAK: \"Sneak Attack (1, 5, 11, 17)\",\r\n  STRATEGIC: \"Strategic Strike (1, 5, 9, 13, 17)\",\r\n  PRECISE: \"Precise Strike (1, 1, 5, 9, 13, 17)\",\r\n  PRECISIONEDGE: \"Precision Edge 1(1, 11, 19)\",\r\n  PRECISIONEDGE2: \"Precision Edge 2(17, 19)\",\r\n  PRECISIONEDGE3: \"Precision Edge 3(19)\",\r\n  KISTRIKE: \"Ki Strike (1, 9, 17)\",\r\n  ANIMALCOMPANION: \"Animal/Construct Companion (1, 4, 14)\",\r\n} as const;\r\nexport type DieTrend = typeof dieTrends[keyof typeof dieTrends];\r\n\r\nexport const damageTrends = {\r\n  NONE: \"None\",\r\n  FIGHTERWEAPONSPEC: \"Fighter Weapon Specialization\",\r\n  MARTIALWEAPONSPEC: \"Martial Weapon Specializaton\",\r\n  CASTERWEAPONSPEC: \"Caster Weapon Specializaton\",\r\n  ...statTrends,\r\n  WEAPON: \"Weapon (1, 4, 12, 19)\",\r\n  SPELLLEVEL1: \"1 x Spell Level\",\r\n  LEVEL: \"Level\",\r\n  HALFLEVEL: \"1/2 Level\",\r\n  BOMB: \"Bomb Splash (1, 3, 11, 17)\",\r\n  BOMBPLUS: \"Max Int Calculated/Expanded Splash\",\r\n  RAGE: \"Rage\",\r\n  ANIMALRAGE: \"Animal Rage\",\r\n  DRAGONRAGE: \"Dragon Rage\",\r\n  GIANTRAGE: \"Giant Rage\",\r\n  SPIRITRAGE: \"Spirit Rage\",\r\n  PRECISE: \"Precise Strike (1, 1, 5, 9, 13, 17)\",\r\n  ARCANECASCADE: \"Arcane Cascade\",\r\n  OVERDRIVES: \"Overdrive Success\",\r\n  OVERDRIVEC: \"Overdrive Critical\",\r\n  IMPLEMENT: \"Implement's Empowerment\",\r\n  CONSTRUCT: \"Construct Companion Damage\",\r\n  NIMBLE: \"Str 14 Nimble AC Damage\",\r\n  SAVAGE: \"Str 16 Savage AC Damage\",\r\n} as const;\r\nexport type DamageTrend = typeof damageTrends[keyof typeof damageTrends];\r\n\r\nexport const damageTypes = {\r\n  NONE: \"None\",\r\n  B: \"bludgeoning\",\r\n  P: \"piercing\",\r\n  S: \"slashing\",\r\n  BLEED: \"bleed\",\r\n  FIRE: \"fire\",\r\n  COLD: \"Cold\",\r\n  MENTAL: \"Mental\",\r\n  FORCE: \"force\",\r\n  PRECISION: \"precision\",\r\n} as const;\r\nexport type DamageType = typeof damageTypes[keyof typeof damageTypes];\r\n\r\nexport const materials = {\r\n  NONE: \"none\",\r\n  COLD_IRON: \"cold iron\",\r\n  SILVER: \"silver\",\r\n  ADAMANTINE: \"adamantine\",\r\n} as const;\r\nexport type Material = typeof materials[keyof typeof materials];\r\n\r\nexport const effectStateTypes = {\r\n  FLATFOOT: \"Flatfooted\",\r\n  PRONE: \"Prone\",\r\n  GRAPPLED: \"Grappled\",\r\n  RESTRAINED: \"Restrained\",\r\n} as const;\r\nexport type EffectStateType =\r\n  typeof effectStateTypes[keyof typeof effectStateTypes];\r\nexport const effectValueTypes = {\r\n  FRIGHTENED: \"Frightened\",\r\n  CLUMSY: \"Clumsy\",\r\n} as const;\r\nexport type EffectValueType =\r\n  typeof effectValueTypes[keyof typeof effectValueTypes];\r\nexport const effectTypes = {\r\n  ...effectStateTypes,\r\n  ...effectValueTypes,\r\n} as const;\r\nexport type EffectType = EffectStateType | EffectValueType;\r\n\r\nexport const whenConditions = {\r\n  Always: \"Always\",\r\n\r\n  ...effectStateTypes,\r\n  ...effectValueTypes,\r\n} as const;\r\nexport type WhenConditions = typeof whenConditions[keyof typeof whenConditions];\r\n\r\nexport type TargetState = {\r\n  [key in EffectValueType]: number;\r\n} & {\r\n  [key in EffectStateType]: boolean;\r\n};\r\n\r\nexport const diceNums = {\r\n  0: 0,\r\n  1: 1,\r\n  2: 2,\r\n  3: 3,\r\n  4: 4,\r\n  5: 5,\r\n  6: 6,\r\n  7: 7,\r\n  8: 8,\r\n  9: 9,\r\n  10: 10,\r\n  11: 11,\r\n  12: 12,\r\n  13: 13,\r\n  14: 14,\r\n  15: 15,\r\n  16: 16,\r\n  17: 17,\r\n  18: 18,\r\n  19: 19,\r\n  20: 20,\r\n} as const;\r\n\r\nexport const diceSizes = {\r\n  \"4\": 4,\r\n  \"6\": 6,\r\n  \"8\": 8,\r\n  \"10\": 10,\r\n  \"12\": 12,\r\n} as const;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport type { RootState, AppDispatch } from \"./store\";\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import {\r\n  createEntityAdapter,\r\n  createSlice,\r\n  EntityId,\r\n  PayloadAction,\r\n} from \"@reduxjs/toolkit\";\r\nimport { damageTypes, materials } from \"../Model/types\";\r\nimport { RootState } from \"../App/store\";\r\n\r\nexport interface Weakness {\r\n  id: number;\r\n  type:\r\n    | typeof damageTypes[keyof typeof damageTypes]\r\n    | typeof materials[keyof typeof materials];\r\n  value: number;\r\n}\r\nexport const weaknessAdapter = createEntityAdapter<Weakness>();\r\n\r\nlet weakness = 0;\r\n\r\nexport const weaknessesSlice = createSlice({\r\n  name: \"weaknesses\",\r\n  initialState: weaknessAdapter.getInitialState(),\r\n  reducers: {\r\n    weaknessAdded: weaknessAdapter.addOne,\r\n    weaknessUpdated: weaknessAdapter.updateOne,\r\n    weaknessCreated: {\r\n      reducer(state, action: PayloadAction<Weakness>) {\r\n        const { id, type, value } = action.payload;\r\n        weaknessAdapter.addOne(state, { id, type, value });\r\n      },\r\n      prepare({ parentId, type, value }) {\r\n        const id = ++weakness;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n            type,\r\n            value,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    weaknessRemoved(\r\n      state,\r\n      action: PayloadAction<{ parentId: EntityId; id: EntityId }>\r\n    ) {\r\n      weaknessAdapter.removeOne(state, action.payload.id);\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  weaknessRemoved,\r\n  weaknessCreated,\r\n  weaknessAdded,\r\n  weaknessUpdated,\r\n} = weaknessesSlice.actions;\r\n\r\nexport default weaknessesSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selectweaknessById,\r\n  selectIds: selectweaknessIds,\r\n  selectEntities: selectweaknessEntities,\r\n  selectAll: selectAllweaknesses,\r\n  selectTotal: selectTotalweaknesses,\r\n} = weaknessAdapter.getSelectors((state: RootState) => state.weaknesses);\r\n","import { MenuItem } from \"@mui/material\";\r\nimport React from \"react\";\r\n\r\nimport {\r\n  activityTypes,\r\n  profTrends,\r\n  conditions,\r\n  damageTrends,\r\n  damageTypes,\r\n  dCond,\r\n  defenses,\r\n  diceSizes,\r\n  dieTrends,\r\n  effectStateTypes,\r\n  effectValueTypes,\r\n  MAPs,\r\n  materials,\r\n  rollTypes,\r\n  statTrends,\r\n  itemTrends,\r\n  ACTrends,\r\n  SaveTrends,\r\n  graphTypes,\r\n} from \"./types\";\r\n\r\nexport const makeOptions = (options: object): JSX.Element[] => {\r\n  let element: keyof typeof options;\r\n  const optionElements: JSX.Element[] = [];\r\n  // @ts-ignore\r\n  for (element in options) {\r\n    optionElements.push(\r\n      <MenuItem key={element} value={options[element]}>\r\n        {options[element]}\r\n      </MenuItem>\r\n    );\r\n  }\r\n  return optionElements;\r\n};\r\n\r\nexport const arrayOptions = (options: string[]): JSX.Element[] => {\r\n  const optionElements: JSX.Element[] = [];\r\n  for (let element of options) {\r\n    optionElements.push(\r\n      <MenuItem key={element} value={element}>\r\n        {element}\r\n      </MenuItem>\r\n    );\r\n  }\r\n  return optionElements;\r\n};\r\n\r\nlet gt: keyof typeof graphTypes;\r\nexport const graphTypeOptions: JSX.Element[] = [];\r\nfor (gt in graphTypes) {\r\n  graphTypeOptions.push(<option key={gt}>{graphTypes[gt]}</option>);\r\n}\r\n\r\nexport const levelOptions: JSX.Element[] = [];\r\nfor (let level = 1; level <= 20; level++) {\r\n  levelOptions.push(\r\n    <MenuItem key={level} value={level}>\r\n      {level}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nlet c: keyof typeof conditions;\r\nexport const conditionOptions: JSX.Element[] = [];\r\nfor (c in conditions) {\r\n  conditionOptions.push(\r\n    <MenuItem key={c} value={conditions[c]}>\r\n      {conditions[c]}\r\n    </MenuItem>\r\n  );\r\n}\r\nlet rt: keyof typeof rollTypes;\r\nexport const rollOptions: JSX.Element[] = [];\r\nfor (rt in rollTypes) {\r\n  rollOptions.push(\r\n    <MenuItem key={rt} value={rollTypes[rt]}>\r\n      {rollTypes[rt]}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nlet at: keyof typeof activityTypes;\r\nexport const activityTypeOptions: JSX.Element[] = [];\r\nfor (at in activityTypes) {\r\n  activityTypeOptions.push(\r\n    <MenuItem key={at} value={activityTypes[at]}>\r\n      {activityTypes[at]}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nlet pt: keyof typeof profTrends;\r\nexport const profTrendOptions: JSX.Element[] = [];\r\nfor (pt in profTrends) {\r\n  profTrendOptions.push(\r\n    <MenuItem key={pt} value={profTrends[pt]}>\r\n      {profTrends[pt]}\r\n    </MenuItem>\r\n  );\r\n}\r\nlet st: keyof typeof statTrends;\r\nexport const statTrendOptions: JSX.Element[] = [];\r\nfor (st in statTrends) {\r\n  statTrendOptions.push(\r\n    <MenuItem key={st} value={statTrends[st]}>\r\n      {statTrends[st]}\r\n    </MenuItem>\r\n  );\r\n}\r\nlet it: keyof typeof itemTrends;\r\nexport const itemBTrendOptions: JSX.Element[] = [];\r\nfor (it in itemTrends) {\r\n  itemBTrendOptions.push(\r\n    <MenuItem key={it} value={itemTrends[it]}>\r\n      {itemTrends[it]}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nlet m: keyof typeof MAPs;\r\nexport const MAPOptions: JSX.Element[] = [];\r\nfor (m in MAPs) {\r\n  MAPOptions.push(\r\n    <MenuItem key={m} value={MAPs[m]}>\r\n      {MAPs[m]}\r\n    </MenuItem>\r\n  );\r\n}\r\nlet d: keyof typeof defenses;\r\nexport const defenseOptions: JSX.Element[] = [];\r\nfor (d in defenses) {\r\n  defenseOptions.push(\r\n    <MenuItem key={d} value={defenses[d]}>\r\n      {defenses[d]}\r\n    </MenuItem>\r\n  );\r\n}\r\nlet act: keyof typeof ACTrends;\r\nexport const ACOptions: JSX.Element[] = [];\r\nfor (act in ACTrends) {\r\n  ACOptions.push(\r\n    <MenuItem key={act} value={ACTrends[act]}>\r\n      {ACTrends[act]}\r\n    </MenuItem>\r\n  );\r\n}\r\nlet svt: keyof typeof SaveTrends;\r\nexport const SaveOptions: JSX.Element[] = [];\r\nfor (svt in SaveTrends) {\r\n  SaveOptions.push(\r\n    <MenuItem key={svt} value={SaveTrends[svt]}>\r\n      {SaveTrends[svt]}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nlet dc: keyof typeof dCond;\r\nexport const damageConditionOptions: JSX.Element[] = [];\r\nfor (dc in dCond) {\r\n  damageConditionOptions.push(\r\n    <MenuItem key={dc} value={dCond[dc]}>\r\n      {dCond[dc]}\r\n    </MenuItem>\r\n  );\r\n}\r\nlet dieT: keyof typeof dieTrends;\r\nexport const dieTrendOptions: JSX.Element[] = [];\r\nfor (dieT in dieTrends) {\r\n  dieTrendOptions.push(\r\n    <MenuItem key={dieT} value={dieTrends[dieT]}>\r\n      {dieTrends[dieT]}\r\n    </MenuItem>\r\n  );\r\n}\r\nlet ds: keyof typeof diceSizes;\r\nexport const diceSizeOptions: JSX.Element[] = [];\r\nfor (ds in diceSizes) {\r\n  diceSizeOptions.push(\r\n    <MenuItem key={ds} value={ds}>\r\n      {\"d\" + ds}\r\n    </MenuItem>\r\n  );\r\n}\r\nlet damT: keyof typeof damageTrends;\r\nexport const damageTrendOptions: JSX.Element[] = [];\r\nfor (damT in damageTrends) {\r\n  damageTrendOptions.push(\r\n    <MenuItem key={damT} value={damageTrends[damT]}>\r\n      {damageTrends[damT]}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nlet dt: keyof typeof damageTypes;\r\nexport const damageTypeOptions: JSX.Element[] = [];\r\nfor (dt in damageTypes) {\r\n  damageTypeOptions.push(\r\n    <MenuItem key={dt} value={damageTypes[dt]}>\r\n      {damageTypes[dt]}\r\n    </MenuItem>\r\n  );\r\n}\r\nlet mat: keyof typeof materials;\r\nexport const materialOptions: JSX.Element[] = [];\r\nfor (mat in materials) {\r\n  materialOptions.push(\r\n    <MenuItem key={mat} value={materials[mat]}>\r\n      {materials[mat]}\r\n    </MenuItem>\r\n  );\r\n}\r\nexport const weaknessOptions: JSX.Element[] = [];\r\nfor (dt in damageTypes) {\r\n  weaknessOptions.push(\r\n    <MenuItem key={dt} value={damageTypes[dt]}>\r\n      {damageTypes[dt]}\r\n    </MenuItem>\r\n  );\r\n}\r\nfor (mat in materials) {\r\n  if (materials[mat] === materials.NONE) continue;\r\n  weaknessOptions.push(\r\n    <MenuItem key={mat} value={materials[mat]}>\r\n      {materials[mat]}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nexport const multiplierOptions: JSX.Element[] = [];\r\nfor (let m of [0.5, 1, 2]) {\r\n  multiplierOptions.push(\r\n    <MenuItem key={m} value={m}>\r\n      {m}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nexport const effectTypeOptions: JSX.Element[] = [];\r\nlet est: keyof typeof effectStateTypes;\r\nfor (est in effectStateTypes) {\r\n  effectTypeOptions.push(\r\n    <MenuItem key={est} value={effectStateTypes[est]}>\r\n      {effectStateTypes[est]}\r\n    </MenuItem>\r\n  );\r\n}\r\nlet evt: keyof typeof effectValueTypes;\r\nfor (evt in effectValueTypes) {\r\n  effectTypeOptions.push(\r\n    <MenuItem key={evt} value={effectValueTypes[evt]}>\r\n      {effectValueTypes[evt]}\r\n    </MenuItem>\r\n  );\r\n}\r\n","import {\r\n  createEntityAdapter,\r\n  createSlice,\r\n  EntityId,\r\n  EntityState,\r\n} from \"@reduxjs/toolkit\";\r\nimport { ACTrends, GraphType, SaveTrends } from \"../Model/types\";\r\nimport type { RootState } from \"../App/store\";\r\n// import { defaultACs, defaultSaves } from \"../defaults\";\r\n// import { defenses } from \"../types\";\r\nimport { weaknessCreated, weaknessRemoved } from \"./weaknessSlice\";\r\nimport { defaultACs, defaultSaves } from \"../Model/defaults\";\r\n\r\n// interface limited<Type> { typeof Type[keyof typeof Type] }\r\n// Define a type for the slice state\r\n// interface TargetState {  }\r\nconst id = 0;\r\nexport interface Target {\r\n  id: EntityId;\r\n  name: string;\r\n  levelDiff: number;\r\n  persistentMultiplier: number;\r\n  ACTrend: typeof ACTrends[keyof typeof ACTrends];\r\n  FortTrend: typeof SaveTrends[keyof typeof SaveTrends];\r\n  RefTrend: typeof SaveTrends[keyof typeof SaveTrends];\r\n  WillTrend: typeof SaveTrends[keyof typeof SaveTrends];\r\n  PerTrend: typeof SaveTrends[keyof typeof SaveTrends];\r\n  flatfooted: boolean;\r\n  percentSelectedRoutine: boolean;\r\n  weaknesses: number[];\r\n\r\n  graphType: GraphType;\r\n  routineLevel: number;\r\n  targetLevel: number;\r\n  overrideAC: number;\r\n  overrideFort: number;\r\n  overrideRef: number;\r\n  overrideWill: number;\r\n  overridePer: number;\r\n}\r\n\r\nexport const targetAdapter = createEntityAdapter<Target>();\r\n\r\nexport const targetsSlice = createSlice({\r\n  name: \"targets\",\r\n  initialState: targetAdapter.getInitialState(),\r\n  reducers: {\r\n    targetAdded: targetAdapter.addOne,\r\n    targetUpdated: (state, action) => {\r\n      targetAdapter.updateOne(state, action.payload);\r\n      if (\"targetLevel\" in action.payload.changes) {\r\n        updateTargetLevel(state, action.payload.changes.targetLevel);\r\n      }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(weaknessCreated, (state, action) => {\r\n        const { parentId: id, id: weaknessId } = action.payload;\r\n        state.entities[id]!.weaknesses.push(weaknessId);\r\n        // targetAdded.updateOne(state, { id, changes: { weaknesses: [...weaknesses, weaknessId] }});\r\n      })\r\n      .addCase(weaknessRemoved, (state, action) => {\r\n        const { parentId: id, id: weaknessId } = action.payload;\r\n        state.entities[id]!.weaknesses = state.entities[id]!.weaknesses.filter(\r\n          (wid) => wid !== weaknessId\r\n        );\r\n      });\r\n  },\r\n});\r\n\r\nexport const { targetAdded, targetUpdated } = targetsSlice.actions;\r\n\r\nexport default targetsSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selecttargetById,\r\n  selectIds: selecttargetIds,\r\n  selectEntities: selecttargetEntities,\r\n  selectAll: selectAlltargets,\r\n  selectTotal: selectTotaltargets,\r\n} = targetAdapter.getSelectors((state: RootState) => state.targets);\r\n\r\nexport const selectRoutineLevel = (state: RootState) =>\r\n  state.targets.entities[0]!.routineLevel;\r\n\r\nconst updateTargetLevel = (state: EntityState<Target>, targetLevel: number) => {\r\n  state.entities[id]!.overrideAC =\r\n    defaultACs[state.entities[id]!.ACTrend][targetLevel];\r\n  state.entities[id]!.overrideFort =\r\n    defaultSaves[state.entities[id]!.FortTrend][targetLevel];\r\n  state.entities[id]!.overrideRef =\r\n    defaultSaves[state.entities[id]!.RefTrend][targetLevel];\r\n  state.entities[id]!.overrideWill =\r\n    defaultSaves[state.entities[id]!.WillTrend][targetLevel];\r\n  state.entities[id]!.overridePer =\r\n    defaultSaves[state.entities[id]!.PerTrend][targetLevel];\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../App/hooks\";\r\nimport { selecttargetById, targetUpdated } from \"./targetSlice\";\r\nimport { RootState } from \"../App/store\";\r\nimport { ACOptions, SaveOptions } from \"../Model/options\";\r\nimport {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  Grid,\r\n  TextField,\r\n  Slider,\r\n  Typography,\r\n} from \"@mui/material\";\r\n\r\nfunction ByLevelInput() {\r\n  const id = 0;\r\n  const {\r\n    name,\r\n    levelDiff,\r\n    ACTrend,\r\n    FortTrend,\r\n    RefTrend,\r\n    WillTrend,\r\n    PerTrend,\r\n    // weaknesses,\r\n  } = useAppSelector((state: RootState) => selecttargetById(state, id)!);\r\n\r\n  const [tempName, setTempName] = useState(name);\r\n\r\n  // const [tempLevelDiff, setTempLevelDiff] = useState(levelDiff.toString());\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    // <Paper sx={{ my: 1, p: 1 }}>\r\n    <Grid container spacing={{ xs: 1, sm: 2 }} sx={{ my: 0, py: 1 }}>\r\n      <Grid item xs={12} sm={6} md={12} lg={6}>\r\n        <TextField\r\n          fullWidth\r\n          label=\"Graph Name\"\r\n          placeholder=\"Enter the name that will display on the graph\"\r\n          value={tempName}\r\n          onChange={(e) => {\r\n            setTempName(e.target.value);\r\n          }}\r\n          onBlur={() =>\r\n            dispatch(targetUpdated({ id, changes: { name: tempName } }))\r\n          }\r\n        />\r\n      </Grid>\r\n      <Grid item xs={6} sm={3} md={6} lg={3}>\r\n        <Typography>Level Diff: {levelDiff}</Typography>\r\n        <Slider\r\n          // aria-label=\"Always visible\"\r\n          value={levelDiff}\r\n          // getAriaValueText={(v) => `${v}`}\r\n          // valueLabelDisplay=\"on\"\r\n          step={1}\r\n          min={-5}\r\n          max={5}\r\n          marks\r\n          onChange={(e, nv) => {\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: {\r\n                  levelDiff: nv,\r\n                },\r\n              })\r\n            );\r\n          }}\r\n        />\r\n      </Grid>\r\n\r\n      <Grid item xs={6} sm={3} md={6} lg={3}>\r\n        <FormControl fullWidth>\r\n          <InputLabel id=\"AC-input\">AC</InputLabel>\r\n          <Select\r\n            labelId=\"AC-input\"\r\n            id=\"AC\"\r\n            value={ACTrend}\r\n            label=\"AC\"\r\n            onChange={(e) =>\r\n              dispatch(\r\n                targetUpdated({ id, changes: { ACTrend: e.target.value } })\r\n              )\r\n            }\r\n          >\r\n            {ACOptions}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item xs={3} sm={3} md={3} lg={3}>\r\n        <FormControl fullWidth>\r\n          <InputLabel id=\"Fort-input\">Fort</InputLabel>\r\n          <Select\r\n            labelId=\"Fort-input\"\r\n            id=\"Fort\"\r\n            value={FortTrend}\r\n            label=\"Fort\"\r\n            onChange={(e) =>\r\n              dispatch(\r\n                targetUpdated({ id, changes: { FortTrend: e.target.value } })\r\n              )\r\n            }\r\n          >\r\n            {SaveOptions}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item xs={3} sm={3} md={3} lg={3}>\r\n        <FormControl fullWidth>\r\n          <InputLabel id=\"Ref-input\">Reflex</InputLabel>\r\n          <Select\r\n            labelId=\"Ref-input\"\r\n            id=\"Ref\"\r\n            value={RefTrend}\r\n            label=\"Reflex\"\r\n            onChange={(e) =>\r\n              dispatch(\r\n                targetUpdated({ id, changes: { RefTrend: e.target.value } })\r\n              )\r\n            }\r\n          >\r\n            {SaveOptions}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item xs={3} sm={3} md={3} lg={3}>\r\n        <FormControl fullWidth>\r\n          <InputLabel id=\"Will-input\">Will</InputLabel>\r\n          <Select\r\n            labelId=\"Will-input\"\r\n            id=\"Will\"\r\n            value={WillTrend}\r\n            label=\"Will\"\r\n            onChange={(e) =>\r\n              dispatch(\r\n                targetUpdated({ id, changes: { WillTrend: e.target.value } })\r\n              )\r\n            }\r\n          >\r\n            {SaveOptions}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item xs={3} sm={3} md={3} lg={3}>\r\n        <FormControl fullWidth>\r\n          <InputLabel id=\"Per-input\">Perception</InputLabel>\r\n          <Select\r\n            labelId=\"Per-input\"\r\n            id=\"Per\"\r\n            value={PerTrend}\r\n            label=\"Perception\"\r\n            onChange={(e) =>\r\n              dispatch(\r\n                targetUpdated({ id, changes: { PerTrend: e.target.value } })\r\n              )\r\n            }\r\n          >\r\n            {SaveOptions}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n\r\n      {/* \r\n        <div className=\"box flexbox\">\r\n          {\" Resistance/Weakness: \"}\r\n          {weaknesses.map((weaknessId) => (\r\n            <WeaknessInput parentId={id} id={weaknessId} key={weaknessId} />\r\n          ))}\r\n          <AddWeakness parentId={id} />\r\n        </div> */}\r\n    </Grid>\r\n    // </Paper>\r\n  );\r\n}\r\n\r\n// const TargetInfo = ({ id }) => {\r\n//   const { overrideDefault, type, value, weaknesses } = useSelector((state) =>\r\n//     selecttargetInfoById(state, id)\r\n//   );\r\n//   const dispatch = useDispatch();\r\n\r\n//   const defenseOptions = [];\r\n//   for (let d in defenses) {\r\n//     defenseOptions.push(<option key={d}>{defenses[d]}</option>);\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"box\">\r\n//       {\"Override Target: \"}\r\n//       <input\r\n//         type=\"checkbox\"\r\n//         checked={overrideDefault}\r\n//         onChange={(e) =>\r\n//           dispatch(\r\n//             targetInfoUpdated({\r\n//               id,\r\n//               changes: { overrideDefault: e.target.checked },\r\n//             })\r\n//           )\r\n//         }\r\n//       />\r\n\r\n// {/* <Weaknesses parentId={id} weaknessIds={weaknesses} /> */}\r\n\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const Weaknesses = ({ parentId, weaknessIds }) => {\r\n//   return (\r\n//     <span>\r\n//       {weaknessIds.map((weaknessId) => (\r\n//         <Weakness id={weaknessId} key={weaknessId} />\r\n//       ))}\r\n//       <AddWeakness id={parentId} />\r\n//     </span>\r\n//   );\r\n// };\r\n\r\n// const WeaknessInput = ({\r\n//   id,\r\n//   parentId,\r\n// }: {\r\n//   id: EntityId;\r\n//   parentId: EntityId;\r\n// }) => {\r\n//   // needs to have parent id to remove weakness\r\n//   const { type, value } = useSelector((state: RootState) =>\r\n//     selectweaknessById(state, id)\r\n//   ) as Weakness;\r\n//   const dispatch = useDispatch();\r\n\r\n//   const updateOrRemoveWeakness = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n//     if (e?.target?.value === damageTypes.NONE) {\r\n//       // remove this weakness\r\n//       dispatch(weaknessRemoved({ id, parentId }));\r\n//     } else {\r\n//       dispatch(\r\n//         weaknessUpdated({\r\n//           id,\r\n//           changes: { type: e.target.value as Weakness[\"type\"] },\r\n//         })\r\n//       );\r\n//     }\r\n//   };\r\n//   const updateWeaknessValue = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n//     if (!isNaN(parseInt(e.target.value))) {\r\n//       dispatch(\r\n//         weaknessUpdated({ id, changes: { value: parseInt(e.target.value) } })\r\n//       );\r\n//     }\r\n//   };\r\n//   return (\r\n//     <span className=\"input\">\r\n//       <WeaknessSelect value={type} onChange={updateOrRemoveWeakness} />\r\n//       <input type=\"number\" value={value} onChange={updateWeaknessValue} />\r\n//     </span>\r\n//   );\r\n// };\r\n\r\n// let weaknessId = 0;\r\n\r\n// const AddWeakness = ({ parentId }: { parentId: EntityId }) => {\r\n//   const dispatch = useDispatch();\r\n//   let [weaknessValue, setWeaknessValue] = useState(0);\r\n\r\n//   // add a Weakness to TargetInfo id\r\n//   const addWeakness = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n//     if (e.target.value !== damageTypes.NONE) {\r\n//       // need to create a new weakness\r\n//       weaknessId++;\r\n//       dispatch(\r\n//         weaknessCreated({\r\n//           id: weaknessId,\r\n//           type: e.target.value,\r\n//           value: weaknessValue,\r\n//           parentId: parentId,\r\n//         })\r\n//       );\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <span className=\"input\">\r\n//       <WeaknessSelect value={damageTypes.NONE} onChange={addWeakness} />\r\n//       <input\r\n//         type=\"number\"\r\n//         value={weaknessValue}\r\n//         onChange={(e) => setWeaknessValue(parseInt(e.target.value))}\r\n//       />\r\n//     </span>\r\n//   );\r\n// };\r\n\r\n// const WeaknessSelect = ({\r\n//   value,\r\n//   onChange,\r\n// }: {\r\n//   value: Weakness[\"type\"];\r\n//   onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\r\n// }) => {\r\n//   return (\r\n//     <span>\r\n//       <select value={value} onChange={(e) => onChange(e)}>\r\n//         {weaknessOptions}\r\n//       </select>\r\n//     </span>\r\n//   );\r\n// };\r\n\r\nexport { ByLevelInput };\r\n","import { statTrendValues, valuesFromBonusLevels } from \"./defaults\";\r\nimport {\r\n  conditions,\r\n  DamageTrend,\r\n  damageTrends,\r\n  damageTypes,\r\n  dCond,\r\n  defenses,\r\n  diceSizes,\r\n  DieTrend,\r\n  dieTrends,\r\n  effectTypes,\r\n  ItemTrend,\r\n  MAPs,\r\n  ProfTrend,\r\n  profTrends,\r\n  StatTrend,\r\n  whenConditions,\r\n} from \"./types\";\r\n\r\nexport type StrikeInfo = {\r\n  runes: DieTrend;\r\n  cClass: string;\r\n  classOption: string;\r\n  activity: string;\r\n  cantrip: string;\r\n  attackScore: StatTrend;\r\n  damageScore: StatTrend;\r\n  cantripScore: StatTrend;\r\n  dieSize: number;\r\n  numPrevStrikes: number;\r\n  numStrikes: number;\r\n  traits: {\r\n    [k: string]: boolean;\r\n  };\r\n  deadlySize: number;\r\n  fatalSize: number;\r\n  critSpec: boolean;\r\n  critSpecLevel: number;\r\n  critSpecType: string;\r\n};\r\nexport type SkillInfo = {\r\n  proficiency: ProfTrend;\r\n  abilityScore: StatTrend;\r\n  itemBonus: ItemTrend;\r\n  skillActivity: typeof skillActivities[number];\r\n};\r\nexport type CantripInfo = {\r\n  proficiency: ProfTrend;\r\n  abilityScore: StatTrend;\r\n  cantrip: typeof cantrips[number];\r\n};\r\nexport type SpellInfo = {\r\n  proficiency: ProfTrend;\r\n  abilityScore: StatTrend;\r\n  spell: typeof spells[number];\r\n};\r\n\r\nexport const activityTypes = {\r\n  Strike: \"Strike\",\r\n  Skill: \"Skill Action\",\r\n  Cantrip: \"Cantrip\",\r\n  Spell: \"Spell\",\r\n} as const;\r\n\r\nexport const runeTrends = [dieTrends.NONE, dieTrends.RUNE, dieTrends.RUNE2];\r\n\r\nexport const classes = [\r\n  \"Alchemist\",\r\n  \"Barbarian\",\r\n  \"Bard\",\r\n  \"Champion\",\r\n  \"Cleric\",\r\n  \"Druid\",\r\n  \"Fighter\",\r\n  \"Gunslinger\",\r\n  \"Inventor\",\r\n  \"Investigator\",\r\n  \"Magus\",\r\n  \"Monk\",\r\n  \"Oracle\",\r\n  \"Ranger\",\r\n  \"Rogue\",\r\n  \"Sorcerer\",\r\n  \"Summoner\",\r\n  \"Swashbuckler\",\r\n  \"Witch\",\r\n  \"Wizard\",\r\n] as const;\r\n\r\n// const classOptions: JSX.Element[] = [];\r\n// let cls: keyof typeof classes;\r\n// for (cls in classes) {\r\n//   classOptions.push(\r\n//     <MenuItem key={cls} value={classes[cls]}>\r\n//       {classes[cls]}\r\n//     </MenuItem>\r\n//   );\r\n// }\r\nconst noOptions = [] as const;\r\nconst barbarianOptions = [\r\n  \"Normal\",\r\n  \"animal rage\",\r\n  \"dragon rage\",\r\n  \"rage\",\r\n  \"giant rage\",\r\n  \"spirit rage\",\r\n] as const;\r\nconst clericOptions = [\"Cloistered\", \"Warpriest\"] as const;\r\nconst rangerOptions = [\"Normal\", \"Flurry Edge\"] as const;\r\nconst inventorOptions = [\r\n  \"Normal\",\r\n  \"Overdrive Success\",\r\n  \"Overdrive Critical\",\r\n] as const;\r\nconst investigatorOptions = [\"Normal\", \"Strategic Strike\"] as const;\r\nconst rogueOptions = [\"Normal\", \"Sneak Attack\"] as const;\r\nconst swashbucklerOptions = [\r\n  \"Normal\",\r\n  \"Precise Strike\",\r\n  \"Precise Finisher\",\r\n] as const;\r\nconst magusOptions = [\"Normal\", \"Arcane Cascade\"] as const;\r\n\r\nexport const strikeActivities = [\r\n  \"Strike\",\r\n  \"Power Attack\",\r\n  \"Ki Strike\",\r\n] as const;\r\ntype ClassOptions = { [key in typeof classes[number]]: readonly string[] };\r\nexport const classOptions: ClassOptions = {\r\n  Alchemist: noOptions,\r\n  Barbarian: barbarianOptions,\r\n  Bard: noOptions,\r\n  Champion: noOptions,\r\n  Cleric: clericOptions,\r\n  Druid: noOptions,\r\n  Fighter: noOptions,\r\n  Gunslinger: noOptions,\r\n  Inventor: inventorOptions,\r\n  Investigator: investigatorOptions,\r\n  Magus: magusOptions,\r\n  Monk: noOptions,\r\n  Oracle: noOptions,\r\n  Ranger: rangerOptions,\r\n  Rogue: rogueOptions,\r\n  Sorcerer: noOptions,\r\n  Summoner: noOptions,\r\n  Swashbuckler: swashbucklerOptions,\r\n  Witch: noOptions,\r\n  Wizard: noOptions,\r\n} as const;\r\n\r\nexport const weaponTraits = [\r\n  \"agile\",\r\n  \"deadly\",\r\n  \"fatal\",\r\n  \"forceful\",\r\n  \"ranged\",\r\n  \"propulsive\",\r\n] as const;\r\n\r\nexport const critSpecs = [\r\n  \"Sword\",\r\n  \"Hammer\",\r\n  \"Spear\",\r\n  \"Other\",\r\n  \"Pick\",\r\n  \"Knife\",\r\n] as const;\r\n\r\nexport const skillProfTrends = [profTrends.TRAINED, profTrends.MAXSKILL];\r\nexport const spellProfTrends = [\r\n  profTrends.TRAINED,\r\n  profTrends.CASTERSPELL,\r\n  profTrends.MCSPELL,\r\n  profTrends.CLASSDC1,\r\n  profTrends.CLASSDC2,\r\n];\r\n\r\nexport const skillActivities = [\"Trip\", \"Grapple\", \"Demoralize\"] as const;\r\nexport const cantrips = [\r\n  \"Electric Arc\",\r\n  \"Daze\",\r\n  \"Gouging Claw\",\r\n  \"Produce Flame\",\r\n  \"Ray of Frost\",\r\n  \"Telekinetic Projectile\",\r\n] as const;\r\nexport const spells = [\"Fear\", \"Fireball\"] as const;\r\n\r\nexport const classWeaponProf = (className: string, classOption: string) => {\r\n  if ([\"Fighter\", \"Gunslinger\"].includes(className))\r\n    return profTrends.FIGHTERWEAPON;\r\n  if (\r\n    [\r\n      \"Bard\",\r\n      \"Druid\",\r\n      \"Oracle\",\r\n      \"Sorcerer\",\r\n      \"Summoner\",\r\n      \"Witch\",\r\n      \"Wizard\",\r\n    ].includes(className)\r\n  )\r\n    return profTrends.CASTERWEAPON;\r\n  if ([\"Alchemist\"].includes(className)) return profTrends.ALCHWEAPON;\r\n  if (className === \"Cleric\") {\r\n    if (classOption === \"Warpriest\") return profTrends.ALCHWEAPON;\r\n    return profTrends.CASTERWEAPON;\r\n  }\r\n  return profTrends.MARTIALWEAPON;\r\n};\r\n\r\nexport const classWeaponMAP = (strikeInfo: StrikeInfo) => {\r\n  if (\r\n    strikeInfo.cClass === \"Ranger\" &&\r\n    strikeInfo.classOption === \"Flurry Edge\"\r\n  ) {\r\n    if (strikeInfo.traits[\"agile\"]) return MAPs.RA1;\r\n    else return MAPs.R1;\r\n  } else {\r\n    if (strikeInfo.traits[\"agile\"]) return MAPs.A1;\r\n    else return MAPs.N1;\r\n  }\r\n};\r\n\r\nexport const classAdjustments = (\r\n  strikeInfo: StrikeInfo,\r\n  strikeNumber: number\r\n) => {\r\n  const adjustments: { [key: number]: number } = {};\r\n  let currentValue = 0;\r\n  for (let i = 1; i <= 20; i++) {\r\n    currentValue = 0;\r\n\r\n    if (strikeInfo.cClass === \"Ranger (Flurry)\" && i >= 17)\r\n      currentValue += Math.min(strikeNumber, 2);\r\n\r\n    if (strikeInfo.activity === \"Ki Strike\") currentValue += 1;\r\n\r\n    adjustments[i] = currentValue;\r\n  }\r\n  return adjustments;\r\n};\r\n\r\nexport const activityWeaponDiceAdjustments = (strikeInfo: StrikeInfo) => {\r\n  const adjustments: { [key: number]: number } = {};\r\n  let currentValue = 0;\r\n  for (let i = 1; i <= 20; i++) {\r\n    if (strikeInfo.activity === \"Power Attack\" && i === 1) currentValue = 1;\r\n    if (strikeInfo.activity === \"Power Attack\" && i === 10) currentValue = 2;\r\n    if (strikeInfo.activity === \"Power Attack\" && i === 18) currentValue = 3;\r\n\r\n    adjustments[i] = currentValue;\r\n  }\r\n  return adjustments;\r\n};\r\n\r\nexport const hasClassDamageDice = (strikeInfo: StrikeInfo) => {\r\n  if (\r\n    strikeInfo.cClass === \"Rogue\" &&\r\n    strikeInfo.classOption === \"Sneak Attack\"\r\n  ) {\r\n    return true;\r\n  }\r\n  if (\r\n    strikeInfo.cClass === \"Investigator\" &&\r\n    strikeInfo.classOption === \"Strategic Strike\"\r\n  ) {\r\n    return true;\r\n  }\r\n  if (\r\n    strikeInfo.cClass === \"Swashbuckler\" &&\r\n    strikeInfo.classOption === \"Precise Finisher\"\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const classDamageDice = (strikeInfo: StrikeInfo) => {\r\n  if (\r\n    strikeInfo.cClass === \"Rogue\" &&\r\n    strikeInfo.classOption === \"Sneak Attack\"\r\n  ) {\r\n    return {\r\n      dieTrend: dieTrends.SNEAK,\r\n      diceSize: diceSizes[6],\r\n      damageType: damageTypes.PRECISION,\r\n      damageWhen: [whenConditions.FLATFOOT],\r\n    };\r\n  }\r\n  if (\r\n    strikeInfo.cClass === \"Investigator\" &&\r\n    strikeInfo.classOption === \"Strategic Strike\"\r\n  ) {\r\n    return {\r\n      dieTrend: dieTrends.STRATEGIC,\r\n      diceSize: diceSizes[6],\r\n      damageType: damageTypes.PRECISION,\r\n      damageWhen: [whenConditions.Always],\r\n    };\r\n  }\r\n  if (\r\n    strikeInfo.cClass === \"Swashbuckler\" &&\r\n    strikeInfo.classOption === \"Precise Finisher\"\r\n  ) {\r\n    return {\r\n      dieTrend: dieTrends.PRECISE,\r\n      diceSize: diceSizes[6],\r\n      damageType: damageTypes.PRECISION,\r\n      damageWhen: [whenConditions.Always],\r\n    };\r\n  }\r\n  return {\r\n    dieTrend: dieTrends.NONE,\r\n    diceSize: diceSizes[6],\r\n    damageType: damageTypes.PRECISION,\r\n    damageWhen: [whenConditions.Always],\r\n  };\r\n};\r\n\r\nexport const hasActivityDamageDice = (strikeInfo: StrikeInfo) => {\r\n  if (strikeInfo.activity === \"Ki Strike\") {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const activityDamageDice = (strikeInfo: StrikeInfo) => {\r\n  if (strikeInfo.activity === \"Ki Strike\") {\r\n    return {\r\n      dieTrend: dieTrends.KISTRIKE,\r\n      diceSize: diceSizes[6],\r\n      damageType: damageTypes.FORCE,\r\n    };\r\n  }\r\n  return {\r\n    dieTrend: dieTrends.NONE,\r\n    diceSize: diceSizes[6],\r\n    damageType: damageTypes.NONE,\r\n  };\r\n};\r\n\r\nexport const classWeaponDamageTrends = (\r\n  strikeInfo: StrikeInfo,\r\n  strikeNumber: number\r\n) => {\r\n  const trends: DamageTrend[] = [];\r\n\r\n  if (!strikeInfo.traits[\"propulsive\"] && !strikeInfo.traits[\"ranged\"]) {\r\n    trends.push(strikeInfo.damageScore);\r\n  }\r\n\r\n  if ([\"Fighter\", \"Gunslinger\"].includes(strikeInfo.cClass)) {\r\n    trends.push(damageTrends.FIGHTERWEAPONSPEC);\r\n  } else if (\r\n    [\r\n      \"Bard\",\r\n      \"Cleric\",\r\n      \"Druid\",\r\n      \"Oracle\",\r\n      \"Sorcerer\",\r\n      \"Summoner\",\r\n      \"Witch\",\r\n      \"Wizard\",\r\n    ].includes(strikeInfo.cClass)\r\n  ) {\r\n    trends.push(damageTrends.CASTERWEAPONSPEC);\r\n  } else if ([\"Alchemist\"].includes(strikeInfo.cClass)) {\r\n    trends.push(damageTrends.CASTERWEAPONSPEC);\r\n  } else {\r\n    trends.push(damageTrends.MARTIALWEAPONSPEC);\r\n  }\r\n\r\n  if (strikeInfo.traits[\"forceful\"]) {\r\n    if (strikeNumber === 1) {\r\n      trends.push(damageTrends.WEAPON);\r\n    } else if (strikeNumber >= 2) {\r\n      trends.push(damageTrends.WEAPON);\r\n      trends.push(damageTrends.WEAPON);\r\n    }\r\n  }\r\n\r\n  if (strikeInfo.cClass === \"Barbarian\") {\r\n    switch (strikeInfo.classOption) {\r\n      case \"animal rage\":\r\n        trends.push(damageTrends.ANIMALRAGE);\r\n        break;\r\n      case \"dragon rage\":\r\n        trends.push(damageTrends.DRAGONRAGE);\r\n        break;\r\n      case \"rage\":\r\n        trends.push(damageTrends.RAGE);\r\n        break;\r\n      case \"giant rage\":\r\n        trends.push(damageTrends.GIANTRAGE);\r\n        break;\r\n      case \"spirit rage\":\r\n        trends.push(damageTrends.SPIRITRAGE);\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n  if (strikeInfo.cClass === \"Magus\") {\r\n    switch (strikeInfo.classOption) {\r\n      case \"Arcane Cascade\":\r\n        trends.push(damageTrends.ARCANECASCADE);\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n\r\n  if (\r\n    strikeInfo.cClass === \"Swashbuckler\" &&\r\n    strikeInfo.classOption === \"Precise Strike\"\r\n  ) {\r\n    trends.push(damageTrends.PRECISE);\r\n  }\r\n  // if (strikeInfo.cClass === \"Inventor\") {\r\n  //   switch (strikeInfo.classOption) {\r\n  //     case \"Overdrive Success\":\r\n  //       trends.push(damageTrends.OVERDRIVES);\r\n  //       break;\r\n  //     case \"Overdrive Critical\":\r\n  //       trends.push(damageTrends.OVERDRIVEC);\r\n  //       break;\r\n  //     default:\r\n  //   }\r\n  // }\r\n\r\n  return trends;\r\n};\r\n\r\nexport const classDamageAdjustments = (strikeInfo: StrikeInfo) => {\r\n  const adjustments: { [key: number]: number } = {};\r\n  let currentValue = 0;\r\n  for (let i = 1; i <= 20; i++) {\r\n    currentValue = 0;\r\n\r\n    if (strikeInfo.traits[\"propulsive\"]) {\r\n      currentValue += Math.floor(\r\n        statTrendValues[strikeInfo.damageScore][i] / 2\r\n      );\r\n    }\r\n\r\n    if (strikeInfo.cClass === \"Gunslinger\") currentValue += 1;\r\n\r\n    if (strikeInfo.cClass === \"Inventor\") {\r\n      let bonus = 0;\r\n      if (i >= 3) bonus = 1;\r\n      if (i >= 7) bonus = 2;\r\n      if (i >= 15) bonus = 3;\r\n      switch (strikeInfo.classOption) {\r\n        case \"Overdrive Success\":\r\n          currentValue +=\r\n            Math.floor(statTrendValues[strikeInfo.cantripScore][i] / 2) + bonus;\r\n          break;\r\n        case \"Overdrive Critical\":\r\n          currentValue += statTrendValues[strikeInfo.cantripScore][i] + bonus;\r\n          break;\r\n        default:\r\n      }\r\n    }\r\n\r\n    adjustments[i] = currentValue;\r\n  }\r\n  return adjustments;\r\n};\r\n\r\nexport const hasDeadly = (strikeInfo: StrikeInfo) => {\r\n  return strikeInfo.traits[\"deadly\"];\r\n};\r\nexport const hasFatal = (strikeInfo: StrikeInfo) => {\r\n  return strikeInfo.traits[\"fatal\"];\r\n};\r\nexport const hasPickCritSpec = (strikeInfo: StrikeInfo) => {\r\n  return strikeInfo.critSpec && strikeInfo.critSpecType === \"Pick\";\r\n};\r\nexport const hasKnifeCritSpec = (strikeInfo: StrikeInfo) => {\r\n  return strikeInfo.critSpec && strikeInfo.critSpecType === \"Knife\";\r\n};\r\nexport const hasCritSpecEffect = (strikeInfo: StrikeInfo) => {\r\n  return (\r\n    hasSwordCritSpec(strikeInfo) ||\r\n    hasHammerCritSpec(strikeInfo) ||\r\n    hasSpearCritSpec(strikeInfo)\r\n  );\r\n};\r\nexport const hasSwordCritSpec = (strikeInfo: StrikeInfo) => {\r\n  return strikeInfo.critSpec && strikeInfo.critSpecType === \"Sword\";\r\n};\r\nexport const hasHammerCritSpec = (strikeInfo: StrikeInfo) => {\r\n  return strikeInfo.critSpec && strikeInfo.critSpecType === \"Hammer\";\r\n};\r\nexport const hasSpearCritSpec = (strikeInfo: StrikeInfo) => {\r\n  return strikeInfo.critSpec && strikeInfo.critSpecType === \"Hammer\";\r\n};\r\nexport const critSpecDice = (strikeInfo: StrikeInfo) => {\r\n  const adjustments: { [key: number]: number } = {};\r\n  let currentValue = 0;\r\n  for (let i = 1; i <= 20; i++) {\r\n    if (i >= strikeInfo.critSpecLevel) {\r\n      if (strikeInfo.critSpec && strikeInfo.critSpecType === \"Knife\") {\r\n        if (i >= 1) currentValue = 1;\r\n      }\r\n    }\r\n    adjustments[i] = currentValue;\r\n  }\r\n  return adjustments;\r\n};\r\nexport const critSpecDamage = (strikeInfo: StrikeInfo) => {\r\n  const adjustments: { [key: number]: number } = {};\r\n  let currentValue = 0;\r\n  for (let i = 1; i <= 20; i++) {\r\n    if (i >= strikeInfo.critSpecLevel) {\r\n      if (strikeInfo.critSpec && strikeInfo.critSpecType === \"Pick\") {\r\n        if (i >= 1) currentValue = 2;\r\n        if (i >= 4) currentValue = 4;\r\n        if (i >= 12) currentValue = 6;\r\n        if (i >= 19) currentValue = 8;\r\n      }\r\n      if (strikeInfo.critSpec && strikeInfo.critSpecType === \"Knife\") {\r\n        if (i >= 2) currentValue = 1;\r\n        if (i >= 10) currentValue = 2;\r\n        if (i >= 16) currentValue = 3;\r\n      }\r\n    }\r\n    adjustments[i] = currentValue;\r\n  }\r\n  return adjustments;\r\n};\r\n\r\nexport const getSkillTarget = (skillInfo: SkillInfo) => {\r\n  switch (skillInfo.skillActivity) {\r\n    case \"Trip\":\r\n      return defenses.REF;\r\n    case \"Grapple\":\r\n      return defenses.FORT;\r\n    case \"Demoralize\":\r\n      return defenses.WILL;\r\n    default:\r\n      return defenses.selfDC;\r\n  }\r\n};\r\n\r\nexport const getSkillEffects = (skillInfo: SkillInfo) => {\r\n  switch (skillInfo.skillActivity) {\r\n    case \"Trip\":\r\n      return [\r\n        {\r\n          effectCondition: conditions.AT_LEAST_SUCC,\r\n          effectType: effectTypes.PRONE,\r\n          effectValue: 0,\r\n        },\r\n      ];\r\n    case \"Grapple\":\r\n      return [\r\n        {\r\n          effectCondition: conditions.SUCC,\r\n          effectType: effectTypes.GRAPPLED,\r\n          effectValue: 0,\r\n        },\r\n        {\r\n          effectCondition: conditions.CRIT,\r\n          effectType: effectTypes.RESTRAINED,\r\n          effectValue: 0,\r\n        },\r\n      ];\r\n    case \"Demoralize\":\r\n      return [\r\n        {\r\n          effectCondition: conditions.SUCC,\r\n          effectType: effectTypes.FRIGHTENED,\r\n          effectValue: 1,\r\n        },\r\n        {\r\n          effectCondition: conditions.CRIT,\r\n          effectType: effectTypes.FRIGHTENED,\r\n          effectValue: 2,\r\n        },\r\n      ];\r\n    default:\r\n      return [];\r\n  }\r\n};\r\nexport const hasSkillDamage = (skillInfo: SkillInfo) => {\r\n  if (skillInfo.skillActivity === \"Trip\") {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const getCantripTarget = (cantripInfo: CantripInfo) => {\r\n  switch (cantripInfo.cantrip) {\r\n    case \"Electric Arc\":\r\n      return { type: \"Save\", targetType: defenses.REF } as const;\r\n    case \"Daze\":\r\n      return { type: \"Save\", targetType: defenses.WILL } as const;\r\n\r\n    default:\r\n      return { targetType: defenses.AC };\r\n  }\r\n};\r\nexport const getCantripDamage = (cantripInfo: CantripInfo) => {\r\n  switch (cantripInfo.cantrip) {\r\n    case \"Electric Arc\":\r\n      return { damageCondition: dCond.BASIC, diceSize: diceSizes[4] };\r\n    case \"Daze\":\r\n      return {\r\n        damageCondition: dCond.BASIC,\r\n        dieTrend: dieTrends.NONE,\r\n        dieAdjustments: valuesFromBonusLevels([5, 9, 13, 17]),\r\n      };\r\n    case \"Telekinetic Projectile\":\r\n      return {};\r\n    default:\r\n      return { diceSize: diceSizes[4] };\r\n  }\r\n};\r\nexport const getSpellTarget = (spellInfo: SpellInfo) => {\r\n  switch (spellInfo.spell) {\r\n    case \"Fireball\":\r\n      return { targetType: defenses.REF };\r\n    case \"Fear\":\r\n      return { targetType: defenses.WILL };\r\n\r\n    default:\r\n      return { targetType: defenses.REF };\r\n  }\r\n};\r\n","import { EntityState } from \"@reduxjs/toolkit\";\r\nimport {\r\n  activityTypes,\r\n  conditions,\r\n  profTrends,\r\n  defenses,\r\n  MAPs,\r\n  rollTypes,\r\n  statTrends,\r\n  itemTrends,\r\n  effectTypes,\r\n  damageTrends,\r\n  Condition,\r\n  RollType,\r\n  ActivityType,\r\n  ProfTrend,\r\n  StatTrend,\r\n  ItemTrend,\r\n  MAP,\r\n  Defense,\r\n  DamageCond,\r\n  DieTrend,\r\n  DamageTrend,\r\n  DamageType,\r\n  Material,\r\n  EffectType,\r\n  damageTypes,\r\n  dCond,\r\n  dieTrends,\r\n  materials,\r\n  WhenConditions,\r\n  ImportStates,\r\n  whenConditions,\r\n} from \"../../Model/types\";\r\n\r\nexport type State = {\r\n  selectedRoutine: number | undefined;\r\n  selectedActivityPath: number | undefined;\r\n  parentRoutine: number | undefined;\r\n  parentActivity: number | undefined;\r\n  routines: EntityState<Routine>;\r\n  activityPaths: EntityState<ActivityPath>;\r\n  damages: EntityState<Damage>;\r\n  effects: EntityState<Effect>;\r\n\r\n  importRoutine: ImportStates;\r\n};\r\n\r\nexport interface Adjustment {\r\n  [key: number]: number;\r\n}\r\nexport interface Routine {\r\n  id: number;\r\n  name: string;\r\n  display: boolean;\r\n  apIds: number[];\r\n  levelDiff: number;\r\n  description: string;\r\n  startLevel: number;\r\n  endLevel: number;\r\n}\r\nexport interface RoutineObject {\r\n  id: number;\r\n  name: string;\r\n  display: boolean;\r\n  apIds: ActivityPathObject[];\r\n  levelDiff: number;\r\n  description: string;\r\n  startLevel: number;\r\n  endLevel: number;\r\n}\r\nexport interface ActivityPath {\r\n  id: number;\r\n  parentId?: number;\r\n  routineId?: number;\r\n  condition: Condition;\r\n\r\n  rollType: RollType;\r\n  type: ActivityType;\r\n  profTrend: ProfTrend;\r\n  statTrend: StatTrend;\r\n  itemTrend: ItemTrend;\r\n  bonusAdjustments: Adjustment;\r\n  MAP: MAP;\r\n\r\n  targetType: Defense;\r\n  damages: number[];\r\n  effects: number[];\r\n  apIds: number[];\r\n}\r\nexport interface ActivityPathObject {\r\n  id: number;\r\n  parentId?: number;\r\n  routineId?: number;\r\n  condition: Condition;\r\n\r\n  rollType: RollType;\r\n  type: ActivityType;\r\n  profTrend: ProfTrend;\r\n  statTrend: StatTrend;\r\n  itemTrend: ItemTrend;\r\n  bonusAdjustments: Adjustment;\r\n  MAP: MAP;\r\n\r\n  targetType: Defense;\r\n  damages: Damage[];\r\n  effects: Effect[];\r\n  apIds: ActivityPathObject[];\r\n}\r\nexport interface Damage {\r\n  id: number;\r\n  damageCondition: DamageCond;\r\n\r\n  dieTrend: DieTrend;\r\n  dieAdjustments: Adjustment;\r\n  diceSize: number;\r\n  fatal: boolean;\r\n  fatalDie: number;\r\n  damageTrend: DamageTrend[];\r\n  damageAdjustments: Adjustment;\r\n\r\n  damageType: DamageType;\r\n  material: Material;\r\n  persistent: boolean;\r\n  multiplier: number;\r\n  damageWhen: WhenConditions[];\r\n}\r\nexport interface Effect {\r\n  id: number;\r\n  effectCondition: Condition;\r\n  effectType: EffectType;\r\n  effectValue: number | undefined;\r\n  startLevel: number;\r\n  endLevel: number;\r\n  damageWhen: WhenConditions[];\r\n}\r\n\r\nexport function isRoutineObject(routine: any): routine is RoutineObject {\r\n  return (\r\n    typeof routine === \"object\" &&\r\n    typeof routine.name === \"string\" &&\r\n    typeof routine.display === \"boolean\" &&\r\n    typeof routine.levelDiff === \"number\" &&\r\n    typeof routine.description === \"string\" &&\r\n    isActivityPaths(routine.apIds) &&\r\n    typeof routine.startLevel === \"number\" &&\r\n    typeof routine.endLevel === \"number\"\r\n  );\r\n}\r\nfunction isActivityPaths(apIds: unknown): apIds is ActivityPathObject[] {\r\n  if (Array.isArray(apIds)) {\r\n    for (let apId of apIds) {\r\n      if (\r\n        !(\r\n          Object.values(conditions).includes(apId.condition) &&\r\n          Object.values(rollTypes).includes(apId.rollType) &&\r\n          Object.values(activityTypes).includes(apId.type) &&\r\n          Object.values(profTrends).includes(apId.profTrend) &&\r\n          Object.values(statTrends).includes(apId.statTrend) &&\r\n          Object.values(itemTrends).includes(apId.itemTrend) &&\r\n          isAdjustment(apId.bonusAdjustments) &&\r\n          Object.values(MAPs).includes(apId.MAP) &&\r\n          Object.values(defenses).includes(apId.targetType) &&\r\n          isActivityPaths(apId.apIds) &&\r\n          isDamages(apId.damages) &&\r\n          isEffects(apId.effects)\r\n        )\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  // console.log(\"6\");\r\n  return false;\r\n}\r\nfunction isAdjustment(adjustments: any): adjustments is Adjustment {\r\n  if (typeof adjustments !== \"object\") {\r\n    return false;\r\n  }\r\n  for (let i = 1; i <= 20; i++) {\r\n    if (typeof adjustments[i] !== \"number\") {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\nfunction isDamages(damages: unknown): damages is Damage[] {\r\n  if (Array.isArray(damages)) {\r\n    for (let damage of damages) {\r\n      if (Array.isArray(damage.damageTrend)) {\r\n        for (let dt of damage.damageTrend) {\r\n          if (!Object.values(damageTrends).includes(dt)) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (Array.isArray(damage.damageWhen)) {\r\n        for (let dw of damage.damageWhen) {\r\n          if (!Object.values(whenConditions).includes(dw)) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (\r\n        !(\r\n          Object.values(dCond).includes(damage.damageCondition) &&\r\n          Object.values(dieTrends).includes(damage.dieTrend) &&\r\n          isAdjustment(damage.dieAdjustments) &&\r\n          typeof damage.diceSize === \"number\" &&\r\n          typeof damage.fatal === \"boolean\" &&\r\n          typeof damage.fatalDie === \"number\" &&\r\n          isAdjustment(damage.damageAdjustments) &&\r\n          Object.values(damageTypes).includes(damage.damageType) &&\r\n          Object.values(materials).includes(damage.material) &&\r\n          typeof damage.persistent === \"boolean\" &&\r\n          [0.5, 1, 2].includes(damage.multiplier)\r\n        )\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\nfunction isEffects(effects: unknown): effects is Effect[] {\r\n  if (Array.isArray(effects)) {\r\n    for (let effect of effects) {\r\n      if (Array.isArray(effect.damageWhen)) {\r\n        for (let dw of effect.damageWhen) {\r\n          if (!Object.values(whenConditions).includes(dw)) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (\r\n        !(\r\n          Object.values(conditions).includes(effect.effectCondition) &&\r\n          Object.values(effectTypes).includes(effect.effectType) &&\r\n          typeof effect.startLevel === \"number\" &&\r\n          typeof effect.endLevel === \"number\"\r\n        )\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n","import {\r\n  createEntityAdapter,\r\n  createSlice,\r\n  EntityState,\r\n  PayloadAction,\r\n  Update,\r\n} from \"@reduxjs/toolkit\";\r\nimport { WritableDraft } from \"immer/dist/internal\";\r\nimport {\r\n  classWeaponMAP,\r\n  classWeaponProf,\r\n  classAdjustments,\r\n  StrikeInfo,\r\n  activityWeaponDiceAdjustments,\r\n  classWeaponDamageTrends,\r\n  hasDeadly,\r\n  hasFatal,\r\n  hasPickCritSpec,\r\n  critSpecDamage,\r\n  hasKnifeCritSpec,\r\n  critSpecDice,\r\n  classDamageAdjustments,\r\n  hasCritSpecEffect,\r\n  hasSwordCritSpec,\r\n  hasHammerCritSpec,\r\n  hasSpearCritSpec,\r\n  hasClassDamageDice,\r\n  classDamageDice,\r\n  hasActivityDamageDice,\r\n  activityDamageDice,\r\n  SkillInfo,\r\n  getSkillEffects,\r\n  hasSkillDamage,\r\n  getSkillTarget,\r\n  CantripInfo,\r\n  SpellInfo,\r\n  getCantripTarget,\r\n  getCantripDamage,\r\n  getSpellTarget,\r\n} from \"../../Model/newActivityInfo\";\r\nimport {\r\n  activityTypes,\r\n  conditions,\r\n  profTrends,\r\n  defenses,\r\n  MAPs,\r\n  nextMAPs,\r\n  rollTypes,\r\n  statTrends,\r\n  itemTrends,\r\n  effectTypes,\r\n  EffectType,\r\n  diceSizes,\r\n  damageTypes,\r\n  dCond,\r\n  dieTrends,\r\n  materials,\r\n  effectStateTypes,\r\n  effectValueTypes,\r\n  whenConditions,\r\n  importStates,\r\n  ActivityType,\r\n} from \"../../Model/types\";\r\nimport { RootState } from \"../../App/store\";\r\nimport {\r\n  ActivityPath,\r\n  ActivityPathObject,\r\n  Damage,\r\n  Effect,\r\n  isRoutineObject,\r\n  Routine,\r\n  RoutineObject,\r\n  State,\r\n} from \"./RoutineTypes\";\r\nimport { damageTrendValues } from \"../../Model/defaults\";\r\n\r\nexport const routinesAdapter = createEntityAdapter<Routine>();\r\nexport const activityPathAdapter = createEntityAdapter<ActivityPath>();\r\nexport const damageAdapter = createEntityAdapter<Damage>();\r\nexport const effectAdapter = createEntityAdapter<Effect>();\r\n\r\nlet routineId = 100;\r\nlet activityPathId = 1000;\r\nlet damageId = 1000;\r\nlet effectId = 1000;\r\n\r\nconst empty: { [key: number]: number } = {};\r\nconst one: { [key: number]: number } = {};\r\nfor (let i = 1; i <= 20; i++) {\r\n  empty[i] = 0;\r\n  one[i] = 1;\r\n}\r\n\r\nconst initialState: State = {\r\n  selectedRoutine: 0,\r\n  selectedActivityPath: undefined,\r\n  parentRoutine: 0,\r\n  parentActivity: undefined,\r\n  routines: routinesAdapter.getInitialState(),\r\n  activityPaths: activityPathAdapter.getInitialState(),\r\n  damages: damageAdapter.getInitialState(),\r\n  effects: effectAdapter.getInitialState(),\r\n  importRoutine: importStates.MessageSeen,\r\n};\r\n\r\nconst defaultActivity = {\r\n  type: activityTypes.STRIKE,\r\n  condition: conditions.ALWAYS,\r\n  rollType: rollTypes.NORMAL,\r\n  profTrend: profTrends.TRAINED,\r\n  statTrend: statTrends.AS10,\r\n  itemTrend: itemTrends.NONE,\r\n  bonusAdjustments: empty,\r\n  MAP: MAPs.N1,\r\n  targetType: defenses.AC,\r\n  damages: [],\r\n  effects: [],\r\n  apIds: [],\r\n};\r\nconst defaultStrikeParent = {\r\n  profTrend: profTrends.MARTIALWEAPON,\r\n  statTrend: statTrends.AS18a,\r\n  itemTrend: itemTrends.WEAPON,\r\n  damages: [0, 1],\r\n  effects: [0],\r\n};\r\nconst defaultSaveParent = {\r\n  type: activityTypes.SAVE,\r\n  profTrend: profTrends.CASTERSPELL,\r\n  statTrend: statTrends.AS18a,\r\n  targetType: defenses.REF,\r\n  damages: [2],\r\n  effects: [],\r\n};\r\nconst defaultDamage = {\r\n  damageCondition: dCond.STRIKE,\r\n  damageType: damageTypes.B,\r\n  material: materials.NONE,\r\n  persistent: false,\r\n  multiplier: 1,\r\n  damageWhen: [whenConditions.Always],\r\n\r\n  dieTrend: dieTrends.NONE,\r\n  dieAdjustments: empty,\r\n  diceSize: 6,\r\n  fatal: false,\r\n  fatalDie: 10,\r\n  damageTrend: [],\r\n  damageAdjustments: empty,\r\n};\r\nconst defaultEffect = {\r\n  effectCondition: conditions.ALWAYS,\r\n  effectType: effectTypes.FLATFOOT,\r\n  effectValue: 0,\r\n  startLevel: 1,\r\n  endLevel: 20,\r\n  damageWhen: [whenConditions.Always],\r\n};\r\n\r\nexport const routinesSlice = createSlice({\r\n  name: \"routines\",\r\n  initialState,\r\n  reducers: {\r\n    setRoutine: (state, action) => {\r\n      state.selectedRoutine = action.payload;\r\n      state.selectedActivityPath = undefined;\r\n      state.parentActivity = undefined;\r\n      state.parentRoutine = undefined;\r\n    },\r\n    setActivityPath: (state, action) => {\r\n      if (state.selectedActivityPath === action.payload) {\r\n        state.selectedActivityPath = undefined;\r\n      } else {\r\n        state.selectedActivityPath = action.payload;\r\n      }\r\n      state.parentActivity = undefined;\r\n      state.parentRoutine = undefined;\r\n    },\r\n\r\n    routineAdded: (state, action) => {\r\n      routinesAdapter.addOne(state.routines, action);\r\n    },\r\n    routineUpdated: (state, action: PayloadAction<Update<Routine>>) => {\r\n      routinesAdapter.updateOne(state.routines, action);\r\n    },\r\n    activityPathAdded: (state, action) => {\r\n      activityPathAdapter.addOne(state.activityPaths, action);\r\n    },\r\n    activityPathUpdated: (state, action) => {\r\n      activityPathAdapter.updateOne(state.activityPaths, action);\r\n    },\r\n    damageAdded: (state, action) => {\r\n      damageAdapter.addOne(state.damages, action);\r\n    },\r\n    damageUpdated: (state, action) => {\r\n      damageAdapter.updateOne(state.damages, action);\r\n    },\r\n    effectAdded: (state, action) => {\r\n      effectAdapter.addOne(state.effects, action);\r\n    },\r\n    effectUpdated: (state, action) => {\r\n      effectAdapter.updateOne(state.effects, action);\r\n    },\r\n\r\n    routineCreated: {\r\n      reducer: (\r\n        state,\r\n        action: PayloadAction<{ id: number; copy: boolean }>\r\n      ) => {\r\n        const { id, copy } = action.payload;\r\n        if (copy && state.selectedRoutine !== undefined) {\r\n          const routine = state.routines.entities[state.selectedRoutine]!;\r\n          const name = routine.name + \" Copy\";\r\n          const apIds = copyActivityPaths(state, routine.apIds, undefined, id);\r\n          routinesAdapter.addOne(state.routines, {\r\n            ...routine,\r\n            id,\r\n            name,\r\n            apIds,\r\n          });\r\n        } else {\r\n          routinesAdapter.addOne(state.routines, {\r\n            id,\r\n            name: \"New Routine\",\r\n            display: true,\r\n            apIds: [],\r\n            levelDiff: 0,\r\n            description: \"Enter a description here.\",\r\n            startLevel: 1,\r\n            endLevel: 20,\r\n          });\r\n        }\r\n        state.selectedRoutine = id;\r\n        state.selectedActivityPath = undefined;\r\n        state.parentActivity = undefined;\r\n        state.parentRoutine = undefined;\r\n      },\r\n      prepare: ({ copy = false }) => {\r\n        const id = ++routineId;\r\n        return { payload: { id, copy } };\r\n      },\r\n    },\r\n    routineRemoved: (state, action) => {\r\n      // recursively remove all children\r\n      const routineId = action.payload;\r\n      let childrenIds = state.routines.entities[routineId]!.apIds;\r\n      removeActivityPaths(state, childrenIds);\r\n\r\n      routinesAdapter.removeOne(state.routines, routineId);\r\n      if (routineId === state.selectedRoutine) {\r\n        state.selectedRoutine = undefined;\r\n        state.selectedActivityPath = undefined;\r\n        state.parentActivity = undefined;\r\n        state.parentRoutine = undefined;\r\n      }\r\n    },\r\n    setNewActivityParent: (\r\n      state,\r\n      action: PayloadAction<{\r\n        parentId?: number;\r\n        routineId?: number;\r\n      }>\r\n    ) => {\r\n      state.parentRoutine = action.payload.routineId;\r\n      state.parentActivity = action.payload.parentId;\r\n      state.selectedActivityPath = undefined;\r\n    },\r\n    emptyActivityPathCreated: {\r\n      reducer: (\r\n        state,\r\n        action: PayloadAction<{\r\n          id: number;\r\n          routineId: number;\r\n          activityType?: ActivityType;\r\n        }>\r\n      ) => {\r\n        const { id, routineId, activityType } = action.payload;\r\n        let ap = {\r\n          ...defaultActivity,\r\n          profTrend: profTrends.UNTRAINED,\r\n          id,\r\n          routineId,\r\n        } as ActivityPath;\r\n        if (activityType !== undefined) {\r\n          if (activityType === activityTypes.STRIKE) {\r\n            let damages = copyDamages(state, defaultStrikeParent.damages);\r\n            let effects = copyEffects(state, defaultStrikeParent.effects);\r\n            ap = {\r\n              ...defaultActivity,\r\n              ...defaultStrikeParent,\r\n              id,\r\n              routineId,\r\n              damages,\r\n              effects,\r\n            };\r\n          }\r\n          if (activityType === activityTypes.SAVE) {\r\n            let damages = copyDamages(state, defaultSaveParent.damages);\r\n            let effects = copyEffects(state, defaultSaveParent.effects);\r\n            ap = {\r\n              ...defaultActivity,\r\n              ...defaultSaveParent,\r\n              id,\r\n              routineId,\r\n              damages,\r\n              effects,\r\n            };\r\n          }\r\n        }\r\n\r\n        state.routines.entities[routineId]!.apIds.push(id);\r\n        activityPathAdapter.addOne(state.activityPaths, ap);\r\n        state.selectedActivityPath = id;\r\n        state.parentActivity = undefined;\r\n        state.parentRoutine = undefined;\r\n      },\r\n      prepare: ({\r\n        routineId,\r\n        activityType,\r\n      }: {\r\n        routineId: number;\r\n        activityType?: ActivityType;\r\n      }) => {\r\n        const id = ++activityPathId;\r\n        return {\r\n          payload: {\r\n            id,\r\n            routineId,\r\n            activityType,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    activityPathCreated: (\r\n      state,\r\n      action: PayloadAction<{\r\n        strikeInfo?: StrikeInfo;\r\n        skillInfo?: SkillInfo;\r\n        cantripInfo?: CantripInfo;\r\n        spellInfo?: SpellInfo;\r\n      }>\r\n    ) => {\r\n      const { parentActivity: parentId, parentRoutine: routineId } = state;\r\n\r\n      const { strikeInfo, skillInfo, cantripInfo, spellInfo } = action.payload;\r\n      let ids: number[] = [];\r\n\r\n      if (strikeInfo !== undefined) {\r\n        ids = createStrikeActivity(\r\n          state,\r\n          parentId,\r\n          routineId,\r\n          strikeInfo,\r\n          strikeInfo.numPrevStrikes\r\n        );\r\n      }\r\n      if (skillInfo !== undefined) {\r\n        ids = createSkillActivity(state, parentId, routineId, skillInfo);\r\n      }\r\n      if (cantripInfo !== undefined) {\r\n        ids = createCantripActivity(state, parentId, routineId, cantripInfo);\r\n      }\r\n      if (spellInfo !== undefined) {\r\n        ids = createSpellActivity(state, parentId, routineId, spellInfo);\r\n      }\r\n\r\n      if (routineId !== undefined) {\r\n        state.routines.entities[routineId]!.apIds.push(...ids);\r\n      }\r\n      if (parentId !== undefined) {\r\n        state.activityPaths.entities[parentId]!.apIds.push(...ids);\r\n      }\r\n\r\n      state.selectedActivityPath = ids[0];\r\n      state.parentActivity = undefined;\r\n      state.parentRoutine = undefined;\r\n    },\r\n    activityPathContinued: {\r\n      reducer: (\r\n        state,\r\n        action: PayloadAction<{\r\n          id: number;\r\n          parentId: number;\r\n        }>\r\n      ) => {\r\n        const { id, parentId } = action.payload;\r\n        state.activityPaths.entities[parentId]!.apIds.push(id);\r\n        const parentAP = state.activityPaths.entities[parentId]!;\r\n        // copy parent damages and effects\r\n        let newDamages = copyDamages(state, parentAP.damages);\r\n        let newEffects = copyEffects(state, parentAP.effects);\r\n\r\n        activityPathAdapter.addOne(state.activityPaths, {\r\n          ...parentAP,\r\n          id,\r\n          parentId,\r\n          routineId: undefined,\r\n          MAP: nextMAPs[parentAP.MAP],\r\n          damages: newDamages,\r\n          effects: newEffects,\r\n          apIds: [],\r\n        });\r\n        state.selectedActivityPath = id;\r\n      },\r\n      prepare: ({ parentId }: { parentId: number }) => {\r\n        const id = ++activityPathId;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    activityPathRemoved: (state, action) => {\r\n      const { id, parentId, routineId } = action.payload;\r\n\r\n      // recursively remove all children\r\n      let childrenIds = [id];\r\n      removeActivityPaths(state, childrenIds);\r\n\r\n      if (parentId !== undefined) {\r\n        state.activityPaths.entities[parentId]!.apIds =\r\n          state.activityPaths.entities[parentId]!.apIds.filter(\r\n            (apId) => apId !== id\r\n          );\r\n      }\r\n      if (routineId !== undefined) {\r\n        state.routines.entities[routineId]!.apIds = state.routines.entities[\r\n          routineId\r\n        ]!.apIds.filter((apId) => apId !== id);\r\n      }\r\n      state.selectedActivityPath = undefined;\r\n    },\r\n\r\n    damageCreated: {\r\n      reducer: (\r\n        state,\r\n        action: PayloadAction<{\r\n          id: number;\r\n          parentId: number;\r\n        }>\r\n      ) => {\r\n        const { id, parentId } = action.payload;\r\n        state.activityPaths.entities[parentId]!.damages.push(id);\r\n        damageAdapter.addOne(state.damages, { id, ...defaultDamage });\r\n      },\r\n      prepare: ({ parentId }) => {\r\n        const id = ++damageId;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    damageRemoved: (\r\n      state,\r\n      action: PayloadAction<{\r\n        id: number;\r\n        parentId: number;\r\n      }>\r\n    ) => {\r\n      const { id, parentId } = action.payload;\r\n      state.activityPaths.entities[parentId]!.damages =\r\n        state.activityPaths.entities[parentId]!.damages.filter(\r\n          (did) => did !== id\r\n        );\r\n      damageAdapter.removeOne(state.damages, id);\r\n    },\r\n    effectCreated: {\r\n      reducer: (\r\n        state,\r\n        action: PayloadAction<{\r\n          id: number;\r\n          parentId: number;\r\n        }>\r\n      ) => {\r\n        const { id, parentId } = action.payload;\r\n        state.activityPaths.entities[parentId]!.effects.push(id);\r\n        effectAdapter.addOne(state.effects, {\r\n          ...defaultEffect,\r\n          id,\r\n        });\r\n      },\r\n      prepare: ({ parentId }) => {\r\n        const id = ++effectId;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    effectRemoved: (state, action) => {\r\n      const { id, parentId } = action.payload;\r\n      state.activityPaths.entities[parentId]!.effects =\r\n        state.activityPaths.entities[parentId]!.effects.filter(\r\n          (eid) => eid !== id\r\n        );\r\n      effectAdapter.removeOne(state.effects, id);\r\n    },\r\n    importRoutine: (state, action) => {\r\n      try {\r\n        state.importRoutine = importStates.Importing;\r\n        const routineObject = JSON.parse(action.payload);\r\n        if (isRoutineObject(routineObject)) {\r\n          state.selectedRoutine = insertRoutine(state, routineObject);\r\n          state.selectedActivityPath = undefined;\r\n          state.parentActivity = undefined;\r\n          state.parentRoutine = undefined;\r\n          state.importRoutine = importStates.Successful;\r\n        } else {\r\n          state.importRoutine = importStates.Failure;\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n        console.log(\"Parsing failed\");\r\n        state.importRoutine = importStates.Failure;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setRoutine,\r\n  setActivityPath,\r\n  setNewActivityParent,\r\n\r\n  routineAdded,\r\n  routineUpdated,\r\n  routineCreated,\r\n  routineRemoved,\r\n\r\n  activityPathAdded,\r\n  activityPathUpdated,\r\n  emptyActivityPathCreated,\r\n  activityPathCreated,\r\n  activityPathContinued,\r\n  activityPathRemoved,\r\n\r\n  damageAdded,\r\n  damageUpdated,\r\n  damageCreated,\r\n  damageRemoved,\r\n\r\n  effectAdded,\r\n  effectUpdated,\r\n  effectCreated,\r\n  effectRemoved,\r\n\r\n  importRoutine,\r\n} = routinesSlice.actions;\r\n\r\nexport default routinesSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selectRoutineById,\r\n  selectIds: selectRoutineIds,\r\n  selectEntities: selectRoutineEntities,\r\n  selectAll: selectAllRoutines,\r\n  selectTotal: selectTotalRoutines,\r\n} = routinesAdapter.getSelectors((state: RootState) => state.routines.routines);\r\n\r\nexport const {\r\n  selectById: selectactivityPathById,\r\n  selectIds: selectactivityPathIds,\r\n  selectEntities: selectactivityPathEntities,\r\n  selectAll: selectAllactivityPaths,\r\n  selectTotal: selectTotalactivityPaths,\r\n} = activityPathAdapter.getSelectors(\r\n  (state: RootState) => state.routines.activityPaths\r\n);\r\n\r\nexport const {\r\n  selectById: selectdamageById,\r\n  selectIds: selectdamageIds,\r\n  selectEntities: selectdamageEntities,\r\n  selectAll: selectAlldamages,\r\n  selectTotal: selectTotaldamages,\r\n} = damageAdapter.getSelectors((state: RootState) => state.routines.damages);\r\n\r\nexport const {\r\n  selectById: selecteffectById,\r\n  selectIds: selecteffectIds,\r\n  selectEntities: selecteffectEntities,\r\n  selectAll: selectAlleffects,\r\n  selectTotal: selectTotaleffects,\r\n} = effectAdapter.getSelectors((state: RootState) => state.routines.effects);\r\n\r\nexport const selectSelectedRoutine = (state: RootState) =>\r\n  state.routines.selectedRoutine;\r\nexport const selectSelectedActivityPath = (state: RootState) =>\r\n  state.routines.selectedActivityPath;\r\nexport const selectParentActivityId = (state: RootState) =>\r\n  state.routines.parentActivity;\r\nexport const selectCreateNewActivity = (state: RootState) =>\r\n  state.routines.selectedActivityPath === undefined &&\r\n  (state.routines.parentRoutine !== undefined ||\r\n    state.routines.parentActivity !== undefined);\r\nexport const selectSelectedRoutineObject = (state: RootState) => {\r\n  if (state.routines.selectedRoutine) {\r\n    const routine =\r\n      state.routines.routines.entities[state.routines.selectedRoutine]!;\r\n    const routineObject = {\r\n      ...routine,\r\n      apIds: getActivityPaths(state.routines, routine.apIds),\r\n    };\r\n    return routineObject;\r\n  }\r\n  return undefined;\r\n};\r\nexport const selectRoutineDescriptions = (state: RootState) => {\r\n  return Object.values(state.routines.routines.entities)\r\n    .filter((routine) => routine?.display)\r\n    .map((routine) => routine?.name + \": \" + routine?.description);\r\n};\r\n\r\nexport const selectImportState = (state: RootState) => {\r\n  return state.routines.importRoutine;\r\n};\r\n\r\nconst removeActivityPaths = (state: WritableDraft<State>, ids: number[]) => {\r\n  let index = 0;\r\n  while (index < ids.length) {\r\n    let ap = state.activityPaths.entities[ids[index]]!;\r\n    ids.push(...ap!.apIds);\r\n    damageAdapter.removeMany(state.damages, ap.damages);\r\n    effectAdapter.removeMany(state.effects, ap.effects);\r\n    activityPathAdapter.removeOne(state.activityPaths, ap.id);\r\n    index += 1;\r\n  }\r\n};\r\n\r\nconst createStrikeActivity = (\r\n  state: WritableDraft<State>,\r\n  parentId: number | undefined,\r\n  routineId: number | undefined,\r\n  strikeInfo: StrikeInfo,\r\n  strikeNumber: number\r\n) => {\r\n  const id = ++activityPathId;\r\n  let apIds: number[] = [];\r\n  if (strikeNumber < strikeInfo.numStrikes - 1) {\r\n    apIds = createStrikeActivity(\r\n      state,\r\n      id,\r\n      undefined,\r\n      strikeInfo,\r\n      strikeNumber + 1\r\n    );\r\n  }\r\n  let damages = createStrikeDamages(state, strikeInfo, strikeNumber);\r\n  let effects = createStrikeEffects(state, strikeInfo, strikeNumber);\r\n  let MAP = classWeaponMAP(strikeInfo);\r\n\r\n  activityPathAdapter.addOne(state.activityPaths, {\r\n    ...defaultActivity,\r\n    id,\r\n    parentId,\r\n    routineId,\r\n    type: activityTypes.STRIKE,\r\n    profTrend: classWeaponProf(strikeInfo.cClass, strikeInfo.classOption),\r\n    statTrend: strikeInfo.attackScore,\r\n    itemTrend: itemTrends.WEAPON,\r\n    bonusAdjustments: classAdjustments(strikeInfo, strikeNumber),\r\n    MAP:\r\n      strikeNumber === 0\r\n        ? MAP\r\n        : strikeNumber === 1\r\n        ? nextMAPs[MAP]\r\n        : nextMAPs[nextMAPs[MAP]],\r\n\r\n    damages,\r\n    effects,\r\n    apIds,\r\n  });\r\n  return [id];\r\n};\r\nconst createStrikeDamages = (\r\n  state: WritableDraft<State>,\r\n  strikeInfo: StrikeInfo,\r\n  strikeNumber: number\r\n) => {\r\n  const newDamages: number[] = [];\r\n\r\n  let id = ++damageId;\r\n  const weaponDamage: Damage = {\r\n    ...defaultDamage,\r\n    id,\r\n    dieTrend: dieTrends.WEAPON,\r\n    dieAdjustments: activityWeaponDiceAdjustments(strikeInfo),\r\n    diceSize: strikeInfo.dieSize,\r\n    fatal: hasFatal(strikeInfo),\r\n    fatalDie: strikeInfo.fatalSize,\r\n    damageTrend: classWeaponDamageTrends(strikeInfo, strikeNumber),\r\n    damageAdjustments: classDamageAdjustments(strikeInfo),\r\n  };\r\n  damageAdapter.addOne(state.damages, weaponDamage);\r\n  newDamages.push(id);\r\n\r\n  id = ++damageId;\r\n  const runeDamage: Damage = {\r\n    ...defaultDamage,\r\n    id,\r\n    dieTrend: strikeInfo.runes,\r\n    diceSize: diceSizes[6],\r\n    damageType: damageTypes.FIRE,\r\n  };\r\n  damageAdapter.addOne(state.damages, runeDamage);\r\n  newDamages.push(id);\r\n\r\n  if (hasClassDamageDice(strikeInfo)) {\r\n    let { dieTrend, diceSize, damageType, damageWhen } =\r\n      classDamageDice(strikeInfo);\r\n    id = ++damageId;\r\n    const classDamage: Damage = {\r\n      ...defaultDamage,\r\n      id,\r\n      dieTrend,\r\n      diceSize,\r\n      damageType,\r\n      damageWhen,\r\n    };\r\n    damageAdapter.addOne(state.damages, classDamage);\r\n    newDamages.push(id);\r\n  }\r\n\r\n  if (hasActivityDamageDice(strikeInfo)) {\r\n    let { dieTrend, diceSize, damageType } = activityDamageDice(strikeInfo);\r\n    id = ++damageId;\r\n    const activityDamage: Damage = {\r\n      ...defaultDamage,\r\n      id,\r\n      dieTrend,\r\n      diceSize,\r\n      damageType,\r\n    };\r\n    damageAdapter.addOne(state.damages, activityDamage);\r\n    newDamages.push(id);\r\n  }\r\n\r\n  if (hasDeadly(strikeInfo)) {\r\n    let damageAdjustments = empty;\r\n    if (!hasFatal(strikeInfo) && hasPickCritSpec(strikeInfo))\r\n      damageAdjustments = critSpecDamage(strikeInfo);\r\n    id = ++damageId;\r\n    const critDamage: Damage = {\r\n      ...defaultDamage,\r\n      id,\r\n      damageCondition: dCond.CRIT,\r\n      dieTrend: dieTrends.DEADLY,\r\n      diceSize: strikeInfo.deadlySize,\r\n      damageAdjustments,\r\n    };\r\n    damageAdapter.addOne(state.damages, critDamage);\r\n    newDamages.push(id);\r\n  }\r\n  if (hasFatal(strikeInfo)) {\r\n    let damageAdjustments = empty;\r\n    if (hasPickCritSpec(strikeInfo))\r\n      damageAdjustments = critSpecDamage(strikeInfo);\r\n    id = ++damageId;\r\n    const critDamage: Damage = {\r\n      ...defaultDamage,\r\n      id,\r\n      damageCondition: dCond.CRIT,\r\n      dieAdjustments: one,\r\n      diceSize: strikeInfo.fatalSize,\r\n      damageAdjustments,\r\n    };\r\n    damageAdapter.addOne(state.damages, critDamage);\r\n    newDamages.push(id);\r\n  }\r\n  if (\r\n    !hasDeadly(strikeInfo) &&\r\n    !hasFatal(strikeInfo) &&\r\n    hasPickCritSpec(strikeInfo)\r\n  ) {\r\n    let damageAdjustments = critSpecDamage(strikeInfo);\r\n    id = ++damageId;\r\n    const critDamage: Damage = {\r\n      ...defaultDamage,\r\n      id,\r\n      damageCondition: dCond.CRIT,\r\n      diceSize: strikeInfo.fatalSize,\r\n      damageAdjustments,\r\n    };\r\n    damageAdapter.addOne(state.damages, critDamage);\r\n    newDamages.push(id);\r\n  }\r\n  if (hasKnifeCritSpec(strikeInfo)) {\r\n    let damageAdjustments = critSpecDamage(strikeInfo);\r\n    id = ++damageId;\r\n    const critDamage: Damage = {\r\n      ...defaultDamage,\r\n      id,\r\n      damageCondition: dCond.CRIT,\r\n      dieAdjustments: critSpecDice(strikeInfo),\r\n      diceSize: diceSizes[6],\r\n      damageAdjustments,\r\n      persistent: true,\r\n    };\r\n    damageAdapter.addOne(state.damages, critDamage);\r\n    newDamages.push(id);\r\n  }\r\n\r\n  return newDamages;\r\n};\r\nconst createStrikeEffects = (\r\n  state: WritableDraft<State>,\r\n  strikeInfo: StrikeInfo,\r\n  strikeNumber: number\r\n) => {\r\n  const newEffects: number[] = [];\r\n  let id;\r\n\r\n  if (hasCritSpecEffect(strikeInfo)) {\r\n    let effectType: EffectType = effectStateTypes.FLATFOOT;\r\n    if (hasSwordCritSpec(strikeInfo)) effectType = effectStateTypes.FLATFOOT;\r\n    if (hasHammerCritSpec(strikeInfo)) effectType = effectStateTypes.PRONE;\r\n    if (hasSpearCritSpec(strikeInfo)) effectType = effectValueTypes.CLUMSY;\r\n\r\n    id = ++effectId;\r\n    const critSpecEffect: Effect = {\r\n      ...defaultEffect,\r\n      id,\r\n      effectCondition: conditions.CRIT,\r\n      effectType,\r\n      effectValue: 1,\r\n      startLevel: strikeInfo.critSpecLevel,\r\n    };\r\n    newEffects.push(id);\r\n    effectAdapter.addOne(state.effects, critSpecEffect);\r\n  }\r\n  return newEffects;\r\n};\r\n\r\nconst createSkillActivity = (\r\n  state: WritableDraft<State>,\r\n  parentId: number | undefined,\r\n  routineId: number | undefined,\r\n  skillInfo: SkillInfo\r\n) => {\r\n  const id = ++activityPathId;\r\n\r\n  let damages = createSkillDamages(state, skillInfo);\r\n  let effects = createSkillEffects(state, skillInfo);\r\n\r\n  activityPathAdapter.addOne(state.activityPaths, {\r\n    ...defaultActivity,\r\n    id,\r\n    parentId,\r\n    routineId,\r\n    type: activityTypes.SKILL,\r\n    profTrend: skillInfo.proficiency,\r\n    statTrend: skillInfo.abilityScore,\r\n    itemTrend: skillInfo.itemBonus,\r\n    targetType: getSkillTarget(skillInfo),\r\n\r\n    damages,\r\n    effects,\r\n  });\r\n  return [id];\r\n};\r\n\r\nconst createSkillDamages = (\r\n  state: WritableDraft<State>,\r\n  skillInfo: SkillInfo\r\n) => {\r\n  const newDamages: number[] = [];\r\n\r\n  if (hasSkillDamage(skillInfo)) {\r\n    let id = ++damageId;\r\n    const skillDamage: Damage = {\r\n      ...defaultDamage,\r\n      id,\r\n      damageCondition: dCond.CRIT,\r\n      dieAdjustments: one,\r\n      diceSize: diceSizes[6],\r\n    };\r\n    newDamages.push(id);\r\n    damageAdapter.addOne(state.damages, skillDamage);\r\n  }\r\n\r\n  return newDamages;\r\n};\r\nconst createSkillEffects = (\r\n  state: WritableDraft<State>,\r\n  skillInfo: SkillInfo\r\n) => {\r\n  const newEffects: number[] = [];\r\n\r\n  for (let { effectCondition, effectType, effectValue } of getSkillEffects(\r\n    skillInfo\r\n  )) {\r\n    let id = ++effectId;\r\n    const skillEffect: Effect = {\r\n      ...defaultEffect,\r\n      id,\r\n      effectCondition,\r\n      effectType,\r\n      effectValue,\r\n    };\r\n    newEffects.push(id);\r\n    effectAdapter.addOne(state.effects, skillEffect);\r\n  }\r\n\r\n  return newEffects;\r\n};\r\nconst createCantripActivity = (\r\n  state: WritableDraft<State>,\r\n  parentId: number | undefined,\r\n  routineId: number | undefined,\r\n  cantripInfo: CantripInfo\r\n) => {\r\n  const id = ++activityPathId;\r\n\r\n  let damages = createCantripDamages(state, cantripInfo);\r\n\r\n  activityPathAdapter.addOne(state.activityPaths, {\r\n    ...defaultActivity,\r\n    id,\r\n    parentId,\r\n    routineId,\r\n    profTrend: cantripInfo.proficiency,\r\n    statTrend: cantripInfo.abilityScore,\r\n    ...getCantripTarget(cantripInfo),\r\n\r\n    damages,\r\n  });\r\n  return [id];\r\n};\r\n\r\nconst createCantripDamages = (\r\n  state: WritableDraft<State>,\r\n  cantripInfo: CantripInfo\r\n) => {\r\n  const newDamages: number[] = [];\r\n\r\n  let id = ++damageId;\r\n  const cantripDamage: Damage = {\r\n    ...defaultDamage,\r\n    id,\r\n    dieTrend: dieTrends.SPELLLEVEL1,\r\n    damageTrend: [cantripInfo.abilityScore],\r\n    ...getCantripDamage(cantripInfo),\r\n  };\r\n  newDamages.push(id);\r\n  damageAdapter.addOne(state.damages, cantripDamage);\r\n\r\n  if (\r\n    cantripInfo.cantrip === \"Produce Flame\" ||\r\n    cantripInfo.cantrip === \"Gouging Claw\"\r\n  ) {\r\n    let id = ++damageId;\r\n    const persDamage: Damage = {\r\n      ...defaultDamage,\r\n      id,\r\n      damageCondition: dCond.CRIT,\r\n      dieTrend: dieTrends.SPELLLEVEL1,\r\n      persistent: true,\r\n    };\r\n    newDamages.push(id);\r\n    damageAdapter.addOne(state.damages, cantripDamage);\r\n  }\r\n  return newDamages;\r\n};\r\n\r\nconst createSpellActivity = (\r\n  state: WritableDraft<State>,\r\n  parentId: number | undefined,\r\n  routineId: number | undefined,\r\n  spellInfo: SpellInfo\r\n) => {\r\n  const id = ++activityPathId;\r\n\r\n  let damages = createSpellDamages(state, spellInfo);\r\n  let effects = createSpellEffects(state, spellInfo);\r\n\r\n  activityPathAdapter.addOne(state.activityPaths, {\r\n    ...defaultActivity,\r\n    id,\r\n    parentId,\r\n    routineId,\r\n    type: activityTypes.SAVE,\r\n    profTrend: spellInfo.proficiency,\r\n    statTrend: spellInfo.abilityScore,\r\n    ...getSpellTarget(spellInfo),\r\n\r\n    damages,\r\n    effects,\r\n  });\r\n  return [id];\r\n};\r\n\r\nconst createSpellDamages = (\r\n  state: WritableDraft<State>,\r\n  spellInfo: SpellInfo\r\n) => {\r\n  const newDamages: number[] = [];\r\n\r\n  if (spellInfo.spell === \"Fireball\") {\r\n    let id = ++damageId;\r\n    const spellDamage: Damage = {\r\n      ...defaultDamage,\r\n      id,\r\n      damageCondition: dCond.BASIC,\r\n      dieTrend: dieTrends.SPELLLEVEL2,\r\n    };\r\n    newDamages.push(id);\r\n    damageAdapter.addOne(state.damages, spellDamage);\r\n  }\r\n  return newDamages;\r\n};\r\n\r\nconst createSpellEffects = (\r\n  state: WritableDraft<State>,\r\n  spellInfo: SpellInfo\r\n) => {\r\n  const newEffects: number[] = [];\r\n\r\n  if (spellInfo.spell === \"Fear\") {\r\n    let id = ++effectId;\r\n    const crfa: Effect = {\r\n      ...defaultEffect,\r\n      id,\r\n      effectCondition: conditions.CRIF,\r\n      effectType: effectTypes.FRIGHTENED,\r\n      effectValue: 3,\r\n    };\r\n    newEffects.push(id);\r\n    effectAdapter.addOne(state.effects, crfa);\r\n\r\n    id = ++effectId;\r\n    const fail: Effect = {\r\n      ...defaultEffect,\r\n      id,\r\n      effectCondition: conditions.FAIL,\r\n      effectType: effectTypes.FRIGHTENED,\r\n      effectValue: 2,\r\n    };\r\n    newEffects.push(id);\r\n    effectAdapter.addOne(state.effects, fail);\r\n\r\n    id = ++effectId;\r\n    const succ: Effect = {\r\n      ...defaultEffect,\r\n      id,\r\n      effectCondition: conditions.SUCC,\r\n      effectType: effectTypes.FRIGHTENED,\r\n      effectValue: 1,\r\n    };\r\n    newEffects.push(id);\r\n    effectAdapter.addOne(state.effects, succ);\r\n  }\r\n\r\n  return newEffects;\r\n  // for (let { effectCondition, effectType, effectValue } of getSkillEffects(\r\n  //   skillInfo\r\n  // )) {\r\n  //   let id = ++effectId;\r\n  //   const skillEffect: Effect = {\r\n  //     ...defaultEffect,\r\n  //     id,\r\n  //     effectCondition,\r\n  //     effectType,\r\n  //     effectValue,\r\n  //   };\r\n  //   newEffects.push(id);\r\n  //   effectAdapter.addOne(state.effects, skillEffect);\r\n  // }\r\n};\r\n\r\nconst copyActivityPaths = (\r\n  state: WritableDraft<State>,\r\n  apIds: number[],\r\n  parentId?: number,\r\n  routineId?: number\r\n) => {\r\n  let newApIds = [];\r\n  for (let apId of apIds) {\r\n    const id = ++activityPathId;\r\n    const ap = state.activityPaths.entities[apId]!;\r\n    const apIds = copyActivityPaths(state, ap.apIds, id);\r\n    const damages = copyDamages(state, ap.damages);\r\n    const effects = copyEffects(state, ap.effects);\r\n\r\n    activityPathAdapter.addOne(state.activityPaths, {\r\n      ...ap,\r\n      id,\r\n      parentId,\r\n      routineId,\r\n      damages,\r\n      effects,\r\n      apIds,\r\n    });\r\n    newApIds.push(id);\r\n  }\r\n  return newApIds;\r\n};\r\nconst copyDamages = (state: WritableDraft<State>, damages: number[]) => {\r\n  const newDamages = [];\r\n  for (let did of damages) {\r\n    let damage = state.damages.entities[did]!;\r\n    // create a new damage entity and add it's id to newDamages\r\n    const id = ++damageId;\r\n    damageAdapter.addOne(state.damages, { ...damage, id });\r\n    newDamages.push(id);\r\n  }\r\n  return newDamages;\r\n};\r\nconst copyEffects = (state: WritableDraft<State>, effects: number[]) => {\r\n  const newEffects = [];\r\n  for (let eid of effects) {\r\n    let effect = state.effects.entities[eid]!;\r\n    // create a new effect entity and add it's id to newEffects\r\n    const id = ++effectId;\r\n    effectAdapter.addOne(state.effects, { ...effect, id });\r\n    newEffects.push(id);\r\n  }\r\n  return newEffects;\r\n};\r\n\r\nconst getActivityPaths = (state: WritableDraft<State>, apIds: number[]) => {\r\n  let newAps: ActivityPathObject[] = [];\r\n  for (let apId of apIds) {\r\n    const ap = state.activityPaths.entities[apId]!;\r\n    const aps = getActivityPaths(state, ap.apIds);\r\n    const damages = getDamages(state, ap.damages);\r\n    const effects = getEffects(state, ap.effects);\r\n    newAps.push({ ...ap, apIds: aps, damages, effects });\r\n  }\r\n  return newAps;\r\n};\r\nconst getDamages = (state: WritableDraft<State>, damages: number[]) => {\r\n  let newDamages = [];\r\n  for (let did of damages) {\r\n    const damage = state.damages.entities[did]!;\r\n    newDamages.push({ ...damage });\r\n  }\r\n  return newDamages;\r\n};\r\nconst getEffects = (state: WritableDraft<State>, effects: number[]) => {\r\n  let newEffects = [];\r\n  for (let eid of effects) {\r\n    const effect = state.effects.entities[eid]!;\r\n    newEffects.push({ ...effect });\r\n  }\r\n  return newEffects;\r\n};\r\n\r\nconst insertRoutine = (state: WritableDraft<State>, routine: RoutineObject) => {\r\n  const id = ++routineId;\r\n  const apIds = insertActivityPaths(state, routine.apIds, undefined, id);\r\n\r\n  routinesAdapter.addOne(state.routines, { ...routine, id, apIds });\r\n  return id;\r\n};\r\nconst insertActivityPaths = (\r\n  state: WritableDraft<State>,\r\n  aps: ActivityPathObject[],\r\n  parentId?: number,\r\n  routineId?: number\r\n) => {\r\n  let newApIds = [];\r\n  for (let ap of aps) {\r\n    const id = ++activityPathId;\r\n    const apIds = insertActivityPaths(state, ap.apIds, id);\r\n    const damages = insertDamages(state, ap.damages);\r\n    const effects = insertEffects(state, ap.effects);\r\n\r\n    activityPathAdapter.addOne(state.activityPaths, {\r\n      ...ap,\r\n      id,\r\n      parentId,\r\n      routineId,\r\n      damages,\r\n      effects,\r\n      apIds,\r\n    });\r\n    newApIds.push(id);\r\n  }\r\n  return newApIds;\r\n};\r\nconst insertDamages = (state: WritableDraft<State>, damages: Damage[]) => {\r\n  const newDamages = [];\r\n  for (let damage of damages) {\r\n    // create a new damage entity and add it's id to newDamages\r\n    const id = ++damageId;\r\n    damageAdapter.addOne(state.damages, { ...defaultDamage, ...damage, id });\r\n    newDamages.push(id);\r\n  }\r\n  return newDamages;\r\n};\r\nconst insertEffects = (state: WritableDraft<State>, effects: Effect[]) => {\r\n  const newEffects = [];\r\n  for (let effect of effects) {\r\n    // create a new effect entity and add it's id to newEffects\r\n    const id = ++effectId;\r\n    effectAdapter.addOne(state.effects, { ...defaultEffect, ...effect, id });\r\n    newEffects.push(id);\r\n  }\r\n  return newEffects;\r\n};\r\n","export const convolve = (vec1: number[], vec2: number[]) => {\r\n  if (vec1.length === 0 || vec2.length === 0) {\r\n    throw new Error(\"Vectors can not be empty!\");\r\n  }\r\n  const volume = vec1;\r\n  const kernel = vec2;\r\n  let displacement = 0;\r\n  const convVec: number[] = [];\r\n\r\n  for (let i = 0; i < volume.length; i++) {\r\n    for (let j = 0; j < kernel.length; j++) {\r\n      if (displacement + j !== convVec.length) {\r\n        convVec[displacement + j] =\r\n          convVec[displacement + j] + volume[i] * kernel[j];\r\n      } else {\r\n        convVec.push(volume[i] * kernel[j]);\r\n      }\r\n    }\r\n    displacement++;\r\n  }\r\n\r\n  return convVec;\r\n};\r\n\r\nexport const multiplyDist = (\r\n  dam: number,\r\n  dist: number[],\r\n  multiplier: number\r\n) => {\r\n  if (multiplier === 0) return { staticDamage: 0, damageDist: [1] };\r\n  if (multiplier === 1) return { staticDamage: dam, damageDist: [...dist] };\r\n\r\n  const newDist = [0];\r\n  let index = 0;\r\n  const newDam = Math.floor(dam * multiplier);\r\n\r\n  let i = 0;\r\n  let oldValue = newDam;\r\n  for (let chance of dist) {\r\n    let newValue = Math.floor((dam + i) * multiplier);\r\n    if (newValue === oldValue) {\r\n      newDist[index] += chance;\r\n    } else {\r\n      if (newValue > oldValue + 1) {\r\n        for (let diff = 0; diff < newValue - (oldValue + 1); diff++) {\r\n          index++;\r\n          newDist[index] = 0;\r\n        }\r\n      }\r\n      index++;\r\n      newDist[index] = chance;\r\n    }\r\n    oldValue = newValue;\r\n    i++;\r\n  }\r\n\r\n  return { staticDamage: newDam, damageDist: newDist };\r\n};\r\n\r\ntype Dist = {\r\n  distribution: { staticDamage: number; damageDist: number[] };\r\n  chance: number;\r\n};\r\n/**\r\n * Combine multiple distributions with their chances into one distribution starting from 0\r\n * @param  {...[{staticDamage, distribution}, chance]} dists\r\n * @returns\r\n */\r\nexport const consolidateDists = (...dists: Dist[]) => {\r\n  let maxDamage = 0;\r\n  for (let dist of dists) {\r\n    maxDamage = Math.max(\r\n      maxDamage,\r\n      dist.distribution.staticDamage + dist.distribution.damageDist.length\r\n    );\r\n  }\r\n  let damageDist = [];\r\n  for (let i = 0; i < maxDamage; i++) {\r\n    damageDist.push(0);\r\n    for (let dist of dists) {\r\n      if (dist.distribution.staticDamage <= i) {\r\n        let index = i - dist.distribution.staticDamage;\r\n        if (index < dist.distribution.damageDist.length)\r\n          damageDist[i] += dist.distribution.damageDist[index] * dist.chance;\r\n      }\r\n    }\r\n  }\r\n  return damageDist;\r\n};\r\n\r\n/**\r\n * apply a minimum to a distribution, like for damage penalties or resistances\r\n * @param {number} staticDamage\r\n * @param {[number]} damageDist\r\n * @param {number} min\r\n * @returns\r\n */\r\nexport const applyMin = (\r\n  staticDamage: number,\r\n  damageDist: number[],\r\n  min: number\r\n) => {\r\n  while (staticDamage < min) {\r\n    if (damageDist.length >= 2) {\r\n      damageDist[1] += damageDist[0];\r\n      damageDist.shift();\r\n    }\r\n    staticDamage++;\r\n  }\r\n  return { staticDamage, damageDist };\r\n};\r\n","import {\r\n  damageTrendValues,\r\n  dieTrendValues,\r\n  defaultACs,\r\n  defaultSaves,\r\n  profTrendValues,\r\n  statTrendValues,\r\n  itemTrendValues,\r\n  MAPvalues,\r\n  standardDC,\r\n} from \"../Model/defaults\";\r\nimport {\r\n  activityTypes,\r\n  DamageType,\r\n  dCond,\r\n  defenses,\r\n  Material,\r\n  materials,\r\n  rollTypes,\r\n  TargetState,\r\n  whenConditions,\r\n} from \"../Model/types\";\r\nimport { ActivityPath, Damage } from \"../Routines/RoutineSlice/RoutineTypes\";\r\nimport { Target } from \"../Display/targetSlice\";\r\nimport { Weakness } from \"../Display/weaknessSlice\";\r\nimport { applyMin, convolve, multiplyDist } from \"./Distribution\";\r\n\r\nfunction getCritSuccessPercent(bonus: number, DC: number, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -20) {\r\n    chance = 0;\r\n  } else if (dif === -20) {\r\n    chance = 5;\r\n  } else if (dif < -9) {\r\n    chance = keen ? 10 : 5;\r\n  } else if (dif < 8) {\r\n    chance = (11 + dif) * 5;\r\n  } else {\r\n    chance = 95;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nfunction getSuccessPercent(bonus: number, DC: number, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -29) {\r\n    chance = 0;\r\n  } else if (dif < -20) {\r\n    chance = 5;\r\n  } else if (dif === -20) {\r\n    chance = 0;\r\n  } else if (dif < -9) {\r\n    chance = (keen ? 19 : 20 + dif) * 5;\r\n  } else if (dif < -1) {\r\n    chance = 50;\r\n  } else if (dif < 9) {\r\n    chance = (8 - dif) * 5;\r\n  } else {\r\n    chance = 5;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nfunction getFailurePercent(bonus: number, DC: number, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -29) {\r\n    chance = 5;\r\n  } else if (dif < -20) {\r\n    chance = (29 + dif) * 5;\r\n  } else if (dif < -10) {\r\n    chance = 45;\r\n  } else if (dif < -1) {\r\n    chance = (-2 - dif) * 5;\r\n  } else if (dif < 9) {\r\n    chance = 5;\r\n  } else {\r\n    chance = 0;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nfunction getCritFailurePercent(bonus: number, DC: number, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -29) {\r\n    chance = 95;\r\n  } else if (dif < -10) {\r\n    chance = (-10 - dif) * 5;\r\n  } else if (dif < -1) {\r\n    chance = 5;\r\n  } else {\r\n    chance = 0;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\n// staticDamage?: number;\r\n// damageDist?: number[];\r\n\r\ntype PartialContext = {\r\n  [key in DamageType]?: {\r\n    material: Material;\r\n    staticDamage: number;\r\n    damageDist: number[];\r\n  };\r\n};\r\nexport interface DamageContext {\r\n  staticDamage: number;\r\n  damageDist: number[];\r\n}\r\ntype BaseContext = {\r\n  normal: PartialContext;\r\n  persistent: PartialContext;\r\n};\r\ntype FinalContext = {\r\n  normal: DamageContext;\r\n  persistent: DamageContext;\r\n};\r\nconst damageQualities = { normal: \"normal\", persistent: \"persistent\" } as const;\r\ntype DamageQuality = keyof typeof damageQualities;\r\n\r\n// combine the probability distributions of the given damages into context\r\nconst addDamage = (\r\n  baseContext: BaseContext,\r\n  type: DamageType,\r\n  material: Material,\r\n  persistent: boolean,\r\n  staticDamage: number,\r\n  damageDist: number[],\r\n  multiplier: number\r\n) => {\r\n  let context: PartialContext;\r\n\r\n  if (persistent) {\r\n    context = baseContext.persistent;\r\n  } else {\r\n    context = baseContext.normal;\r\n  }\r\n  ({ staticDamage, damageDist } = multiplyDist(\r\n    staticDamage,\r\n    damageDist,\r\n    multiplier\r\n  ));\r\n  if (!(type in context)) {\r\n    context[type] = { material, staticDamage, damageDist };\r\n  } else {\r\n    context[type]!.staticDamage += staticDamage;\r\n    context[type]!.damageDist = convolve(context[type]!.damageDist, damageDist);\r\n    if (material !== materials.NONE) context[type]!.material = material;\r\n  }\r\n};\r\n\r\n/**\r\n * Calculate the chance of each result and the appropriate damage\r\n * distributions for a given activity at level vs target with targetState\r\n * adds defenseBonus or resistanceBonus to target if given\r\n * @param {Number} level\r\n * @param {*} activity\r\n * @param {*} damages\r\n * @param {*} target\r\n * @param {*} targetState\r\n * @param {*} weaknesses\r\n * @param {*} defenseBonus\r\n * @param {*} resistanceBonus\r\n * @returns [damageTrees, chances];\r\n */\r\nfunction calculateExpectedDamage(\r\n  activity: ActivityPath,\r\n  damages: Damage[],\r\n  target: Target,\r\n  targetState: TargetState,\r\n  weaknesses: Weakness[],\r\n  defenseBonus: number,\r\n  resistanceBonus: number,\r\n  level?: number\r\n) {\r\n  /**\r\n   * Get the check bonus and DC\r\n   * Calculate the chance of each outcome\r\n   * Go through each damage and evaluate it, put damage types together\r\n   * Go through each damage type and apply weakness/resistance\r\n   * Return damage trees and chances\r\n   */\r\n  let bonus = 0;\r\n  let DC = 10;\r\n  let targetValue;\r\n  let targetLevel;\r\n  if (level === undefined) {\r\n    level = target.routineLevel;\r\n    targetLevel = target.targetLevel;\r\n    switch (activity.targetType) {\r\n      case defenses.AC:\r\n        targetValue = target.overrideAC;\r\n        break;\r\n      case defenses.FORT:\r\n        targetValue = target.overrideFort;\r\n        break;\r\n      case defenses.REF:\r\n        targetValue = target.overrideRef;\r\n        break;\r\n      case defenses.WILL:\r\n        targetValue = target.overrideWill;\r\n        break;\r\n      case defenses.PER:\r\n        targetValue = target.overridePer;\r\n        break;\r\n\r\n      default:\r\n        targetValue = target.overrideAC;\r\n        break;\r\n    }\r\n  } else {\r\n    targetLevel = level + target.levelDiff;\r\n    switch (activity.targetType) {\r\n      case defenses.AC:\r\n        targetValue = defaultACs[target.ACTrend];\r\n        break;\r\n      case defenses.FORT:\r\n        targetValue = defaultSaves[target.FortTrend];\r\n        break;\r\n      case defenses.REF:\r\n        targetValue = defaultSaves[target.RefTrend];\r\n        break;\r\n      case defenses.WILL:\r\n        targetValue = defaultSaves[target.WillTrend];\r\n        break;\r\n      case defenses.PER:\r\n        targetValue = defaultSaves[target.PerTrend];\r\n        break;\r\n\r\n      default:\r\n        targetValue = defaultACs[target.ACTrend];\r\n        break;\r\n    }\r\n\r\n    targetValue = targetValue[targetLevel];\r\n  }\r\n\r\n  let targetPenalty = targetState.Frightened;\r\n  if (\r\n    activity.targetType === defenses.AC ||\r\n    activity.targetType === defenses.REF\r\n  )\r\n    targetPenalty = Math.max(targetPenalty, targetState.Clumsy);\r\n  switch (activity.type) {\r\n    case activityTypes.STRIKE:\r\n    case activityTypes.SPELLATTACK:\r\n    case activityTypes.SKILL:\r\n      bonus = profTrendValues[activity.profTrend][level];\r\n      bonus += statTrendValues[activity.statTrend][level];\r\n      bonus += itemTrendValues[activity.itemTrend][level];\r\n      bonus += activity.bonusAdjustments[level];\r\n      bonus += MAPvalues[activity.MAP];\r\n      DC = targetValue + defenseBonus - targetPenalty;\r\n      if (activity.targetType === defenses.AC) {\r\n        if (targetState.Flatfooted) DC -= 2;\r\n      } else {\r\n        if (activity.targetType === defenses.selfDC) {\r\n          DC = standardDC[level];\r\n        } else if (activity.targetType === defenses.targetDC) {\r\n          DC = standardDC[targetLevel];\r\n        } else {\r\n          DC += 10;\r\n        }\r\n      }\r\n      break;\r\n\r\n    case activityTypes.SAVE:\r\n      bonus = targetValue + defenseBonus - targetPenalty;\r\n      DC = 10 + profTrendValues[activity.profTrend][level];\r\n      DC += statTrendValues[activity.statTrend][level];\r\n      DC += itemTrendValues[activity.itemTrend][level];\r\n      DC += activity.bonusAdjustments[level];\r\n      if (activity.targetType === defenses.AC) {\r\n        bonus -= 10;\r\n      } else if (activity.targetType === defenses.selfDC) {\r\n        bonus = standardDC[level] - 10;\r\n      } else if (activity.targetType === defenses.targetDC) {\r\n        bonus = standardDC[targetLevel] - 10;\r\n      }\r\n      break;\r\n\r\n    default:\r\n      console.log(`Activity type ${activity.type} not implemented`);\r\n  }\r\n\r\n  let critPercent = getCritSuccessPercent(bonus, DC);\r\n  let succPercent = getSuccessPercent(bonus, DC);\r\n  let failPercent = getFailurePercent(bonus, DC);\r\n  let crfaPercent = getCritFailurePercent(bonus, DC);\r\n  if (activity.rollType === rollTypes.ADVANTAGE) {\r\n    let notcrit = 100 - critPercent;\r\n    critPercent = 100 - (notcrit * notcrit) / 100;\r\n    let nothit = notcrit - succPercent;\r\n    succPercent = 100 - (nothit * nothit) / 100 - critPercent;\r\n    let notfail = nothit - failPercent;\r\n    failPercent = 100 - (notfail * notfail) / 100 - succPercent - critPercent;\r\n    crfaPercent = (crfaPercent * crfaPercent) / 100;\r\n  } else if (activity.rollType === rollTypes.DISADVANTAGE) {\r\n    let notcrfa = 100 - crfaPercent;\r\n    crfaPercent = 100 - (notcrfa * notcrfa) / 100;\r\n    let notfail = notcrfa - failPercent;\r\n    failPercent = 100 - (notfail * notfail) / 100 - crfaPercent;\r\n    let notsucc = notfail - succPercent;\r\n    succPercent = 100 - (notsucc * notsucc) / 100 - failPercent - crfaPercent;\r\n    critPercent = (critPercent * critPercent) / 100;\r\n  }\r\n  const chances = [\r\n    critPercent / 100,\r\n    succPercent / 100,\r\n    failPercent / 100,\r\n    crfaPercent / 100,\r\n  ];\r\n  const critDamagesByType: BaseContext = {\r\n    normal: {},\r\n    persistent: {},\r\n  };\r\n  const succDamagesByType: BaseContext = {\r\n    normal: {},\r\n    persistent: {},\r\n  };\r\n  const failDamagesByType: BaseContext = {\r\n    normal: {},\r\n    persistent: {},\r\n  };\r\n  const crfaDamagesByType: BaseContext = {\r\n    normal: {},\r\n    persistent: {},\r\n  };\r\n  const critDamages: FinalContext = {\r\n    normal: { staticDamage: 0, damageDist: [1] },\r\n    persistent: { staticDamage: 0, damageDist: [1] },\r\n  };\r\n  const succDamages: FinalContext = {\r\n    normal: { staticDamage: 0, damageDist: [1] },\r\n    persistent: { staticDamage: 0, damageDist: [1] },\r\n  };\r\n  const failDamages: FinalContext = {\r\n    normal: { staticDamage: 0, damageDist: [1] },\r\n    persistent: { staticDamage: 0, damageDist: [1] },\r\n  };\r\n  const crfaDamages: FinalContext = {\r\n    normal: { staticDamage: 0, damageDist: [1] },\r\n    persistent: { staticDamage: 0, damageDist: [1] },\r\n  };\r\n  // can't have dist here, need just damage types...\r\n  // need to make new objects for dists... TODO\r\n  const damageTreesByType: BaseContext[] = [\r\n    critDamagesByType,\r\n    succDamagesByType,\r\n    failDamagesByType,\r\n    crfaDamagesByType,\r\n  ];\r\n  const damageTrees: FinalContext[] = [\r\n    critDamages,\r\n    succDamages,\r\n    failDamages,\r\n    crfaDamages,\r\n  ];\r\n\r\n  // Start going through each damage and evaluate it, put damage types together\r\n  damages.forEach((damage) => {\r\n    let {\r\n      damageCondition,\r\n      diceSize,\r\n      fatal,\r\n      fatalDie,\r\n\r\n      damageTrend,\r\n      damageType,\r\n      material,\r\n      persistent,\r\n      multiplier,\r\n      damageWhen,\r\n    } = damage;\r\n    let shouldAddThisDamage = false;\r\n    for (let state of damageWhen) {\r\n      if (state === whenConditions.Always) {\r\n        shouldAddThisDamage = true;\r\n        break;\r\n      }\r\n      let val = targetState[state];\r\n      if (val && val > 0) {\r\n        shouldAddThisDamage = true;\r\n        break;\r\n      }\r\n    }\r\n    // if (typeof val === \"boolean\") {\r\n    //   if (val) {\r\n    //     shouldAddThisDamage = true;\r\n    //     break;\r\n    //   }\r\n    // } else {\r\n    //   if (val > 0) {\r\n    //     shouldAddThisDamage = true;\r\n    //     break;\r\n    //   }\r\n    // }\r\n\r\n    if (!shouldAddThisDamage) return;\r\n\r\n    let diceNum = dieTrendValues[damage.dieTrend][level as number];\r\n    diceNum += damage.dieAdjustments[level as number];\r\n    if (diceNum < 0) diceNum = 0;\r\n    let staticDamage = 0;\r\n    for (let i = 0; i < damageTrend.length; i++) {\r\n      staticDamage += damageTrendValues[damageTrend[i]][level as number];\r\n    }\r\n    staticDamage += damage.damageAdjustments[level as number];\r\n    let damageDist = [1];\r\n    let fatalDist = [1];\r\n    let diceArray = [];\r\n    for (let i = 0; i < diceSize; i++) {\r\n      diceArray.push(1 / diceSize);\r\n    }\r\n    for (let i = 0; i < diceNum; i++) {\r\n      damageDist = convolve(damageDist, diceArray);\r\n    }\r\n    if (fatal) {\r\n      let diceArray = [];\r\n      for (let i = 0; i < fatalDie; i++) {\r\n        diceArray.push(1 / fatalDie);\r\n      }\r\n      for (let i = 0; i < diceNum; i++) {\r\n        fatalDist = convolve(fatalDist, diceArray);\r\n      }\r\n    }\r\n    staticDamage += diceNum;\r\n\r\n    // Add damage to damage trees appropriately\r\n    switch (damageCondition) {\r\n      case dCond.STRIKE:\r\n        addDamage(\r\n          succDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          critDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          fatal ? fatalDist : damageDist,\r\n          multiplier * 2\r\n        );\r\n        break;\r\n\r\n      case dCond.BASIC:\r\n        addDamage(\r\n          succDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 0.5\r\n        );\r\n        addDamage(\r\n          failDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          crfaDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 2\r\n        );\r\n        break;\r\n\r\n      case dCond.CRIF:\r\n        addDamage(\r\n          crfaDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.FAIL:\r\n        addDamage(\r\n          failDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.SUCC:\r\n        addDamage(\r\n          succDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.CRIT:\r\n        addDamage(\r\n          critDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.AT_LEAST_SUCC:\r\n        addDamage(\r\n          succDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          critDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.AT_LEAST_FAIL:\r\n        addDamage(\r\n          failDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          succDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          critDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.FAIL_WORSE:\r\n        addDamage(\r\n          crfaDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          failDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      case dCond.SUCC_WORSE:\r\n        addDamage(\r\n          crfaDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          failDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          succDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n\r\n        break;\r\n\r\n      case dCond.ALWAYS:\r\n        addDamage(\r\n          crfaDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          failDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          succDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        addDamage(\r\n          critDamagesByType,\r\n          damageType,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          multiplier * 1\r\n        );\r\n        break;\r\n\r\n      default:\r\n        console.log(`Damage condition ${damageCondition} not implemented yet.`);\r\n    }\r\n  });\r\n  // end going through each damage and evaluate it, put damage types together\r\n\r\n  // Start going through each damage type and apply weakness/resistance\r\n  for (let damageTreeIndex = 0; damageTreeIndex < 4; damageTreeIndex++) {\r\n    let damageTree = damageTreesByType[damageTreeIndex];\r\n    let finalTree = damageTrees[damageTreeIndex];\r\n    let damageQuality: DamageQuality;\r\n    for (damageQuality in damageQualities) {\r\n      let totalStaticDamage = 0;\r\n      let totalDamageDist = [1];\r\n      let type: DamageType;\r\n      for (type in damageTree[damageQuality]) {\r\n        let { material, staticDamage, damageDist } =\r\n          damageTree[damageQuality][type]!;\r\n\r\n        // ignore if there's 0 damage\r\n        if (damageDist.length === 1 && staticDamage <= 0) continue;\r\n\r\n        // make min damage 1 before resistances\r\n        ({ staticDamage, damageDist } = applyMin(staticDamage, damageDist, 1));\r\n\r\n        // find max weakness and resistance, weaknesses are negative numbers\r\n        let maxW = 0;\r\n        let maxR = 0;\r\n        for (let weakness of weaknesses) {\r\n          if (weakness.type === type || weakness.type === material) {\r\n            if (weakness.value + resistanceBonus < 0) {\r\n              maxW = Math.min(maxW, weakness.value + resistanceBonus);\r\n            } else if (weakness.value + resistanceBonus > 0) {\r\n              maxR = Math.max(maxR, weakness.value + resistanceBonus);\r\n            }\r\n          }\r\n        }\r\n        staticDamage = staticDamage - (maxR + maxW);\r\n\r\n        // make min damage 0 after resistances\r\n        ({ staticDamage, damageDist } = applyMin(staticDamage, damageDist, 0));\r\n\r\n        totalStaticDamage += staticDamage;\r\n        totalDamageDist = convolve(totalDamageDist, damageDist);\r\n      }\r\n      finalTree[damageQuality].staticDamage = totalStaticDamage;\r\n      finalTree[damageQuality].damageDist = totalDamageDist;\r\n    }\r\n    // Add persistent damage to normal damage with a multiplier\r\n    let { staticDamage, damageDist } = multiplyDist(\r\n      finalTree[\"persistent\"].staticDamage,\r\n      finalTree[\"persistent\"].damageDist,\r\n      target.persistentMultiplier\r\n    );\r\n    finalTree[\"normal\"].staticDamage += staticDamage;\r\n    finalTree[\"normal\"].damageDist = convolve(\r\n      finalTree[\"normal\"].damageDist,\r\n      damageDist\r\n    );\r\n  }\r\n  // End going through each damage type and apply weakness/resistance\r\n\r\n  return { damageTrees, chances };\r\n}\r\n\r\nexport { calculateExpectedDamage };\r\n","import { convolve, consolidateDists } from \"./Distribution\";\r\nimport { calculateExpectedDamage } from \"./Calculation\";\r\nimport {\r\n  Condition,\r\n  conditions,\r\n  effectStateTypes,\r\n  effectTypes,\r\n  effectValueTypes,\r\n  TargetState,\r\n  whenConditions,\r\n} from \"../Model/types\";\r\nimport {\r\n  ActivityPath,\r\n  Damage,\r\n  Effect,\r\n  Routine,\r\n} from \"../Routines/RoutineSlice/RoutineTypes\";\r\nimport { Dictionary } from \"@reduxjs/toolkit\";\r\nimport { Target } from \"../Display/targetSlice\";\r\nimport { Weakness } from \"../Display/weaknessSlice\";\r\n\r\n/**\r\n * Checks given degreeOfSuccess is in the condition\r\n * like Success is in Success or better\r\n * @param {*} condition\r\n * @param {*} degreeOfSuccess\r\n * @returns\r\n */\r\nfunction validateCondition(condition: Condition, degreeOfSuccess: number) {\r\n  let indicies: number[] = [];\r\n  // console.log(`cond is: ${ap.condition}`);\r\n  switch (condition) {\r\n    case conditions.ALWAYS:\r\n      indicies = [0, 1, 2, 3];\r\n      break;\r\n\r\n    case conditions.AT_LEAST_FAIL:\r\n      indicies = [0, 1, 2];\r\n      break;\r\n\r\n    case conditions.AT_LEAST_SUCC:\r\n      indicies = [0, 1];\r\n      break;\r\n\r\n    case conditions.CRIF:\r\n      indicies = [3];\r\n      break;\r\n\r\n    case conditions.CRIT:\r\n      indicies = [0];\r\n      break;\r\n\r\n    case conditions.FAIL:\r\n      indicies = [2];\r\n      break;\r\n\r\n    case conditions.FAIL_WORSE:\r\n      indicies = [2, 3];\r\n      break;\r\n\r\n    case conditions.SUCC:\r\n      indicies = [1];\r\n      break;\r\n\r\n    case conditions.SUCC_WORSE:\r\n      indicies = [1, 2, 3];\r\n      break;\r\n\r\n    default:\r\n  }\r\n  return indicies.includes(degreeOfSuccess);\r\n}\r\n\r\nclass ActivityPathEvaluator {\r\n  activityPaths: Dictionary<ActivityPath>;\r\n  target: Target;\r\n  damages: Dictionary<Damage>;\r\n  effects: Dictionary<Effect>;\r\n  weaknesses: Dictionary<Weakness>;\r\n  selectedRoutine?: number;\r\n  constructor(\r\n    activityPaths: Dictionary<ActivityPath>,\r\n    targets: Dictionary<Target>,\r\n    damages: Dictionary<Damage>,\r\n    effects: Dictionary<Effect>,\r\n    weaknesses: Dictionary<Weakness>,\r\n    selectedRoutine?: number\r\n  ) {\r\n    this.activityPaths = activityPaths;\r\n    this.target = targets[0]!;\r\n    this.damages = damages;\r\n    this.effects = effects;\r\n    this.weaknesses = weaknesses;\r\n    this.selectedRoutine = selectedRoutine;\r\n  }\r\n\r\n  canEvaluate(level: number, routine: Routine) {\r\n    const levelDiff = this.target.levelDiff;\r\n    // console.log(`level ${level}, levelDiff ${levelDiff}`);\r\n    if (level < routine.startLevel || level > routine.endLevel) return false;\r\n    if (level + levelDiff < -1 || level + levelDiff > 24) return false;\r\n    return true;\r\n  }\r\n  canEvaluateSingleLevel(routine: Routine) {\r\n    const level = this.target.routineLevel;\r\n    // console.log(`level ${level}, levelDiff ${levelDiff}`);\r\n    if (level < routine.startLevel || level > routine.endLevel) return false;\r\n    return true;\r\n  }\r\n\r\n  evalRoutine(\r\n    routine: Routine,\r\n    ACBonus: number,\r\n    resBonus: number,\r\n    level?: number\r\n  ) {\r\n    const initialTargetState = {\r\n      // flatfooted: this.target.flatfooted,\r\n      // prone: false,\r\n      // grappled: false,\r\n      // frightened: 0,\r\n      // clumsy: 0,\r\n    } as TargetState;\r\n    for (let effectState of Object.values(effectStateTypes)) {\r\n      initialTargetState[effectState] = false;\r\n    }\r\n    for (let effectValue of Object.values(effectValueTypes)) {\r\n      initialTargetState[effectValue] = 0;\r\n    }\r\n    initialTargetState.Flatfooted = this.target.flatfooted;\r\n\r\n    const dataArray = [];\r\n    const cumulative = [];\r\n    const PdataArray = [];\r\n    const Pcumulative = [];\r\n\r\n    let expD = 0;\r\n    let expP = 0;\r\n    let routineDDist = [1];\r\n    let routinePDDist = [1];\r\n    for (let i = 0; i < routine.apIds.length; i++) {\r\n      let activityPath = this.activityPaths[routine.apIds[i]]!;\r\n      let [damageDist, PdamageDist] = this.evalPath(\r\n        activityPath,\r\n        initialTargetState,\r\n        ACBonus,\r\n        resBonus,\r\n        level\r\n      );\r\n      routineDDist = convolve(routineDDist, damageDist);\r\n      routinePDDist = convolve(routinePDDist, PdamageDist);\r\n    }\r\n    let currentSum = 1;\r\n    for (let i = 0; i < routineDDist.length; i++) {\r\n      dataArray.push(i);\r\n      cumulative.push(currentSum);\r\n      currentSum -= routineDDist[i];\r\n\r\n      expD += routineDDist[i] * i;\r\n    }\r\n    currentSum = 1;\r\n    for (let i = 0; i < routinePDDist.length; i++) {\r\n      PdataArray.push(i);\r\n      Pcumulative.push(currentSum);\r\n      currentSum -= routinePDDist[i];\r\n\r\n      expP += routinePDDist[i] * i;\r\n    }\r\n    return {\r\n      expD,\r\n      expP,\r\n      dataArray,\r\n      routineDDist,\r\n      cumulative,\r\n      PdataArray,\r\n      routinePDDist,\r\n      Pcumulative,\r\n    };\r\n  }\r\n\r\n  evalPath(\r\n    activityPath: ActivityPath,\r\n    targetState: TargetState,\r\n    defenseBonus: number,\r\n    resistanceBonus: number,\r\n    level?: number\r\n  ) {\r\n    // evaluate this and all following APs\r\n    let currentTarget = this.target;\r\n    let currentDamages = activityPath.damages.map(\r\n      (damageId) => this.damages[damageId]!\r\n    );\r\n    //currentDamages.push(activityPath);\r\n    let currentEffects = activityPath.effects.map(\r\n      (effectId) => this.effects[effectId]!\r\n    );\r\n    let currentWeaknesses = currentTarget.weaknesses.map(\r\n      (weaknessId) => this.weaknesses[weaknessId]!\r\n    );\r\n\r\n    // calculate the expected damage for this activity\r\n    let { damageTrees, chances } = calculateExpectedDamage(\r\n      activityPath,\r\n      currentDamages,\r\n      currentTarget,\r\n      targetState,\r\n      currentWeaknesses,\r\n      defenseBonus,\r\n      resistanceBonus,\r\n      level\r\n    );\r\n\r\n    const targetStates = [targetState, targetState, targetState, targetState];\r\n    // go through each degree of success\r\n    for (let i = 0; i < 4; i++) {\r\n      // go though each valid effect and update targetStates\r\n      currentEffects.forEach((effect) => {\r\n        let {\r\n          effectCondition,\r\n          effectType,\r\n          effectValue,\r\n          startLevel,\r\n          endLevel,\r\n          damageWhen,\r\n        } = effect;\r\n        if (level !== undefined) {\r\n          if (level < startLevel || level > endLevel) return;\r\n        } else {\r\n          if (\r\n            this.target.routineLevel < startLevel ||\r\n            this.target.routineLevel > endLevel\r\n          )\r\n            return;\r\n        }\r\n        let shouldAddThisEffect = false;\r\n        for (let state of damageWhen) {\r\n          if (state === whenConditions.Always) {\r\n            shouldAddThisEffect = true;\r\n            break;\r\n          }\r\n          let val = targetStates[i][state];\r\n          if (val && val > 0) {\r\n            shouldAddThisEffect = true;\r\n            break;\r\n          }\r\n        }\r\n        if (!shouldAddThisEffect) return;\r\n\r\n        if (validateCondition(effectCondition, i)) {\r\n          switch (effectType) {\r\n            case effectTypes.RESTRAINED:\r\n              if (targetStates[i].Restrained !== true)\r\n                targetStates[i] = {\r\n                  ...targetStates[i],\r\n                  Flatfooted: true,\r\n                  Grappled: true,\r\n                  Restrained: true,\r\n                };\r\n              break;\r\n\r\n            case effectTypes.GRAPPLED:\r\n              if (targetStates[i].Grappled !== true)\r\n                targetStates[i] = {\r\n                  ...targetStates[i],\r\n                  Flatfooted: true,\r\n                  Grappled: true,\r\n                };\r\n              break;\r\n\r\n            case effectTypes.PRONE:\r\n              if (targetStates[i].Prone !== true)\r\n                targetStates[i] = {\r\n                  ...targetStates[i],\r\n                  Flatfooted: true,\r\n                  Prone: true,\r\n                };\r\n              break;\r\n\r\n            case effectTypes.FLATFOOT:\r\n              if (targetStates[i].Flatfooted !== true)\r\n                targetStates[i] = { ...targetStates[i], Flatfooted: true };\r\n              break;\r\n\r\n            case effectTypes.FRIGHTENED:\r\n              if (effectValue && targetStates[i].Frightened < effectValue)\r\n                targetStates[i] = {\r\n                  ...targetStates[i],\r\n                  Frightened: effectValue,\r\n                };\r\n              break;\r\n\r\n            case effectTypes.CLUMSY:\r\n              if (effectValue && targetStates[i].Clumsy < effectValue)\r\n                targetStates[i] = {\r\n                  ...targetStates[i],\r\n                  Clumsy: effectValue,\r\n                };\r\n              break;\r\n\r\n            default:\r\n              console.log(`Effect type ${effectType} not implemented`);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // go through each activity path, depending on its condition add its damage distributions to this activities appropriately\r\n    activityPath.apIds.forEach((apId) => {\r\n      let ap = this.activityPaths[apId]!;\r\n\r\n      const evaluations = new Map();\r\n      // go through each degree of success\r\n      for (let i = 0; i < 4; i++) {\r\n        // evaluate if necessary and add distribution to damageTrees\r\n        if (validateCondition(ap.condition, i)) {\r\n          if (evaluations.has(targetStates[i])) {\r\n            // already evaluated\r\n          } else {\r\n            let [pathDist, pathPDist] = this.evalPath(\r\n              ap,\r\n              targetStates[i],\r\n              defenseBonus,\r\n              resistanceBonus,\r\n              level\r\n            );\r\n            evaluations.set(targetStates[i], { pathDist, pathPDist });\r\n          }\r\n          damageTrees[i].normal.damageDist = convolve(\r\n            damageTrees[i].normal.damageDist,\r\n            evaluations.get(targetStates[i]).pathDist\r\n          );\r\n          damageTrees[i].persistent.damageDist = convolve(\r\n            damageTrees[i].persistent.damageDist,\r\n            evaluations.get(targetStates[i]).pathPDist\r\n          );\r\n        }\r\n      }\r\n    });\r\n\r\n    let damageDist = consolidateDists(\r\n      { distribution: damageTrees[0].normal, chance: chances[0] },\r\n      { distribution: damageTrees[1].normal, chance: chances[1] },\r\n      { distribution: damageTrees[2].normal, chance: chances[2] },\r\n      { distribution: damageTrees[3].normal, chance: chances[3] }\r\n    );\r\n    let PdamageDist = consolidateDists(\r\n      { distribution: damageTrees[0].persistent, chance: chances[0] },\r\n      { distribution: damageTrees[1].persistent, chance: chances[1] },\r\n      { distribution: damageTrees[2].persistent, chance: chances[2] },\r\n      { distribution: damageTrees[3].persistent, chance: chances[3] }\r\n    );\r\n    // console.log(damageDist);\r\n\r\n    return [damageDist, PdamageDist];\r\n  }\r\n}\r\n\r\nexport { ActivityPathEvaluator };\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../App/store\";\r\n\r\nexport const sharingSlice = createSlice({\r\n  name: \"sharing\",\r\n  initialState: {\r\n    graphUrl: \"\",\r\n    singleLevelGraphUrl: \"\",\r\n    imgLink: \"\",\r\n  },\r\n  reducers: {\r\n    graphSaved: (state, action) => {\r\n      state.graphUrl = action.payload;\r\n    },\r\n    singleLevelGraphSaved: (state, action) => {\r\n      state.singleLevelGraphUrl = action.payload;\r\n    },\r\n    saveImgLink: (state, action) => {\r\n      state.imgLink = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { graphSaved, singleLevelGraphSaved, saveImgLink } =\r\n  sharingSlice.actions;\r\n\r\nexport default sharingSlice.reducer;\r\n\r\nexport const selectGraphUrl = (state: RootState, byLevel: boolean) => {\r\n  return byLevel ? state.sharing.graphUrl : state.sharing.singleLevelGraphUrl;\r\n};\r\n","import React from \"react\";\r\n\r\nimport {\r\n  selectactivityPathEntities,\r\n  selectSelectedRoutine,\r\n} from \"../Routines/RoutineSlice/routineSlice\";\r\nimport { Routine } from \"../Routines/RoutineSlice/RoutineTypes\";\r\nimport { selectdamageEntities } from \"../Routines/RoutineSlice/routineSlice\";\r\nimport { selectRoutineEntities } from \"../Routines/RoutineSlice/routineSlice\";\r\nimport { selecttargetEntities } from \"./targetSlice\";\r\nimport { selectweaknessEntities } from \"./weaknessSlice\";\r\nimport { graphTypes } from \"../Model/types\";\r\nimport { selecteffectEntities } from \"../Routines/RoutineSlice/routineSlice\";\r\n\r\nimport { ActivityPathEvaluator } from \"../Calculation/EvaluateActivityPath\";\r\n\r\nimport Plotly from \"plotly.js-basic-dist\";\r\nimport createPlotlyComponent from \"react-plotly.js/factory\";\r\nimport { defaultACs, defaultSaves } from \"../Model/defaults\";\r\nimport { Dictionary } from \"@reduxjs/toolkit\";\r\nimport { useAppDispatch, useAppSelector } from \"../App/hooks\";\r\nimport { graphSaved, singleLevelGraphSaved } from \"./sharingSlice\";\r\nconst Plot = createPlotlyComponent(Plotly);\r\n\r\nconst useGenerateGraphs = (graphType: string) => {\r\n  const routines = useAppSelector(selectRoutineEntities);\r\n  const activityPaths = useAppSelector(selectactivityPathEntities);\r\n  const targets = useAppSelector(selecttargetEntities);\r\n  const damages = useAppSelector(selectdamageEntities);\r\n  const effects = useAppSelector(selecteffectEntities);\r\n  const weaknesses = useAppSelector(selectweaknessEntities);\r\n  const selectedRoutine = useAppSelector(selectSelectedRoutine);\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const saveGraph = (_figure: any, graphDiv: Plotly.Root) => {\r\n    Plotly.toImage(graphDiv, {\r\n      format: \"png\",\r\n      height: 1000,\r\n      width: 1000,\r\n    }).then((url) => {\r\n      dispatch(graphSaved(url));\r\n    });\r\n  };\r\n  const saveSingleLevelGraph = (_figure: any, graphDiv: Plotly.Root) => {\r\n    Plotly.toImage(graphDiv, {\r\n      format: \"png\",\r\n      height: 1000,\r\n      width: 1000,\r\n    }).then((url) => {\r\n      dispatch(singleLevelGraphSaved(url));\r\n    });\r\n  };\r\n\r\n  const evaluator = new ActivityPathEvaluator(\r\n    activityPaths,\r\n    targets,\r\n    damages,\r\n    effects,\r\n    weaknesses,\r\n    selectedRoutine\r\n  );\r\n\r\n  const currentTarget = targets[0]!;\r\n  let title = \"@\" + currentTarget.routineLevel;\r\n  let byLevelTile = currentTarget.name;\r\n\r\n  title += \" Vs\";\r\n  if (currentTarget.flatfooted) title += \" flatfooted\";\r\n  title += \" AC: \" + currentTarget.overrideAC; //+ defaultACs[currentTarget.ACTrend][displayLevel];\r\n  title += \" F: \" + currentTarget.overrideFort; //+ defaultSaves[currentTarget.FortTrend][displayLevel];\r\n  title += \" R: \" + currentTarget.overrideRef; //+ defaultSaves[currentTarget.RefTrend][displayLevel];\r\n  title += \" W: \" + currentTarget.overrideWill; //+ defaultSaves[currentTarget.WillTrend][displayLevel];\r\n  title += \" P: \" + currentTarget.overridePer; //+ defaultSaves[currentTarget.PerTrend][displayLevel];\r\n\r\n  // byLevelTile += \" Vs \";\r\n  // byLevelTile += \" AC: \" + currentTarget.ACTrend;\r\n  // byLevelTile += \" Fort: \" + currentTarget.FortTrend;\r\n  // byLevelTile += \" Ref: \" + currentTarget.RefTrend;\r\n  // byLevelTile += \" Will: \" + currentTarget.WillTrend;\r\n  // byLevelTile += \" Per: \" + currentTarget.PerTrend;\r\n\r\n  let datasets: Plotly.Data[] = [];\r\n  let perDatasets: Plotly.Data[] = [];\r\n  let expectedDamages;\r\n  let expectedPersistentDamages;\r\n  switch (graphType) {\r\n    case graphTypes.DISTRIBUTION:\r\n      ({ expectedDamages, expectedPersistentDamages, datasets, perDatasets } =\r\n        evaluateDistribution(routines, evaluator));\r\n      break;\r\n    case graphTypes.PMDEFENSE:\r\n      ({ expectedDamages, expectedPersistentDamages, datasets, perDatasets } =\r\n        evaluatePM(routines, evaluator, true));\r\n      break;\r\n    case graphTypes.PMRES:\r\n      ({ expectedDamages, expectedPersistentDamages, datasets, perDatasets } =\r\n        evaluatePM(routines, evaluator, false));\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  let { datasets: byLeveldatasets, perDatasets: byLevelperDatasets } =\r\n    evaluateByLevel(routines, evaluator);\r\n\r\n  let xtitle;\r\n  let ytitle;\r\n  if (graphType === graphTypes.DISTRIBUTION) {\r\n    xtitle = \"damage\";\r\n    ytitle = \"chance\";\r\n  } else if (graphType === graphTypes.PMDEFENSE) {\r\n    xtitle = \"+/- AC/Save Bonus\";\r\n    ytitle = \"Expected Damage\";\r\n  } else if (graphType === graphTypes.PMRES) {\r\n    xtitle = \"+/- Resistance/Weakness\";\r\n    ytitle = \"Expected Damage\";\r\n  }\r\n\r\n  let damageChart = (\r\n    <Plot\r\n      className=\"plot\"\r\n      data={datasets}\r\n      layout={{\r\n        title: title,\r\n        autosize: true,\r\n        xaxis: { title: xtitle },\r\n        yaxis: { title: ytitle },\r\n        legend: {\r\n          x: 1,\r\n          y: 1,\r\n          xanchor: \"right\",\r\n        },\r\n        margin: {\r\n          l: 40,\r\n          r: 40,\r\n        },\r\n      }}\r\n      useResizeHandler={true}\r\n      style={{ width: \"100%\", height: \"100%\" }}\r\n      onInitialized={saveGraph}\r\n      onUpdate={saveGraph}\r\n    />\r\n  );\r\n\r\n  let persistentDamageChart = (\r\n    <Plot\r\n      className=\"plot\"\r\n      data={perDatasets}\r\n      layout={{\r\n        title: \"Expected Persistent Damage\",\r\n        autosize: true,\r\n        xaxis: { title: \"persistent damage\" },\r\n        yaxis: { title: \"chance\" },\r\n        legend: {\r\n          x: 1,\r\n          y: 1,\r\n          xanchor: \"right\",\r\n        },\r\n        margin: {\r\n          l: 40,\r\n          r: 40,\r\n        },\r\n      }}\r\n      useResizeHandler={true}\r\n      style={{ width: \"100%\", height: \"100%\" }}\r\n    />\r\n  );\r\n  let byLevelDamageChart = (\r\n    <Plot\r\n      className=\"plot\"\r\n      data={byLeveldatasets}\r\n      layout={{\r\n        title: byLevelTile,\r\n        autosize: true,\r\n        xaxis: { title: \"Level\" },\r\n        yaxis: { title: \"Expected Damage\" },\r\n        legend: {\r\n          x: 0,\r\n          y: 1,\r\n          xanchor: \"left\",\r\n        },\r\n        margin: {\r\n          l: 40,\r\n          r: 40,\r\n        },\r\n      }}\r\n      useResizeHandler={true}\r\n      style={{ width: \"100%\", height: \"100%\" }}\r\n      onInitialized={saveSingleLevelGraph}\r\n      onUpdate={saveSingleLevelGraph}\r\n    />\r\n  );\r\n  let byLevelPerDamageChart = (\r\n    <Plot\r\n      className=\"plot\"\r\n      data={byLevelperDatasets}\r\n      layout={{\r\n        title: byLevelTile,\r\n        autosize: true,\r\n        xaxis: { title: \"Level\" },\r\n        yaxis: { title: \"Expected Persistent Damage\" },\r\n        legend: {\r\n          x: 1,\r\n          y: 1,\r\n          xanchor: \"right\",\r\n        },\r\n        margin: {\r\n          l: 40,\r\n          r: 40,\r\n        },\r\n      }}\r\n      useResizeHandler={true}\r\n      style={{ width: \"100%\", height: \"100%\" }}\r\n    />\r\n  );\r\n  return {\r\n    expectedDamages,\r\n    expectedPersistentDamages,\r\n    damageChart,\r\n    persistentDamageChart,\r\n    byLevelDamageChart,\r\n    byLevelPerDamageChart,\r\n  };\r\n};\r\n\r\nconst evaluateByLevel = (\r\n  routines: Dictionary<Routine>,\r\n  evaluator: ActivityPathEvaluator\r\n) => {\r\n  let datasets = [];\r\n  let perDatasets = [];\r\n\r\n  // Evaluate the selected routine first so we can display other routines as a % of that\r\n  const selectedRoutineDamage: { [key: number]: number } = {};\r\n  const selectedRoutinePDamage: { [key: number]: number } = {};\r\n  if (\r\n    evaluator.target.percentSelectedRoutine &&\r\n    evaluator.selectedRoutine !== undefined\r\n  ) {\r\n    let routine = routines[evaluator.selectedRoutine]!;\r\n    for (let level = 1; level <= 20; level++) {\r\n      if (!evaluator.canEvaluate(level, routine)) continue;\r\n      let { expD, expP } = evaluator.evalRoutine(routine, 0, 0, level);\r\n      selectedRoutineDamage[level] = expD;\r\n      selectedRoutinePDamage[level] = expP;\r\n    }\r\n  }\r\n\r\n  for (let id in routines) {\r\n    let routine = routines[id]!;\r\n    if (!routine.display) continue;\r\n\r\n    const levelArray = [];\r\n    const expDbyLevel = [];\r\n    const expPDbyLevel = [];\r\n    for (let level = 1; level <= 20; level++) {\r\n      if (!evaluator.canEvaluate(level, routine)) continue;\r\n\r\n      let { expD, expP } = evaluator.evalRoutine(routine, 0, 0, level);\r\n      if (evaluator.target.percentSelectedRoutine) {\r\n        if (level in selectedRoutineDamage) {\r\n          levelArray.push(level);\r\n          expDbyLevel.push(expD / selectedRoutineDamage[level]);\r\n          expPDbyLevel.push(expP / selectedRoutinePDamage[level]);\r\n        }\r\n      } else {\r\n        levelArray.push(level);\r\n        expDbyLevel.push(expD);\r\n        expPDbyLevel.push(expP);\r\n      }\r\n    }\r\n    datasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: levelArray,\r\n      y: expDbyLevel,\r\n      yaxis: \"y\",\r\n    } as const);\r\n    perDatasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: levelArray,\r\n      y: expPDbyLevel,\r\n      yaxis: \"y\",\r\n    } as const);\r\n  }\r\n\r\n  return { datasets, perDatasets };\r\n};\r\n\r\nconst evaluatePM = (\r\n  routines: Dictionary<Routine>,\r\n  evaluator: ActivityPathEvaluator,\r\n  defense = true\r\n) => {\r\n  let datasets = [];\r\n  let perDatasets = [];\r\n  let expectedDamages = [];\r\n  let expectedPersistentDamages = [];\r\n\r\n  // return {\r\n  //   expectedDamages,\r\n  //   expectedPersistentDamages,\r\n  //   datasets,\r\n  //   perDatasets,\r\n  // };\r\n\r\n  for (let id in routines) {\r\n    let routine = routines[id]!;\r\n    if (!routine.display) continue;\r\n    if (!evaluator.canEvaluateSingleLevel(routine)) continue;\r\n\r\n    const bonusArray = [];\r\n    const expDbyBonus = [];\r\n    const expPDbyBonus = [];\r\n\r\n    for (let bonus = -5; bonus <= 5; bonus++) {\r\n      bonusArray.push(bonus);\r\n      let { expD, expP } = evaluator.evalRoutine(\r\n        routine,\r\n        defense ? bonus : 0,\r\n        defense ? 0 : bonus\r\n      );\r\n\r\n      if (bonus === 0) {\r\n        expectedDamages.push(\r\n          <div key={routine.id}>\r\n            {routine.name}\r\n            {\": \"}\r\n            {expD.toFixed(2)}\r\n          </div>\r\n        );\r\n        expectedPersistentDamages.push(\r\n          <div key={routine.id}>\r\n            {routine.name}\r\n            {\": \"}\r\n            {expP.toFixed(2)}\r\n          </div>\r\n        );\r\n      }\r\n\r\n      expDbyBonus.push(expD);\r\n      expPDbyBonus.push(expP);\r\n    }\r\n\r\n    datasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: bonusArray,\r\n      y: expDbyBonus,\r\n      yaxis: \"y\",\r\n    } as const);\r\n    perDatasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: bonusArray,\r\n      y: expPDbyBonus,\r\n      yaxis: \"y\",\r\n    } as const);\r\n  }\r\n  return { expectedDamages, expectedPersistentDamages, datasets, perDatasets };\r\n};\r\n\r\nconst evaluateDistribution = (\r\n  routines: Dictionary<Routine>,\r\n  evaluator: ActivityPathEvaluator\r\n) => {\r\n  let datasets = [];\r\n  let perDatasets = [];\r\n  let expectedDamages = [];\r\n  let expectedPersistentDamages = [];\r\n\r\n  // if (!evaluator.canEvaluate(displayLevel))\r\n  //   return {\r\n  //     expectedDamages,\r\n  //     expectedPersistentDamages,\r\n  //     datasets,\r\n  //     perDatasets,\r\n  //   };\r\n\r\n  for (let id in routines) {\r\n    let routine = routines[id]!;\r\n    if (!routine.display) continue;\r\n    if (!evaluator.canEvaluateSingleLevel(routine)) continue;\r\n    let {\r\n      expD,\r\n      expP,\r\n      dataArray,\r\n      routineDDist,\r\n      cumulative,\r\n      PdataArray,\r\n      routinePDDist,\r\n      Pcumulative,\r\n    } = evaluator.evalRoutine(routine, 0, 0);\r\n    expectedDamages.push(\r\n      <div key={routine.id}>\r\n        {routine.name}\r\n        {\": \"}\r\n        {expD.toFixed(2)}\r\n      </div>\r\n    );\r\n    expectedPersistentDamages.push(\r\n      <div key={routine.id}>\r\n        {routine.name}\r\n        {\": \"}\r\n        {expP.toFixed(2)}\r\n      </div>\r\n    );\r\n    datasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: dataArray,\r\n      y: cumulative,\r\n      yaxis: \"y\",\r\n    } as const);\r\n    datasets.push({\r\n      type: \"bar\",\r\n      name: expD.toFixed(2),\r\n      x: dataArray,\r\n      y: routineDDist,\r\n    } as const);\r\n    perDatasets.push({\r\n      type: \"scatter\",\r\n      name: routine.name,\r\n      x: PdataArray,\r\n      y: Pcumulative,\r\n    } as const);\r\n    perDatasets.push({\r\n      type: \"bar\",\r\n      name: expP.toFixed(2),\r\n      x: PdataArray,\r\n      y: routinePDDist,\r\n    } as const);\r\n  }\r\n  return { expectedDamages, expectedPersistentDamages, datasets, perDatasets };\r\n};\r\n\r\nexport default useGenerateGraphs;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../App/hooks\";\r\nimport { selecttargetById, Target, targetUpdated } from \"./targetSlice\";\r\n// import { damageTypes } from \"../Model/types\";\r\n// import {\r\n//   selectweaknessById,\r\n//   Weakness,\r\n//   weaknessCreated,\r\n//   weaknessRemoved,\r\n//   weaknessUpdated,\r\n// } from \"./weaknessSlice\";\r\n// import { EntityId } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../App/store\";\r\nimport {\r\n  ACOptions,\r\n  makeOptions,\r\n  SaveOptions,\r\n  weaknessOptions,\r\n} from \"../Model/options\";\r\nimport {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  Grid,\r\n  Paper,\r\n  TextField,\r\n  FormControlLabel,\r\n  Switch,\r\n  Slider,\r\n  Typography,\r\n  SelectChangeEvent,\r\n} from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\nimport {\r\n  selectweaknessById,\r\n  Weakness,\r\n  weaknessCreated,\r\n  weaknessRemoved,\r\n  weaknessUpdated,\r\n} from \"./weaknessSlice\";\r\nimport { damageTypes } from \"../Model/types\";\r\n\r\nconst SingleLevelInput = () => {\r\n  const id = 0;\r\n  const {\r\n    persistentMultiplier,\r\n    flatfooted,\r\n    percentSelectedRoutine,\r\n\r\n    graphType,\r\n    routineLevel,\r\n    targetLevel,\r\n    overrideAC,\r\n    overrideFort,\r\n    overrideRef,\r\n    overrideWill,\r\n    overridePer,\r\n\r\n    weaknesses,\r\n  } = useAppSelector((state: RootState) => selecttargetById(state, id)!);\r\n\r\n  const [AC, setAC] = useState(overrideAC.toString());\r\n  const [Fort, setFort] = useState(overrideFort.toString());\r\n  const [Ref, setRef] = useState(overrideRef.toString());\r\n  const [Will, setWill] = useState(overrideWill.toString());\r\n  const [Per, setPer] = useState(overridePer.toString());\r\n\r\n  useEffect(() => {\r\n    setAC(overrideAC.toString());\r\n    setFort(overrideFort.toString());\r\n    setRef(overrideRef.toString());\r\n    setWill(overrideWill.toString());\r\n    setPer(overridePer.toString());\r\n  }, [overrideAC]);\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      columns={{ xs: 10 }}\r\n      spacing={{ xs: 1, sm: 2 }}\r\n      sx={{ my: 1, p: 1 }}\r\n    >\r\n      <Grid item xs={5}>\r\n        <Box sx={{ px: 2 }}>\r\n          <Typography>Level: {routineLevel}</Typography>\r\n          <Slider\r\n            // aria-label=\"Always visible\"\r\n            value={routineLevel}\r\n            // getAriaValueText={(v) => `${v}`}\r\n            // valueLabelDisplay=\"on\"\r\n            step={1}\r\n            min={1}\r\n            max={20}\r\n            marks\r\n            onChange={(e, nv) => {\r\n              dispatch(\r\n                targetUpdated({\r\n                  id,\r\n                  changes: {\r\n                    routineLevel: nv,\r\n                  },\r\n                })\r\n              );\r\n            }}\r\n          />\r\n        </Box>\r\n      </Grid>\r\n\r\n      <Grid item xs={5}>\r\n        <Box sx={{ px: 2 }}>\r\n          <Typography>Target Level: {targetLevel}</Typography>\r\n          <Slider\r\n            // aria-label=\"Always visible\"\r\n            value={targetLevel}\r\n            // getAriaValueText={(v) => `${v}`}\r\n            // valueLabelDisplay=\"on\"\r\n            step={1}\r\n            min={-1}\r\n            max={24}\r\n            marks\r\n            onChange={(e, nv) => {\r\n              dispatch(\r\n                targetUpdated({\r\n                  id,\r\n                  changes: {\r\n                    targetLevel: nv,\r\n                  },\r\n                })\r\n              );\r\n            }}\r\n          />\r\n        </Box>\r\n      </Grid>\r\n\r\n      <Grid item xs={2}>\r\n        <TextField\r\n          fullWidth\r\n          label=\"AC\"\r\n          value={AC}\r\n          onChange={(e) => {\r\n            setAC(e.target.value);\r\n            e.target.focus();\r\n          }}\r\n          onBlur={() => {\r\n            let newVal = parseInt(AC);\r\n            setAC(newVal.toString());\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: {\r\n                  overrideAC: newVal,\r\n                },\r\n              })\r\n            );\r\n          }}\r\n          inputProps={{\r\n            step: 1,\r\n            min: 0,\r\n            max: 100,\r\n            type: \"number\",\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={2}>\r\n        <TextField\r\n          fullWidth\r\n          label=\"Fort\"\r\n          value={Fort}\r\n          onChange={(e) => {\r\n            setFort(e.target.value);\r\n            e.target.focus();\r\n          }}\r\n          onBlur={() => {\r\n            let newVal = parseInt(Fort);\r\n            setFort(newVal.toString());\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: {\r\n                  overrideFort: newVal,\r\n                },\r\n              })\r\n            );\r\n          }}\r\n          inputProps={{\r\n            step: 1,\r\n            min: 0,\r\n            max: 100,\r\n            type: \"number\",\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={2}>\r\n        <TextField\r\n          fullWidth\r\n          label=\"Ref\"\r\n          value={Ref}\r\n          onChange={(e) => {\r\n            setRef(e.target.value);\r\n            e.target.focus();\r\n          }}\r\n          onBlur={() => {\r\n            let newVal = parseInt(Ref);\r\n            setRef(newVal.toString());\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: {\r\n                  overrideRef: newVal,\r\n                },\r\n              })\r\n            );\r\n          }}\r\n          inputProps={{\r\n            step: 1,\r\n            min: 0,\r\n            max: 100,\r\n            type: \"number\",\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={2}>\r\n        <TextField\r\n          fullWidth\r\n          label=\"Will\"\r\n          value={Will}\r\n          onChange={(e) => {\r\n            setWill(e.target.value);\r\n            e.target.focus();\r\n          }}\r\n          onBlur={() => {\r\n            let newVal = parseInt(Will);\r\n            setWill(newVal.toString());\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: {\r\n                  overrideWill: newVal,\r\n                },\r\n              })\r\n            );\r\n          }}\r\n          inputProps={{\r\n            step: 1,\r\n            min: 0,\r\n            max: 100,\r\n            type: \"number\",\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={2}>\r\n        <TextField\r\n          fullWidth\r\n          label=\"Perception\"\r\n          value={Per}\r\n          onChange={(e) => {\r\n            setPer(e.target.value);\r\n            e.target.focus();\r\n          }}\r\n          onBlur={() => {\r\n            let newVal = parseInt(Per);\r\n            setPer(newVal.toString());\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: {\r\n                  overridePer: newVal,\r\n                },\r\n              })\r\n            );\r\n          }}\r\n          inputProps={{\r\n            step: 1,\r\n            min: 0,\r\n            max: 100,\r\n            type: \"number\",\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item container alignItems=\"center\">\r\n        <Typography>Resistance/Weakness: </Typography>\r\n      </Grid>\r\n      {weaknesses.map((weaknessId) => (\r\n        <WeaknessInput parentId={id} id={weaknessId} key={weaknessId} />\r\n      ))}\r\n      <AddWeakness parentId={id} />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport { SingleLevelInput };\r\n\r\nconst WeaknessInput = ({ id, parentId }: { id: number; parentId: number }) => {\r\n  // needs to have parent id to remove weakness\r\n  const { type, value } = useAppSelector((state: RootState) =>\r\n    selectweaknessById(state, id)\r\n  )!;\r\n  const [tempVal, setTempVal] = useState(value.toString());\r\n  const dispatch = useAppDispatch();\r\n\r\n  const updateOrRemoveWeakness = (e: SelectChangeEvent) => {\r\n    if (e?.target?.value === damageTypes.NONE) {\r\n      // remove this weakness\r\n      dispatch(weaknessRemoved({ id, parentId }));\r\n    } else {\r\n      dispatch(\r\n        weaknessUpdated({\r\n          id,\r\n          changes: { type: e.target.value as Weakness[\"type\"] },\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid item>\r\n      <WeaknessSelect value={type} onChange={updateOrRemoveWeakness} />\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"Value\"\r\n        value={tempVal}\r\n        sx={{ width: \"7ch\" }}\r\n        onChange={(e) => {\r\n          setTempVal(e.target.value);\r\n          e.target.focus();\r\n        }}\r\n        onBlur={() => {\r\n          let newVal = parseInt(tempVal);\r\n          setTempVal(newVal.toString());\r\n          dispatch(weaknessUpdated({ id, changes: { value: newVal } }));\r\n        }}\r\n        inputProps={{\r\n          step: 1,\r\n          min: -100,\r\n          max: 100,\r\n          type: \"number\",\r\n        }}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst AddWeakness = ({ parentId }: { parentId: number }) => {\r\n  const dispatch = useAppDispatch();\r\n  let [tempVal, setTempVal] = useState(\"0\");\r\n\r\n  // add a Weakness to TargetInfo id\r\n  const addWeakness = (e: SelectChangeEvent) => {\r\n    if (e.target.value !== damageTypes.NONE) {\r\n      // need to create a new weakness\r\n      dispatch(\r\n        weaknessCreated({\r\n          type: e.target.value,\r\n          value: tempVal,\r\n          parentId: parentId,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid item>\r\n      <WeaknessSelect value={damageTypes.NONE} onChange={addWeakness} />\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"Value\"\r\n        value={tempVal}\r\n        sx={{ width: \"7ch\" }}\r\n        onChange={(e) => {\r\n          setTempVal(e.target.value);\r\n          e.target.focus();\r\n        }}\r\n        inputProps={{\r\n          step: 1,\r\n          min: -100,\r\n          max: 100,\r\n          type: \"number\",\r\n        }}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst WeaknessSelect = ({\r\n  value,\r\n  onChange,\r\n}: {\r\n  value: Weakness[\"type\"];\r\n  onChange: (e: SelectChangeEvent) => void;\r\n}) => {\r\n  return (\r\n    <FormControl size=\"small\">\r\n      <InputLabel>Type</InputLabel>\r\n      <Select label=\"Type\" value={value} onChange={(e) => onChange(e)}>\r\n        {weaknessOptions}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../App/hooks\";\r\nimport { selecttargetById, Target, targetUpdated } from \"./targetSlice\";\r\n// import { damageTypes } from \"../Model/types\";\r\n// import {\r\n//   selectweaknessById,\r\n//   Weakness,\r\n//   weaknessCreated,\r\n//   weaknessRemoved,\r\n//   weaknessUpdated,\r\n// } from \"./weaknessSlice\";\r\n// import { EntityId } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../App/store\";\r\nimport { ACOptions, SaveOptions } from \"../Model/options\";\r\nimport {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  Grid,\r\n  Paper,\r\n  TextField,\r\n  FormControlLabel,\r\n  Switch,\r\n  Slider,\r\n  Typography,\r\n} from \"@mui/material\";\r\n\r\nconst JointInput = () => {\r\n  const id = 0;\r\n  const {\r\n    persistentMultiplier,\r\n    flatfooted,\r\n    percentSelectedRoutine,\r\n    // weaknesses,\r\n  } = useAppSelector((state: RootState) => selecttargetById(state, id)!);\r\n  const [perMul, setPerMul] = useState(persistentMultiplier.toString());\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    <Grid container spacing={{ xs: 1, sm: 2 }}>\r\n      <Grid item xs={6} sm={3} md={6} lg={3}>\r\n        <FormControlLabel\r\n          control={\r\n            <Switch\r\n              checked={flatfooted}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  targetUpdated({\r\n                    id,\r\n                    changes: { flatfooted: e.target.checked },\r\n                  })\r\n                )\r\n              }\r\n            />\r\n          }\r\n          label=\"Flatfooted\"\r\n        />\r\n      </Grid>\r\n\r\n      <Grid item xs={6} sm={3} md={6} lg={3}>\r\n        <TextField\r\n          fullWidth\r\n          label=\"Persistent Damage Multiplier\"\r\n          value={perMul}\r\n          onChange={(e) => {\r\n            setPerMul(e.target.value);\r\n            e.target.focus();\r\n          }}\r\n          onBlur={() => {\r\n            let newVal = parseFloat(perMul);\r\n            setPerMul(newVal.toString());\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: {\r\n                  persistentMultiplier: newVal,\r\n                },\r\n              })\r\n            );\r\n          }}\r\n          inputProps={{\r\n            step: 0.1,\r\n            min: 0,\r\n            max: 10,\r\n            type: \"number\",\r\n          }}\r\n        />\r\n      </Grid>\r\n\r\n      <Grid item xs={12} sm={6} md={12} lg={6}>\r\n        <FormControlLabel\r\n          control={\r\n            <Switch\r\n              checked={percentSelectedRoutine}\r\n              onChange={(e) =>\r\n                dispatch(\r\n                  targetUpdated({\r\n                    id,\r\n                    changes: { percentSelectedRoutine: e.target.checked },\r\n                  })\r\n                )\r\n              }\r\n            />\r\n          }\r\n          label=\"% of Selected Routine\"\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport { JointInput };\r\n","import { Button, useMediaQuery } from \"@mui/material\";\r\nimport React from \"react\";\r\n\r\nimport ShareIcon from \"@mui/icons-material/Share\";\r\nimport { saveImgLink, selectGraphUrl } from \"../Display/sharingSlice\";\r\nimport { useAppDispatch, useAppSelector } from \"../App/hooks\";\r\nimport { selectRoutineDescriptions } from \"../Routines/RoutineSlice/routineSlice\";\r\nimport { RootState } from \"../App/store\";\r\n\r\nconst url = \"https://api.imgur.com/3/image\";\r\nconst auth = \"Client-ID 9f68ffe6050491a\";\r\n\r\nexport const Upload = ({ byLevel = true }: { byLevel?: boolean }) => {\r\n  const graphUrl = useAppSelector((state: RootState) =>\r\n    selectGraphUrl(state, byLevel)\r\n  ).split(\";base64,\")[1];\r\n  const routineDescriptions = useAppSelector(selectRoutineDescriptions);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const isBigEnough = useMediaQuery((theme: any) => {\r\n    return theme.breakpoints.up(\"sm\");\r\n  });\r\n\r\n  const title = \"Graph from https://bahalbach.github.io/PF2Calculator/\";\r\n  let description = \"\";\r\n  // \"Graph made with https://bahalbach.github.io/PF2Calculator/ \";\r\n  for (let rd of routineDescriptions) {\r\n    description += rd + \" \\r\\n\";\r\n  }\r\n  description +=\r\n    \"\\n Graph made with https://bahalbach.github.io/PF2Calculator/ \";\r\n  const fd = new FormData();\r\n  fd.append(\"image\", graphUrl);\r\n  fd.append(\"title\", title);\r\n  fd.append(\"description\", description);\r\n  const requestOptions: RequestInit = {\r\n    method: \"POST\",\r\n    headers: { Authorization: auth },\r\n    body: fd,\r\n  };\r\n\r\n  const uploadImage = () => {\r\n    // console.log(description);\r\n    // console.log(routineDescriptions);\r\n\r\n    const tab = window.open(\"about:blank\");\r\n    fetch(url, requestOptions)\r\n      .then((response) => {\r\n        // console.log(response);\r\n        // if (response.ok) {\r\n        //   alert(\"Image uploaded to album\");\r\n        // }\r\n        return response.json();\r\n      })\r\n      .then((json) => {\r\n        console.log(`description is ${json.data.description}`);\r\n        dispatch(saveImgLink(json.data.link));\r\n        if (tab !== null) {\r\n          tab.location = json.data.link;\r\n          tab.focus();\r\n        }\r\n        // window.open(url, \"_blank\").focus();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        alert(\"Upload failed: \" + error);\r\n        tab?.close();\r\n      });\r\n  };\r\n  return (\r\n    <Button\r\n      onClick={uploadImage}\r\n      variant=\"contained\"\r\n      color=\"secondary\"\r\n      endIcon={<ShareIcon />}\r\n    >\r\n      {isBigEnough ? \"Share with IMGUR\" : \"Share\"}\r\n    </Button>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\n// import { graphTypeOptions, levelOptions } from \"../Model/options\";\r\nimport { graphTypes } from \"../Model/types\";\r\nimport { ByLevelInput } from \"./ByLevelInput\";\r\n\r\nimport {\r\n  Collapse,\r\n  FormControlLabel,\r\n  Grid,\r\n  Paper,\r\n  Select,\r\n  Switch,\r\n  Typography,\r\n  useMediaQuery,\r\n} from \"@mui/material\";\r\n\r\nimport useGenerateGraphs from \"./useGenerateGraphs\";\r\nimport { makeOptions } from \"../Model/options\";\r\nimport { Box } from \"@mui/system\";\r\nimport { SingleLevelInput } from \"./SingleLevelInput\";\r\nimport { JointInput } from \"./JointInput\";\r\nimport { Upload } from \"../Sharing/Upload\";\r\n\r\nconst Display = () => {\r\n  // evaluates routines and displays appropriate graphs\r\n  const [showByLevel, setShowByLevel] = useState<boolean>(true);\r\n  const [showSingleLevel, setShowSingleLevel] = useState<boolean>(false);\r\n  // const [addPersistent, setAddPersistent] = useState(false);\r\n  const [graphType, setGraphType] = useState<string>(graphTypes.DISTRIBUTION);\r\n  // const [displayLevel, setDisplayLevel] = useState(1);\r\n  const {\r\n    expectedDamages,\r\n    // expectedPersistentDamages,\r\n    damageChart,\r\n    // persistentDamageChart,\r\n    byLevelDamageChart,\r\n    // byLevelPerDamageChart,\r\n  } = useGenerateGraphs(graphType);\r\n  // const [perMulti, setPerMulti] = useState(2);\r\n  const isBigEnough = useMediaQuery((theme: any) => {\r\n    return theme.breakpoints.up(\"sm\");\r\n  });\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Paper sx={{ p: 1, my: 2 }}>\r\n        <Grid container>\r\n          <Grid item xs>\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={showByLevel}\r\n                  onChange={() => setShowByLevel(!showByLevel)}\r\n                />\r\n              }\r\n              label={isBigEnough ? \"Display By Level Graph\" : \"By Level Graph\"}\r\n              // sx={{ background: \"lightgrey\", width: 1 }}\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <Upload byLevel={true} />\r\n          </Grid>\r\n        </Grid>\r\n        <Collapse in={showByLevel}>\r\n          <ByLevelInput />\r\n          <JointInput />\r\n          <Box>{byLevelDamageChart}</Box>\r\n        </Collapse>\r\n      </Paper>\r\n\r\n      <Paper sx={{ p: 1, my: 2 }}>\r\n        <Grid container>\r\n          <Grid item xs>\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={showSingleLevel}\r\n                  onChange={() => setShowSingleLevel(!showSingleLevel)}\r\n                />\r\n              }\r\n              label={\r\n                isBigEnough\r\n                  ? \"Display Single Level Graph\"\r\n                  : \"Single Level Graph\"\r\n              }\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <Upload byLevel={false} />\r\n          </Grid>\r\n        </Grid>\r\n        <Collapse in={showSingleLevel}>\r\n          <SingleLevelInput />\r\n          {/* <JointInput /> */}\r\n          <Typography>Expected damage: </Typography>\r\n          {expectedDamages}\r\n          <Select\r\n            value={graphType}\r\n            onChange={(e) => setGraphType(e.target.value)}\r\n          >\r\n            {makeOptions(graphTypes)}\r\n          </Select>\r\n\r\n          <Box>{damageChart}</Box>\r\n        </Collapse>\r\n      </Paper>\r\n      {/* <div className=\"box\">\r\n        {\"Graph Type: \"}\r\n        <select\r\n          value={graphType}\r\n          onChange={(e) => setGraphType(e.target.value)}\r\n        >\r\n          {graphTypeOptions}\r\n        </select>\r\n        (\r\n        <select\r\n          value={displayLevel}\r\n          onChange={(e) => setDisplayLevel(parseInt(e.target.value))}\r\n        >\r\n          {levelOptions}\r\n        </select>\r\n        ){\" Show persistent damage: \"}\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={addPersistent}\r\n          onChange={(e) => setAddPersistent(e.target.checked)}\r\n        />\r\n        {/* , persistent damage multiplier:\r\n      <input\r\n        type=\"number\"\r\n        value={perMulti ? perMulti : 0}\r\n        onChange={(e) => setPerMulti(e.target.valueAsNumber)}\r\n      /> */}\r\n      {/* <div>\r\n          Expected Damage:\r\n          {expectedDamages}\r\n        </div>\r\n        {damageChart}\r\n        {byLevelDamageChart}\r\n        {!addPersistent ? (\r\n          \"\"\r\n        ) : (\r\n          <div>\r\n            <div>\r\n              Expected Persistent Damage:\r\n              {expectedPersistentDamages}\r\n            </div>\r\n            {persistentDamageChart}\r\n            {byLevelPerDamageChart}\r\n          </div>\r\n        )}\r\n      </div> */}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Display;\r\n","import React from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../App/hooks\";\r\n\r\n// import SendIcon from \"@mui/icons-material/Send\";\r\nimport AutoFixHighIcon from \"@mui/icons-material/AutoFixHigh\";\r\nimport GavelIcon from \"@mui/icons-material/Gavel\";\r\nimport {\r\n  IconButton,\r\n  ListItem,\r\n  ListItemButton,\r\n  ListItemIcon,\r\n  ListItemText,\r\n} from \"@mui/material\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\n\r\nimport { RootState } from \"../App/store\";\r\nimport {\r\n  selectactivityPathById,\r\n  setActivityPath,\r\n  selectSelectedActivityPath,\r\n  selectParentActivityId,\r\n  activityPathRemoved,\r\n} from \"./RoutineSlice/routineSlice\";\r\nimport { activityTypes } from \"../Model/types\";\r\n\r\nexport const ActivityPathStub = ({\r\n  id,\r\n  level,\r\n  displayChildren = true,\r\n}: {\r\n  id: number;\r\n  level: number;\r\n  displayChildren?: boolean;\r\n}) => {\r\n  const { parentId, routineId, condition, type, apIds } = useAppSelector(\r\n    (state: RootState) => selectactivityPathById(state, id)!\r\n  );\r\n  const selectedActivityPath = useAppSelector(selectSelectedActivityPath);\r\n  const parentActivityId = useAppSelector(selectParentActivityId);\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  let icon = <GavelIcon />;\r\n  switch (type) {\r\n    case activityTypes.SAVE:\r\n      icon = <AutoFixHighIcon />;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ListItem\r\n        disablePadding\r\n        secondaryAction={\r\n          <IconButton\r\n            edge=\"end\"\r\n            aria-label=\"delete\"\r\n            onClick={() =>\r\n              dispatch(activityPathRemoved({ id, parentId, routineId }))\r\n            }\r\n          >\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        }\r\n      >\r\n        <ListItemButton\r\n          selected={selectedActivityPath === id || parentActivityId === id}\r\n          sx={{ pl: 4 * level + 2 }}\r\n          onClick={() => dispatch(setActivityPath(id))}\r\n        >\r\n          {/* {displayCondition ? \"Conditions\" : \"\"} */}\r\n          <ListItemIcon>{icon}</ListItemIcon>\r\n          <ListItemText primary={type} secondary={level > 0 ? condition : \"\"} />\r\n        </ListItemButton>\r\n      </ListItem>\r\n      {displayChildren\r\n        ? apIds.map((apId) => (\r\n            <ActivityPathStub key={apId} id={apId} level={level + 1} />\r\n          ))\r\n        : \"\"}\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  SelectChangeEvent,\r\n  Tooltip,\r\n} from \"@mui/material\";\r\n\r\ntype Props = {\r\n  title: string;\r\n  label: string;\r\n  value: any;\r\n  onChange: (e: SelectChangeEvent) => void;\r\n  children: JSX.Element[];\r\n  fullWidth?: boolean;\r\n};\r\n\r\nconst TooltipSelect = ({\r\n  title,\r\n  label,\r\n  value,\r\n  onChange,\r\n  children,\r\n  fullWidth = false,\r\n}: Props) => {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  return (\r\n    <Tooltip\r\n      title={title}\r\n      open={open}\r\n      onFocus={() => {\r\n        console.log(\"focus1\");\r\n        setOpen(false);\r\n      }}\r\n    >\r\n      <FormControl\r\n        fullWidth={fullWidth}\r\n        size=\"small\"\r\n        onMouseEnter={() => setOpen(true)}\r\n        onMouseLeave={() => setOpen(false)}\r\n        onFocus={() => setOpen(false)}\r\n      >\r\n        <InputLabel>{label}</InputLabel>\r\n        <Select label={label} value={value} onChange={onChange}>\r\n          {children}\r\n        </Select>\r\n      </FormControl>\r\n    </Tooltip>\r\n  );\r\n};\r\n\r\nexport { TooltipSelect };\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  FormControl,\r\n  Select,\r\n  InputLabel,\r\n  TextField,\r\n  Grid,\r\n  IconButton,\r\n  Tooltip,\r\n} from \"@mui/material\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { ActionCreatorWithPayload } from \"@reduxjs/toolkit\";\r\n\r\nimport { Dispatch } from \"redux\";\r\nimport { levelOptions } from \"../../Model/options\";\r\nimport { Adjustment } from \"../RoutineSlice/RoutineTypes\";\r\nimport { ArrowRight } from \"@mui/icons-material\";\r\nimport { TooltipSelect } from \"../../TooltipSelect\";\r\n\r\ntype Adjustments = {\r\n  [level: number]: number;\r\n};\r\ntype Entry = [number, string];\r\n\r\nexport const generateEntries = (adjustments: Adjustments) => {\r\n  let currentValue = 0;\r\n  const entries: Entry[] = [];\r\n  for (let level = 1; level <= 20; level++) {\r\n    if (currentValue !== adjustments[level]) {\r\n      entries.push([level, (adjustments[level] - currentValue).toString()]);\r\n      currentValue = adjustments[level];\r\n    }\r\n  }\r\n  return entries;\r\n};\r\n\r\nconst generateAdjustments = (entries: Entry[]) => {\r\n  const adjustments: Adjustments = {};\r\n  let currentValue = 0;\r\n  let total = 0;\r\n  let currentIndex = 0;\r\n  // console.log(entries);\r\n  for (let level = 1; level <= 20; level++) {\r\n    if (entries[currentIndex] && entries[currentIndex][0] === level) {\r\n      // console.log(\"here\");\r\n      currentValue = parseInt(entries[currentIndex][1]);\r\n      if (!currentValue) currentValue = 0;\r\n      currentIndex++;\r\n      total += currentValue;\r\n    }\r\n    adjustments[level] = total;\r\n  }\r\n  return adjustments;\r\n};\r\n\r\nexport const adjustmentsFromLevelChange = (\r\n  entries: Entry[],\r\n  index: number,\r\n  newLevel: number\r\n) => {\r\n  entries[index] = [newLevel, entries[index][1]];\r\n  entries.sort((a, b) => a[0] - b[0]);\r\n  return generateAdjustments(entries);\r\n};\r\n\r\nexport const adjustmentsFromValueChange = (\r\n  entries: Entry[],\r\n  index: number,\r\n  newValue: string\r\n) => {\r\n  entries[index] = [entries[index][0], newValue];\r\n  return generateAdjustments(entries);\r\n};\r\n\r\nexport const adjustmentsFromNewEntry = (entries: Entry[]) => {\r\n  let lastValue: Entry =\r\n    entries.length > 0 ? entries[entries.length - 1] : [0, \"0\"];\r\n  entries.push([lastValue[0] + 1, (0).toString()]);\r\n  return generateAdjustments(entries);\r\n};\r\n\r\nexport const LevelList = (\r\n  name: string,\r\n  dispatch: Dispatch<any>,\r\n  action: ActionCreatorWithPayload<any, string>,\r\n  id: number,\r\n  adjustments: Adjustment\r\n) => {\r\n  const baseEntries = generateEntries(adjustments);\r\n  let [entries, setEntries] = useState(baseEntries);\r\n  let be = JSON.stringify(baseEntries);\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  useEffect(() => setEntries(baseEntries), [be]);\r\n  let levelList = [];\r\n\r\n  for (let i = 0; i < entries.length; i++) {\r\n    levelList.push(\r\n      <Grid item key={i}>\r\n        <TooltipSelect\r\n          title=\"The level where this bonus is added, all later levels will have this bonus added. Please only add 1 bonus per level. Bonuses of 0 are removed.\"\r\n          label=\"Level\"\r\n          value={entries[i][0]}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              action({\r\n                id,\r\n                changes: {\r\n                  [name]: adjustmentsFromLevelChange(\r\n                    entries,\r\n                    i,\r\n                    Number(e.target.value)\r\n                  ),\r\n                },\r\n              })\r\n            )\r\n          }\r\n        >\r\n          {levelOptions}\r\n        </TooltipSelect>\r\n\r\n        <TextField\r\n          size=\"small\"\r\n          label=\"Bonus\"\r\n          sx={{ width: \"7ch\" }}\r\n          value={entries[i][1]}\r\n          onChange={(e) => {\r\n            let newEntries = entries.slice();\r\n            newEntries[i] = [newEntries[i][0], e.target.value];\r\n            setEntries(newEntries);\r\n            e.target.focus();\r\n          }}\r\n          onBlur={() => {\r\n            let newEntries = entries.slice();\r\n            for (let ni = 0; ni < entries.length; ni++) {\r\n              newEntries[ni] = [\r\n                newEntries[ni][0],\r\n                parseInt(newEntries[ni][1]).toString(),\r\n              ];\r\n            }\r\n            setEntries(newEntries);\r\n            dispatch(\r\n              action({\r\n                id,\r\n                changes: {\r\n                  [name]: generateAdjustments(entries),\r\n                },\r\n              })\r\n            );\r\n          }}\r\n          inputProps={{\r\n            step: 1,\r\n            min: -100,\r\n            max: 100,\r\n            type: \"number\",\r\n          }}\r\n        />\r\n        {/* <input\r\n          type=\"number\"\r\n          value={entries[i][1]}\r\n          onChange={(e) => {\r\n            let newEntries = entries.slice();\r\n            newEntries[i][1] = e.target.value;\r\n            setEntries(newEntries);\r\n            e.target.focus();\r\n          }}\r\n          onBlur={(e) =>\r\n            dispatch(\r\n              action({\r\n                id,\r\n                changes: {\r\n                  [name]: generateAdjustments(entries),\r\n                },\r\n              })\r\n            )\r\n          }\r\n        /> */}\r\n      </Grid>\r\n    );\r\n  }\r\n  levelList.push(\r\n    <Grid item key=\"addButton\">\r\n      <Tooltip title=\"Add a bonus at a specified level.\">\r\n        <IconButton\r\n          color=\"primary\"\r\n          aria-label=\"Add button\"\r\n          onClick={() =>\r\n            dispatch(\r\n              action({\r\n                id,\r\n                changes: {\r\n                  [name]: adjustmentsFromNewEntry(entries),\r\n                },\r\n              })\r\n            )\r\n          }\r\n        >\r\n          <AddIcon />\r\n        </IconButton>\r\n      </Tooltip>\r\n    </Grid>\r\n  );\r\n  return levelList;\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../../App/hooks\";\r\nimport { LevelList } from \"./LevelList\";\r\nimport {\r\n  damageRemoved,\r\n  damageUpdated,\r\n  selectdamageById,\r\n} from \"../RoutineSlice/routineSlice\";\r\nimport {\r\n  damageConditionOptions,\r\n  damageTrendOptions,\r\n  damageTypeOptions,\r\n  diceSizeOptions,\r\n  dieTrendOptions,\r\n  makeOptions,\r\n  materialOptions,\r\n  multiplierOptions,\r\n} from \"../../Model/options\";\r\nimport {\r\n  DamageTrend,\r\n  damageTrends,\r\n  DieTrend,\r\n  whenConditions,\r\n} from \"../../Model/types\";\r\nimport { RootState } from \"../../App/store\";\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  Collapse,\r\n  FormControl,\r\n  FormControlLabel,\r\n  Grid,\r\n  IconButton,\r\n  InputLabel,\r\n  ListItemButton,\r\n  Select,\r\n  Slider,\r\n  Switch,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport Divider from \"@mui/material/Divider\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport { Box } from \"@mui/system\";\r\nimport { TooltipSelect } from \"../../TooltipSelect\";\r\nimport { Adjustment } from \"../RoutineSlice/RoutineTypes\";\r\nimport { damageTrendValues, dieTrendValues } from \"../../Model/defaults\";\r\n\r\n// const useStyles = makeStyles({\r\n//   transition: theme.transitions.create([\"background\", \"background-color\"], {\r\n//     duration: theme.transitions.duration.complex,\r\n//   }),\r\n//   \"&:hover\": {\r\n//     backgroundColor: \"#BBB\",\r\n//   },\r\n// });\r\nexport const Damage = ({ parentId, id }: { parentId: number; id: number }) => {\r\n  const {\r\n    damageCondition,\r\n    damageType,\r\n    material,\r\n    persistent,\r\n    multiplier,\r\n    damageWhen,\r\n\r\n    dieTrend,\r\n    dieAdjustments,\r\n    diceSize,\r\n    fatal,\r\n    fatalDie,\r\n    damageTrend,\r\n    damageAdjustments,\r\n  } = useAppSelector((state: RootState) => selectdamageById(state, id)!);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const [showContent, setShowContent] = useState(false);\r\n\r\n  const dieLevelList = LevelList(\r\n    \"dieAdjustments\",\r\n    dispatch,\r\n    damageUpdated,\r\n    id,\r\n    dieAdjustments\r\n  );\r\n\r\n  const damageLevelList = LevelList(\r\n    \"damageAdjustments\",\r\n    dispatch,\r\n    damageUpdated,\r\n    id,\r\n    damageAdjustments\r\n  );\r\n\r\n  const damageTrendList = damageTrend.map((dt, index) => {\r\n    return (\r\n      <Grid item key={index}>\r\n        <TooltipSelect\r\n          title=\"Adds bonus damage that applies the appropriate amount of damage at appropriate levels. For 'Weapon' and 'Precise Strike' the bonus is the number of dice.\"\r\n          label=\"Damage Trend\"\r\n          value={dt}\r\n          onChange={(e) => {\r\n            let newdt = damageTrend.slice();\r\n            if (e.target.value === damageTrends.NONE) {\r\n              newdt.splice(index, 1);\r\n            } else {\r\n              newdt[index] = e.target.value as DamageTrend;\r\n            }\r\n            dispatch(\r\n              damageUpdated({\r\n                id,\r\n                changes: { damageTrend: newdt },\r\n              })\r\n            );\r\n          }}\r\n        >\r\n          {damageTrendOptions}\r\n        </TooltipSelect>\r\n      </Grid>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <DamageDisplay\r\n        damageInfo={{\r\n          dieTrend,\r\n          dieAdjustments,\r\n          diceSize,\r\n          fatal,\r\n          fatalDie,\r\n          damageTrend,\r\n          damageAdjustments,\r\n        }}\r\n        onClick={() => setShowContent(!showContent)}\r\n      />\r\n      <Collapse in={showContent}>\r\n        <Box\r\n          sx={{\r\n            mt: 1,\r\n            p: 1,\r\n            mb: 1,\r\n            \"&:hover\": { bgcolor: \"rgb(50,50,50,.05)\" },\r\n          }}\r\n        >\r\n          {/* <Divider textAlign=\"left\" sx={{ mt: 0, mb: 1 }}></Divider> */}\r\n          <Grid container spacing={{ xs: 1, sm: 2 }} sx={{ mb: 1 }}>\r\n            <Grid item xs=\"auto\">\r\n              <IconButton\r\n                color=\"primary\"\r\n                size=\"small\"\r\n                onClick={(e) => {\r\n                  dispatch(damageRemoved({ id, parentId }));\r\n                }}\r\n              >\r\n                <DeleteIcon />\r\n              </IconButton>\r\n            </Grid>\r\n            {/* <Grid item xs=\"auto\">\r\n              <Typography>Apply damage </Typography>\r\n            </Grid> */}\r\n\r\n            <Grid item xs>\r\n              <TooltipSelect\r\n                fullWidth={true}\r\n                title=\"When this damage instance applies. For example: for extra damage on a critical hit, like with deadly or fatal weapons, use 'On Crit'. Don't forget to change when using a save instead of an attack.\"\r\n                value={damageCondition}\r\n                label=\"Condition\"\r\n                onChange={(e) =>\r\n                  dispatch(\r\n                    damageUpdated({\r\n                      id,\r\n                      changes: { damageCondition: e.target.value },\r\n                    })\r\n                  )\r\n                }\r\n              >\r\n                {damageConditionOptions}\r\n              </TooltipSelect>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <FormControl size=\"small\" fullWidth>\r\n                <InputLabel id=\"damage-when-input\">When Target</InputLabel>\r\n                <Select\r\n                  labelId=\"damage-when-input\"\r\n                  id=\"damage-when\"\r\n                  multiple\r\n                  value={damageWhen}\r\n                  label=\"When Target\"\r\n                  renderValue={(selected) => selected.join(\" or \")}\r\n                  onChange={(e) =>\r\n                    dispatch(\r\n                      damageUpdated({\r\n                        id,\r\n                        changes: { damageWhen: e.target.value },\r\n                      })\r\n                    )\r\n                  }\r\n                >\r\n                  {makeOptions(whenConditions)}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container spacing={{ xs: 1, sm: 2 }}>\r\n            <Grid item>\r\n              <TooltipSelect\r\n                title=\"How much the damage is multiplied by. For example: if you want to average the damage of two different attacks, add both and set the multiplier to .5\"\r\n                value={multiplier}\r\n                label=\"Multiplier\"\r\n                onChange={(e) =>\r\n                  dispatch(\r\n                    damageUpdated({\r\n                      id,\r\n                      changes: { multiplier: Number(e.target.value) },\r\n                    })\r\n                  )\r\n                }\r\n              >\r\n                {multiplierOptions}\r\n              </TooltipSelect>\r\n            </Grid>\r\n            <Grid item>\r\n              <FormControl size=\"small\">\r\n                <InputLabel id=\"damage-type-input\">Type</InputLabel>\r\n                <Select\r\n                  labelId=\"damage-type-input\"\r\n                  id=\"damage-type\"\r\n                  value={damageType}\r\n                  label=\"Type\"\r\n                  onChange={(e) =>\r\n                    dispatch(\r\n                      damageUpdated({\r\n                        id,\r\n                        changes: { damageType: e.target.value },\r\n                      })\r\n                    )\r\n                  }\r\n                >\r\n                  {damageTypeOptions}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item>\r\n              <FormControl size=\"small\">\r\n                <InputLabel id=\"damage-material-input\">Material</InputLabel>\r\n                <Select\r\n                  labelId=\"damage-material-input\"\r\n                  id=\"damage-material\"\r\n                  value={material}\r\n                  label=\"Material\"\r\n                  onChange={(e) =>\r\n                    dispatch(\r\n                      damageUpdated({\r\n                        id,\r\n                        changes: { material: e.target.value },\r\n                      })\r\n                    )\r\n                  }\r\n                >\r\n                  {materialOptions}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item>\r\n              <Tooltip title=\"If this damage is persistent. Persistent damage is multiplied by the 'Persistent Damage Multiplier' above the By Level graph.\">\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      checked={persistent}\r\n                      onChange={(e) =>\r\n                        dispatch(\r\n                          damageUpdated({\r\n                            id,\r\n                            changes: { persistent: e.target.checked },\r\n                          })\r\n                        )\r\n                      }\r\n                    />\r\n                  }\r\n                  label=\"Persistent\"\r\n                />\r\n              </Tooltip>\r\n            </Grid>\r\n          </Grid>\r\n          <Divider textAlign=\"left\" sx={{ mt: 1, mb: 1 }}>\r\n            Dice\r\n          </Divider>\r\n          <Grid container spacing={{ xs: 1, sm: 2 }}>\r\n            <Grid item>\r\n              <TooltipSelect\r\n                title=\"When dice are added to the damage. At each level in (), 1 die of the selected size is added to the damage\"\r\n                value={dieTrend}\r\n                label=\"Damage Dice\"\r\n                onChange={(e) =>\r\n                  dispatch(\r\n                    damageUpdated({\r\n                      id,\r\n                      changes: { dieTrend: e.target.value },\r\n                    })\r\n                  )\r\n                }\r\n              >\r\n                {dieTrendOptions}\r\n              </TooltipSelect>\r\n            </Grid>\r\n            {dieLevelList}\r\n            <Grid item>\r\n              <FormControl size=\"small\">\r\n                <InputLabel id=\"dice-size-input\">Die Size</InputLabel>\r\n                <Select\r\n                  labelId=\"dice-size-input\"\r\n                  id=\"dice-size\"\r\n                  value={diceSize}\r\n                  label=\"Die Size\"\r\n                  onChange={(e) =>\r\n                    dispatch(\r\n                      damageUpdated({\r\n                        id,\r\n                        changes: { diceSize: e.target.value },\r\n                      })\r\n                    )\r\n                  }\r\n                >\r\n                  {diceSizeOptions}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item>\r\n              <Tooltip title=\"For Fatal. If this damage uses a different die size on a crit. For Fatal you still need to add another die with the 'On Crit' Condition.\">\r\n                <FormControlLabel\r\n                  control={\r\n                    <Switch\r\n                      checked={fatal}\r\n                      onChange={(e) =>\r\n                        dispatch(\r\n                          damageUpdated({\r\n                            id,\r\n                            changes: { fatal: e.target.checked },\r\n                          })\r\n                        )\r\n                      }\r\n                    />\r\n                  }\r\n                  label=\"On Crit Die\"\r\n                />\r\n              </Tooltip>\r\n            </Grid>\r\n            {fatal ? (\r\n              <Grid item>\r\n                <FormControl size=\"small\">\r\n                  <InputLabel id=\"fatal-size-input\">Die Size</InputLabel>\r\n                  <Select\r\n                    labelId=\"fatal-size-input\"\r\n                    id=\"fatal-size\"\r\n                    value={fatalDie}\r\n                    label=\"Die Size\"\r\n                    onChange={(e) =>\r\n                      dispatch(\r\n                        damageUpdated({\r\n                          id,\r\n                          changes: { fatalDie: e.target.value },\r\n                        })\r\n                      )\r\n                    }\r\n                  >\r\n                    {diceSizeOptions}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </Grid>\r\n          <Divider textAlign=\"left\" sx={{ mt: 1, mb: 1 }}>\r\n            Static Damage\r\n          </Divider>\r\n          <Grid container spacing={{ xs: 1, sm: 2 }}>\r\n            {damageTrendList}\r\n            <Grid item>\r\n              <Tooltip title=\"Adds bonus damage that applies the appropriate amount of damage at appropriate levels. For 'Weapon' and 'Precise Strike' the bonus is the number of dice.\">\r\n                <Button\r\n                  onClick={() => {\r\n                    let newdt = damageTrend.slice();\r\n                    newdt.push(damageTrends.NONE);\r\n                    dispatch(\r\n                      damageUpdated({\r\n                        id,\r\n                        changes: {\r\n                          damageTrend: newdt,\r\n                        },\r\n                      })\r\n                    );\r\n                  }}\r\n                >\r\n                  Add damage scaling\r\n                </Button>\r\n              </Tooltip>\r\n            </Grid>\r\n            {damageLevelList}\r\n          </Grid>\r\n          {/* <Divider textAlign=\"left\" sx={{ mt: 1, mb: 1 }}></Divider> */}\r\n        </Box>\r\n      </Collapse>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\ninterface PropsType {\r\n  damageInfo: {\r\n    dieTrend: DieTrend;\r\n    dieAdjustments: Adjustment;\r\n    diceSize: number;\r\n    fatal: boolean;\r\n    fatalDie: number;\r\n    damageTrend: DamageTrend[];\r\n    damageAdjustments: Adjustment;\r\n  };\r\n  onClick: any;\r\n}\r\nconst DamageDisplay = ({\r\n  damageInfo: {\r\n    dieTrend,\r\n    dieAdjustments,\r\n    diceSize,\r\n    fatal,\r\n    fatalDie,\r\n    damageTrend,\r\n    damageAdjustments,\r\n  },\r\n  onClick,\r\n}: PropsType) => {\r\n  const [level, setLevel] = useState(20);\r\n  let diceNumber = dieTrendValues[dieTrend][level] + dieAdjustments[level];\r\n  let staticDamage = damageAdjustments[level];\r\n  for (let dt of damageTrend) {\r\n    staticDamage += damageTrendValues[dt][level];\r\n  }\r\n  let averageDamage = staticDamage + ((diceSize + 1) / 2) * diceNumber;\r\n  let fatalString =\r\n    \" (\" + diceNumber.toString() + \"d\" + fatalDie.toString() + \" on Crit)\";\r\n\r\n  let damageString =\r\n    diceNumber.toString() +\r\n    \"d\" +\r\n    diceSize.toString() +\r\n    (fatal ? fatalString : \"\") +\r\n    \" + \" +\r\n    staticDamage.toString() +\r\n    \" (avg: \" +\r\n    averageDamage.toString() +\r\n    \")\";\r\n\r\n  return (\r\n    <Grid container alignItems=\"center\" columnSpacing={{ xs: 2 }}>\r\n      <Grid item xs=\"auto\">\r\n        <ListItemButton onClick={onClick}>\r\n          <Typography variant=\"h6\">{\"Damage \"}</Typography>\r\n        </ListItemButton>\r\n      </Grid>\r\n      <Grid item sx={{ ml: -2, mt: 1, width: 100 }}>\r\n        <Slider\r\n          size=\"small\"\r\n          value={level}\r\n          min={1}\r\n          max={20}\r\n          marks\r\n          // @ts-ignore\r\n          onChange={(_, nv) => setLevel(nv)}\r\n          valueLabelDisplay=\"auto\"\r\n          // getAriaValueText={(v) => `${v}`}\r\n        />\r\n      </Grid>\r\n      <Grid item>\r\n        <Typography component=\"span\">\r\n          {damageString + \" at level \" + level.toString()}\r\n        </Typography>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../../App/hooks\";\r\n\r\nimport {\r\n  Collapse,\r\n  FormControl,\r\n  Grid,\r\n  IconButton,\r\n  InputLabel,\r\n  ListItemButton,\r\n  Select,\r\n  Slider,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\n\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport { Box } from \"@mui/system\";\r\n\r\nimport {\r\n  conditionOptions,\r\n  effectTypeOptions,\r\n  makeOptions,\r\n} from \"../../Model/options\";\r\nimport { RootState } from \"../../App/store\";\r\nimport {\r\n  effectRemoved,\r\n  effectUpdated,\r\n  selecteffectById,\r\n} from \"../RoutineSlice/routineSlice\";\r\nimport { effectValueTypes, whenConditions } from \"../../Model/types\";\r\nimport { TooltipSelect } from \"../../TooltipSelect\";\r\n\r\nexport const Effect = ({ parentId, id }: { parentId: number; id: number }) => {\r\n  const {\r\n    effectCondition,\r\n    effectType,\r\n    effectValue,\r\n    startLevel,\r\n    endLevel,\r\n    damageWhen,\r\n  } = useAppSelector((state: RootState) => selecteffectById(state, id)!);\r\n  const dispatch = useAppDispatch();\r\n  let [value, setValue] = useState(effectValue ? effectValue.toString() : \"0\");\r\n  // @ts-ignore\r\n  const showValue = Object.values(effectValueTypes).includes(effectType);\r\n  let [validLevels, setValidLevels] = useState([startLevel, endLevel]);\r\n  useEffect(\r\n    () => setValidLevels([startLevel, endLevel]),\r\n    [startLevel, endLevel]\r\n  );\r\n  const [showContent, setShowContent] = useState(false);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container columnSpacing={{ xs: 2 }} alignItems=\"baseline\">\r\n        <Grid item xs=\"auto\">\r\n          <ListItemButton onClick={() => setShowContent(!showContent)}>\r\n            <Typography variant=\"h6\">Effect</Typography>\r\n          </ListItemButton>\r\n        </Grid>\r\n        <Grid item>\r\n          <Typography>\r\n            {effectType} {showValue ? effectValue : \"\"}\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n      <Collapse in={showContent}>\r\n        <Box\r\n          sx={{\r\n            p: 1,\r\n            mb: 1,\r\n            \"&:hover\": { bgcolor: \"rgb(50,50,50,.05)\" },\r\n          }}\r\n        >\r\n          <Grid container spacing={{ xs: 1, sm: 2 }} sx={{ mb: 1 }}>\r\n            <Grid item xs=\"auto\">\r\n              <IconButton\r\n                aria-label=\"delete\"\r\n                color=\"primary\"\r\n                onClick={(e) => {\r\n                  dispatch(effectRemoved({ id, parentId }));\r\n                }}\r\n              >\r\n                <DeleteIcon />\r\n              </IconButton>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <TooltipSelect\r\n                fullWidth={true}\r\n                title=\"When this effect applies, depending on the result of this activities roll. For example the spell 'fear' should have 'On Success' 'Frightened' '1', 'On Failure' 'Frightened' '2' etc.\"\r\n                value={effectCondition}\r\n                label=\"Condition\"\r\n                onChange={(e) =>\r\n                  dispatch(\r\n                    effectUpdated({\r\n                      id,\r\n                      changes: { effectCondition: e.target.value },\r\n                    })\r\n                  )\r\n                }\r\n              >\r\n                {conditionOptions}\r\n              </TooltipSelect>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <FormControl size=\"small\" fullWidth>\r\n                <InputLabel id=\"damage-when-input\">When Target</InputLabel>\r\n                <Select\r\n                  labelId=\"damage-when-input\"\r\n                  id=\"damage-when\"\r\n                  multiple\r\n                  value={damageWhen}\r\n                  label=\"When Target\"\r\n                  renderValue={(selected) => selected.join(\" or \")}\r\n                  onChange={(e) =>\r\n                    dispatch(\r\n                      effectUpdated({\r\n                        id,\r\n                        changes: { damageWhen: e.target.value },\r\n                      })\r\n                    )\r\n                  }\r\n                >\r\n                  {makeOptions(whenConditions)}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container spacing={{ xs: 1, sm: 2 }}>\r\n            <Grid item>\r\n              <TooltipSelect\r\n                title=\"The effect that is applied to the target when 'Condition' is met.\"\r\n                value={effectType}\r\n                label=\"Effect\"\r\n                onChange={(e) =>\r\n                  dispatch(\r\n                    effectUpdated({\r\n                      id,\r\n                      changes: { effectType: e.target.value },\r\n                    })\r\n                  )\r\n                }\r\n              >\r\n                {effectTypeOptions}\r\n              </TooltipSelect>\r\n            </Grid>\r\n\r\n            {showValue ? (\r\n              <Grid item>\r\n                <TextField\r\n                  size=\"small\"\r\n                  label=\"Value\"\r\n                  sx={{ width: \"7ch\" }}\r\n                  value={value}\r\n                  onChange={(e) => {\r\n                    setValue(e.target.value);\r\n                    e.target.focus();\r\n                  }}\r\n                  onBlur={() => {\r\n                    let newVal = parseInt(value);\r\n                    setValue(newVal.toString());\r\n                    dispatch(\r\n                      effectUpdated({\r\n                        id,\r\n                        changes: {\r\n                          effectValue: newVal,\r\n                        },\r\n                      })\r\n                    );\r\n                  }}\r\n                />\r\n              </Grid>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n\r\n            <Grid item sx={{ px: 2 }}>\r\n              <Typography align=\"center\">\r\n                Valid Levels: {startLevel} to {endLevel}\r\n              </Typography>\r\n              <Slider\r\n                size=\"small\"\r\n                getAriaLabel={() => \"Valid levels\"}\r\n                value={validLevels}\r\n                min={1}\r\n                max={20}\r\n                marks\r\n                // @ts-ignore\r\n                onChange={(e, nv: number[]) => setValidLevels(nv)}\r\n                onBlur={() =>\r\n                  dispatch(\r\n                    effectUpdated({\r\n                      id,\r\n                      changes: {\r\n                        startLevel: validLevels[0],\r\n                        endLevel: validLevels[1],\r\n                      },\r\n                    })\r\n                  )\r\n                }\r\n                valueLabelDisplay=\"auto\"\r\n                getAriaValueText={(v) => `${v}`}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </Collapse>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../../App/hooks\";\r\n\r\nimport { LevelList } from \"./LevelList\";\r\nimport {\r\n  activityPathContinued,\r\n  damageCreated,\r\n  emptyActivityPathCreated,\r\n  setNewActivityParent,\r\n} from \"../RoutineSlice/routineSlice\";\r\nimport {\r\n  activityTypeOptions,\r\n  profTrendOptions,\r\n  conditionOptions,\r\n  defenseOptions,\r\n  MAPOptions,\r\n  rollOptions,\r\n  statTrendOptions,\r\n  itemBTrendOptions,\r\n} from \"../../Model/options\";\r\nimport {\r\n  activityPathRemoved,\r\n  activityPathUpdated,\r\n  selectactivityPathById,\r\n} from \"../RoutineSlice/routineSlice\";\r\nimport {\r\n  activityTypes,\r\n  ItemTrend,\r\n  MAP,\r\n  ProfTrend,\r\n  rollTypes,\r\n  StatTrend,\r\n} from \"../../Model/types\";\r\nimport { Damage } from \"./Damage\";\r\nimport { Effect } from \"./Effect\";\r\nimport { effectCreated } from \"../RoutineSlice/routineSlice\";\r\nimport { RootState } from \"../../App/store\";\r\nimport {\r\n  Button,\r\n  ButtonBase,\r\n  Collapse,\r\n  FormControl,\r\n  Grid,\r\n  InputLabel,\r\n  List,\r\n  ListItemButton,\r\n  ListSubheader,\r\n  Paper,\r\n  Select,\r\n  Slider,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport { ActivityPathStub } from \"../ActivityPathStub\";\r\nimport { TooltipSelect } from \"../../TooltipSelect\";\r\nimport { selectRoutineLevel } from \"../../Display/targetSlice\";\r\nimport {\r\n  itemTrendValues,\r\n  MAPvalues,\r\n  profTrendValues,\r\n  statTrendValues,\r\n} from \"../../Model/defaults\";\r\nimport { Adjustment } from \"../RoutineSlice/RoutineTypes\";\r\nimport { Box } from \"@mui/system\";\r\n\r\nexport const ActivityPath = ({\r\n  id,\r\n  level = 0,\r\n}: {\r\n  id: number;\r\n  level?: number;\r\n}) => {\r\n  const {\r\n    parentId,\r\n    routineId,\r\n    condition,\r\n\r\n    type,\r\n    MAP,\r\n\r\n    damages,\r\n    effects,\r\n    apIds,\r\n  } = useAppSelector((state: RootState) => selectactivityPathById(state, id)!);\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const [showContent, setShowContent] = useState(false);\r\n\r\n  const showMAP = type !== activityTypes.SAVE && MAPvalues[MAP] !== 0;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Paper sx={{ my: 2, p: 1, ml: level * 2 }}>\r\n        <Grid container spacing={{ xs: 1, sm: 2 }} alignItems=\"center\">\r\n          <Grid item xs=\"auto\">\r\n            <ListItemButton onClick={() => setShowContent(!showContent)}>\r\n              <Typography variant=\"h6\">Activity</Typography>\r\n            </ListItemButton>\r\n          </Grid>\r\n          <Grid item xs=\"auto\">\r\n            <Typography>\r\n              {type} {showMAP ? MAPvalues[MAP] : \"\"}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs=\"auto\">\r\n            <Button\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              startIcon={<DeleteIcon />}\r\n              onClick={(e) => {\r\n                dispatch(activityPathRemoved({ id, parentId, routineId }));\r\n              }}\r\n            >\r\n              Delete\r\n            </Button>\r\n          </Grid>\r\n          {parentId !== undefined ? (\r\n            <Grid item xs>\r\n              <TooltipSelect\r\n                title='Depending on the roll of the parent activity, should this activity happen. For example: to add another strike only when you hit with the previous one, have the second strike be a child of the first with the condition \"Success or Better\"'\r\n                value={condition}\r\n                label=\"Condition\"\r\n                onChange={(e) =>\r\n                  dispatch(\r\n                    activityPathUpdated({\r\n                      id,\r\n                      changes: { condition: e.target.value },\r\n                    })\r\n                  )\r\n                }\r\n              >\r\n                {conditionOptions}\r\n              </TooltipSelect>\r\n            </Grid>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </Grid>\r\n        <Collapse in={showContent} mountOnEnter>\r\n          <Roll id={id} />\r\n          {/* <List subheader={<ListSubheader>Damages</ListSubheader>}> */}\r\n\r\n          {damages.map((damageId) => (\r\n            <Damage parentId={id} id={damageId} key={damageId} />\r\n          ))}\r\n          {/* </List> */}\r\n          <Button\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            onClick={() => dispatch(damageCreated({ parentId: id }))}\r\n          >\r\n            Add Damage\r\n          </Button>\r\n\r\n          {effects.map((effectId) => (\r\n            <Effect parentId={id} id={effectId} key={effectId} />\r\n          ))}\r\n          <Button\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            onClick={() => dispatch(effectCreated({ parentId: id }))}\r\n          >\r\n            Add Effect\r\n          </Button>\r\n\r\n          <List subheader={<ListSubheader>Child Activities</ListSubheader>}>\r\n            {apIds.map((apId) => (\r\n              <ActivityPathStub\r\n                key={apId}\r\n                id={apId}\r\n                level={0}\r\n                displayChildren={false}\r\n              />\r\n            ))}\r\n          </List>\r\n\r\n          <Grid container spacing={{ xs: 1 }} sx={{ my: 2, p: 1 }}>\r\n            <Grid item container xs={6} justifyContent=\"center\">\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={() => {\r\n                  window.location.href = \"#routine-activity-list\";\r\n                  dispatch(\r\n                    activityPathContinued({\r\n                      parentId: id,\r\n                    })\r\n                  );\r\n                }}\r\n              >\r\n                Continue Attack\r\n              </Button>\r\n            </Grid>\r\n            <Grid item container xs={6} justifyContent=\"center\">\r\n              <Button\r\n                variant=\"outlined\"\r\n                onClick={() => {\r\n                  window.location.href = \"#routine-activity-list\";\r\n                  dispatch(setNewActivityParent({ parentId: id }));\r\n                }}\r\n              >\r\n                New Child Activity\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Collapse>\r\n      </Paper>\r\n      {apIds.map((apId) => (\r\n        <ActivityPath key={apId} id={apId} level={level + 1} />\r\n      ))}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst Roll = ({ id }: { id: number }) => {\r\n  const {\r\n    rollType,\r\n    type,\r\n    profTrend,\r\n    statTrend,\r\n    itemTrend,\r\n    bonusAdjustments,\r\n    MAP,\r\n    targetType,\r\n  } = useAppSelector((state: RootState) => selectactivityPathById(state, id)!);\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const [showContent, setShowContent] = useState(false);\r\n\r\n  let isSave = type === activityTypes.SAVE;\r\n\r\n  const bonusLevelList = LevelList(\r\n    \"bonusAdjustments\",\r\n    dispatch,\r\n    activityPathUpdated,\r\n    id,\r\n    bonusAdjustments\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <RollBonusDisplay\r\n        rollInfo={{\r\n          isSave,\r\n          profTrend,\r\n          statTrend,\r\n          itemTrend,\r\n          MAP,\r\n          bonusAdjustments,\r\n        }}\r\n        onClick={() => setShowContent(!showContent)}\r\n      />\r\n      <Collapse in={showContent}>\r\n        <Box\r\n          sx={{\r\n            p: 1,\r\n            mb: 1,\r\n            \"&:hover\": { bgcolor: \"rgb(50,50,50,.05)\" },\r\n          }}\r\n        >\r\n          <Grid container spacing={{ xs: 1, sm: 2 }} sx={{}}>\r\n            <Grid item>\r\n              <TooltipSelect\r\n                title=\"Advantage is rolling twice and taking the higher roll, disadvantage is taking the lower\"\r\n                label=\"Roll Type\"\r\n                value={rollType}\r\n                onChange={(e) => {\r\n                  dispatch(\r\n                    activityPathUpdated({\r\n                      id,\r\n                      changes: { rollType: e.target.value },\r\n                    })\r\n                  );\r\n                }}\r\n              >\r\n                {rollOptions}\r\n              </TooltipSelect>\r\n            </Grid>\r\n            <Grid item>\r\n              <FormControl size=\"small\">\r\n                <InputLabel id=\"activity-type-input\">Activity Type</InputLabel>\r\n                <Select\r\n                  labelId=\"activity-type-input\"\r\n                  label=\"Activity Type\"\r\n                  value={type}\r\n                  onChange={(e) => {\r\n                    dispatch(\r\n                      activityPathUpdated({\r\n                        id,\r\n                        changes: { type: e.target.value },\r\n                      })\r\n                    );\r\n                  }}\r\n                >\r\n                  {activityTypeOptions}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item>\r\n              <TooltipSelect\r\n                title=\"An increase in proficiency (+2) is applied at each level in ()\"\r\n                label=\"Proficiency\"\r\n                value={profTrend}\r\n                onChange={(e) => {\r\n                  dispatch(\r\n                    activityPathUpdated({\r\n                      id,\r\n                      changes: { profTrend: e.target.value },\r\n                    })\r\n                  );\r\n                }}\r\n              >\r\n                {profTrendOptions}\r\n              </TooltipSelect>\r\n            </Grid>\r\n            <Grid item>\r\n              <TooltipSelect\r\n                title=\"Bonuses from the listed ability score are applied at the appropriate levels. An ability score starts at the first value and is increased at levels 5, 10, 15, and 20 or until it reaches the second value listed. 'apex' means a bonus from an apex item is added to that score at the level in ()\"\r\n                label=\"Ability Score\"\r\n                value={statTrend}\r\n                onChange={(e) => {\r\n                  dispatch(\r\n                    activityPathUpdated({\r\n                      id,\r\n                      changes: { statTrend: e.target.value },\r\n                    })\r\n                  );\r\n                }}\r\n              >\r\n                {statTrendOptions}\r\n              </TooltipSelect>\r\n            </Grid>\r\n            <Grid item>\r\n              <TooltipSelect\r\n                title=\"Item bonuses are applied at the levels in ().\"\r\n                label=\"Item Bonus\"\r\n                value={itemTrend}\r\n                onChange={(e) => {\r\n                  dispatch(\r\n                    activityPathUpdated({\r\n                      id,\r\n                      changes: { itemTrend: e.target.value },\r\n                    })\r\n                  );\r\n                }}\r\n              >\r\n                {itemBTrendOptions}\r\n              </TooltipSelect>\r\n            </Grid>\r\n            {bonusLevelList}\r\n            {!isSave ? (\r\n              <Grid item>\r\n                <TooltipSelect\r\n                  title=\"The multiple attack penalty that is applied to this attack.\"\r\n                  label=\"MAP\"\r\n                  value={MAP}\r\n                  onChange={(e) => {\r\n                    dispatch(\r\n                      activityPathUpdated({\r\n                        id,\r\n                        changes: { MAP: e.target.value },\r\n                      })\r\n                    );\r\n                  }}\r\n                >\r\n                  {MAPOptions}\r\n                </TooltipSelect>\r\n              </Grid>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            <Grid item>\r\n              <TooltipSelect\r\n                title=\"What defense is targeted\"\r\n                label=\"Target Defense\"\r\n                value={targetType}\r\n                onChange={(e) => {\r\n                  dispatch(\r\n                    activityPathUpdated({\r\n                      id,\r\n                      changes: { targetType: e.target.value },\r\n                    })\r\n                  );\r\n                }}\r\n              >\r\n                {defenseOptions}\r\n              </TooltipSelect>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </Collapse>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\ninterface PropsType {\r\n  rollInfo: {\r\n    isSave: boolean;\r\n    MAP: MAP;\r\n    profTrend: ProfTrend;\r\n    statTrend: StatTrend;\r\n    itemTrend: ItemTrend;\r\n    bonusAdjustments: Adjustment;\r\n  };\r\n  onClick: any;\r\n}\r\nconst RollBonusDisplay = ({\r\n  rollInfo: { isSave, MAP, profTrend, statTrend, itemTrend, bonusAdjustments },\r\n  onClick,\r\n}: PropsType) => {\r\n  const [level, setLevel] = useState(20);\r\n  // const {isSave, MAP, profTrend, statTrend, itemTrend, bonusAdjustments} = rollInfo;\r\n  let totalBonus = 0;\r\n\r\n  // const updateLevel = (newLevel: number) => {\r\n  //   setLevel(newLevel);\r\n  totalBonus = isSave ? 10 : MAPvalues[MAP];\r\n  totalBonus += profTrendValues[profTrend][level];\r\n  totalBonus += statTrendValues[statTrend][level];\r\n  totalBonus += itemTrendValues[itemTrend][level];\r\n  totalBonus += bonusAdjustments[level];\r\n\r\n  // updateLevel(1);\r\n\r\n  return (\r\n    <Grid container columnSpacing={{ xs: 2 }} alignItems=\"center\">\r\n      <Grid item xs=\"auto\">\r\n        <ListItemButton onClick={onClick}>\r\n          <Typography variant=\"h6\">{\"Roll \"}</Typography>\r\n        </ListItemButton>\r\n      </Grid>\r\n      <Grid item sx={{ ml: -2, mt: 1, width: 100 }}>\r\n        <Slider\r\n          size=\"small\"\r\n          value={level}\r\n          min={1}\r\n          max={20}\r\n          marks\r\n          // @ts-ignore\r\n          onChange={(_, nv) => setLevel(nv)}\r\n          valueLabelDisplay=\"auto\"\r\n          // getAriaValueText={(v) => `${v}`}\r\n        />\r\n      </Grid>\r\n      <Grid item>\r\n        <Typography>\r\n          {(isSave ? \"DC \" : \" +\") +\r\n            totalBonus.toString() +\r\n            \" at level \" +\r\n            level.toString()}\r\n        </Typography>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../App/hooks\";\r\nimport {\r\n  emptyActivityPathCreated,\r\n  routineUpdated,\r\n  selectCreateNewActivity,\r\n  selectRoutineById,\r\n  selectSelectedActivityPath,\r\n  setNewActivityParent,\r\n} from \"./RoutineSlice/routineSlice\";\r\nimport { ActivityPathStub } from \"./ActivityPathStub\";\r\nimport { RootState } from \"../App/store\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  List,\r\n  ListSubheader,\r\n  Paper,\r\n  Slider,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { activityTypes } from \"../Model/types\";\r\nimport { Box } from \"@mui/system\";\r\nimport { ActivityPath } from \"./Activity/ActivityPath\";\r\n\r\nfunction SelectedRoutine({ routineId }: { routineId: number }) {\r\n  // const selectedRoutine = useSelector(selectSelectedRoutine);\r\n  const { name, startLevel, endLevel, description, apIds } = useAppSelector(\r\n    (state: RootState) => selectRoutineById(state, routineId)!\r\n  );\r\n  const selectedActivityPath = useAppSelector(selectSelectedActivityPath);\r\n  const createNewActivity = useAppSelector(selectCreateNewActivity);\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  let [tempName, setTempName] = useState(name);\r\n  const [tempDescription, setTempDescription] = useState(description);\r\n  let [validLevels, setValidLevels] = useState([startLevel, endLevel]);\r\n  useEffect(() => setTempName(name), [name]);\r\n  useEffect(() => setTempDescription(description), [description]);\r\n  useEffect(\r\n    () => setValidLevels([startLevel, endLevel]),\r\n    [startLevel, endLevel]\r\n  );\r\n\r\n  const displayAllRoutines =\r\n    selectedActivityPath === undefined && !createNewActivity;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Paper sx={{ my: 2, p: 1 }}>\r\n        <Grid container spacing={{ xs: 1, sm: 2 }} sx={{ p: 1 }}>\r\n          <Grid item xs={12} sm={8} md={12} lg={8}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Routine Name\"\r\n              placeholder=\"Fighter d8 2 strikes\"\r\n              value={tempName}\r\n              onChange={(e) => {\r\n                setTempName(e.target.value);\r\n              }}\r\n              onBlur={() =>\r\n                dispatch(\r\n                  routineUpdated({ id: routineId, changes: { name: tempName } })\r\n                )\r\n              }\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={4} md={12} lg={4}>\r\n            <Typography align=\"center\">\r\n              Valid Levels: {startLevel} to {endLevel}\r\n            </Typography>\r\n            <Box sx={{ px: 2 }}>\r\n              <Slider\r\n                getAriaLabel={() => \"Valid levels\"}\r\n                value={validLevels}\r\n                min={1}\r\n                max={20}\r\n                marks\r\n                // @ts-ignore\r\n                onChange={(e, nv: number[]) => setValidLevels(nv)}\r\n                onBlur={() =>\r\n                  dispatch(\r\n                    routineUpdated({\r\n                      id: routineId,\r\n                      changes: {\r\n                        startLevel: validLevels[0],\r\n                        endLevel: validLevels[1],\r\n                      },\r\n                    })\r\n                  )\r\n                }\r\n                valueLabelDisplay=\"auto\"\r\n                getAriaValueText={(v) => `${v}`}\r\n              />\r\n            </Box>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              fullWidth\r\n              multiline\r\n              label=\"Routine Description\"\r\n              placeholder=\"A Fighter making two strikes with a longsword. Critical Specialization at 5. 1d6 runes at 8 and 15.\"\r\n              value={tempDescription}\r\n              onChange={(e) => {\r\n                setTempDescription(e.target.value);\r\n              }}\r\n              onBlur={() =>\r\n                dispatch(\r\n                  routineUpdated({\r\n                    id: routineId,\r\n                    changes: { description: tempDescription },\r\n                  })\r\n                )\r\n              }\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        {/* <Paper sx={{ my: 2, p: 1 }}> */}\r\n        <List\r\n          id=\"routine-activity-list\"\r\n          subheader={<ListSubheader>Activities</ListSubheader>}\r\n        >\r\n          {apIds.map((apId) => (\r\n            <ActivityPathStub key={apId} id={apId} level={0} />\r\n          ))}\r\n        </List>\r\n        {/* </Paper> */}\r\n        <Grid container spacing={{ xs: 1 }} sx={{ my: 2, p: 1 }}>\r\n          <Grid\r\n            item\r\n            container\r\n            xs={6}\r\n            sm={3}\r\n            md={6}\r\n            lg={3}\r\n            justifyContent=\"center\"\r\n          >\r\n            <Button\r\n              size=\"small\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              onClick={() => dispatch(setNewActivityParent({ routineId }))}\r\n            >\r\n              Create New Activity\r\n            </Button>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            container\r\n            xs={6}\r\n            sm={3}\r\n            md={6}\r\n            lg={3}\r\n            justifyContent=\"center\"\r\n          >\r\n            <Button\r\n              size=\"small\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              onClick={() => dispatch(emptyActivityPathCreated({ routineId }))}\r\n            >\r\n              New Empty Activity\r\n            </Button>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            container\r\n            xs={6}\r\n            sm={3}\r\n            md={6}\r\n            lg={3}\r\n            justifyContent=\"center\"\r\n          >\r\n            <Button\r\n              size=\"small\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              onClick={() =>\r\n                dispatch(\r\n                  emptyActivityPathCreated({\r\n                    routineId,\r\n                    activityType: activityTypes.STRIKE,\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              New Martial Strike\r\n            </Button>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            container\r\n            xs={6}\r\n            sm={3}\r\n            md={6}\r\n            lg={3}\r\n            justifyContent=\"center\"\r\n          >\r\n            <Button\r\n              size=\"small\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              onClick={() =>\r\n                dispatch(\r\n                  emptyActivityPathCreated({\r\n                    routineId,\r\n                    activityType: activityTypes.SAVE,\r\n                  })\r\n                )\r\n              }\r\n            >\r\n              New Caster Save\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n        {/* <Button\r\n        variant=\"outlined\"\r\n        onClick={() =>\r\n          dispatch(activityPathCreated({ routineId, isStrike: false }))\r\n        }\r\n      >\r\n        + Save\r\n      </Button> */}\r\n        {/* <EffectInput /> */}\r\n        {/* </div> */}\r\n      </Paper>\r\n      {displayAllRoutines\r\n        ? apIds.map((apId) => <ActivityPath key={apId} id={apId} level={0} />)\r\n        : \"\"}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\n// const NameInput = ({ id, name: baseName }: { id: number; name: string }) => {\r\n//   const dispatch = useDispatch();\r\n//   let [name, setName] = useState(baseName);\r\n//   useEffect(() => setName(baseName), [baseName]);\r\n//   // const name = useSelector((state) => selectRoutineById(state, id)).name;\r\n\r\n//   return (\r\n//     <React.Fragment>\r\n//       <label htmlFor=\"routineName\">Routine Name:</label>\r\n//       <input\r\n//         id=\"routineName\"\r\n//         type=\"text\"\r\n//         placeholder=\"Enter routine name\"\r\n//         value={name}\r\n//         onChange={(e) => setName(e.target.value)}\r\n//         onBlur={() => dispatch(routineUpdated({ id, changes: { name } }))}\r\n//       />\r\n//     </React.Fragment>\r\n//   );\r\n// };\r\n// const DescriptionInput = ({\r\n//   id,\r\n//   description: baseDescription,\r\n// }: {\r\n//   id: number;\r\n//   description: string;\r\n// }) => {\r\n//   const dispatch = useDispatch();\r\n//   const [description, setDescription] = useState(baseDescription);\r\n//   useEffect(() => setDescription(baseDescription), [baseDescription]);\r\n\r\n//   return (\r\n//     <div>\r\n//       <textarea\r\n//         className=\"routineDescription\"\r\n//         id=\"routineDescription\"\r\n//         placeholder=\"Enter routine description\"\r\n//         value={description}\r\n//         onChange={(e) => setDescription(e.target.value)}\r\n//         onBlur={() =>\r\n//           dispatch(routineUpdated({ id, changes: { description } }))\r\n//         }\r\n//       />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\nexport default SelectedRoutine;\r\n","import {\r\n  Chip,\r\n  InputLabel,\r\n  MenuItem,\r\n  Paper,\r\n  Select,\r\n  FormControl,\r\n  Grid,\r\n  Button,\r\n} from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\nimport React from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../App/hooks\";\r\n\r\nimport {\r\n  routineCreated,\r\n  routineRemoved,\r\n  routineUpdated,\r\n  selectAllRoutines,\r\n  selectSelectedRoutine,\r\n  setRoutine,\r\n} from \"./RoutineSlice/routineSlice\";\r\n\r\nconst Routines = () => {\r\n  const routines = useAppSelector(selectAllRoutines);\r\n  const selectedRoutine = useAppSelector(selectSelectedRoutine);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const routineOptions: JSX.Element[] = [];\r\n  const routineDisplays: JSX.Element[] = [];\r\n  routines.forEach((routine) => {\r\n    routineOptions.push(\r\n      <MenuItem value={routine.id} key={routine.id}>\r\n        {routine.name}\r\n      </MenuItem>\r\n    );\r\n    routineDisplays.push(\r\n      <Box component=\"li\" key={routine.id} sx={{ margin: 0.5 }}>\r\n        <Chip\r\n          label={routine.name}\r\n          variant={routine.display ? \"filled\" : \"outlined\"}\r\n          size=\"small\"\r\n          color=\"secondary\"\r\n          onClick={() => {\r\n            dispatch(\r\n              routineUpdated({\r\n                id: routine.id,\r\n                changes: { display: !routine.display },\r\n              })\r\n            );\r\n            dispatch(setRoutine(routine.id));\r\n          }}\r\n          onDelete={() => dispatch(routineRemoved(routine.id))}\r\n        />\r\n      </Box>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Paper\r\n        variant=\"outlined\"\r\n        sx={{\r\n          display: \"flex\",\r\n          flexWrap: \"wrap\",\r\n          justifyContent: \"center\",\r\n          listStyle: \"none\",\r\n          p: 0.5,\r\n          my: 2,\r\n        }}\r\n        component=\"ul\"\r\n      >\r\n        {routineDisplays}\r\n      </Paper>\r\n      <Paper sx={{ my: 2, p: 1 }}>\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={12} sm={6} md={12} lg={6}>\r\n            <FormControl fullWidth>\r\n              <InputLabel id=\"select-routine-label\">Select Routine</InputLabel>\r\n              <Select\r\n                labelId=\"select-routine-label\"\r\n                id=\"select-routine\"\r\n                value={selectedRoutine}\r\n                label=\"Select Routine\"\r\n                onChange={(e) => dispatch(setRoutine(e.target.value))}\r\n              >\r\n                {routineOptions}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            container\r\n            xs={6}\r\n            sm={3}\r\n            md={6}\r\n            lg={3}\r\n            justifyContent=\"center\"\r\n          >\r\n            <Button\r\n              variant=\"contained\"\r\n              onClick={() => dispatch(routineCreated({ copy: false }))}\r\n            >\r\n              Create New Routine\r\n            </Button>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            container\r\n            xs={6}\r\n            sm={3}\r\n            md={6}\r\n            lg={3}\r\n            justifyContent=\"center\"\r\n          >\r\n            <Button\r\n              variant=\"outlined\"\r\n              onClick={() => dispatch(routineCreated({ copy: true }))}\r\n            >\r\n              Copy Selected Routine\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Routines;\r\n","const fighterGs2 = `{\"id\":1,\"name\":\"Greatsword Fighter 2 strikes\",\"display\":true,\"apIds\":[{\"id\":0,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Fighter Weapon (1, 5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"AC\",\"targetInfoId\":0,\"damages\":[{\"id\":3,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":12,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Fighter Weapon Specialization\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":4,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[{\"id\":1,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[{\"id\":1,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Fighter Weapon (1, 5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-5 (1x-5)\",\"targetType\":\"AC\",\"targetInfoId\":0,\"damages\":[{\"id\":5,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":12,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Fighter Weapon Specialization\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":6,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[{\"id\":2,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[]}]}],\"levelDiff\":0,\"description\":\"A simple Fighter making 2 strikes with a greatsword. 1d6 damage runes at 8 and 15. Crit specialization at 5.\",\"startLevel\":1,\"endLevel\":20}`;\r\nconst pickdouble = `{\"id\":3,\"name\":\"Pick Fighter Double Slice\",\"display\":false,\"apIds\":[{\"id\":3,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Fighter Weapon (1, 5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"AC\",\"targetInfoId\":0,\"damages\":[{\"id\":8,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":true,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Fighter Weapon Specialization\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"piercing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":9,\"damageCondition\":\"On Crit\",\"dieTrend\":\"None\",\"dieAdjustments\":{\"1\":1,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"16\":1,\"17\":1,\"18\":1,\"19\":1,\"20\":1},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":4,\"6\":4,\"7\":4,\"8\":4,\"9\":4,\"10\":4,\"11\":4,\"12\":6,\"13\":6,\"14\":6,\"15\":6,\"16\":6,\"17\":6,\"18\":6,\"19\":8,\"20\":8},\"damageType\":\"piercing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":10,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[],\"apIds\":[]},{\"id\":4,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Fighter Weapon (1, 5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-4)\",\"targetType\":\"AC\",\"targetInfoId\":0,\"damages\":[{\"id\":11,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":4,\"fatal\":true,\"fatalDie\":8,\"damageTrend\":[\"18 to 24 apex(17)\",\"Fighter Weapon Specialization\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"piercing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":12,\"damageCondition\":\"On Crit\",\"dieTrend\":\"None\",\"dieAdjustments\":{\"1\":1,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"16\":1,\"17\":1,\"18\":1,\"19\":1,\"20\":1},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":4,\"6\":4,\"7\":4,\"8\":4,\"9\":4,\"10\":4,\"11\":4,\"12\":6,\"13\":6,\"14\":6,\"15\":6,\"16\":6,\"17\":6,\"18\":6,\"19\":8,\"20\":8},\"damageType\":\"piercing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":13,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[],\"apIds\":[]}],\"levelDiff\":0,\"description\":\"A Fighter using Double Slice with a pick and a light pick. 1d6 damage runes at 8 and 15. Crit specialization at 5.\",\"startLevel\":1,\"endLevel\":20}`;\r\nconst fireball = `{\"id\":2,\"name\":\"Fireball\",\"display\":true,\"apIds\":[{\"id\":2,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Save\",\"profTrend\":\"Caster Spell (7, 15, 19)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"None\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"Ref\",\"targetInfoId\":0,\"damages\":[{\"id\":7,\"damageCondition\":\"Basic save\",\"dieTrend\":\"2 x Spell Level\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[],\"apIds\":[]}],\"levelDiff\":0,\"description\":\"A 2d6 / spell level basic reflex save.\",\"startLevel\":1,\"endLevel\":20}`;\r\nconst thaum2strikes = `{\"id\":101,\"name\":\"Thaumaturge 2 strikes\",\"display\":false,\"apIds\":[{\"id\":1002,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"16 to 22 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1004,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"16 to 22 apex(17)\",\"Martial Weapon Specializaton\",\"Implement's Empowerment\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1005,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1006,\"damageCondition\":\"Success or better\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"None\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"1/2 Level\"],\"damageAdjustments\":{\"1\":2,\"2\":2,\"3\":2,\"4\":2,\"5\":2,\"6\":2,\"7\":2,\"8\":2,\"9\":2,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2}}],\"effects\":[{\"id\":1002,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[{\"id\":1001,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"16 to 22 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-5 (1x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1001,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"16 to 22 apex(17)\",\"Martial Weapon Specializaton\",\"Implement's Empowerment\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1002,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1003,\"damageCondition\":\"Success or better\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"None\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"1/2 Level\"],\"damageAdjustments\":{\"1\":2,\"2\":2,\"3\":2,\"4\":2,\"5\":2,\"6\":2,\"7\":2,\"8\":2,\"9\":2,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2}}],\"effects\":[{\"id\":1001,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[]}]}],\"levelDiff\":0,\"description\":\"A playtest Thaumaturge making 2 strikes with a longsword. 1d6 damage runes at 8 and 15. Critical specialization at 5 from weapon implement. After they succeeded in giving the target a 1/2 level +2 weakness.\",\"startLevel\":1,\"endLevel\":20}`;\r\nconst disintigrate = `{\"id\":102,\"name\":\"Disintigrate\",\"display\":false,\"apIds\":[{\"id\":1003,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Caster Spell (7, 15, 19)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"None\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"AC\",\"damages\":[],\"effects\":[],\"apIds\":[{\"id\":1004,\"condition\":\"On Crit\",\"rollType\":\"Normal\",\"type\":\"Save\",\"profTrend\":\"Caster Spell (7, 15, 19)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"None\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"Fort\",\"damages\":[{\"id\":1009,\"damageCondition\":\"On Failure\",\"dieTrend\":\"2 x Spell Level\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"None\",\"material\":\"none\",\"persistent\":false,\"multiplier\":2},{\"id\":1010,\"damageCondition\":\"On Success\",\"damageType\":\"None\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"2 x Spell Level\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1011,\"damageCondition\":\"On Crit\",\"damageType\":\"None\",\"material\":\"none\",\"persistent\":false,\"multiplier\":0.5,\"dieTrend\":\"2 x Spell Level\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[]},{\"id\":1005,\"condition\":\"On Success\",\"rollType\":\"Normal\",\"type\":\"Save\",\"profTrend\":\"Caster Spell (7, 15, 19)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"None\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"Fort\",\"damages\":[{\"id\":1012,\"damageCondition\":\"Basic save\",\"dieTrend\":\"2 x Spell Level\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"None\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[],\"apIds\":[]}]}],\"levelDiff\":0,\"description\":\"If the spell attack crits then the save is one degree worse example. \",\"startLevel\":11,\"endLevel\":20}`;\r\nconst giantBarb3 = `{\"id\":103,\"name\":\"Giant Barbarian 3 Strikes\",\"display\":false,\"apIds\":[{\"id\":1006,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1011,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":12,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\",\"Giant Rage\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1012,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[{\"id\":1003,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[{\"id\":1007,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-5 (1x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1013,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":12,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\",\"Giant Rage\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1014,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[{\"id\":1004,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[{\"id\":1009,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1017,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":12,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\",\"Giant Rage\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1018,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[{\"id\":1006,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[]}]}]}],\"levelDiff\":0,\"description\":\"A Barbarian making 3 strikes with a greatsword. 1d6 damage runes at 8 and 15. Crit specialization at 5.\",\"startLevel\":1,\"endLevel\":20}`;\r\nconst flurryRanger4 = `{\"id\":104,\"name\":\"Melee Flurry Ranger 4 strikes\",\"display\":false,\"apIds\":[{\"id\":1009,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":1,\"18\":1,\"19\":1,\"20\":1},\"MAP\":\"0 (0x-3)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1017,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1018,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[{\"id\":1006,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[{\"id\":1010,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":1,\"18\":1,\"19\":1,\"20\":1},\"MAP\":\"-2 (1x-2)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1019,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1020,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[{\"id\":1007,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[{\"id\":1011,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"MAP\":\"-4 (2x-2)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1021,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1022,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[{\"id\":1008,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[{\"id\":1012,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"MAP\":\"-4 (2x-2)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1023,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1024,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1}],\"effects\":[{\"id\":1009,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[]}]}]}]}],\"levelDiff\":0,\"description\":\"A longsword shortsword ranger with flurry edge making an attack with a longsword, then 3 shortsword attacks. improvement at 17 included. Crit spec at 5. \",\"startLevel\":1,\"endLevel\":20}`;\r\nconst doubleSliceRogue = `{\"id\":105,\"name\":\"Rogue Double Slice Sneak Attack\",\"display\":false,\"apIds\":[{\"id\":1013,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1025,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1026,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1028,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[{\"id\":1010,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[{\"id\":1014,\"condition\":\"On Crit\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-4)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1029,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1030,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1032,\"damageCondition\":\"Always\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":2,\"dieTrend\":\"Sneak Attack (1, 5, 11, 17)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[{\"id\":1011,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[]},{\"id\":1015,\"condition\":\"On Success\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-4)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1033,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1034,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1036,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":2,\"dieTrend\":\"Sneak Attack (1, 5, 11, 17)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1037,\"damageCondition\":\"Success or worse\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Sneak Attack (1, 5, 11, 17)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[{\"id\":1012,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[]},{\"id\":1016,\"condition\":\"Failure or worse\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-4)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1038,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1039,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1041,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Sneak Attack (1, 5, 11, 17)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[{\"id\":1013,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[]}]}],\"levelDiff\":0,\"description\":\"Using double slice on a Rogue. Only applying sneak attack damage to at most one attack. rapier and shortsword. Crit Spec at 5.\",\"startLevel\":1,\"endLevel\":20}`;\r\nconst rogue2strikes = `{\"id\":106,\"name\":\"Rogue 2 Strikes Sneak Attack\",\"display\":false,\"apIds\":[{\"id\":1017,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1038,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1039,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1040,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1044,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Sneak Attack (1, 5, 11, 17)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[{\"id\":1014,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[{\"id\":1018,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-4 (1x-4)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1041,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"18 to 24 apex(17)\",\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1042,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1045,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Sneak Attack (1, 5, 11, 17)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[{\"id\":1015,\"effectCondition\":\"On Crit\",\"effectType\":\"Flatfooted\",\"startLevel\":5,\"endLevel\":20}],\"apIds\":[]}]}],\"levelDiff\":0,\"description\":\"Two strikes with sneak attack applied. \",\"startLevel\":1,\"endLevel\":20}`;\r\nconst preRanger4bow = `{\"id\":107,\"name\":\"Precision Ranger Shortbow 4 Strikes\",\"display\":false,\"apIds\":[{\"id\":1019,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1045,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1046,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1047,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1048,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 1(1, 11, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[{\"id\":1020,\"condition\":\"Success or better\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-5 (1x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1049,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1050,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1051,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1052,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 2(17, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[{\"id\":1022,\"condition\":\"Success or better\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1057,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1058,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1059,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1060,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 3(19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[{\"id\":1024,\"condition\":\"Success or better\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1065,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1066,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1067,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[]},{\"id\":1025,\"condition\":\"Failure or worse\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1069,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1070,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1071,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1072,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 3(19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[]}]},{\"id\":1023,\"condition\":\"Failure or worse\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1061,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1062,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1063,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1064,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 2(17, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[{\"id\":1026,\"condition\":\"Success or better\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1073,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1074,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1075,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1076,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 3(19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[]},{\"id\":1027,\"condition\":\"Failure or worse\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1077,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1078,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1079,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1080,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 2(17, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[]}]}]},{\"id\":1021,\"condition\":\"Failure or worse\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-5 (1x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1053,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1054,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1055,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1056,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 1(1, 11, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[{\"id\":1029,\"condition\":\"Success or better\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1085,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1086,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1087,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1088,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 2(17, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[{\"id\":1031,\"condition\":\"Success or better\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1093,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1094,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1095,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1096,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 3(19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[]},{\"id\":1032,\"condition\":\"Failure or worse\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1097,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1098,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1099,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1100,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 2(17, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[]}]},{\"id\":1030,\"condition\":\"Failure or worse\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1089,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1090,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1091,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1092,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 1(1, 11, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[{\"id\":1033,\"condition\":\"Success or better\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1101,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1102,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1103,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1104,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 2(17, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[]},{\"id\":1034,\"condition\":\"Failure or worse\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-10 (2x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1105,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1106,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1107,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1108,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 1(1, 11, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[]}]}]}]}],\"levelDiff\":0,\"description\":\"4 Strikes for a Ranger with Precision Edge using a shortbow. Composite bow at 2. Str 14 boosted to 18 at 10. Runes at 8 and 15. \",\"startLevel\":1,\"endLevel\":20}`;\r\nconst preRanger2bow = `{\"id\":107,\"name\":\"Precision Ranger Shortbow 2 Strikes\",\"display\":false,\"apIds\":[{\"id\":1033,\"condition\":\"Always\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"0 (0x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1100,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1101,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1102,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1103,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 1(1, 11, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[{\"id\":1025,\"condition\":\"Success or better\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-5 (1x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1068,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1069,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1070,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1071,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 2(17, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[]},{\"id\":1032,\"condition\":\"Failure or worse\",\"rollType\":\"Normal\",\"type\":\"Strike\",\"profTrend\":\"Martial Weapon (5, 13)\",\"statTrend\":\"18 to 24 apex(17)\",\"itemTrend\":\"Weapon (2, 10, 16)\",\"bonusAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"MAP\":\"-5 (1x-5)\",\"targetType\":\"AC\",\"damages\":[{\"id\":1096,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Weapon (1, 4, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[\"Martial Weapon Specializaton\"],\"damageAdjustments\":{\"1\":0,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":2,\"17\":2,\"18\":2,\"19\":2,\"20\":2},\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1097,\"damageCondition\":\"x1 hit, x2 crit\",\"dieTrend\":\"Runes (8, 15)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":6,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"damageType\":\"fire\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1},{\"id\":1098,\"damageCondition\":\"On Crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Deadly (1, 12, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":10,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}},{\"id\":1099,\"damageCondition\":\"x1 hit, x2 crit\",\"damageType\":\"slashing\",\"material\":\"none\",\"persistent\":false,\"multiplier\":1,\"dieTrend\":\"Precision Edge 1(1, 11, 19)\",\"dieAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0},\"diceSize\":8,\"fatal\":false,\"fatalDie\":10,\"damageTrend\":[],\"damageAdjustments\":{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0}}],\"effects\":[],\"apIds\":[]}]}],\"levelDiff\":0,\"description\":\"2 Strikes for a Ranger with Precision Edge using a shortbow. Composite bow at 2. Str 14 boosted to 18 at 10. Runes at 8 and 15. \",\"startLevel\":1,\"endLevel\":20}`;\r\n\r\nexport const exampleRoutines = [\r\n  fighterGs2,\r\n  pickdouble,\r\n  fireball,\r\n  thaum2strikes,\r\n  disintigrate,\r\n  giantBarb3,\r\n  flurryRanger4,\r\n  doubleSliceRogue,\r\n  rogue2strikes,\r\n  preRanger4bow,\r\n  preRanger2bow,\r\n];\r\n","import { Button, Grid, Paper, TextField, Typography } from \"@mui/material\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../App/hooks\";\r\nimport { exampleRoutines } from \"../Model/exampleRoutines\";\r\nimport { importStates } from \"../Model/types\";\r\nimport {\r\n  importRoutine,\r\n  selectImportState,\r\n  selectSelectedRoutineObject,\r\n} from \"../Routines/RoutineSlice/routineSlice\";\r\n// import { useSelector } from \"react-redux\";\r\n\r\n/* TODO: \r\n  Convert to mui\r\n  Add save routines button\r\n  Add load example routines button\r\n*/\r\nconst ImportExport = () => {\r\n  const routine = useAppSelector(selectSelectedRoutineObject);\r\n  const importState = useAppSelector(selectImportState);\r\n  // const textAreaRef: RefObject<HTMLTextAreaElement> = useRef(null);\r\n  const [textValue, setTextValue] = useState(\"\");\r\n  const dispatch = useAppDispatch();\r\n  useEffect(() => {\r\n    if (importState === importStates.Failure) {\r\n      setTextValue(\"Import failed\");\r\n    } else if (importState === importStates.Successful) {\r\n      setTextValue(\"Import successful\");\r\n    }\r\n  }, [importState]);\r\n\r\n  const tryToAddRoutine = () => {\r\n    dispatch(importRoutine(textValue));\r\n  };\r\n  const paste = () => {\r\n    setTextValue(JSON.stringify(routine));\r\n  };\r\n\r\n  //   const saveRoutines = () => {try {\r\n  //       const serialState = JSON.stringify(state);\r\n  //       localStorage.setItem('appState', serialState);\r\n  //     } catch(err) {\r\n  //         console.log(err);\r\n  //     }\r\n  // };\r\n  // const loadSavedRoutines = () => {};\r\n  const addExampleRoutines = () => {\r\n    for (let r of exampleRoutines) {\r\n      dispatch(importRoutine(r));\r\n    }\r\n  };\r\n  // const copy = () => {\r\n  //   if (textAreaRef.current) {\r\n  //     textAreaRef.current.select();\r\n  //     textAreaRef!.current.setSelectionRange(0, 99999); /* For mobile devices */\r\n  //     navigator.clipboard.writeText(textAreaRef.current.value);\r\n  //     // document.execCommand(\"copy\");\r\n  //   }\r\n  // };\r\n  return (\r\n    <Paper sx={{ p: 1 }}>\r\n      <Typography variant=\"h5\">Import and Export Here:</Typography>\r\n      <Grid container>\r\n        <Grid item>\r\n          <Button onClick={tryToAddRoutine}>Import</Button>\r\n        </Grid>\r\n        <Grid item>\r\n          <Button onClick={paste}>Export</Button>\r\n        </Grid>\r\n        {/* <Grid item>\r\n          <Button onClick={saveRoutines}>Save Routines</Button>\r\n        </Grid> */}\r\n        {/* <Grid item>\r\n          <Button onClick={loadSavedRoutines}>Load Saved Routines</Button>\r\n        </Grid> */}\r\n        <Grid item>\r\n          <Button onClick={addExampleRoutines}>Add example Routines</Button>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            fullWidth\r\n            multiline\r\n            label=\"Routine code\"\r\n            placeholder=\"Enter routine code here to import.\"\r\n            value={textValue}\r\n            onChange={(e) => setTextValue(e.target.value)}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default ImportExport;\r\n","import React, { useState } from \"react\";\r\n\r\nimport { useAppDispatch } from \"../../App/hooks\";\r\nimport {\r\n  Paper,\r\n  Grid,\r\n  Box,\r\n  Typography,\r\n  Select,\r\n  FormControl,\r\n  InputLabel,\r\n  Chip,\r\n  FormControlLabel,\r\n  Switch,\r\n  Slider,\r\n  Button,\r\n} from \"@mui/material\";\r\nimport { diceSizeOptions, makeOptions } from \"../../Model/options\";\r\nimport {\r\n  diceSizes,\r\n  DieTrend,\r\n  dieTrends,\r\n  ItemTrend,\r\n  itemTrends,\r\n  ProfTrend,\r\n  profTrends,\r\n  StatTrend,\r\n  statTrends,\r\n} from \"../../Model/types\";\r\nimport { activityPathCreated } from \"../RoutineSlice/routineSlice\";\r\nimport {\r\n  activityTypes,\r\n  cantrips,\r\n  strikeActivities,\r\n  classes,\r\n  critSpecs,\r\n  runeTrends,\r\n  StrikeInfo,\r\n  weaponTraits,\r\n  classOptions,\r\n  skillProfTrends,\r\n  skillActivities,\r\n  SkillInfo,\r\n  CantripInfo,\r\n  spells,\r\n  SpellInfo,\r\n  spellProfTrends,\r\n} from \"../../Model/newActivityInfo\";\r\nimport { TooltipSelect } from \"../../TooltipSelect\";\r\n\r\n/*\r\n  get activity type: strike, skill, cantrip, spell\r\n\r\n  if type is strike \r\n    choose class\r\n    choose activity\r\n    attak score, damage score, cantrip score for ea/magus\r\n    choose weapon die and traits\r\n    choose number of attacks\r\n\r\n*/\r\nexport default function NewActivity({\r\n  routineId,\r\n  parentId,\r\n}: {\r\n  routineId?: number;\r\n  parentId?: number;\r\n}): JSX.Element {\r\n  const [activityType, setActivityType] = useState<string>(\r\n    activityTypes.Strike\r\n  );\r\n\r\n  return (\r\n    <Paper sx={{ my: 2, p: 1 }}>\r\n      <Grid container spacing={{ xs: 1, sm: 2 }} sx={{ m: 2, p: 2 }}>\r\n        <Grid item>\r\n          <Typography>Enter activity information</Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <FormControl>\r\n            <InputLabel>Activity Type</InputLabel>\r\n            <Select\r\n              value={activityType}\r\n              label=\"Activity Type\"\r\n              onChange={(e) => {\r\n                setActivityType(e.target.value);\r\n              }}\r\n            >\r\n              {makeOptions(activityTypes)}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item>\r\n          {activityTypes.Strike === activityType ? (\r\n            <StrikeSelection />\r\n          ) : activityTypes.Skill === activityType ? (\r\n            <SkillSelection />\r\n          ) : activityTypes.Cantrip === activityType ? (\r\n            <CantripSelection />\r\n          ) : activityTypes.Spell === activityType ? (\r\n            <SpellSelection />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nfunction StrikeSelection() {\r\n  const [runes, setRunes] = useState<DieTrend>(dieTrends.RUNE);\r\n  const [cClass, setCClass] = useState<typeof classes[number]>(classes[7]);\r\n  const [activity, setActivity] = useState<string>(\"Strike\");\r\n  const [cantrip, setCantrip] = useState<string>(cantrips[0]);\r\n  const [classOption, setClassOption] = useState<string>(\"\");\r\n  const [attackScore, setAttackScore] = useState<StatTrend>(statTrends.AS18a);\r\n  const [damageScore, setDamageScore] = useState<StatTrend>(statTrends.AS18a);\r\n  const [cantripScore, setCantripScore] = useState<StatTrend>(\r\n    statTrends.AS16pp\r\n  );\r\n  const [dieSize, setDieSize] = useState<number>(diceSizes[8]);\r\n  const [numStrikes, setNumStrikes] = useState<number>(1);\r\n  const [numPrevStrikes, setNumPrevStrikes] = useState<number>(0);\r\n  const [traits, setTraits] = useState(\r\n    // Array.from(weaponTraits, () => false)\r\n    Object.fromEntries(weaponTraits.map((trait) => [trait, false]))\r\n  );\r\n  const [deadlySize, setDeadlySize] = useState<number>(diceSizes[8]);\r\n  const [fatalSize, setFatalSize] = useState<number>(diceSizes[10]);\r\n  const [critSpec, setCritSpec] = useState<boolean>(false);\r\n  const [critSpecLevel, setCritSpecLevel] = useState<number>(5);\r\n  const [critSpecType, setCritSpecType] = useState<string>(critSpecs[0]);\r\n\r\n  const strikeInfo: StrikeInfo = {\r\n    runes,\r\n    cClass,\r\n    classOption,\r\n    activity,\r\n    cantrip,\r\n    attackScore,\r\n    damageScore,\r\n    cantripScore,\r\n    dieSize,\r\n    numPrevStrikes,\r\n    numStrikes,\r\n    traits,\r\n    deadlySize,\r\n    fatalSize,\r\n    critSpec,\r\n    critSpecLevel,\r\n    critSpecType,\r\n  };\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const setClass = (className: typeof classes[number]) => {\r\n    setCClass(className);\r\n    if (classOptions[className].length > 0) {\r\n      setClassOption(classOptions[className][0]);\r\n    } else {\r\n      setClassOption(\"\");\r\n    }\r\n  };\r\n  const showClassOptions = (): boolean => {\r\n    return classOptions[cClass].length > 0;\r\n  };\r\n  const showCantrip = (): boolean => {\r\n    return false;\r\n  };\r\n  const showCantripScore = (): boolean => {\r\n    if (cClass === \"Inventor\") return true;\r\n    return false;\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={{ xs: 1, sm: 2 }}>\r\n      <Grid item>\r\n        <FormControl>\r\n          <InputLabel>Damage Rune Levels</InputLabel>\r\n          <Select\r\n            value={runes}\r\n            label=\"Damage Rune Levels\"\r\n            onChange={(e) => {\r\n              setRunes(e.target.value as DieTrend);\r\n            }}\r\n          >\r\n            {makeOptions(runeTrends)}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item>\r\n        <FormControl>\r\n          <InputLabel>Class</InputLabel>\r\n          <Select\r\n            value={cClass}\r\n            label=\"Class\"\r\n            onChange={(e) => {\r\n              setClass(e.target.value as typeof classes[number]);\r\n            }}\r\n          >\r\n            {makeOptions(classes)}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n\r\n      {showClassOptions() ? (\r\n        <Grid item>\r\n          <FormControl>\r\n            <InputLabel>Class Option</InputLabel>\r\n            <Select\r\n              value={classOption}\r\n              label=\"Class Option\"\r\n              onChange={(e) => {\r\n                setClassOption(e.target.value);\r\n              }}\r\n            >\r\n              {makeOptions(classOptions[cClass])}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n\r\n      <Grid item>\r\n        <FormControl>\r\n          <InputLabel>Activity</InputLabel>\r\n          <Select\r\n            value={activity}\r\n            label=\"Activity\"\r\n            onChange={(e) => {\r\n              setActivity(e.target.value);\r\n            }}\r\n          >\r\n            {\r\n              // @ts-ignore\r\n              makeOptions(strikeActivities)\r\n            }\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      {showCantrip() ? (\r\n        <Grid item>\r\n          <FormControl>\r\n            <InputLabel>Cantrip</InputLabel>\r\n            <Select\r\n              value={cantrip}\r\n              label=\"Cantrip\"\r\n              onChange={(e) => {\r\n                setCantrip(e.target.value);\r\n              }}\r\n            >\r\n              {makeOptions(cantrips)}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <Grid item>\r\n        <FormControl>\r\n          <InputLabel>Attack Abilitiy Score</InputLabel>\r\n          <Select\r\n            value={attackScore}\r\n            label=\"Attack Abilitiy Score\"\r\n            onChange={(e) => {\r\n              setAttackScore(e.target.value as StatTrend);\r\n            }}\r\n          >\r\n            {\r\n              // @ts-ignore\r\n              makeOptions(statTrends)\r\n            }\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item>\r\n        <FormControl>\r\n          <InputLabel>Damage Abilitiy Score</InputLabel>\r\n          <Select\r\n            value={damageScore}\r\n            label=\"Damage Abilitiy Score\"\r\n            onChange={(e) => {\r\n              setDamageScore(e.target.value as StatTrend);\r\n            }}\r\n          >\r\n            {\r\n              // @ts-ignore\r\n              makeOptions(statTrends)\r\n            }\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      {showCantripScore() ? (\r\n        <Grid item>\r\n          <FormControl>\r\n            <InputLabel>Mental Abilitiy Score</InputLabel>\r\n            <Select\r\n              value={cantripScore}\r\n              label=\"Cantrip Abilitiy Score\"\r\n              onChange={(e) => {\r\n                setCantripScore(e.target.value as StatTrend);\r\n              }}\r\n            >\r\n              {\r\n                // @ts-ignore\r\n                makeOptions(statTrends)\r\n              }\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <Grid item>\r\n        <FormControl>\r\n          <InputLabel>Damage Die</InputLabel>\r\n          <Select\r\n            value={dieSize}\r\n            label=\"Damage Die\"\r\n            onChange={(e) => {\r\n              setDieSize(Number(e.target.value));\r\n            }}\r\n          >\r\n            {diceSizeOptions}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n\r\n      {/* Weapon Traits */}\r\n      <Grid item>\r\n        <Paper\r\n          variant=\"outlined\"\r\n          sx={{\r\n            display: \"flex\",\r\n            flexWrap: \"wrap\",\r\n            justifyContent: \"center\",\r\n            listStyle: \"none\",\r\n            p: 0.5,\r\n            my: 1,\r\n          }}\r\n          component=\"ul\"\r\n        >\r\n          {weaponTraits.map((traitName, index) => (\r\n            <Box component=\"li\" key={traitName} sx={{ margin: 0.5 }}>\r\n              <Chip\r\n                label={traitName}\r\n                size=\"small\"\r\n                color=\"secondary\"\r\n                variant={traits[traitName] ? \"filled\" : \"outlined\"}\r\n                onClick={() => {\r\n                  const newTraits = {\r\n                    ...traits,\r\n                    [traitName]: !traits[traitName],\r\n                  };\r\n                  // newTraits[traitName] = !traits[traitName];\r\n                  setTraits(newTraits);\r\n                }}\r\n              />\r\n            </Box>\r\n          ))}\r\n        </Paper>\r\n      </Grid>\r\n      {traits[\"deadly\"] ? (\r\n        <Grid item>\r\n          <FormControl>\r\n            <InputLabel>Deadly Die</InputLabel>\r\n            <Select\r\n              value={deadlySize}\r\n              label=\"Deadly Die\"\r\n              onChange={(e) => {\r\n                setDeadlySize(Number(e.target.value));\r\n              }}\r\n            >\r\n              {diceSizeOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {traits[\"fatal\"] ? (\r\n        <Grid item>\r\n          <FormControl>\r\n            <InputLabel>Fatal Die</InputLabel>\r\n            <Select\r\n              value={fatalSize}\r\n              label=\"Fatal Die\"\r\n              onChange={(e) => {\r\n                setFatalSize(Number(e.target.value));\r\n              }}\r\n            >\r\n              {diceSizeOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n\r\n      <Grid item>\r\n        <FormControlLabel\r\n          control={\r\n            <Switch\r\n              checked={critSpec}\r\n              onChange={(e) => setCritSpec(e.target.checked)}\r\n            />\r\n          }\r\n          label=\"Critical Specialization\"\r\n        />\r\n      </Grid>\r\n      {/* crit spec level slider */}\r\n      {critSpec ? (\r\n        <Grid item>\r\n          <Typography align=\"center\">At Level {critSpecLevel}</Typography>\r\n          <Slider\r\n            value={critSpecLevel}\r\n            min={1}\r\n            max={20}\r\n            marks\r\n            onChange={(e, nv) => setCritSpecLevel(Number(nv))}\r\n          />\r\n        </Grid>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {critSpec ? (\r\n        <Grid item>\r\n          <FormControl>\r\n            <InputLabel>Weapon Group</InputLabel>\r\n            <Select\r\n              value={critSpecType}\r\n              label=\"Weapon Group\"\r\n              onChange={(e) => setCritSpecType(e.target.value)}\r\n            >\r\n              {makeOptions(critSpecs)}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n\r\n      <Grid item>\r\n        <TooltipSelect\r\n          title=\"Select the number of previous attacks.\"\r\n          value={numPrevStrikes}\r\n          label=\"Previous Attacks\"\r\n          onChange={(e) => {\r\n            setNumPrevStrikes(Number(e.target.value));\r\n          }}\r\n        >\r\n          {makeOptions([0, 1, 2])}\r\n        </TooltipSelect>\r\n      </Grid>\r\n      <Grid item xs={6} sm={3} md={4} lg={2}>\r\n        <TooltipSelect\r\n          title=\"Select the number of attacks to make with the selected options.\"\r\n          value={numStrikes}\r\n          label=\"Number of Strikes\"\r\n          onChange={(e) => {\r\n            setNumStrikes(Number(e.target.value));\r\n          }}\r\n        >\r\n          {makeOptions([1, 2, 3, 4, 5, 6])}\r\n        </TooltipSelect>\r\n      </Grid>\r\n\r\n      {/* Add Strike button */}\r\n      <Grid item>\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={() => dispatch(activityPathCreated({ strikeInfo }))}\r\n        >\r\n          Create New Activity\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nfunction SkillSelection() {\r\n  const [proficiency, setProficiency] = useState<ProfTrend>(\r\n    profTrends.MAXSKILL\r\n  );\r\n  const [abilityScore, setAbilityScore] = useState<StatTrend>(statTrends.AS18a);\r\n  const [itemBonus, setItemBonus] = useState<ItemTrend>(itemTrends.SKILL);\r\n  const [skillActivity, setSkillActivity] = useState<\r\n    typeof skillActivities[number]\r\n  >(skillActivities[0]);\r\n\r\n  const skillInfo: SkillInfo = {\r\n    proficiency,\r\n    abilityScore,\r\n    itemBonus,\r\n    skillActivity,\r\n  };\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    <Grid container spacing={{ xs: 1, sm: 2 }}>\r\n      <Grid item>\r\n        <TooltipSelect\r\n          title=\"Select which proficiency progression to apply.\"\r\n          label=\"Proficiency\"\r\n          value={proficiency}\r\n          onChange={(e) => {\r\n            setProficiency(e.target.value as ProfTrend);\r\n          }}\r\n        >\r\n          {makeOptions(skillProfTrends)}\r\n        </TooltipSelect>\r\n      </Grid>\r\n      <Grid item>\r\n        <TooltipSelect\r\n          title=\"Select which ability score progression to apply.\"\r\n          label=\"Ability Score\"\r\n          value={abilityScore}\r\n          onChange={(e) => {\r\n            setAbilityScore(e.target.value as StatTrend);\r\n          }}\r\n        >\r\n          {makeOptions(statTrends)}\r\n        </TooltipSelect>\r\n      </Grid>\r\n      <Grid item>\r\n        <TooltipSelect\r\n          title=\"Select which item bonus progression to apply.\"\r\n          label=\"Item Bonus\"\r\n          value={itemBonus}\r\n          onChange={(e) => {\r\n            setItemBonus(e.target.value as ItemTrend);\r\n          }}\r\n        >\r\n          {makeOptions(itemTrends)}\r\n        </TooltipSelect>\r\n      </Grid>\r\n      <Grid item>\r\n        <TooltipSelect\r\n          title=\"Select which skill activity to use.\"\r\n          label=\"Activity\"\r\n          value={skillActivity}\r\n          onChange={(e) => {\r\n            setSkillActivity(e.target.value as typeof skillActivities[number]);\r\n          }}\r\n        >\r\n          {makeOptions(skillActivities)}\r\n        </TooltipSelect>\r\n      </Grid>\r\n      <Grid item>\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={() => dispatch(activityPathCreated({ skillInfo }))}\r\n        >\r\n          Create New Activity\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nfunction CantripSelection() {\r\n  const [proficiency, setProficiency] = useState<ProfTrend>(\r\n    profTrends.CASTERSPELL\r\n  );\r\n  const [abilityScore, setAbilityScore] = useState<StatTrend>(statTrends.AS18a);\r\n  const [cantrip, setCantrip] = useState<typeof cantrips[number]>(cantrips[0]);\r\n\r\n  const cantripInfo: CantripInfo = {\r\n    proficiency,\r\n    abilityScore,\r\n    cantrip,\r\n  };\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    <Grid container spacing={{ xs: 1, sm: 2 }}>\r\n      <Grid item>\r\n        <TooltipSelect\r\n          title=\"Select which proficiency progression to apply.\"\r\n          label=\"Proficiency\"\r\n          value={proficiency}\r\n          onChange={(e) => {\r\n            setProficiency(e.target.value as ProfTrend);\r\n          }}\r\n        >\r\n          {makeOptions(spellProfTrends)}\r\n        </TooltipSelect>\r\n      </Grid>\r\n      <Grid item>\r\n        <TooltipSelect\r\n          title=\"Select which ability score progression to apply.\"\r\n          label=\"Ability Score\"\r\n          value={abilityScore}\r\n          onChange={(e) => {\r\n            setAbilityScore(e.target.value as StatTrend);\r\n          }}\r\n        >\r\n          {makeOptions(statTrends)}\r\n        </TooltipSelect>\r\n      </Grid>\r\n      <Grid item>\r\n        <TooltipSelect\r\n          title=\"Select which cantrip to use.\"\r\n          label=\"Cantrip\"\r\n          value={cantrip}\r\n          onChange={(e) => {\r\n            setCantrip(e.target.value as typeof cantrips[number]);\r\n          }}\r\n        >\r\n          {makeOptions(cantrips)}\r\n        </TooltipSelect>\r\n      </Grid>\r\n      <Grid item>\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={() => dispatch(activityPathCreated({ cantripInfo }))}\r\n        >\r\n          Create New Activity\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nfunction SpellSelection() {\r\n  const [proficiency, setProficiency] = useState<ProfTrend>(\r\n    profTrends.CASTERSPELL\r\n  );\r\n  const [abilityScore, setAbilityScore] = useState<StatTrend>(statTrends.AS18a);\r\n  const [spell, setSpell] = useState<typeof spells[number]>(spells[0]);\r\n\r\n  const spellInfo: SpellInfo = {\r\n    proficiency,\r\n    abilityScore,\r\n    spell,\r\n  };\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    <Grid container spacing={{ xs: 1, sm: 2 }}>\r\n      <Grid item>\r\n        <TooltipSelect\r\n          title=\"Select which proficiency progression to apply.\"\r\n          label=\"Proficiency\"\r\n          value={proficiency}\r\n          onChange={(e) => {\r\n            setProficiency(e.target.value as ProfTrend);\r\n          }}\r\n        >\r\n          {makeOptions(spellProfTrends)}\r\n        </TooltipSelect>\r\n      </Grid>\r\n      <Grid item>\r\n        <TooltipSelect\r\n          title=\"Select which ability score progression to apply.\"\r\n          label=\"Ability Score\"\r\n          value={abilityScore}\r\n          onChange={(e) => {\r\n            setAbilityScore(e.target.value as StatTrend);\r\n          }}\r\n        >\r\n          {makeOptions(statTrends)}\r\n        </TooltipSelect>\r\n      </Grid>\r\n      <Grid item>\r\n        <TooltipSelect\r\n          title=\"Select which spell to use.\"\r\n          label=\"Spell\"\r\n          value={spell}\r\n          onChange={(e) => {\r\n            setSpell(e.target.value as typeof spells[number]);\r\n          }}\r\n        >\r\n          {makeOptions(spells)}\r\n        </TooltipSelect>\r\n      </Grid>\r\n      <Grid item>\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={() => dispatch(activityPathCreated({ spellInfo }))}\r\n        >\r\n          Create New Activity\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport ReactGA from \"react-ga4\";\r\nimport { Adsense } from \"@ctrl/react-adsense\";\r\n\r\nimport Display from \"../Display/Display\";\r\nimport SelectedRoutine from \"../Routines/SelectedRoutine\";\r\nimport Routines from \"../Routines/Routines\";\r\nimport Export from \"../Sharing/Export\";\r\n\r\nimport \"./PF2App.css\";\r\n\r\nimport {\r\n  selectSelectedRoutine,\r\n  selectSelectedActivityPath,\r\n  selectCreateNewActivity,\r\n} from \"../Routines/RoutineSlice/routineSlice\";\r\nimport { Container, Grid, Box, Button } from \"@mui/material\";\r\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\r\n// import Header from \"./Header\";\r\nimport { ActivityPath } from \"../Routines/Activity/ActivityPath\";\r\nimport NewActivity from \"../Routines/NewActivity/NewActivity\";\r\nimport { useAppSelector } from \"./hooks\";\r\n\r\n// Initialize google analytics\r\nReactGA.initialize(\"G-JR2YK097BG\");\r\n\r\nfunction PF2App() {\r\n  const isBigEnough = useMediaQuery((theme: any) => {\r\n    return theme.breakpoints.up(\"md\");\r\n  });\r\n\r\n  ReactGA.send(\"pageview\");\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* <Header /> */}\r\n      <Container maxWidth=\"xl\">\r\n        {isBigEnough ? (\r\n          <Grid\r\n            container\r\n            columnSpacing={{ xs: 2, md: 2, lg: 3, xl: 4 }}\r\n            sx={{ height: \"100vh\" }} // \"calc(100vh - 40px)\"\r\n          >\r\n            <Grid\r\n              id=\"container\"\r\n              item\r\n              xs={12}\r\n              md={6}\r\n              sx={{ height: \"100%\", overflow: \"auto\" }}\r\n            >\r\n              <Box sx={{}}>\r\n                <Controls />\r\n              </Box>\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              xs={12}\r\n              md={6}\r\n              sx={{ mt: 0, height: 1, overflow: \"hidden auto\" }}\r\n            >\r\n              {/* <Box sx={{ height: 1 }}> */}\r\n              <Display />\r\n              {/* </Box> */}\r\n            </Grid>\r\n          </Grid>\r\n        ) : (\r\n          <React.Fragment>\r\n            <Display />\r\n            <Controls />\r\n            {/* <Adsense client=\"ca-pub-8032326260699508\" slot=\"3994991926\" /> */}\r\n          </React.Fragment>\r\n        )}\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nconst Controls = () => {\r\n  const selectedRoutine = useAppSelector(selectSelectedRoutine);\r\n  const selectedActivityPath = useAppSelector(selectSelectedActivityPath);\r\n  const createNewActivity = useAppSelector(selectCreateNewActivity);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Routines />\r\n      {selectedRoutine !== undefined ? (\r\n        <SelectedRoutine routineId={selectedRoutine} />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {selectedActivityPath !== undefined ? (\r\n        <ActivityPath id={selectedActivityPath} />\r\n      ) : createNewActivity ? (\r\n        <NewActivity />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <Export />\r\n      <Grid container sx={{ mt: 2 }} justifyContent=\"space-evenly\">\r\n        <Grid item>\r\n          <Donate />\r\n        </Grid>\r\n        <Grid item>\r\n          <Contact />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst Donate = () => {\r\n  return (\r\n    <Box>\r\n      <a href=\"https://www.buymeacoffee.com/bahalbach\" target=\"_blank\">\r\n        <img\r\n          src=\"https://cdn.buymeacoffee.com/buttons/v2/default-red.png\"\r\n          alt=\"Buy Me A Coffee\"\r\n          width=\"217px\"\r\n          height=\"60px\"\r\n        />\r\n      </a>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst Contact = () => {\r\n  return (\r\n    <Button\r\n      sx={{ height: 60, width: 217 }}\r\n      variant=\"outlined\"\r\n      color=\"primary\"\r\n      href=\"mailto:bahalbach@gmail.com\"\r\n    >\r\n      Contact Me\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default PF2App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport routineReducer, {\r\n  damageAdded,\r\n  effectAdded,\r\n  routineAdded,\r\n  setRoutine,\r\n} from \"../Routines/RoutineSlice/routineSlice\";\r\nimport targetReducer, { targetAdded } from \"../Display/targetSlice\";\r\nimport sharingReducer from \"../Display/sharingSlice\";\r\nimport weaknessReducer from \"../Display/weaknessSlice\";\r\nimport {\r\n  ACTrends,\r\n  conditions,\r\n  damageTrends,\r\n  damageTypes,\r\n  dCond,\r\n  dieTrends,\r\n  effectTypes,\r\n  graphTypes,\r\n  materials,\r\n  SaveTrends,\r\n  whenConditions,\r\n} from \"../Model/types\";\r\n\r\nconst empty: { [key: number]: number } = {};\r\nconst pickCritSpec: { [key: number]: number } = {};\r\nconst one: { [key: number]: number } = {};\r\nfor (let i = 1; i <= 20; i++) {\r\n  empty[i] = 0;\r\n  one[i] = 1;\r\n  pickCritSpec[i] = 0;\r\n  if (i >= 5) {\r\n    pickCritSpec[i] = 4;\r\n  }\r\n  if (i >= 12) {\r\n    pickCritSpec[i] = 6;\r\n  }\r\n  if (i >= 19) {\r\n    pickCritSpec[i] = 8;\r\n  }\r\n}\r\n\r\n// const activityPathRemoved = createAction(\r\n//   \"RemoveActivityPath\",\r\n//   (id, parentId) => ({ payload: { id, parentId } })\r\n// );\r\n// const globalReducer = createReducer(, (builder) => {\r\n//   builder.addCase(activityPathRemoved, (state, action) => {\r\n//     const { id, parentId } = action.payload;\r\n//     // activityPathAdapter.removeMany(state, state.entities[id].apIds);\r\n//     activityPathAdapter.removeOne(state, id);\r\n//     if (parentId !== undefined) {\r\n//       state.entities[parentId].apIds = state.entities[parentId].apIds.filter(\r\n//         (apId) => apId !== id\r\n//       );\r\n//     }\r\n//   });\r\n// });\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    routines: routineReducer,\r\n    weaknesses: weaknessReducer,\r\n    targets: targetReducer,\r\n    sharing: sharingReducer,\r\n  },\r\n});\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n// default damages and effects\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 0,\r\n    damageCondition: dCond.STRIKE,\r\n\r\n    dieTrend: dieTrends.WEAPON,\r\n    dieAdjustments: { ...empty },\r\n    diceSize: 8,\r\n    fatal: false,\r\n    fatalDie: 10,\r\n    damageTrend: [damageTrends.AS18a, damageTrends.MARTIALWEAPONSPEC],\r\n    damageAdjustments: { ...empty },\r\n\r\n    damageType: damageTypes.S,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n    damageWhen: [whenConditions.Always],\r\n  })\r\n);\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 1,\r\n    damageCondition: dCond.STRIKE,\r\n\r\n    dieTrend: dieTrends.RUNE,\r\n    dieAdjustments: { ...empty },\r\n    diceSize: 6,\r\n    fatal: false,\r\n    fatalDie: 10,\r\n    damageTrend: [],\r\n    damageAdjustments: { ...empty },\r\n\r\n    damageType: damageTypes.FIRE,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n    damageWhen: [whenConditions.Always],\r\n  })\r\n);\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 2,\r\n    damageCondition: dCond.BASIC,\r\n\r\n    dieTrend: dieTrends.SPELLLEVEL2,\r\n    dieAdjustments: { ...empty },\r\n    diceSize: 6,\r\n    fatal: false,\r\n    fatalDie: 10,\r\n    damageTrend: [],\r\n    damageAdjustments: { ...empty },\r\n\r\n    damageType: damageTypes.FIRE,\r\n    material: materials.NONE,\r\n    persistent: false,\r\n    multiplier: 1,\r\n    damageWhen: [whenConditions.Always],\r\n  })\r\n);\r\nstore.dispatch(\r\n  effectAdded({\r\n    id: 0,\r\n    effectCondition: conditions.CRIT,\r\n    effectType: effectTypes.FLATFOOT,\r\n    startLevel: 5,\r\n    endLevel: 20,\r\n    damageWhen: [whenConditions.Always],\r\n  })\r\n);\r\n\r\nstore.dispatch(\r\n  targetAdded({\r\n    id: 0,\r\n    name: \"AC: High, Saves: Moderate\",\r\n\r\n    levelDiff: 0,\r\n    persistentMultiplier: 2,\r\n\r\n    ACTrend: ACTrends.HIGH,\r\n    FortTrend: SaveTrends.MODERATE,\r\n    RefTrend: SaveTrends.MODERATE,\r\n    WillTrend: SaveTrends.MODERATE,\r\n    PerTrend: SaveTrends.MODERATE,\r\n\r\n    flatfooted: false,\r\n    percentSelectedRoutine: false,\r\n    weaknesses: [],\r\n\r\n    graphType: graphTypes.DISTRIBUTION,\r\n    routineLevel: 1,\r\n    targetLevel: 1,\r\n    overrideAC: 16,\r\n    overrideFort: 7,\r\n    overrideRef: 7,\r\n    overrideWill: 7,\r\n    overridePer: 7,\r\n  })\r\n);\r\n\r\n// add in some example routines\r\nstore.dispatch(\r\n  routineAdded({\r\n    id: 0,\r\n    name: \"Baseline\",\r\n    display: true,\r\n    apIds: [],\r\n    levelDiff: 0,\r\n    description: \"No damage. Just so graphs display 0 with autoscalling.\",\r\n    startLevel: 1,\r\n    endLevel: 20,\r\n  })\r\n);\r\n\r\n// store.dispatch(\r\n//   routineAdded({\r\n//     id: 1,\r\n//     name: \"Greatsword Fighter 2 strikes\",\r\n//     display: true,\r\n//     apIds: [0],\r\n//     levelDiff: 0,\r\n//     description:\r\n//       \"A simple Fighter making 2 strikes with a greatsword. 1d6 damage runes at 8 and 15. Crit specialization at 5.\",\r\n//     startLevel: 1,\r\n//     endLevel: 20,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   activityPathAdded({\r\n//     id: 0,\r\n//     routineId: 1,\r\n//     condition: conditions.ALWAYS,\r\n\r\n//     rollType: rollTypes.NORMAL,\r\n//     type: activityTypes.STRIKE,\r\n//     profTrend: profTrends.FIGHTERWEAPON,\r\n//     statTrend: statTrends.AS18a,\r\n//     itemTrend: itemTrends.WEAPON,\r\n//     bonusAdjustments: { ...empty },\r\n//     MAP: MAPs.N1,\r\n\r\n//     targetType: defenses.AC,\r\n//     targetInfoId: 0,\r\n\r\n//     damages: [3, 4],\r\n//     effects: [1],\r\n//     apIds: [1],\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 3,\r\n//     damageCondition: dCond.STRIKE,\r\n\r\n//     dieTrend: dieTrends.WEAPON,\r\n//     dieAdjustments: { ...empty },\r\n//     diceSize: 12,\r\n//     fatal: false,\r\n//     fatalDie: 10,\r\n//     damageTrend: [damageTrends.AS18a, damageTrends.FIGHTERWEAPONSPEC],\r\n//     damageAdjustments: { ...empty },\r\n\r\n//     damageType: damageTypes.S,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//     multiplier: 1,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 4,\r\n//     damageCondition: dCond.STRIKE,\r\n\r\n//     dieTrend: dieTrends.RUNE,\r\n//     dieAdjustments: { ...empty },\r\n//     diceSize: 6,\r\n//     fatal: false,\r\n//     fatalDie: 10,\r\n//     damageTrend: [],\r\n//     damageAdjustments: { ...empty },\r\n\r\n//     damageType: damageTypes.FIRE,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//     multiplier: 1,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   effectAdded({\r\n//     id: 1,\r\n//     effectCondition: conditions.CRIT,\r\n//     effectType: effectTypes.FLATFOOT,\r\n//     startLevel: 5,\r\n//     endLevel: 20,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   activityPathAdded({\r\n//     id: 1,\r\n//     parentId: 0,\r\n//     condition: conditions.ALWAYS,\r\n\r\n//     rollType: rollTypes.NORMAL,\r\n//     type: activityTypes.STRIKE,\r\n//     profTrend: profTrends.FIGHTERWEAPON,\r\n//     statTrend: statTrends.AS18a,\r\n//     itemTrend: itemTrends.WEAPON,\r\n//     bonusAdjustments: { ...empty },\r\n//     MAP: MAPs.N2,\r\n\r\n//     targetType: defenses.AC,\r\n//     targetInfoId: 0,\r\n\r\n//     damages: [5, 6],\r\n//     effects: [2],\r\n//     apIds: [],\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 5,\r\n//     damageCondition: dCond.STRIKE,\r\n\r\n//     dieTrend: dieTrends.WEAPON,\r\n//     dieAdjustments: { ...empty },\r\n//     diceSize: 12,\r\n//     fatal: false,\r\n//     fatalDie: 10,\r\n//     damageTrend: [damageTrends.AS18a, damageTrends.FIGHTERWEAPONSPEC],\r\n//     damageAdjustments: { ...empty },\r\n\r\n//     damageType: damageTypes.S,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//     multiplier: 1,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 6,\r\n//     damageCondition: dCond.STRIKE,\r\n\r\n//     dieTrend: dieTrends.RUNE,\r\n//     dieAdjustments: { ...empty },\r\n//     diceSize: 6,\r\n//     fatal: false,\r\n//     fatalDie: 10,\r\n//     damageTrend: [],\r\n//     damageAdjustments: { ...empty },\r\n\r\n//     damageType: damageTypes.FIRE,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//     multiplier: 1,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   effectAdded({\r\n//     id: 2,\r\n//     effectCondition: conditions.CRIT,\r\n//     effectType: effectTypes.FLATFOOT,\r\n//     startLevel: 5,\r\n//     endLevel: 20,\r\n//   })\r\n// );\r\n\r\n// store.dispatch(\r\n//   routineAdded({\r\n//     id: 2,\r\n//     name: \"Fireball\",\r\n//     display: true,\r\n//     apIds: [2],\r\n//     levelDiff: 0,\r\n//     description: \"A 2d6 / spell level basic reflex save.\",\r\n//     startLevel: 1,\r\n//     endLevel: 20,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   activityPathAdded({\r\n//     id: 2,\r\n//     routineId: 2,\r\n//     condition: conditions.ALWAYS,\r\n\r\n//     rollType: rollTypes.NORMAL,\r\n//     type: activityTypes.SAVE,\r\n//     profTrend: profTrends.CASTERSPELL,\r\n//     statTrend: statTrends.AS18a,\r\n//     itemTrend: itemTrends.NONE,\r\n//     bonusAdjustments: { ...empty },\r\n//     MAP: MAPs.N1,\r\n\r\n//     targetType: defenses.REF,\r\n//     targetInfoId: 0,\r\n\r\n//     damages: [7],\r\n//     effects: [],\r\n//     apIds: [],\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 7,\r\n//     damageCondition: dCond.BASIC,\r\n\r\n//     dieTrend: dieTrends.SPELLLEVEL2,\r\n//     dieAdjustments: { ...empty },\r\n//     diceSize: 6,\r\n//     fatal: false,\r\n//     fatalDie: 10,\r\n//     damageTrend: [],\r\n//     damageAdjustments: { ...empty },\r\n\r\n//     damageType: damageTypes.FIRE,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//     multiplier: 1,\r\n//   })\r\n// );\r\n\r\n// store.dispatch(\r\n//   routineAdded({\r\n//     id: 3,\r\n//     name: \"Pick Fighter Double Slice\",\r\n//     display: false,\r\n//     apIds: [3, 4],\r\n//     levelDiff: 0,\r\n//     description:\r\n//       \"A Fighter using Double Slice with a pick and a light pick. 1d6 damage runes at 8 and 15. Crit specialization at 5.\",\r\n//     startLevel: 1,\r\n//     endLevel: 20,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   activityPathAdded({\r\n//     id: 3,\r\n//     routineId: 3,\r\n//     condition: conditions.ALWAYS,\r\n\r\n//     rollType: rollTypes.NORMAL,\r\n//     type: activityTypes.STRIKE,\r\n//     profTrend: profTrends.FIGHTERWEAPON,\r\n//     statTrend: statTrends.AS18a,\r\n//     itemTrend: itemTrends.WEAPON,\r\n//     bonusAdjustments: { ...empty },\r\n//     MAP: MAPs.N1,\r\n\r\n//     targetType: defenses.AC,\r\n//     targetInfoId: 0,\r\n\r\n//     damages: [8, 9, 10],\r\n//     effects: [],\r\n//     apIds: [],\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 8,\r\n//     damageCondition: dCond.STRIKE,\r\n\r\n//     dieTrend: dieTrends.WEAPON,\r\n//     dieAdjustments: { ...empty },\r\n//     diceSize: 6,\r\n//     fatal: true,\r\n//     fatalDie: 10,\r\n//     damageTrend: [damageTrends.AS18a, damageTrends.FIGHTERWEAPONSPEC],\r\n//     damageAdjustments: { ...empty },\r\n\r\n//     damageType: damageTypes.P,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//     multiplier: 1,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 9,\r\n//     damageCondition: dCond.CRIT,\r\n\r\n//     dieTrend: dieTrends.NONE,\r\n//     dieAdjustments: { ...one },\r\n//     diceSize: 10,\r\n//     fatal: false,\r\n//     fatalDie: 10,\r\n//     damageTrend: [],\r\n//     damageAdjustments: { ...pickCritSpec },\r\n\r\n//     damageType: damageTypes.P,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//     multiplier: 1,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 10,\r\n//     damageCondition: dCond.STRIKE,\r\n\r\n//     dieTrend: dieTrends.RUNE,\r\n//     dieAdjustments: { ...empty },\r\n//     diceSize: 6,\r\n//     fatal: false,\r\n//     fatalDie: 10,\r\n//     damageTrend: [],\r\n//     damageAdjustments: { ...empty },\r\n\r\n//     damageType: damageTypes.FIRE,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//     multiplier: 1,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   activityPathAdded({\r\n//     id: 4,\r\n//     routineId: 3,\r\n//     condition: conditions.ALWAYS,\r\n\r\n//     rollType: rollTypes.NORMAL,\r\n//     type: activityTypes.STRIKE,\r\n//     profTrend: profTrends.FIGHTERWEAPON,\r\n//     statTrend: statTrends.AS18a,\r\n//     itemTrend: itemTrends.WEAPON,\r\n//     bonusAdjustments: { ...empty },\r\n//     MAP: MAPs.A1,\r\n\r\n//     targetType: defenses.AC,\r\n//     targetInfoId: 0,\r\n\r\n//     damages: [11, 12, 13],\r\n//     effects: [],\r\n//     apIds: [],\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 11,\r\n//     damageCondition: dCond.STRIKE,\r\n\r\n//     dieTrend: dieTrends.WEAPON,\r\n//     dieAdjustments: { ...empty },\r\n//     diceSize: 4,\r\n//     fatal: true,\r\n//     fatalDie: 8,\r\n//     damageTrend: [damageTrends.AS18a, damageTrends.FIGHTERWEAPONSPEC],\r\n//     damageAdjustments: { ...empty },\r\n\r\n//     damageType: damageTypes.P,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//     multiplier: 1,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 12,\r\n//     damageCondition: dCond.CRIT,\r\n\r\n//     dieTrend: dieTrends.NONE,\r\n//     dieAdjustments: { ...one },\r\n//     diceSize: 8,\r\n//     fatal: false,\r\n//     fatalDie: 10,\r\n//     damageTrend: [],\r\n//     damageAdjustments: { ...pickCritSpec },\r\n\r\n//     damageType: damageTypes.P,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//     multiplier: 1,\r\n//   })\r\n// );\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 13,\r\n//     damageCondition: dCond.STRIKE,\r\n\r\n//     dieTrend: dieTrends.RUNE,\r\n//     dieAdjustments: { ...empty },\r\n//     diceSize: 6,\r\n//     fatal: false,\r\n//     fatalDie: 10,\r\n//     damageTrend: [],\r\n//     damageAdjustments: { ...empty },\r\n\r\n//     damageType: damageTypes.FIRE,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//     multiplier: 1,\r\n//   })\r\n// );\r\n\r\nstore.dispatch(setRoutine(0));\r\n// store.dispatch(weaknessAdded({ id: 0, type: damageTypes.FIRE, value: 10 }));\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 0,\r\n//     damageCondition: dCond.STRIKE,\r\n//     diceNum: 1,\r\n//     diceSize: 8,\r\n//     staticDamage: 4,\r\n//     damageType: damageTypes.B,\r\n//     material: materials.COLD_IRON,\r\n//     persistent: false,\r\n//   })\r\n// );\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createTheme } from \"@mui/material/styles\";\r\nimport { red } from \"@mui/material/colors\";\r\n\r\n// A custom theme for this app\r\nconst theme = createTheme({\r\n  palette: {\r\n    primary: {\r\n      main: red[500],\r\n    },\r\n    background: {\r\n      default: \"#222222\",\r\n    },\r\n  },\r\n});\r\n\r\nexport default theme;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport PF2App from \"./App/PF2App\";\r\nimport store from \"./App/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { CssBaseline } from \"@mui/material\";\r\nimport theme from \"./App/theme\";\r\nimport { ThemeProvider } from \"@mui/material/styles\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <ThemeProvider theme={theme}>\r\n        <CssBaseline />\r\n        <PF2App />\r\n      </ThemeProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}