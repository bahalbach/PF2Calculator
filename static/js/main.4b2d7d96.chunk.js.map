{"version":3,"sources":["Target/weaknessSlice.js","Target/targetSlice.js","types.js","Target/TargetInput.js","Calculation.js","Routine/damageSlice.js","Routine/activityPathSlice.js","Routine/routineSlice.js","Display.js","Routine/SelectedRoutine.js","Routines.js","Export.js","PF2App.js","Routine/effectSlice.js","store.js","serviceWorker.js","index.js"],"names":["weaknessAdapter","createEntityAdapter","weakness","weaknessesSlice","createSlice","name","initialState","getInitialState","reducers","weaknessAdded","addOne","weaknessUpdated","updateOne","weaknessCreated","reducer","state","action","payload","id","type","value","prepare","parentId","weaknessRemoved","removeOne","actions","getSelectors","weaknesses","selectweaknessById","selectById","selectweaknessEntities","selectIds","selectEntities","targetAdapter","selectAll","selectTotal","targetsSlice","targetAdded","targetUpdated","extraReducers","builder","addCase","weaknessId","entities","push","filter","wid","targets","selecttargetById","selecttargetEntities","activityTypes","STRIKE","SAVE","defenses","AC","FORT","REF","WILL","PER","MAPs","N1","N2","N3","A1","A2","A3","R1","R2","R3","RA1","RA2","RA3","RAA1","RAA2","RAA3","MAPvalues","damageTypes","NONE","B","P","S","FIRE","materials","COLD_IRON","SILVER","ADAMANTINE","conditions","ALWAYS","CRIT","SUCC","FAIL","CRIF","AT_LEAST_SUCC","AT_LEAST_FAIL","FAIL_WORSE","SUCC_WORSE","dCond","BASIC","diceNums","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","diceSizes","Weakness","useSelector","dispatch","useDispatch","className","onChange","e","target","changes","isNaN","parseInt","AddWeakness","useState","weaknessValue","setWeaknessValue","WeaknessSelect","options","dt","key","m","TargetInput","level","Fort","Ref","Will","Perception","flatfooted","htmlFor","placeholder","checked","map","convolve","vec1","vec2","length","Error","volume","kernel","displacement","convVec","i","j","consolidateDists","maxDamage","dists","dist","Math","max","staticDamage","damageDist","index","applyMin","min","shift","addDamage","context","material","persistent","multiplier","normal","dam","newDist","newDam","floor","oldValue","chance","newValue","diff","multiplyDist","damageAdapter","damageId","damagesSlice","damageAdded","damageUpdated","damageCreated","condition","diceNum","diceSize","damageRemoved","console","log","damages","selectdamageById","selectdamageEntities","activityPathAdapter","activityPathId","activityPathsSlice","activityPathAdded","activityPathUpdated","activityPathCreated","targetType","targetInfoId","MAP","effects","apIds","undefined","routineId","did","activityPaths","selectactivityPathById","selectactivityPathEntities","routinesAdapter","routinesSlice","selectedRoutine","setRoutine","routineAdded","routineUpdated","routineCreated","apId","updateSelected","routines","selectRoutineById","selectRoutineEntities","selectAllRoutines","selectSelectedRoutine","Display","addPersistent","setAddPersistent","perMulti","setPerMulti","evaluateActivityPath","activityPath","currentTarget","currentDamages","currentWeaknesses","activity","bonus","DC","chances","keen","dif","getCritSuccessPercent","getSuccessPercent","getFailurePercent","getCritFailurePercent","critDamages","succDamages","failDamages","crfaDamages","damageTrees","forEach","damage","diceArray","damageTree","damageQuality","totalStaticDamage","totalDamageDist","maxW","maxR","calculateExpectedDamage","ap","pathDist","pathPDist","indicies","maxPDamage","datasets","expectedDamages","expectedPersistentDamages","routine","expD","routineDDist","routinePDDist","PdamageDist","dataArray","x","y","fill","label","data","xAxisID","yAxisID","spanGaps","labels","valueAsNumber","NameInput","ActivityPath","conditionOptions","c","activityTypeOptions","at","MAPOptions","defenseOptions","d","onClick","Damage","dc","diceNumOptions","dn","diceSizeOptions","ds","damageTypeOptions","materialOptions","SelectedRoutine","Routines","routineOptions","ImportExport","PF2App","props","Export","effectAdapter","effectsSlice","effectAdded","effectUpdated","store","configureStore","routineReducer","activityPathReducer","damageReducer","effectReducer","weaknessReducer","targetReducer","overrideDefault","addMods","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4b2d7d96.chunk.js","sourcesContent":["import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const weaknessAdapter = createEntityAdapter();\r\n\r\nlet weakness = 0;\r\n\r\nexport const weaknessesSlice = createSlice({\r\n  name: \"weaknesses\",\r\n  initialState: weaknessAdapter.getInitialState(),\r\n  reducers: {\r\n    weaknessAdded: weaknessAdapter.addOne,\r\n    weaknessUpdated: weaknessAdapter.updateOne,\r\n    weaknessCreated: {\r\n      reducer: (state, action) => {\r\n        const { id, type, value } = action.payload;\r\n        weaknessAdapter.addOne(state, { id, type, value });\r\n      },\r\n      prepare: ({ parentId, type, value }) => {\r\n        const id = ++weakness;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n            type,\r\n            value,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    weaknessRemoved: weaknessAdapter.removeOne,\r\n  },\r\n});\r\n\r\nexport const {\r\n  weaknessRemoved,\r\n  weaknessCreated,\r\n  weaknessAdded,\r\n  weaknessUpdated,\r\n} = weaknessesSlice.actions;\r\n\r\nexport default weaknessesSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selectweaknessById,\r\n  selectIds: selectweaknessIds,\r\n  selectEntities: selectweaknessEntities,\r\n  selectAll: selectAllweaknesses,\r\n  selectTotal: selectTotalweaknesses,\r\n} = weaknessAdapter.getSelectors((state) => state.weaknesses);\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\nimport { weaknessCreated, weaknessRemoved } from \"./weaknessSlice\";\r\n\r\nexport const targetAdapter = createEntityAdapter();\r\n\r\nexport const targetsSlice = createSlice({\r\n  name: \"targets\",\r\n  initialState: targetAdapter.getInitialState(),\r\n  reducers: {\r\n    targetAdded: targetAdapter.addOne,\r\n    targetUpdated: targetAdapter.updateOne,\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(weaknessCreated, (state, action) => {\r\n        const { parentId: id, id: weaknessId } = action.payload;\r\n        state.entities[id].weaknesses.push(weaknessId);\r\n        // targetAdded.updateOne(state, { id, changes: { weaknesses: [...weaknesses, weaknessId] }});\r\n      })\r\n      .addCase(weaknessRemoved, (state, action) => {\r\n        const { parentId: id, id: weaknessId } = action.payload;\r\n        state.entities[id].weaknesses = state.entities[id].weaknesses.filter(\r\n          (wid) => wid !== weaknessId\r\n        );\r\n      });\r\n  },\r\n});\r\n\r\nexport const { targetAdded, targetUpdated } = targetsSlice.actions;\r\n\r\nexport default targetsSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selecttargetById,\r\n  selectIds: selecttargetIds,\r\n  selectEntities: selecttargetEntities,\r\n  selectAll: selectAlltargets,\r\n  selectTotal: selectTotaltargets,\r\n} = targetAdapter.getSelectors((state) => state.targets);\r\n","export const activityTypes = {\r\n  STRIKE: \"Strike\",\r\n  SAVE: \"Save\",\r\n};\r\n\r\nexport const defenses = {\r\n  AC: \"AC\",\r\n  FORT: \"Fort\",\r\n  REF: \"Ref\",\r\n  WILL: \"Will\",\r\n  PER: \"Perception\",\r\n};\r\n\r\nexport const MAPs = {\r\n  N1: \"0 (0x-5)\",\r\n  N2: \"-5 (1x-5)\",\r\n  N3: \"-10 (2x-5)\",\r\n  A1: \"0 (0x-4)\",\r\n  A2: \"-4 (1x-4)\",\r\n  A3: \"-8 (2x-4)\",\r\n  R1: \"0 (0x-3)\",\r\n  R2: \"-3 (1x-3)\",\r\n  R3: \"-6 (2x-3)\",\r\n  RA1: \"0 (0x-2)\",\r\n  RA2: \"-2 (1x-2)\",\r\n  RA3: \"-4 (2x-2)\",\r\n  RAA1: \"0 (0x-1)\",\r\n  RAA2: \"-1 (1x-1)\",\r\n  RAA3: \"-2 (2x-1)\",\r\n};\r\n\r\nexport const MAPvalues = {\r\n  \"0 (0x-5)\": 0,\r\n  \"-5 (1x-5)\": -5,\r\n  \"-10 (2x-5)\": -10,\r\n  \"0 (0x-4)\": 0,\r\n  \"-4 (1x-4)\": -4,\r\n  \"-8 (2x-4)\": -8,\r\n  \"0 (0x-3)\": 0,\r\n  \"-3 (1x-3)\": -3,\r\n  \"-6 (2x-3)\": -6,\r\n  \"0 (0x-2)\": 0,\r\n  \"-2 (1x-2)\": -2,\r\n  \"-4 (2x-2)\": -4,\r\n  \"0 (0x-1)\": 0,\r\n  \"-1 (1x-1)\": -1,\r\n  \"-2 (2x-1)\": -2,\r\n};\r\n\r\nexport const damageTypes = {\r\n  NONE: \"None\",\r\n  B: \"bludgeoning\",\r\n  P: \"piercing\",\r\n  S: \"slashing\",\r\n  FIRE: \"fire\",\r\n};\r\n\r\nexport const materials = {\r\n  NONE: \"none\",\r\n  COLD_IRON: \"cold iron\",\r\n  SILVER: \"silver\",\r\n  ADAMANTINE: \"adamantine\",\r\n};\r\n\r\nexport const conditions = {\r\n  ALWAYS: \"Always\",\r\n  CRIT: \"On Crit\",\r\n  SUCC: \"On Success\",\r\n  FAIL: \"On Failure\",\r\n  CRIF: \"On Crit Fail\",\r\n  AT_LEAST_SUCC: \"Success or better\",\r\n  AT_LEAST_FAIL: \"Failure or better\",\r\n  FAIL_WORSE: \"Failure or worse\",\r\n  SUCC_WORSE: \"Success or worse\",\r\n};\r\n\r\nexport const dCond = {\r\n  STRIKE: \"x1 hit, x2 crit\",\r\n  BASIC: \"Basic save\",\r\n  ALWAYS: \"Always\",\r\n  CRIT: \"On Crit\",\r\n  SUCC: \"On Success\",\r\n  FAIL: \"On Failure\",\r\n  CRIF: \"On Crit Fail\",\r\n  AT_LEAST_SUCC: \"Success or better\",\r\n  AT_LEAST_FAIL: \"Failure or better\",\r\n  FAIL_WORSE: \"Failure or worse\",\r\n  SUCC_WORSE: \"Success or worse\",\r\n};\r\n\r\nexport const diceNums = {\r\n  0: 0,\r\n  1: 1,\r\n  2: 2,\r\n  3: 3,\r\n  4: 4,\r\n  5: 5,\r\n  6: 6,\r\n  7: 7,\r\n  8: 8,\r\n  9: 9,\r\n  10: 10,\r\n  11: 11,\r\n  12: 12,\r\n  13: 13,\r\n  14: 14,\r\n  15: 15,\r\n  16: 16,\r\n  17: 17,\r\n  18: 18,\r\n  19: 19,\r\n  20: 20,\r\n};\r\n\r\nexport const diceSizes = {\r\n  4: 4,\r\n  6: 6,\r\n  8: 8,\r\n  10: 10,\r\n  12: 12,\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { selecttargetById, targetUpdated } from \"./targetSlice\";\r\nimport { damageTypes, defenses, materials } from \"../types\";\r\nimport {\r\n  selectweaknessById,\r\n  weaknessCreated,\r\n  weaknessRemoved,\r\n  weaknessUpdated,\r\n} from \"./weaknessSlice\";\r\n\r\nfunction TargetInput({ id }) {\r\n  const {\r\n    name,\r\n    level,\r\n    [defenses.AC]: AC,\r\n    [defenses.FORT]: Fort,\r\n    [defenses.REF]: Ref,\r\n    [defenses.WILL]: Will,\r\n    [defenses.PER]: Perception,\r\n    flatfooted,\r\n    weaknesses,\r\n  } = useSelector((state) => selecttargetById(state, 0));\r\n  const dispatch = useDispatch();\r\n\r\n  // name, level, ac, fort, ref, will, perception, resistances/weaknesses\r\n  return (\r\n    <div className=\"box flexbox\">\r\n      <span className=\"input\">\r\n        <label htmlFor=\"targetName\">{\"Target Name: \"}</label>\r\n        <input\r\n          id=\"targetName\"\r\n          type=\"text\"\r\n          placeholder=\"Enter Target name\"\r\n          value={name}\r\n          onChange={(e) =>\r\n            dispatch(targetUpdated({ id, changes: { name: e.target.value } }))\r\n          }\r\n        />\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"AC\">{\" AC: \"}</label>\r\n        <input\r\n          id=\"AC\"\r\n          type=\"number\"\r\n          value={AC}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { [defenses.AC]: parseInt(e.target.value) },\r\n              })\r\n            )\r\n          }\r\n        />\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"Fort\">{\" Fort: \"}</label>\r\n        <input\r\n          id=\"Fort\"\r\n          type=\"number\"\r\n          value={Fort}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { [defenses.FORT]: parseInt(e.target.value) },\r\n              })\r\n            )\r\n          }\r\n        />\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"Ref\">{\" Ref: \"}</label>\r\n        <input\r\n          id=\"Ref\"\r\n          type=\"number\"\r\n          value={Ref}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { [defenses.REF]: parseInt(e.target.value) },\r\n              })\r\n            )\r\n          }\r\n        />\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"Will\">{\" Will: \"}</label>\r\n        <input\r\n          id=\"Will\"\r\n          type=\"number\"\r\n          value={Will}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { [defenses.WILL]: parseInt(e.target.value) },\r\n              })\r\n            )\r\n          }\r\n        />\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"Perception\">{\" Perception: \"}</label>\r\n        <input\r\n          id=\"Perception\"\r\n          type=\"number\"\r\n          value={Perception}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({\r\n                id,\r\n                changes: { [defenses.PER]: parseInt(e.target.value) },\r\n              })\r\n            )\r\n          }\r\n        />\r\n      </span>\r\n\r\n      <span className=\"input\">\r\n        <label htmlFor=\"Flatfooted\">{\" Flatfooted: \"}</label>\r\n        <input\r\n          id=\"Flatfooted\"\r\n          type=\"checkbox\"\r\n          checked={flatfooted}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              targetUpdated({ id, changes: { flatfooted: e.target.checked } })\r\n            )\r\n          }\r\n        />\r\n      </span>\r\n\r\n      <div className=\"box flexbox\">\r\n        {\" Resistance/Weakness: \"}\r\n        {weaknesses.map((weaknessId) => (\r\n          <Weakness parentId={id} id={weaknessId} key={weaknessId} />\r\n        ))}\r\n        <AddWeakness parentId={id} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// const TargetInfo = ({ id }) => {\r\n//   const { overrideDefault, type, value, weaknesses } = useSelector((state) =>\r\n//     selecttargetInfoById(state, id)\r\n//   );\r\n//   const dispatch = useDispatch();\r\n\r\n//   const defenseOptions = [];\r\n//   for (let d in defenses) {\r\n//     defenseOptions.push(<option key={d}>{defenses[d]}</option>);\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"box\">\r\n//       {\"Override Target: \"}\r\n//       <input\r\n//         type=\"checkbox\"\r\n//         checked={overrideDefault}\r\n//         onChange={(e) =>\r\n//           dispatch(\r\n//             targetInfoUpdated({\r\n//               id,\r\n//               changes: { overrideDefault: e.target.checked },\r\n//             })\r\n//           )\r\n//         }\r\n//       />\r\n\r\n// {/* <Weaknesses parentId={id} weaknessIds={weaknesses} /> */}\r\n\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const Weaknesses = ({ parentId, weaknessIds }) => {\r\n//   return (\r\n//     <span>\r\n//       {weaknessIds.map((weaknessId) => (\r\n//         <Weakness id={weaknessId} key={weaknessId} />\r\n//       ))}\r\n//       <AddWeakness id={parentId} />\r\n//     </span>\r\n//   );\r\n// };\r\n\r\nconst Weakness = ({ id, parentId }) => {\r\n  // needs to have parent id to remove weakness\r\n  const { type, value } = useSelector((state) => selectweaknessById(state, id));\r\n  const dispatch = useDispatch();\r\n\r\n  const updateOrRemoveWeakness = (e) => {\r\n    if (e.target.value === damageTypes.NONE) {\r\n      // remove this weakness\r\n      dispatch(weaknessRemoved({ id, parentId }));\r\n    } else {\r\n      dispatch(weaknessUpdated({ id, changes: { type: e.target.value } }));\r\n    }\r\n  };\r\n  const updateWeaknessValue = (e) => {\r\n    if (!isNaN(e.target.value)) {\r\n      dispatch(\r\n        weaknessUpdated({ id, changes: { value: parseInt(e.target.value) } })\r\n      );\r\n    }\r\n  };\r\n  return (\r\n    <span className=\"input\">\r\n      <WeaknessSelect value={type} onChange={updateOrRemoveWeakness} />\r\n      <input type=\"number\" value={value} onChange={updateWeaknessValue} />\r\n    </span>\r\n  );\r\n};\r\n\r\nlet weaknessId = 0;\r\n\r\nconst AddWeakness = ({ parentId }) => {\r\n  const dispatch = useDispatch();\r\n  let [weaknessValue, setWeaknessValue] = useState(0);\r\n\r\n  // add a Weakness to TargetInfo id\r\n  const addWeakness = (e) => {\r\n    if (e.target.value !== damageTypes.NONE) {\r\n      // need to create a new weakness\r\n      weaknessId++;\r\n      dispatch(\r\n        weaknessCreated({\r\n          id: weaknessId,\r\n          type: e.target.value,\r\n          value: weaknessValue,\r\n          parentId: parentId,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <span className=\"input\">\r\n      <WeaknessSelect value={damageTypes.NONE} onChange={addWeakness} />\r\n      <input\r\n        type=\"number\"\r\n        value={weaknessValue}\r\n        onChange={(e) => setWeaknessValue(parseInt(e.target.value))}\r\n      />\r\n    </span>\r\n  );\r\n};\r\n\r\nconst WeaknessSelect = ({ value, onChange }) => {\r\n  const options = [];\r\n  for (let dt in damageTypes) {\r\n    options.push(<option key={dt}>{damageTypes[dt]}</option>);\r\n  }\r\n  for (let m in materials) {\r\n    if (materials[m] === materials.NONE) continue;\r\n    options.push(<option key={m}>{materials[m]}</option>);\r\n  }\r\n  return (\r\n    <span>\r\n      <select value={value} onChange={(e) => onChange(e)}>\r\n        {options}\r\n      </select>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default TargetInput;\r\n","import { activityTypes, dCond, defenses, MAPvalues, materials } from \"./types\";\r\n\r\n// const diceCombinations = (number, size) => {\r\n//   if (number===0) return [1];\r\n\r\n//   const factor = 1 / (size ** number);\r\n//   const dist = [];\r\n//   for (let i=0; i<number; i++) {\r\n//     // (number choose i) * factor\r\n//   }\r\n// }\r\n\r\nexport const convolve = (vec1, vec2) => {\r\n  if (vec1.length === 0 || vec2.length === 0) {\r\n    throw new Error(\"Vectors can not be empty!\");\r\n  }\r\n  const volume = vec1;\r\n  const kernel = vec2;\r\n  let displacement = 0;\r\n  const convVec = [];\r\n\r\n  for (let i = 0; i < volume.length; i++) {\r\n    for (let j = 0; j < kernel.length; j++) {\r\n      if (displacement + j !== convVec.length) {\r\n        convVec[displacement + j] =\r\n          convVec[displacement + j] + volume[i] * kernel[j];\r\n      } else {\r\n        convVec.push(volume[i] * kernel[j]);\r\n      }\r\n    }\r\n    displacement++;\r\n  }\r\n\r\n  return convVec;\r\n};\r\n\r\nconst multiplyDist = (dam, dist, multiplier) => {\r\n  if (multiplier === 0) return [0, [1]];\r\n  if (multiplier === 1) return [dam, dist];\r\n\r\n  const newDist = [0];\r\n  let index = 0;\r\n  const newDam = Math.floor(dam * multiplier);\r\n\r\n  let i = 0;\r\n  let oldValue = newDam;\r\n  for (let chance of dist) {\r\n    let newValue = Math.floor((dam + i) * multiplier);\r\n    if (newValue === oldValue) {\r\n      // console.log(`adding ${newValue} at ${index} with ${chance}`);\r\n      newDist[index] += chance;\r\n    } else {\r\n      if (newValue > oldValue + 1) {\r\n        for (let diff = 0; diff < newValue - (oldValue + 1); diff++) {\r\n          index++;\r\n          // console.log(`adding ${newValue} at ${index} with ${0}`);\r\n          newDist[index] = 0;\r\n        }\r\n      }\r\n      index++;\r\n      // console.log(`adding ${newValue} at ${index} with ${chance}`);\r\n      newDist[index] = chance;\r\n    }\r\n    oldValue = newValue;\r\n    i++;\r\n  }\r\n\r\n  return [newDam, newDist];\r\n};\r\n\r\nexport const consolidateDists = (...dists) => {\r\n  // dists = [[{staticDamage, damageDist}, chance]]...]\r\n  // console.log(dists);\r\n  let maxDamage = 0;\r\n  for (let dist of dists) {\r\n    // console.log(`chance is ${dist[1]}`);\r\n    maxDamage = Math.max(\r\n      maxDamage,\r\n      dist[0].staticDamage + dist[0].damageDist.length\r\n    );\r\n  }\r\n  let damageDist = [];\r\n  for (let i = 0; i < maxDamage; i++) {\r\n    damageDist.push(0);\r\n    // console.log(`i is ${i}`);\r\n    for (let dist of dists) {\r\n      if (dist[0].staticDamage <= i) {\r\n        let index = i - dist[0].staticDamage;\r\n        // console.log(`val ${dist[0].damageDist[index]} at index ${index}`);\r\n        if (index < dist[0].damageDist.length)\r\n          damageDist[i] += dist[0].damageDist[index] * dist[1];\r\n      }\r\n    }\r\n  }\r\n  // console.log([staticDamage, damageDist]);\r\n  return damageDist;\r\n};\r\n\r\nconst applyMin = (staticDamage, damageDist, min) => {\r\n  // TODO: implement applyMin\r\n  while (staticDamage < min) {\r\n    if (damageDist.length >= 2) {\r\n      damageDist[1] += damageDist[0];\r\n      damageDist.shift();\r\n    }\r\n    staticDamage++;\r\n  }\r\n  return [staticDamage, damageDist];\r\n};\r\n\r\nfunction getCritSuccessPercent(bonus, DC, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -20) {\r\n    chance = 0;\r\n  } else if (dif === -20) {\r\n    chance = 5;\r\n  } else if (dif < -9) {\r\n    chance = keen ? 10 : 5;\r\n  } else if (dif < 8) {\r\n    chance = (11 + dif) * 5;\r\n  } else {\r\n    chance = 95;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nfunction getSuccessPercent(bonus, DC, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -29) {\r\n    chance = 0;\r\n  } else if (dif < -20) {\r\n    chance = 5;\r\n  } else if (dif === -20) {\r\n    chance = 0;\r\n  } else if (dif < -9) {\r\n    chance = (keen ? 19 : 20 + dif) * 5;\r\n  } else if (dif < -1) {\r\n    chance = 50;\r\n  } else if (dif < 9) {\r\n    chance = (8 - dif) * 5;\r\n  } else {\r\n    chance = 5;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nfunction getFailurePercent(bonus, DC, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -29) {\r\n    chance = 5;\r\n  } else if (dif < -20) {\r\n    chance = (29 + dif) * 5;\r\n  } else if (dif < -10) {\r\n    chance = 45;\r\n  } else if (dif < -1) {\r\n    chance = (-2 - dif) * 5;\r\n  } else if (dif < 9) {\r\n    chance = 5;\r\n  } else {\r\n    chance = 0;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nfunction getCritFailurePercent(bonus, DC, keen = false) {\r\n  const dif = bonus - DC;\r\n  let chance;\r\n  if (dif < -29) {\r\n    chance = 95;\r\n  } else if (dif < -10) {\r\n    chance = (-10 - dif) * 5;\r\n  } else if (dif < -1) {\r\n    chance = 5;\r\n  } else {\r\n    chance = 0;\r\n  }\r\n\r\n  return chance;\r\n}\r\n\r\nconst addDamage = (\r\n  context,\r\n  type,\r\n  material,\r\n  persistent,\r\n  staticDamage,\r\n  damageDist,\r\n  multiplier\r\n) => {\r\n  if (persistent) {\r\n    context = context.persistent;\r\n  } else {\r\n    context = context.normal;\r\n  }\r\n  [staticDamage, damageDist] = multiplyDist(\r\n    staticDamage,\r\n    damageDist,\r\n    multiplier\r\n  );\r\n  if (!(type in context)) {\r\n    context[type] = { material, staticDamage, damageDist };\r\n  } else {\r\n    context[type].staticDamage += staticDamage;\r\n    context[type].damageDist = convolve(context[type].damageDist, damageDist);\r\n    if (material !== materials.NONE) context[type].material = material;\r\n  }\r\n};\r\n\r\nfunction calculateExpectedDamage(activity, damages, target, weaknesses) {\r\n  let bonus;\r\n  let DC;\r\n  switch (activity.type) {\r\n    case activityTypes.STRIKE:\r\n      bonus = activity.value;\r\n      bonus += MAPvalues[activity.MAP];\r\n      DC = target[activity.targetType];\r\n      if (activity.targetType === defenses.AC) {\r\n        if (target.flatfooted) DC -= 2;\r\n      } else {\r\n        DC += 10;\r\n      }\r\n      break;\r\n\r\n    case activityTypes.SAVE:\r\n      bonus = target[activity.targetType];\r\n      DC = activity.value;\r\n      if (activity.targetType === defenses.AC) {\r\n        bonus -= 10;\r\n      }\r\n      break;\r\n\r\n    default:\r\n      console.log(`Activity type ${activity.type} not implemented`);\r\n  }\r\n\r\n  const critPercent = getCritSuccessPercent(bonus, DC);\r\n  const succPercent = getSuccessPercent(bonus, DC);\r\n  const failPercent = getFailurePercent(bonus, DC);\r\n  const crfaPercent = getCritFailurePercent(bonus, DC);\r\n  const chances = [\r\n    critPercent / 100,\r\n    succPercent / 100,\r\n    failPercent / 100,\r\n    crfaPercent / 100,\r\n  ];\r\n  const critDamages = { normal: {}, persistent: {} };\r\n  const succDamages = { normal: {}, persistent: {} };\r\n  const failDamages = { normal: {}, persistent: {} };\r\n  const crfaDamages = { normal: {}, persistent: {} };\r\n  const damageTrees = [critDamages, succDamages, failDamages, crfaDamages];\r\n\r\n  // go through each damage and evaluate it, put damage types together\r\n  damages.forEach((damage) => {\r\n    let {\r\n      condition,\r\n      diceNum,\r\n      diceSize,\r\n      staticDamage,\r\n      type,\r\n      material,\r\n      persistent,\r\n    } = damage;\r\n    if (!staticDamage) staticDamage = 0;\r\n\r\n    let damageDist = [1];\r\n    const diceArray = [];\r\n    for (let i = 0; i < diceSize; i++) {\r\n      diceArray.push(1 / diceSize);\r\n    }\r\n    for (let i = 0; i < diceNum; i++) {\r\n      damageDist = convolve(damageDist, diceArray);\r\n    }\r\n    staticDamage += diceNum;\r\n\r\n    switch (condition) {\r\n      case dCond.STRIKE:\r\n        addDamage(\r\n          succDamages,\r\n          type,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        addDamage(\r\n          critDamages,\r\n          type,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          2\r\n        );\r\n        break;\r\n\r\n      case dCond.BASIC:\r\n        addDamage(\r\n          succDamages,\r\n          type,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          0.5\r\n        );\r\n        addDamage(\r\n          failDamages,\r\n          type,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        addDamage(\r\n          crfaDamages,\r\n          type,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        break;\r\n\r\n      case dCond.CRIF:\r\n        addDamage(\r\n          crfaDamages,\r\n          type,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        break;\r\n\r\n      case dCond.FAIL:\r\n        addDamage(\r\n          failDamages,\r\n          type,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        break;\r\n\r\n      case dCond.SUCC:\r\n        addDamage(\r\n          succDamages,\r\n          type,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        break;\r\n\r\n      case dCond.CRIT:\r\n        addDamage(\r\n          critDamages,\r\n          type,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        break;\r\n\r\n      case dCond.AT_LEAST_SUCC:\r\n        addDamage(\r\n          succDamages,\r\n          type,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        addDamage(\r\n          critDamages,\r\n          type,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        break;\r\n\r\n      case dCond.AT_LEAST_FAIL:\r\n        addDamage(\r\n          failDamages,\r\n          type,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        addDamage(\r\n          succDamages,\r\n          type,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        addDamage(\r\n          critDamages,\r\n          type,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        break;\r\n\r\n      case dCond.FAIL_WORSE:\r\n        addDamage(\r\n          crfaDamages,\r\n          type,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        addDamage(\r\n          failDamages,\r\n          type,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        break;\r\n\r\n      case dCond.SUCC_WORSE:\r\n        addDamage(\r\n          crfaDamages,\r\n          type,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        addDamage(\r\n          failDamages,\r\n          type,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        addDamage(\r\n          succDamages,\r\n          type,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n\r\n        break;\r\n\r\n      case dCond.ALWAYS:\r\n        addDamage(\r\n          crfaDamages,\r\n          type,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        addDamage(\r\n          failDamages,\r\n          type,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        addDamage(\r\n          succDamages,\r\n          type,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        addDamage(\r\n          critDamages,\r\n          type,\r\n          material,\r\n          persistent,\r\n          staticDamage,\r\n          damageDist,\r\n          1\r\n        );\r\n        break;\r\n\r\n      default:\r\n        console.log(\r\n          `Damage condition ${damage.condition} not implemented yet.`\r\n        );\r\n    }\r\n  });\r\n\r\n  // for each damage group\r\n  // console.log(damageTrees);\r\n  for (let damageTree of damageTrees) {\r\n    for (let damageQuality of [\"normal\", \"persistent\"]) {\r\n      let totalStaticDamage = 0;\r\n      let totalDamageDist = [1];\r\n      for (let type in damageTree[damageQuality]) {\r\n        let { material, staticDamage, damageDist } =\r\n          damageTree[damageQuality][type];\r\n        // console.log(type);\r\n        // make min damage 1 before resistances\r\n        [staticDamage, damageDist] = applyMin(staticDamage, damageDist, 1);\r\n\r\n        // find max weakness and resistance, weaknesses are negative numbers\r\n        let maxW = 0;\r\n        let maxR = 0;\r\n        weaknesses.forEach((weakness) => {\r\n          if (weakness.type === type || weakness.type === material) {\r\n            if (weakness.value < 0) {\r\n              maxW = Math.min(maxW, weakness.value);\r\n            } else if (weakness.value > 0) {\r\n              maxR = Math.max(maxR, weakness.value);\r\n            }\r\n          }\r\n        });\r\n        staticDamage = staticDamage - (maxR + maxW);\r\n\r\n        // make min damage 0 after resistances\r\n        [staticDamage, damageDist] = applyMin(staticDamage, damageDist, 0);\r\n\r\n        // console.log([staticDamage, damageDist]);\r\n\r\n        // damageTree[damageQuality][type].staticDamage = staticDamage;\r\n        // damageTree[damageQuality][type].damageDist = damageDist;\r\n        totalStaticDamage += staticDamage;\r\n        totalDamageDist = convolve(totalDamageDist, damageDist);\r\n      }\r\n      damageTree[damageQuality].staticDamage = totalStaticDamage;\r\n      damageTree[damageQuality].damageDist = totalDamageDist;\r\n    }\r\n  }\r\n\r\n  return [damageTrees, chances];\r\n}\r\n\r\nexport {\r\n  //   totalBonusDescription,\r\n  //   attackBonusDescription,\r\n  //   totalDamageDescription,\r\n  calculateExpectedDamage,\r\n};\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\nimport { damageTypes, dCond, materials } from \"../types\";\r\n\r\nexport const damageAdapter = createEntityAdapter();\r\n\r\n// damageAdded({\r\n//   id: 0,\r\n//   condition: dCond.STRIKE,\r\n//   diceNum: 1,\r\n//   diceSize: 8,\r\n//   staticDamage: 6,\r\n//   type: damageTypes.PIERCE,\r\n//   material: materials.COLD_IRON,\r\n// });\r\n\r\nlet damageId = 1;\r\nexport const damagesSlice = createSlice({\r\n  name: \"damages\",\r\n  initialState: damageAdapter.getInitialState(),\r\n  reducers: {\r\n    damageAdded: damageAdapter.addOne,\r\n    damageUpdated: damageAdapter.updateOne,\r\n    damageCreated: {\r\n      reducer: (state, action) => {\r\n        const {\r\n          id,\r\n          condition,\r\n          diceNum,\r\n          diceSize,\r\n          staticDamage,\r\n          type,\r\n          material,\r\n          persistent,\r\n        } = action.payload;\r\n        damageAdapter.addOne(state, {\r\n          id,\r\n          condition,\r\n          diceNum,\r\n          diceSize,\r\n          staticDamage,\r\n          type,\r\n          material,\r\n          persistent,\r\n        });\r\n      },\r\n      prepare: ({ parentId }) => {\r\n        const id = ++damageId;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n            condition: dCond.STRIKE,\r\n            diceNum: 0,\r\n            diceSize: 8,\r\n            staticDamage: 0,\r\n            type: damageTypes.B,\r\n            material: materials.NONE,\r\n            persistent: false,\r\n          },\r\n        };\r\n      },\r\n    },\r\n    damageRemoved: (state, action) => {\r\n      console.log(action);\r\n      damageAdapter.removeOne(state, action.payload.id);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { damageRemoved, damageCreated, damageAdded, damageUpdated } =\r\n  damagesSlice.actions;\r\n\r\nexport default damagesSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selectdamageById,\r\n  selectIds: selectdamageIds,\r\n  selectEntities: selectdamageEntities,\r\n  selectAll: selectAlldamages,\r\n  selectTotal: selectTotaldamages,\r\n} = damageAdapter.getSelectors((state) => state.damages);\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\nimport { activityTypes, conditions, defenses, MAPs } from \"../types\";\r\nimport { damageCreated, damageRemoved } from \"./damageSlice\";\r\n\r\nexport const activityPathAdapter = createEntityAdapter();\r\n\r\nlet activityPathId = 1;\r\nexport const activityPathsSlice = createSlice({\r\n  name: \"activityPaths\",\r\n  initialState: activityPathAdapter.getInitialState(),\r\n  reducers: {\r\n    activityPathAdded: activityPathAdapter.addOne,\r\n    activityPathUpdated: activityPathAdapter.updateOne,\r\n    activityPathCreated: {\r\n      reducer: (state, action) => {\r\n        const {\r\n          id,\r\n          parentId,\r\n          condition,\r\n          type,\r\n          targetType,\r\n          targetInfoId,\r\n          value,\r\n          MAP,\r\n          damages,\r\n          effects,\r\n          apIds,\r\n        } = action.payload;\r\n        activityPathAdapter.addOne(state, {\r\n          id,\r\n          condition,\r\n          type,\r\n          targetType,\r\n          targetInfoId,\r\n          value,\r\n          MAP,\r\n          damages,\r\n          effects,\r\n          apIds,\r\n        });\r\n        // console.log(parentId);\r\n        if (parentId !== undefined) state.entities[parentId].apIds.push(id);\r\n      },\r\n      prepare: ({ parentId, routineId }) => {\r\n        const id = ++activityPathId;\r\n        return {\r\n          payload: {\r\n            id,\r\n            parentId,\r\n            routineId,\r\n            condition: conditions.ALWAYS,\r\n            type: activityTypes.STRIKE,\r\n            targetType: defenses.AC,\r\n            targetInfoId: 0,\r\n            value: 9,\r\n            MAP: MAPs.A1,\r\n            damages: [],\r\n            effects: [],\r\n            apIds: [],\r\n          },\r\n        };\r\n      },\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(damageCreated, (state, action) => {\r\n        const { parentId: id, id: damageId } = action.payload;\r\n        state.entities[id].damages.push(damageId);\r\n      })\r\n      .addCase(damageRemoved, (state, action) => {\r\n        const { parentId: id, id: damageId } = action.payload;\r\n        state.entities[id].damages = state.entities[id].damages.filter(\r\n          (did) => did !== damageId\r\n        );\r\n      });\r\n  },\r\n});\r\n\r\nexport const { activityPathCreated, activityPathAdded, activityPathUpdated } =\r\n  activityPathsSlice.actions;\r\n\r\nexport default activityPathsSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selectactivityPathById,\r\n  selectIds: selectactivityPathIds,\r\n  selectEntities: selectactivityPathEntities,\r\n  selectAll: selectAllactivityPaths,\r\n  selectTotal: selectTotalactivityPaths,\r\n} = activityPathAdapter.getSelectors((state) => state.activityPaths);\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\nimport { activityPathCreated } from \"./activityPathSlice\";\r\n\r\nexport const routinesAdapter = createEntityAdapter();\r\n\r\nlet routineId = 1;\r\nexport const routinesSlice = createSlice({\r\n  name: \"routines\",\r\n  initialState: routinesAdapter.getInitialState({ selectedRoutine: 0 }),\r\n  reducers: {\r\n    setRoutine: (state, action) => {\r\n      state.selectedRoutine = action.payload || 0;\r\n    },\r\n    routineAdded: routinesAdapter.addOne,\r\n    routineUpdated: routinesAdapter.updateOne,\r\n    routineCreated: {\r\n      reducer: (state, action) => {\r\n        const { id, name, apIds } = action.payload;\r\n        state.selectedRoutine = id;\r\n        routinesAdapter.addOne(state, { id, name, apIds });\r\n      },\r\n      prepare: () => {\r\n        const id = ++routineId;\r\n        return { payload: { id, name: \"New Routine\", apIds: [] } };\r\n      },\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(activityPathCreated, (state, action) => {\r\n      const { routineId: id, id: apId } = action.payload;\r\n      if (id !== undefined) state.entities[id].apIds.push(apId);\r\n    });\r\n  },\r\n});\r\n\r\nexport const {\r\n  routineCreated,\r\n  setRoutine,\r\n  updateSelected,\r\n  routineAdded,\r\n  routineUpdated,\r\n} = routinesSlice.actions;\r\n\r\nexport default routinesSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selectRoutineById,\r\n  selectIds: selectRoutineIds,\r\n  selectEntities: selectRoutineEntities,\r\n  selectAll: selectAllRoutines,\r\n  selectTotal: selectTotalRoutines,\r\n} = routinesAdapter.getSelectors((state) => state.routines);\r\n\r\nexport const selectSelectedRoutine = (state) => state.routines.selectedRoutine;\r\n","import React, { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  calculateExpectedDamage,\r\n  convolve,\r\n  consolidateDists,\r\n} from \"./Calculation\";\r\nimport { selectactivityPathEntities } from \"./Routine/activityPathSlice\";\r\nimport { selectdamageEntities } from \"./Routine/damageSlice\";\r\nimport { selectRoutineEntities } from \"./Routine/routineSlice\";\r\nimport { selecttargetEntities } from \"./Target/targetSlice\";\r\nimport { selectweaknessEntities } from \"./Target/weaknessSlice\";\r\nimport { conditions } from \"./types\";\r\nimport { Bar, Line, Scatter } from \"react-chartjs-2\";\r\n\r\nconst Display = () => {\r\n  const [addPersistent, setAddPersistent] = useState(false);\r\n  const [perMulti, setPerMulti] = useState(2);\r\n\r\n  const routines = useSelector(selectRoutineEntities);\r\n  const activityPaths = useSelector(selectactivityPathEntities);\r\n  const targets = useSelector(selecttargetEntities);\r\n  const damages = useSelector(selectdamageEntities);\r\n  const weaknesses = useSelector(selectweaknessEntities);\r\n\r\n  // const selectedRoutine = routines[useSelector(selectSelectedRoutine)];\r\n\r\n  function evaluateActivityPath(activityPath) {\r\n    let currentTarget = targets[0];\r\n    let currentDamages = activityPath.damages.map(\r\n      (damageId) => damages[damageId]\r\n    );\r\n    let currentWeaknesses = currentTarget.weaknesses.map(\r\n      (weaknessId) => weaknesses[weaknessId]\r\n    );\r\n\r\n    // damage tress = [critDamages, succDamages, failDamages, crfaDamages]\r\n    // critDamages = {normal, persistent}\r\n    // normal = {fire..., staticDamage, damageDist}\r\n    let [damageTrees, chances] = calculateExpectedDamage(\r\n      activityPath,\r\n      currentDamages,\r\n      currentTarget,\r\n      currentWeaknesses\r\n    );\r\n    // console.log(`chances are ${chances}`);\r\n\r\n    // go through each activity path, depending on its condition add its damage distributions to this activities appropriately\r\n    activityPath.apIds.forEach((apId) => {\r\n      let ap = activityPaths[apId];\r\n      let [pathDist, pathPDist] = evaluateActivityPath(ap);\r\n\r\n      let indicies = [];\r\n      // console.log(`cond is: ${ap.condition}`);\r\n      switch (ap.condition) {\r\n        case conditions.ALWAYS:\r\n          indicies = [0, 1, 2, 3];\r\n          break;\r\n\r\n        case conditions.AT_LEAST_FAIL:\r\n          indicies = [0, 1, 2];\r\n          break;\r\n\r\n        case conditions.AT_LEAST_SUCC:\r\n          indicies = [0, 1];\r\n          break;\r\n\r\n        case conditions.CRIF:\r\n          indicies = [3];\r\n          break;\r\n\r\n        case conditions.CRIT:\r\n          indicies = [0];\r\n          break;\r\n\r\n        case conditions.FAIL:\r\n          indicies = [2];\r\n          break;\r\n\r\n        case conditions.FAIL_WORSE:\r\n          indicies = [2, 3];\r\n          break;\r\n\r\n        case conditions.SUCC:\r\n          indicies = [1];\r\n          break;\r\n\r\n        case conditions.SUCC_WORSE:\r\n          indicies = [1, 2, 3];\r\n          break;\r\n\r\n        default:\r\n      }\r\n      // console.log(`indies are: ${indicies}`);\r\n      for (let index of indicies) {\r\n        // console.log(\r\n        //   `adding damage to index ${index} w/ chance ${chances[index]}`\r\n        // );\r\n        // damageTrees[index].normal.staticDamage += pathSD;\r\n        damageTrees[index].normal.damageDist = convolve(\r\n          damageTrees[index].normal.damageDist,\r\n          pathDist\r\n        );\r\n        // damageTrees[index].persistent.staticDamage += pathPSD;\r\n        damageTrees[index].persistent.damageDist = convolve(\r\n          damageTrees[index].persistent.damageDist,\r\n          pathPDist\r\n        );\r\n      }\r\n      // console.log(pathChance);\r\n    });\r\n\r\n    let damageDist = consolidateDists(\r\n      [damageTrees[0].normal, chances[0]],\r\n      [damageTrees[1].normal, chances[1]],\r\n      [damageTrees[2].normal, chances[2]],\r\n      [damageTrees[3].normal, chances[3]]\r\n    );\r\n    let PdamageDist = consolidateDists(\r\n      [damageTrees[0].persistent, chances[0]],\r\n      [damageTrees[1].persistent, chances[1]],\r\n      [damageTrees[2].persistent, chances[2]],\r\n      [damageTrees[3].persistent, chances[3]]\r\n    );\r\n\r\n    return [damageDist, PdamageDist];\r\n  }\r\n\r\n  let maxDamage = 0;\r\n  let maxPDamage = 0;\r\n  const datasets = [];\r\n  const expectedDamages = [];\r\n  const expectedPersistentDamages = [];\r\n  // TODO: use distribution\r\n  for (let id in routines) {\r\n    let routine = routines[id];\r\n    let expD = 0;\r\n    let expP = 0;\r\n    let routineDDist = [1];\r\n    let routinePDDist = [1];\r\n    for (let i = 0; i < routine.apIds.length; i++) {\r\n      let activityPath = activityPaths[routine.apIds[i]];\r\n      let [damageDist, PdamageDist] = evaluateActivityPath(activityPath);\r\n      routineDDist = convolve(routineDDist, damageDist);\r\n      routinePDDist = convolve(routinePDDist, PdamageDist);\r\n    }\r\n    maxDamage = Math.max(maxDamage, routineDDist.length - 1);\r\n    maxPDamage = Math.max(maxPDamage, routinePDDist.length - 1);\r\n    const dataArray = [];\r\n    for (let i = 0; i < routineDDist.length; i++) {\r\n      dataArray.push({ x: i, y: routineDDist[i] });\r\n      expD += routineDDist[i] * i;\r\n    }\r\n    datasets.push({\r\n      fill: \"origin\",\r\n      label: routine.name,\r\n      data: dataArray,\r\n      xAxisID: \"damage\",\r\n      yAxisID: \"chance\",\r\n      spanGaps: false,\r\n    });\r\n    // }\r\n    // maxDamage += damageDist.length-1;\r\n\r\n    // routine.apIds.forEach((apId) => {\r\n    //   let activityPath = activityPaths[apId];\r\n    //   let [damageDist, PdamageDist] = evaluateActivityPath(activityPath);\r\n    //   maxDamage = Math.max(maxDamage, damageDist.length);\r\n\r\n    //   const dataArray = [];\r\n    //   const labels = [];\r\n    //   for (let i = 0; i < damageDist.length; i++) {\r\n\r\n    //     labels.push(i);\r\n    //     dataArray.push({ x: i, y: damageDist[i] });\r\n    //   }\r\n    //   const data = {\r\n    //     labels,\r\n    //     datasets: [\r\n    //       {\r\n    //         fill: \"origin\",\r\n    //         label: \"Chance\",\r\n    //         data: dataArray,\r\n    //         xAxisID: \"damage\",\r\n    //         yAxisID: \"chance\",\r\n    //         spanGaps: false,\r\n    //       },\r\n    //     ],\r\n    //   };\r\n\r\n    //   // expectedDamages.push(\r\n    //   //   <Bar key={routine.id} data={data} />\r\n    //   //   // <p key={routine.id}>\r\n    //   //   //   {routine.name}\r\n    //   //   //   {\": \"}\r\n    //   //   //   {addPersistent ? expD + expP * perMulti : expD}\r\n    //   //   // </p>\r\n    //   // );\r\n    // });\r\n\r\n    expectedDamages.push(\r\n      <div key={routine.id}>\r\n        {routine.name}\r\n        {\": \"}\r\n        {expD}\r\n      </div>\r\n    );\r\n    // expectedDamages.push(\r\n    //   <Bar key={routine.id} data={data} />\r\n    //   // <p key={routine.id}>\r\n    //   //   {routine.name}\r\n    //   //   {\": \"}\r\n    //   //   {addPersistent ? expD + expP * perMulti : expD}\r\n    //   // </p>\r\n    // );\r\n    expectedPersistentDamages.push(\r\n      <div key={routine.id}>\r\n        {routine.name}\r\n        {\": \"}\r\n        {expP}\r\n      </div>\r\n    );\r\n  }\r\n  const labels = [];\r\n  for (let i = 0; i <= maxDamage; i++) {\r\n    labels.push(i);\r\n  }\r\n  const data = {\r\n    labels,\r\n    datasets,\r\n  };\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      Add persistent damage:\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={addPersistent}\r\n        onChange={(e) => setAddPersistent(e.target.checked)}\r\n      />\r\n      , persistent damage multiplier:\r\n      <input\r\n        type=\"number\"\r\n        value={perMulti ? perMulti : 0}\r\n        onChange={(e) => setPerMulti(e.target.valueAsNumber)}\r\n      />\r\n      <div>\r\n        Expected Damage:\r\n        {expectedDamages}\r\n      </div>\r\n      <Bar data={data} />\r\n      {addPersistent ? (\r\n        \"\"\r\n      ) : (\r\n        <div>\r\n          Expected Persistent Damage:\r\n          {expectedPersistentDamages}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Display;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  activityTypes,\r\n  conditions,\r\n  damageTypes,\r\n  dCond,\r\n  defenses,\r\n  diceNums,\r\n  diceSizes,\r\n  MAPs,\r\n  materials,\r\n} from \"../types\";\r\nimport {\r\n  activityPathCreated,\r\n  activityPathUpdated,\r\n  selectactivityPathById,\r\n} from \"./activityPathSlice\";\r\n\r\nimport {\r\n  damageCreated,\r\n  damageRemoved,\r\n  damageUpdated,\r\n  selectdamageById,\r\n} from \"./damageSlice\";\r\nimport {\r\n  routineUpdated,\r\n  selectRoutineById,\r\n  selectSelectedRoutine,\r\n} from \"./routineSlice\";\r\n\r\nfunction SelectedRoutine() {\r\n  const selectedRoutine = useSelector(selectSelectedRoutine);\r\n  const apIds = useSelector((state) =>\r\n    selectRoutineById(state, selectedRoutine)\r\n  ).apIds;\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className=\"selectedRoutine\">\r\n      <NameInput id={selectedRoutine} />\r\n      {apIds.map((apId) => (\r\n        <ActivityPath id={apId} key={apId} />\r\n      ))}\r\n      <button\r\n        className=\"add\"\r\n        onClick={() =>\r\n          dispatch(activityPathCreated({ routineId: selectedRoutine }))\r\n        }\r\n      >\r\n        +\r\n      </button>\r\n      {/* <EffectInput /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst NameInput = ({ id }) => {\r\n  const dispatch = useDispatch();\r\n  const name = useSelector((state) => selectRoutineById(state, id)).name;\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      <label htmlFor=\"routineName\">Routine Name:</label>\r\n      <input\r\n        id=\"routineName\"\r\n        type=\"text\"\r\n        placeholder=\"Enter routine name\"\r\n        value={name}\r\n        onChange={(e) =>\r\n          dispatch(routineUpdated({ id, changes: { name: e.target.value } }))\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ActivityPath = ({ id }) => {\r\n  const { condition, type, targetType, value, MAP, damages, effects, apIds } =\r\n    useSelector((state) => selectactivityPathById(state, id));\r\n  const dispatch = useDispatch();\r\n\r\n  const conditionOptions = [];\r\n  for (let c in conditions) {\r\n    conditionOptions.push(<option key={c}>{conditions[c]}</option>);\r\n  }\r\n  const activityTypeOptions = [];\r\n  for (let at in activityTypes) {\r\n    activityTypeOptions.push(<option key={at}>{activityTypes[at]}</option>);\r\n  }\r\n  const MAPOptions = [];\r\n  for (let m in MAPs) {\r\n    MAPOptions.push(<option key={m}>{MAPs[m]}</option>);\r\n  }\r\n  const defenseOptions = [];\r\n  for (let d in defenses) {\r\n    defenseOptions.push(<option key={d}>{defenses[d]}</option>);\r\n  }\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      {condition ? (\r\n        <div>\r\n          Condition:\r\n          <select\r\n            value={condition}\r\n            onChange={(e) =>\r\n              dispatch(\r\n                activityPathUpdated({\r\n                  id,\r\n                  changes: { condition: e.target.value },\r\n                })\r\n              )\r\n            }\r\n          >\r\n            {conditionOptions}\r\n          </select>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n\r\n      <div className=\"box\">\r\n        <select\r\n          value={type}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              activityPathUpdated({ id, changes: { type: e.target.value } })\r\n            )\r\n          }\r\n        >\r\n          {activityTypeOptions}\r\n        </select>\r\n        {type === activityTypes.STRIKE ? \" +\" : \" DC: \"}\r\n        <input\r\n          type=\"number\"\r\n          value={value ? value : 0}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              activityPathUpdated({\r\n                id,\r\n                changes: { value: parseInt(e.target.value) },\r\n              })\r\n            )\r\n          }\r\n        />\r\n        {\" MAP: \"}\r\n        <select\r\n          value={MAP}\r\n          onChange={(e) =>\r\n            dispatch(\r\n              activityPathUpdated({ id, changes: { MAP: e.target.value } })\r\n            )\r\n          }\r\n        >\r\n          {MAPOptions}\r\n        </select>\r\n\r\n        {\" VS: \"}\r\n        <select\r\n          value={targetType}\r\n          onChange={(e) => {\r\n            dispatch(\r\n              activityPathUpdated({\r\n                id,\r\n                changes: { targetType: e.target.value },\r\n              })\r\n            );\r\n          }}\r\n        >\r\n          {defenseOptions}\r\n        </select>\r\n\r\n        <div className=\"box\">\r\n          {\"Damage: \"}\r\n          {damages.map((damageId) => (\r\n            <Damage parentId={id} id={damageId} key={damageId} />\r\n          ))}\r\n          <button\r\n            className=\"add\"\r\n            onClick={() => dispatch(damageCreated({ parentId: id }))}\r\n          >\r\n            +\r\n          </button>\r\n        </div>\r\n        <div className=\"box\">Effects: {effects}</div>\r\n      </div>\r\n\r\n      <div className=\"box\">\r\n        {apIds.map((apId) => (\r\n          <ActivityPath id={apId} key={apId} />\r\n        ))}\r\n        <button\r\n          className=\"add\"\r\n          onClick={() => dispatch(activityPathCreated({ parentId: id }))}\r\n        >\r\n          +\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Damage = ({ parentId, id }) => {\r\n  const {\r\n    condition,\r\n    diceNum,\r\n    diceSize,\r\n    staticDamage,\r\n    type,\r\n    material,\r\n    persistent,\r\n  } = useSelector((state) => selectdamageById(state, id));\r\n  const dispatch = useDispatch();\r\n\r\n  const conditionOptions = [];\r\n  for (let dc in dCond) {\r\n    conditionOptions.push(<option key={dc}>{dCond[dc]}</option>);\r\n  }\r\n  const diceNumOptions = [];\r\n  for (let dn in diceNums) {\r\n    diceNumOptions.push(<option key={dn}>{dn}</option>);\r\n  }\r\n  const diceSizeOptions = [];\r\n  for (let ds in diceSizes) {\r\n    diceSizeOptions.push(<option key={ds}>{ds}</option>);\r\n  }\r\n  const damageTypeOptions = [];\r\n  for (let dt in damageTypes) {\r\n    damageTypeOptions.push(<option key={dt}>{damageTypes[dt]}</option>);\r\n  }\r\n  const materialOptions = [];\r\n  for (let m in materials) {\r\n    materialOptions.push(<option key={m}>{materials[m]}</option>);\r\n  }\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      <button\r\n        className=\"delete\"\r\n        onClick={(e) => {\r\n          dispatch(damageRemoved({ id, parentId }));\r\n        }}\r\n      >\r\n        -\r\n      </button>\r\n      <select\r\n        value={condition}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            damageUpdated({ id, changes: { condition: e.target.value } })\r\n          )\r\n        }\r\n      >\r\n        {conditionOptions}\r\n      </select>\r\n      <select\r\n        value={diceNum}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            damageUpdated({\r\n              id,\r\n              changes: { diceNum: parseInt(e.target.value) },\r\n            })\r\n          )\r\n        }\r\n      >\r\n        {diceNumOptions}\r\n      </select>\r\n      d\r\n      <select\r\n        value={diceSize}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            damageUpdated({\r\n              id,\r\n              changes: { diceSize: parseInt(e.target.value) },\r\n            })\r\n          )\r\n        }\r\n      >\r\n        {diceSizeOptions}\r\n      </select>\r\n      {\" + \"}\r\n      <input\r\n        type=\"number\"\r\n        value={staticDamage}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            damageUpdated({\r\n              id,\r\n              changes: { staticDamage: parseInt(e.target.value) },\r\n            })\r\n          )\r\n        }\r\n      />\r\n      <select\r\n        value={type}\r\n        onChange={(e) => {\r\n          dispatch(damageUpdated({ id, changes: { type: e.target.value } }));\r\n        }}\r\n      >\r\n        {damageTypeOptions}\r\n      </select>\r\n      <select\r\n        value={material}\r\n        onChange={(e) => {\r\n          dispatch(\r\n            damageUpdated({ id, changes: { material: e.target.value } })\r\n          );\r\n        }}\r\n      >\r\n        {materialOptions}\r\n      </select>\r\n      {\" Persistent: \"}\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={persistent}\r\n        onChange={(e) =>\r\n          dispatch(\r\n            damageUpdated({\r\n              id,\r\n              changes: { persistent: e.target.checked },\r\n            })\r\n          )\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectedRoutine;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  routineCreated,\r\n  selectAllRoutines,\r\n  selectSelectedRoutine,\r\n  setRoutine,\r\n} from \"./Routine/routineSlice\";\r\n\r\nconst Routines = () => {\r\n  const routines = useSelector(selectAllRoutines);\r\n  const selectedRoutine = useSelector(selectSelectedRoutine);\r\n  const dispatch = useDispatch();\r\n\r\n  const routineOptions = [];\r\n  routines.forEach((routine) => {\r\n    routineOptions.push(\r\n      <option value={routine.id} key={routine.id}>\r\n        {routine.name}\r\n      </option>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      Selected Routine:\r\n      <select\r\n        value={selectedRoutine}\r\n        onChange={(e) => dispatch(setRoutine(e.target.value))}\r\n      >\r\n        {routineOptions}\r\n      </select>\r\n      <button className=\"add\" onClick={() => dispatch(routineCreated())}>\r\n        +\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Routines;\r\n","import React from \"react\";\r\n// import { useSelector } from \"react-redux\";\r\n\r\nconst ImportExport = () => {\r\n  return <div className=\"box\">Import and Export Here</div>;\r\n};\r\n\r\nexport default ImportExport;\r\n","import React from \"react\";\r\n// import { useSelector } from \"react-redux\";\r\n// import update from \"immutability-helper\";\r\n\r\n// //import { useSelector, useDispatch } from 'react-redux';\r\n// import { selectCurrentEffect } from \"./Effect/effectSlice\";\r\n\r\n// import {\r\n//   CheckboxInput,\r\n//   CollapsableInput,\r\n//   ByLevelInput,\r\n// } from \"./Effect/Inputs/CommonInputs.js\";\r\n\r\n// import MAP from \"./Effect/Model/MAP.js\";\r\n// import Proficiency from \"./Effect/Model/Proficiency.js\";\r\n// import AbilityScore from \"./Effect/Model/AbilityScore.js\";\r\n// import Modifier from \"./Effect/Model/Modifier.js\";\r\n// import AdditionalEffectArray from \"./Effect/Model/AdditionalEffectArray.js\";\r\n\r\n// import {\r\n//   totalBonusDescription,\r\n//   attackBonusDescription,\r\n//   totalDamageDescription,\r\n//   calculateExpectedDamage,\r\n// } from \"./Calculation.js\";\r\n\r\nimport TargetInput from \"./Target/TargetInput\";\r\nimport Display from \"./Display\";\r\n// import { selectTarget, selectLevel } from \"./Target/targetSlice\";\r\n\r\nimport SelectedRoutine from \"./Routine/SelectedRoutine\";\r\nimport Routines from \"./Routines\";\r\nimport Export from \"./Export\";\r\n\r\nimport \"./PF2App.css\";\r\n\r\n// function DisplayOutput(props) {\r\n//   // props: effect, target\r\n//   const target = useSelector(selectTarget);\r\n//   const effect = useSelector(selectCurrentEffect);\r\n//   return (\r\n//     <div className=\"Display\">\r\n//       <CollapsableInput\r\n//         description={\r\n//           \"Expected Damage: \" + calculateExpectedDamage(effect, target)\r\n//         }\r\n//         listInput=\"\"\r\n//       />\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nfunction PF2App(props) {\r\n  return (\r\n    <div className=\"PF2App\">\r\n      <TargetInput id={0} />\r\n      <Display />\r\n      <SelectedRoutine />\r\n      <Routines />\r\n      <Export />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PF2App;\r\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const effectAdapter = createEntityAdapter();\r\n\r\nexport const effectsSlice = createSlice({\r\n  name: \"effects\",\r\n  initialState: effectAdapter.getInitialState(),\r\n  reducers: {\r\n    effectAdded: effectAdapter.addOne,\r\n    effectUpdated: effectAdapter.updateOne,\r\n  },\r\n});\r\n\r\nexport const { effectAdded, effectUpdated } = effectsSlice.actions;\r\n\r\nexport default effectsSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selecteffectById,\r\n  selectIds: selecteffectIds,\r\n  selectEntities: selecteffectEntities,\r\n  selectAll: selectAlleffects,\r\n  selectTotal: selectTotaleffects,\r\n} = effectAdapter.getSelectors((state) => state.effects);\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport routineReducer, { routineAdded } from \"./Routine/routineSlice\";\r\nimport activityPathReducer, {\r\n  activityPathAdded,\r\n} from \"./Routine/activityPathSlice\";\r\nimport damageReducer, { damageAdded } from \"./Routine/damageSlice\";\r\nimport effectReducer from \"./Routine/effectSlice\";\r\nimport targetReducer, { targetAdded } from \"./Target/targetSlice\";\r\nimport weaknessReducer, { weaknessAdded } from \"./Target/weaknessSlice\";\r\nimport {\r\n  activityTypes,\r\n  conditions,\r\n  damageTypes,\r\n  dCond,\r\n  defenses,\r\n  MAPs,\r\n  materials,\r\n} from \"./types\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    routines: routineReducer,\r\n    activityPaths: activityPathReducer,\r\n    damages: damageReducer,\r\n    effects: effectReducer,\r\n    weaknesses: weaknessReducer,\r\n    targets: targetReducer,\r\n  },\r\n});\r\n\r\nstore.dispatch(routineAdded({ id: 0, name: \"tesdt\", apIds: [0] }));\r\n\r\nstore.dispatch(\r\n  activityPathAdded({\r\n    id: 0,\r\n    condition: conditions.ALWAYS,\r\n    type: activityTypes.STRIKE,\r\n    targetType: defenses.AC,\r\n    targetInfoId: 0,\r\n    value: 9,\r\n    MAP: MAPs.A1,\r\n    damages: [0],\r\n    effects: [],\r\n    apIds: [],\r\n  })\r\n);\r\n\r\nstore.dispatch(\r\n  targetAdded({\r\n    id: 0,\r\n    name: \"Custom Target\",\r\n    overrideDefault: true,\r\n    addMods: false,\r\n    level: 1,\r\n    [defenses.AC]: 15,\r\n    [defenses.FORT]: 6,\r\n    [defenses.REF]: 5,\r\n    [defenses.WILL]: 4,\r\n    [defenses.PER]: 5,\r\n    flatfooted: false,\r\n    weaknesses: [0],\r\n  })\r\n);\r\nstore.dispatch(weaknessAdded({ id: 0, type: damageTypes.FIRE, value: 10 }));\r\nstore.dispatch(\r\n  damageAdded({\r\n    id: 0,\r\n    condition: dCond.STRIKE,\r\n    diceNum: 1,\r\n    diceSize: 8,\r\n    staticDamage: 4,\r\n    type: damageTypes.B,\r\n    material: materials.COLD_IRON,\r\n    persistent: false,\r\n  })\r\n);\r\n// store.dispatch(\r\n//   damageAdded({\r\n//     id: 1,\r\n//     condition: dCond.CRIT,\r\n//     diceNum: 0,\r\n//     diceSize: 8,\r\n//     staticDamage: 10,\r\n//     type: damageTypes.FIRE,\r\n//     material: materials.NONE,\r\n//     persistent: false,\r\n//   })\r\n// );\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport PF2App from './PF2App';\r\nimport store from './store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <PF2App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}