{"version":3,"sources":["Inputs/CommonInputs.js","Model/Flag.js","Model/MAP.js","Model/Proficiency.js","Model/AbilityScore.js","Model/Modifier.js","Model/AdditionalEffectArray.js","Calculation.js","Inputs/MAPInput.js","Inputs/OverrideInput.js","Inputs/ProficiencyInput.js","Inputs/AbilityScoreInput.js","Inputs/ItemBonusInput.js","Inputs/ModifierInput.js","Inputs/NumberDiceInput.js","Inputs/DieSizeInput.js","Inputs/WeaponSpecInput.js","Inputs/RuneInput.js","PF2App.js","serviceWorker.js","index.js"],"names":["CheckboxInput","props","className","type","checked","onChange","label","CollapsableInput","state","collapseView","handleClick","bind","event","this","setState","onClick","description","listInput","after","React","Component","ByLevelInput","levelList","i","push","key","value","modifier","get","ByLevelInput2","entries","getByLevelEntries","length","SelectLevel","extra","LevelSelection","name","Flag","target","MAP","prevAttacks","initial","changeLevel","changed","Array","fill","level","parseInt","Math","max","Proficiency","untrained","trained","expert","master","legendary","proficiencies","currentProf","values","profArray","maxProf","usedProficiencies","proficiencyValue","every","val","index","profDesc","toName","getInitial","getMax","getLevelAcquired","newProficiencyWithIntial","newProficiencyWithChangedLevel","profValue","initialProf","oldProficiency","newProfs","diff","oldProf","oldLevel","changedProf","newLevel","oldProfs","slice","AbilityScore","boosts","apexLevel","scoreArray","scoreWithApex","currentScore","maxScore","scoreDesc","getMod","newInitial","newBoosts","newApexLevel","console","error","Modifier","generateEntries","currentValue","splice","newModifierFromEntries","currentIndex","mod","desc","newValues","fromChangedEntryLevel","fromChangedEntryValue","AdditionalEffectArray","effectEntries","totalBonusDescription","effect","getTotalBonus","attackBonusDescription","getAttackBonus","totalDamageDescription","dice","weaponDiceNum","dieSize","staticDamage","damageAbilityScore","weaponSpec","proficiency","getProf","total","useOverride","isTrue","override","attackAbilityScore","itemBonus","useMiscModifiers","circumstanceBonus","statusBonus","circumstancePenalty","statusPenalty","itemPenalty","untypedPenalty","calculateExpectedDamage","selectedLevel","attackBonus","average","AC","critPercent","bonus","DC","keen","dif","getCritSuccessPercent","getSuccessPercent","MAPInput","levelChange","getDescription","getPrevAttacks","getChanged","OverrideInput","onEffectChange","ProficiencyPresets","isFighter","isMartial","isCaster","isAlchemist","ProficiencyInputList","prof","profList","getProficiencies","map","WeaponProficiencyInput","AbilityScoreInputList","score","scoreList","getBoosts","getApexLevel","AbilityScorePresets","is18a","is16a","is16pp","is14p","is10","AttackAbilityScoreInput","DamageAbilityScoreInput","ItemBonusPresets","isNone","isABPWeaponBonus","isABPSkill1","isABPSkill2","ItemBonusInput","BonusPresets","is","PenaltyPresets","totalModDescription","ModifierInput","WeaponDiceNumPresets","diceNum","isABPWeaponDiceNum","WeaponDiceNumInput","DieSizePresets","isd4","isd6","isd8","isd10","isd12","DieSizeInput","getDieSizeDescription","WeaponSpecPresets","isWSMartial","isWSCaster","WeaponSpecInput","RuneTable","runes","rows","RuneInput","DEFAULT_PROF","DEFAULT_ABSCORE","DEFAULT_ITEMB","DEFAULT_WS","DEFAULT_DICENUMBER","DEFAULT_DIESIZE","StrikeInput","EffectInput","DisplayOutput","TargetInput","min","step","onTargetChange","PF2App","routines","selectedRoutine","selectedEffect","handleEffectChange","handleTargetChange","propertyName","newPropertyValue","newTarget","update","$set","createUpdated","newRoutines","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.88104384.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction CheckboxInput(props) {\r\n    // props: checked, onChange, label\r\n    return (\r\n        <label className=\"CheckboxInput\">\r\n            <input\r\n                type=\"checkbox\"\r\n                checked={props.checked}\r\n                onChange={props.onChange}\r\n            />\r\n            {props.label}\r\n        </label>\r\n    );\r\n}\r\n\r\n\r\nclass CollapsableInput extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            collapseView: true,\r\n        };\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick(event) {\r\n        this.setState({ collapseView: !this.state.collapseView });\r\n    }\r\n\r\n    render() {\r\n        // if (this.state.collapseView) {\r\n        return (\r\n            <div className=\"CollapsableInput\">\r\n                <div\r\n                    className=\"Description CollapsableInputDescription\"\r\n                    onClick={this.handleClick}\r\n                >\r\n                    {this.props.description}\r\n                </div>\r\n                {this.state.collapseView ? \"\" : this.props.listInput}\r\n                {this.props.after}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction ByLevelInput(props) {\r\n    // level: value\r\n    let levelList = [];\r\n    for (let i = 1; i <= 20; i++) {\r\n        levelList.push(\r\n            <div key={i}>\r\n                <label> Level {i}: {}\r\n                    <input\r\n                        type=\"number\"\r\n                        value={props.modifier.get(i)}\r\n                        onChange={props.onChange.bind(null, i)}\r\n                    />\r\n                </label>\r\n            </div>\r\n        );\r\n    }\r\n    return levelList;\r\n}\r\n\r\nfunction ByLevelInput2(props) {\r\n    // bind array index and key to onChange\r\n    const entries = props.modifier.getByLevelEntries();\r\n    let levelList = [];\r\n    for (let i = 0; i < entries.length; i++) {\r\n        levelList.push(\r\n            <div key={i}>\r\n                <SelectLevel value={entries[i][0]}\r\n                    onChange={props.onChange.bind(null, i, \"EntryLevel\")}\r\n                />\r\n                <input\r\n                    type=\"number\"\r\n                    value={entries[i][1]}\r\n                    onChange={props.onChange.bind(null, i, \"EntryValue\")}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n    levelList.push(\r\n        <div key={entries.length}>\r\n            <SelectLevel value={\"never\"}\r\n                onChange={props.onChange.bind(null, entries.length, \"EntryLevel\")}\r\n            />\r\n            <input\r\n                type=\"number\"\r\n                value={props.modifier.extra}\r\n                onChange={props.onChange.bind(null, entries.length, \"EntryValue\")}\r\n            />\r\n        </div>\r\n    );\r\n    return levelList;\r\n}\r\n\r\n// name, value, onChange\r\nfunction LevelSelection(props) {\r\n    return (\r\n        <div >\r\n            <label> {props.name + \": \"}\r\n                <SelectLevel value={props.value}\r\n                    onChange={props.onChange}\r\n                />\r\n            </label>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction SelectLevel(props) {\r\n    return (\r\n        <select value={props.value}\r\n            onChange={props.onChange}\r\n        >\r\n            <option value=\"never\">\r\n                Never\r\n                                </option>\r\n            <option value=\"1\">\r\n                1\r\n                                </option>\r\n            <option value=\"2\">\r\n                2\r\n                                </option>\r\n            <option value=\"3\">\r\n                3\r\n                                </option>\r\n            <option value=\"4\">\r\n                4\r\n                                </option>\r\n            <option value=\"5\">\r\n                5\r\n                                </option>\r\n            <option value=\"6\">\r\n                6\r\n                                </option>\r\n            <option value=\"7\">\r\n                7\r\n                                </option>\r\n            <option value=\"8\">\r\n                8\r\n                                </option>\r\n            <option value=\"9\">\r\n                9\r\n                                </option>\r\n            <option value=\"10\">\r\n                10\r\n                                </option>\r\n            <option value=\"11\">\r\n                11\r\n                                </option>\r\n            <option value=\"12\">\r\n                12\r\n                                </option>\r\n            <option value=\"13\">\r\n                13\r\n                                </option>\r\n            <option value=\"14\">\r\n                14\r\n                                </option>\r\n            <option value=\"15\">\r\n                15\r\n                                </option>\r\n            <option value=\"16\">\r\n                16\r\n                                </option>\r\n            <option value=\"17\">\r\n                17\r\n                                </option>\r\n            <option value=\"18\">\r\n                18\r\n                                </option>\r\n            <option value=\"19\">\r\n                19\r\n                                </option>\r\n            <option value=\"20\">\r\n                20\r\n                                </option>\r\n        </select>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport { CheckboxInput, CollapsableInput, ByLevelInput, ByLevelInput2, SelectLevel, LevelSelection }","class Flag {\r\n    constructor(value = false) {\r\n        this.value = value;\r\n    }\r\n\r\n    isTrue() {\r\n        return this.value;\r\n    }\r\n\r\n    createUpdated(event) {\r\n        return new Flag(event.target.checked);\r\n    }\r\n}\r\n\r\nexport default Flag","class MAP {\r\n    constructor(prevAttacks = 0, initial = -5, changeLevel = null, changed = -4) {\r\n        // -4, 1, 10, -3 for agile weapon with agile grace at 10\r\n        this.prevAttacks = prevAttacks;\r\n        this.initial = initial;\r\n        this.changeLevel = changeLevel;\r\n        this.changed = changed;\r\n\r\n        this.value = new Array(20).fill(prevAttacks * initial);\r\n        if( changeLevel !== null) {\r\n            for (let level = changeLevel; level <= 20; level++) {\r\n                this.value[level - 1] = prevAttacks * changed;\r\n            }\r\n        }\r\n    }\r\n\r\n    get(level) {\r\n        return this.value[level - 1];\r\n    }\r\n\r\n    getPrevAttacks() {\r\n        return this.prevAttacks;\r\n    }\r\n\r\n    getInitial() {\r\n        return this.initial;\r\n    }\r\n\r\n    getChanged() {\r\n        return this.changed;\r\n    }\r\n\r\n    getDescription(level) {\r\n        if (level) {\r\n            return \"(\" + this.get(level) + \")\";\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    createUpdated(key, event) {\r\n        switch (key) {\r\n            case \"prevAttacks\":\r\n                return new MAP(parseInt(event.target.value), this.initial, this.changeLevel, this.changed);\r\n            case \"initial\":\r\n                return new MAP(this.prevAttacks, parseInt(event.target.value), this.changeLevel, parseInt(event.target.value)+1);\r\n            case \"changeLevel\":\r\n                if (event.target.value === \"never\") {\r\n                    return new MAP(this.prevAttacks, this.initial, null, this.changed);\r\n                }\r\n                return new MAP(this.prevAttacks, this.initial, parseInt(event.target.value), this.changed);\r\n            case \"changed\":\r\n                return new MAP(this.prevAttacks, Math.max(parseInt(event.target.value)-1,-5), this.changeLevel, parseInt(event.target.value));\r\n            default:\r\n                return new MAP();\r\n        }\r\n    }\r\n}\r\n\r\nexport default MAP","const MAX_LEVEL = 20;\r\n\r\nclass Proficiency {\r\n    constructor(untrained = 1, trained = 1, expert = null, master = null, legendary = null) {\r\n        this.proficiencies = [untrained, trained, expert, master, legendary];\r\n        let currentProf = 0;\r\n        if (trained && trained === 1) {\r\n            currentProf = 1;\r\n            if (expert && expert === 1) {\r\n                currentProf = 2;\r\n                if (master && master === 1) {\r\n                    currentProf = 3;\r\n                    if (legendary && legendary === 1) {\r\n                        currentProf = 4;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.initial = currentProf;\r\n        this.values = [];\r\n        this.profArray = [];\r\n\r\n        for (let i = 0; i < MAX_LEVEL; i++) {\r\n            while (this.proficiencies[currentProf + 1] && this.proficiencies[currentProf + 1] === (i + 1)) {\r\n                currentProf++;\r\n            }\r\n            if (currentProf === 0) {\r\n                this.values.push(0);\r\n                this.profArray.push(0);\r\n            } else {\r\n                this.values.push((i + 1) + (currentProf * 2));\r\n                this.profArray.push(currentProf);\r\n            }\r\n        }\r\n        this.maxProf = currentProf;\r\n        this.usedProficiencies = []\r\n        for (let i = this.initial; i <= this.maxProf; i++) {\r\n            this.usedProficiencies.push(i);\r\n        }\r\n    }\r\n\r\n    get(level) {\r\n        return this.values[level - 1];\r\n    }\r\n\r\n    getProf(level) {\r\n        return this.profArray[level-1];\r\n    }\r\n\r\n    getInitial() {\r\n        return this.initial;\r\n    }\r\n\r\n    getMax() {\r\n        return this.maxProf;\r\n    }\r\n\r\n    getLevelAcquired(proficiencyValue) {\r\n        return this.proficiencies[proficiencyValue];\r\n    }\r\n\r\n    getProficiencies() {\r\n        return this.usedProficiencies;\r\n    }\r\n\r\n    isFighter() {\r\n        return this.proficiencies.every((val, index) => val === [1, 1, 1, 5, 13][index]);\r\n    }\r\n    isMartial() {\r\n        return this.proficiencies.every((val, index) => val === [1, 1, 5, 13, null][index]);\r\n    }\r\n    isCaster() {\r\n        return this.proficiencies.every((val, index) => val === [1, 1, 11, null, null][index]);\r\n    }\r\n    isAlchemist() {\r\n        return this.proficiencies.every((val, index) => val === [1, 1, 7, null, null][index]);\r\n    }\r\n    getDescription(level) {\r\n        let profDesc = \" \";\r\n        if (level) {\r\n            profDesc += \"(\" + this.get(level) + \") \";\r\n        }\r\n\r\n        profDesc += Proficiency.toName(this.getInitial()) + \" 1\";\r\n        for (let i = this.getInitial() + 1; i <= this.getMax(); i++) {\r\n            profDesc += \", \" + Proficiency.toName(i) + \" \" + this.getLevelAcquired(i);\r\n        }\r\n\r\n        return profDesc;\r\n    }\r\n\r\n    createUpdated(key, event) {\r\n        switch (key) {\r\n            case \"initial\":\r\n                return Proficiency.newProficiencyWithIntial(event.target.value, this);\r\n            case \"fighter\":\r\n                return new Proficiency(1, 1, 1, 5, 13);\r\n            case \"martial\":\r\n                return new Proficiency(1, 1, 5, 13, null);\r\n            case \"caster\":\r\n                return new Proficiency(1, 1, 11, null, null);\r\n            case \"alchemist\":\r\n                return new Proficiency(1, 1, 7, null, null);\r\n            default:\r\n                return Proficiency.newProficiencyWithChangedLevel(key, parseInt(event.target.value), this);\r\n        }\r\n    }\r\n\r\n    static toName(profValue) {\r\n        return ([\r\n            \"Untrained\",\r\n            \"Trained\",\r\n            \"Expert\",\r\n            \"Master\",\r\n            \"Legendary\"\r\n        ][profValue]);\r\n    }\r\n\r\n    static newProficiencyWithIntial(initialProf, oldProficiency) {\r\n        let newProfs = [1, null, null, null, null];\r\n        const diff = initialProf - oldProficiency.usedProficiencies[0];\r\n        for (let i = 0; i < newProfs.length; i++) {\r\n            if (i <= initialProf) {\r\n                newProfs[i] = 1;\r\n            } else {\r\n                let oldProf = oldProficiency.usedProficiencies[i - initialProf];\r\n                let oldLevel = oldProficiency.getLevelAcquired(oldProf);\r\n                newProfs[oldProf + diff] = oldLevel;\r\n            }\r\n        }\r\n        return new Proficiency(newProfs[0], newProfs[1], newProfs[2], newProfs[3], newProfs[4]);\r\n    }\r\n\r\n    static newProficiencyWithChangedLevel(changedProf, newLevel, oldProficiency) {\r\n        let oldProfs = oldProficiency.proficiencies.slice();\r\n        oldProfs[changedProf] = newLevel;\r\n        //console.log(oldProfs);\r\n        return new Proficiency(...oldProfs);\r\n\r\n    }\r\n}\r\n\r\nexport default Proficiency","const MAX_LEVEL = 20;\r\n\r\nclass AbilityScore {\r\n    constructor(initial = 10, boosts = [false, false, false, false], apexLevel = null) {\r\n        this.initial = initial;\r\n        this.boosts = boosts;\r\n        this.apexLevel = apexLevel;\r\n\r\n        this.scoreArray = [initial];\r\n        let currentScore = initial;\r\n        let scoreWithApex;\r\n\r\n        for (let i = 2; i <= MAX_LEVEL; i++) {\r\n            if ((i === 5 && boosts[0]) || (i === 10 && boosts[1]) || (i === 15 && boosts[2]) || (i === 20 && boosts[3]))\r\n                currentScore < 18 ? currentScore += 2 : currentScore += 1;\r\n            (apexLevel && i >= apexLevel) ? (scoreWithApex = Math.max(18, currentScore + 2)) : scoreWithApex = currentScore;\r\n            this.scoreArray.push(scoreWithApex);\r\n        }\r\n        this.maxScore = scoreWithApex;\r\n    }\r\n\r\n    get(level) {\r\n        return this.scoreArray[level - 1];\r\n    }\r\n\r\n    getMod(level) {\r\n        return parseInt((this.scoreArray[level - 1] - 10) / 2);\r\n    }\r\n\r\n    getInitial() {\r\n        return this.initial;\r\n    }\r\n    getBoosts() {\r\n        return this.boosts;\r\n    }\r\n    getApexLevel() {\r\n        return this.apexLevel;\r\n    }\r\n\r\n    getScores() {\r\n        return [this.initial, ...this.boosts, this.apexLevel];\r\n    }\r\n\r\n    is18a() {\r\n        if (this.initial !== 18) return false;\r\n        if (this.boosts[0] !== true) return false;\r\n        if (this.boosts[1] !== true) return false;\r\n        if (this.boosts[2] !== true) return false;\r\n        if (this.boosts[3] !== true) return false;\r\n        if (this.apexLevel !== 17) return false;\r\n        return true;\r\n    }\r\n\r\n    is16a() {\r\n        if (this.initial !== 16) return false;\r\n        if (this.boosts[0] !== true) return false;\r\n        if (this.boosts[1] !== true) return false;\r\n        if (this.boosts[2] !== true) return false;\r\n        if (this.apexLevel !== 17) return false;\r\n        return true;\r\n    }\r\n\r\n    is16pp() {\r\n        if (this.initial !== 16) return false;\r\n        if (this.boosts[0] !== true) return false;\r\n        if (this.boosts[1] !== true) return false;\r\n        if (this.boosts[2] !== true) return false;\r\n        if (this.apexLevel !== null) return false;\r\n        return true;\r\n    }\r\n\r\n    is14p() {\r\n        if (this.initial !== 14) return false;\r\n        if (this.boosts[0] !== true) return false;\r\n        if (this.boosts[1] !== true) return false;\r\n        if (this.boosts[2] !== false) return false;\r\n        if (this.boosts[3] !== false) return false;\r\n        if (this.apexLevel !== null) return false;\r\n        return true;\r\n    }\r\n\r\n    is10() {\r\n        if (this.initial !== 10) return false;\r\n        if (this.boosts[0] !== false) return false;\r\n        if (this.boosts[1] !== false) return false;\r\n        if (this.boosts[2] !== false) return false;\r\n        if (this.boosts[3] !== false) return false;\r\n        if (this.apexLevel !== null) return false;\r\n        return true;\r\n    }\r\n\r\n    getDescription(level) {\r\n        let scoreDesc = \" \";\r\n        if (level) {\r\n            scoreDesc += \"(\" + this.getMod(level) + \") \";\r\n        }\r\n\r\n        scoreDesc += this.initial + \" to \" + this.maxScore;\r\n\r\n        return scoreDesc;\r\n    }\r\n\r\n    createUpdated(key, event) {\r\n        let newInitial = this.initial;\r\n        let newBoosts = this.boosts.slice();\r\n        let newApexLevel = this.apexLevel;\r\n        switch (key) {\r\n            case \"18a\":\r\n                return new AbilityScore(18, [true, true, true, true], 17);\r\n            case \"16a\":\r\n                return new AbilityScore(16, [true, true, true, false], 17);\r\n            case \"16++\":\r\n                return new AbilityScore(16, [true, true, true, false], null);\r\n            case \"14+\":\r\n                return new AbilityScore(14, [true, true, false, false], null);\r\n            case \"10\":\r\n                return new AbilityScore(10, [false, false, false, false], null);\r\n\r\n            case \"initial\":\r\n                newInitial = parseInt(event.target.value);\r\n                break;\r\n            case 0:\r\n            case 1:\r\n            case 2:\r\n            case 3:\r\n                newBoosts[key] = event.target.checked;\r\n                break;\r\n            case \"apex\":\r\n                let value = event.target.value;\r\n                if (value === \"never\") value = null;\r\n                newApexLevel = value;\r\n                break;\r\n            default:\r\n                console.error(\"Unhandled ability score\");\r\n        }\r\n        return new AbilityScore(newInitial, newBoosts, newApexLevel);\r\n    }\r\n}\r\n/*\r\n\r\n        this.proficiencies = [untrained,trained,expert,master,legendary];\r\n        let currentProf = 0;\r\n        if (trained && trained===1) {\r\n            currentProf = 1;\r\n            if (expert && expert===1) {\r\n                currentProf = 2;\r\n                if (master && master===1) {\r\n                    currentProf = 3;\r\n                    if (legendary && legendary===1) {\r\n                        currentProf = 4;\r\n        }}}}\r\n        this.initial = currentProf;\r\n        this.profArray = [];\r\n\r\n        for(let i=0; i<MAX_LEVEL; i++) {\r\n            while (this.proficiencies[currentProf+1] && this.proficiencies[currentProf+1] === (i+1)) {\r\n                currentProf++;\r\n            }\r\n            if (currentProf===0) {\r\n                this.profArray.push(0);\r\n            } else {\r\n                this.profArray.push((i+1) + (currentProf*2));\r\n            }\r\n        }\r\n        this.maxProf = currentProf;\r\n        this.usedProficiencies = []\r\n        for(let i=this.initial; i<=this.maxProf; i++) {\r\n            this.usedProficiencies.push(i);\r\n        }\r\n    }\r\n\r\n    get(level) {\r\n        return this.profArray[level-1];\r\n    }\r\n\r\n    getInitial() {\r\n        return this.initial;\r\n    }\r\n\r\n    getMax() {\r\n        return this.maxProf;\r\n    }\r\n\r\n    getLevelAcquired(proficiencyValue) {\r\n        return this.proficiencies[proficiencyValue];\r\n    }\r\n\r\n    getProficiencies() {\r\n        return this.usedProficiencies;\r\n    }\r\n\r\n    static toName(profValue) {\r\n        return ([\r\n            \"Untrained\",\r\n            \"Trained\",\r\n            \"Expert\",\r\n            \"Master\",\r\n            \"Legendary\"\r\n        ][profValue]);\r\n    }\r\n\r\n    static newProficiencyWithIntial(initialProf, oldProficiency) {\r\n        let newProfs = [1,null,null,null,null];\r\n        const diff = initialProf - oldProficiency.usedProficiencies[0];\r\n        for(let i=0; i<newProfs.length; i++) {\r\n            if (i <= initialProf) {\r\n                newProfs[i] = 1;\r\n            } else {\r\n                let oldProf = oldProficiency.usedProficiencies[i-initialProf];\r\n                let oldLevel = oldProficiency.getLevelAcquired(oldProf);\r\n                newProfs[oldProf+diff] = oldLevel;\r\n            }\r\n        }\r\n        return new Proficiency(newProfs[0], newProfs[1], newProfs[2], newProfs[3], newProfs[4]);\r\n    }\r\n\r\n    static newProficiencyWithChangedLevel(changedProf, newLevel, oldProficiency) {\r\n        let oldProfs = oldProficiency.proficiencies.slice();\r\n        oldProfs[changedProf] = newLevel;\r\n        console.log(oldProfs);\r\n        return new Proficiency(...oldProfs);\r\n\r\n    }\r\n}\r\n*/\r\n\r\nexport default AbilityScore","// Store:\r\n//     item bonuses\r\n//     if using other bonuses/penalties\r\n//     item penalties\r\n//     status bonuses\r\n//     status penalties\r\n//     circumstance bonuses\r\n//     circumstance penalties\r\n//     untyped penalties (other than MAP)\r\n\r\n// Also can be used for damage bonuses like Weapon specialization \r\n\r\nclass Modifier {\r\n    constructor(values = null) {\r\n        if (values === null) {\r\n            this.values = new Array(20).fill(0);\r\n            this.entries = [[1, 0]];\r\n            this.extra = 0;\r\n        } else {\r\n            this.values = values;\r\n            this.generateEntries();\r\n            this.extra = 0;\r\n        }\r\n        // console.log(this.values);\r\n        // console.log(this.entries);\r\n    }\r\n\r\n    get(level) {\r\n        return this.values[level - 1]\r\n    }\r\n\r\n    is(value) {\r\n        for (let i = 0; i < 20; i++) {\r\n            if (this.values[i] !== value) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    generateEntries() {\r\n        let currentValue = this.values[0];\r\n        this.entries = [[1, currentValue]];\r\n        for (let level = 2; level <= 20; level++) {\r\n            if (currentValue !== this.values[level - 1]) {\r\n                currentValue = this.values[level - 1];\r\n                this.entries.push([level, currentValue]);\r\n            }\r\n        }\r\n    }\r\n\r\n    getByLevelEntries() {\r\n        return this.entries;\r\n    }\r\n\r\n    fromChangedEntryLevel(index, value) {\r\n        if (index === this.entries.length) {\r\n            // TODO: place value in entries at appropiate location\r\n            for (let i = 0; i <= this.entries.length; i++) {\r\n                if (i === this.entries.length || this.entries[i][0] > value) {\r\n                    this.entries.splice(i, 0, [value, this.extra]);\r\n                    break;\r\n                }\r\n            }\r\n        } else {\r\n            this.entries[index][0] = value;\r\n        }\r\n\r\n        return this.newModifierFromEntries(this.entries, this.extra);\r\n    }\r\n\r\n    fromChangedEntryValue(index, value) {\r\n\r\n        if (index === this.entries.length) {\r\n            this.extra = value;\r\n        } else {\r\n            this.entries[index][1] = value;\r\n        }\r\n\r\n        return this.newModifierFromEntries(this.entries, this.extra);\r\n    }\r\n\r\n    newModifierFromEntries(entries, extra = 0) {\r\n        let values = [];\r\n        let currentValue = 0;\r\n        let currentIndex = 0;\r\n        for (let level = 1; level <= 20; level++) {\r\n            if (entries[currentIndex] && entries[currentIndex][0] === level) {\r\n                currentValue = entries[currentIndex][1];\r\n                if (!currentValue) currentValue = 0;\r\n                currentIndex++;\r\n            }\r\n            values.push(currentValue);\r\n        }\r\n        const mod = new Modifier(values);\r\n        mod.extra = extra;\r\n        return mod;\r\n    }\r\n\r\n    getDescription(level) {\r\n        let desc = \" \";\r\n        if (level) {\r\n            desc += \"(\" + this.get(level) + \") \";\r\n        }\r\n\r\n        desc += this.values[0] + \" to \" + this.values[19];\r\n\r\n        return desc;\r\n    }\r\n\r\n    createUpdated(key, event, index) {\r\n        let newValues;\r\n        switch (key) {\r\n            case \"EntryLevel\":\r\n                return this.fromChangedEntryLevel(index, parseInt(event.target.value));\r\n\r\n            case \"EntryValue\":\r\n                return this.fromChangedEntryValue(index, parseInt(event.target.value));\r\n\r\n            case \"0\":\r\n                newValues = new Array(20).fill(0);\r\n                break;\r\n            case \"+1\":\r\n            case \"-1\":\r\n                newValues = new Array(20).fill(1);\r\n                break;\r\n            case \"+2\":\r\n            case \"-2\":\r\n                newValues = new Array(20).fill(2);\r\n                break;\r\n            case \"+3\":\r\n            case \"-3\":\r\n                newValues = new Array(20).fill(3);\r\n                break;\r\n            case \"+4\":\r\n            case \"-4\":\r\n                newValues = new Array(20).fill(4);\r\n                break;\r\n\r\n            case \"WSMartial\":\r\n                newValues = new Array(20).fill(0);\r\n                for (let level = 7; level <= 20; level++) {\r\n                    if (level < 15) {\r\n                        newValues[level - 1] = 1;\r\n                    }\r\n                    if (level >= 15) {\r\n                        newValues[level - 1] = 2;\r\n                    }\r\n                }\r\n                break;\r\n            case \"WSCaster\":\r\n                newValues = new Array(20).fill(0);\r\n                for (let level = 13; level <= 20; level++) {\r\n                    newValues[level - 1] = 1;\r\n                }\r\n                break;\r\n\r\n            case \"d4\":\r\n                newValues = new Array(20).fill(4);\r\n                break;\r\n            case \"d6\":\r\n                newValues = new Array(20).fill(6);\r\n                break;\r\n            case \"d8\":\r\n                newValues = new Array(20).fill(8);\r\n                break;\r\n            case \"d10\":\r\n                newValues = new Array(20).fill(10);\r\n                break;\r\n            case \"d12\":\r\n                newValues = new Array(20).fill(12);\r\n                break;\r\n\r\n            case \"None\":\r\n                newValues = new Array(20).fill(0);\r\n                break;\r\n            case \"ABPWeaponBonus\":\r\n                newValues = new Array(20).fill(0);\r\n                for (let i = 0; i < 20; i++) {\r\n                    if (i + 1 >= 16) { newValues[i] = 3; continue; }\r\n                    if (i + 1 >= 10) { newValues[i] = 2; continue; }\r\n                    if (i + 1 >= 2) { newValues[i] = 1; continue; }\r\n                }\r\n                break;\r\n            case \"ABPSkill1\":\r\n                newValues = new Array(20).fill(0);\r\n                for (let i = 0; i < 20; i++) {\r\n                    if (i + 1 >= 17) { newValues[i] = 3; continue; }\r\n                    if (i + 1 >= 9) { newValues[i] = 2; continue; }\r\n                    if (i + 1 >= 3) { newValues[i] = 1; continue; }\r\n                }\r\n                break;\r\n            case \"ABPSkill2\":\r\n                newValues = new Array(20).fill(0);\r\n                for (let i = 0; i < 20; i++) {\r\n                    if (i + 1 >= 20) { newValues[i] = 3; continue; }\r\n                    if (i + 1 >= 13) { newValues[i] = 2; continue; }\r\n                    if (i + 1 >= 6) { newValues[i] = 1; continue; }\r\n                }\r\n                break;\r\n\r\n            case \"One\":\r\n                newValues = new Array(20).fill(1);\r\n                break;\r\n            case \"ABPWeaponDiceNum\":\r\n                newValues = new Array(20).fill(1);\r\n                for (let i = 0; i < 20; i++) {\r\n                    if (i + 1 >= 19) { newValues[i] = 4; continue; }\r\n                    if (i + 1 >= 12) { newValues[i] = 3; continue; }\r\n                    if (i + 1 >= 4) { newValues[i] = 2; continue; }\r\n                }\r\n                break;\r\n\r\n            default:\r\n                newValues = this.values.slice();\r\n                newValues[key - 1] = parseInt(event.target.value);\r\n        }\r\n        return new Modifier(newValues);\r\n    }\r\n\r\n    // For acting as Weapon Specialization--------------------------\r\n    isWSMartial() {\r\n        for (let level = 1; level <= 20; level++) {\r\n            if (level < 7) {\r\n                if (this.values[level - 1] !== 0) return false;\r\n            }\r\n            if (level >= 7 && level < 15) {\r\n                if (this.values[level - 1] !== 1) return false;\r\n            }\r\n            if (level >= 15) {\r\n                if (this.values[level - 1] !== 2) return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    isWSCaster() {\r\n        for (let level = 1; level <= 20; level++) {\r\n            if (level < 13) {\r\n                if (this.values[level - 1] !== 0) return false;\r\n            }\r\n            if (level >= 13) {\r\n                if (this.values[level - 1] !== 1) return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // For acting as Dice Number-----------------------------------\r\n    isABPWeaponDiceNum() {\r\n        for (let i = 0; i < 20; i++) {\r\n            if (i + 1 >= 19) { if (this.values[i] !== 4) return false; else continue; }\r\n            if (i + 1 >= 12) { if (this.values[i] !== 3) return false; else continue; }\r\n            if (i + 1 >= 4) { if (this.values[i] !== 2) return false; else continue; }\r\n            if (this.values[i] !== 1) return false; else continue;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // For acting as Die Size--------------------------------------\r\n    getDieSizeDescription(level) {\r\n        let desc = \" \";\r\n        if (level) {\r\n            desc += \"(d\" + this.get(level) + \") \";\r\n        }\r\n\r\n        desc += \"d\" + this.values[0] + \" to d\" + this.values[19];\r\n\r\n        return desc;\r\n    }\r\n\r\n    isd4() {\r\n        for (let i = 0; i < 20; i++) {\r\n            if (this.values[i] !== 4) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    isd6() {\r\n        for (let i = 0; i < 20; i++) {\r\n            if (this.values[i] !== 6) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    isd8() {\r\n        for (let i = 0; i < 20; i++) {\r\n            if (this.values[i] !== 8) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    isd10() {\r\n        for (let i = 0; i < 20; i++) {\r\n            if (this.values[i] !== 10) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    isd12() {\r\n        for (let i = 0; i < 20; i++) {\r\n            if (this.values[i] !== 12) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // For acting as item bonus\r\n    isNone() {\r\n        for (let i = 0; i < 20; i++) {\r\n            if (this.values[i] !== 0) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    isABPWeaponBonus() {\r\n        for (let i = 0; i < 20; i++) {\r\n            if (i + 1 >= 16) { if (this.values[i] !== 3) return false; else continue; }\r\n            if (i + 1 >= 10) { if (this.values[i] !== 2) return false; else continue; }\r\n            if (i + 1 >= 2) { if (this.values[i] !== 1) return false; else continue; }\r\n            if (this.values[i] !== 0) return false; else continue;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    isABPSkill1() {\r\n        for (let i = 0; i < 20; i++) {\r\n            if (i + 1 >= 17) { if (this.values[i] !== 3) return false; else continue; }\r\n            if (i + 1 >= 9) { if (this.values[i] !== 2) return false; else continue; }\r\n            if (i + 1 >= 3) { if (this.values[i] !== 1) return false; else continue; }\r\n            if (this.values[i] !== 0) return false; else continue;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    isABPSkill2() {\r\n        for (let i = 0; i < 20; i++) {\r\n            if (i + 1 >= 20) { if (this.values[i] !== 3) return false; else continue; }\r\n            if (i + 1 >= 13) { if (this.values[i] !== 2) return false; else continue; }\r\n            if (i + 1 >= 6) { if (this.values[i] !== 1) return false; else continue; }\r\n            if (this.values[i] !== 0) return false; else continue;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Modifier","class AdditionalEffectArray {\r\n    // has an array of effect entries. \r\n    // Each effect entry has an AdditionalEffect, level added, and level removed\r\n\r\n    constructor(length=0,values=[]) {\r\n        this.length = length;\r\n        this.effectEntries = values;\r\n    }\r\n\r\n    createUpdated(key, event, index) {\r\n        switch (key) {\r\n            case \"Effect\":\r\n                let effectName=event.target.value;\r\n\r\n                break;\r\n\r\n            case \"LevelAdded\":\r\n                break;\r\n\r\n            case \"LevelRemoved\":\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nexport default AdditionalEffectArray","function totalBonusDescription(effect, level) {\r\n    let desc = \"\";\r\n    if (level) {\r\n        desc += \"(\" + getTotalBonus(effect, level) + \") \";\r\n    }\r\n    desc += getTotalBonus(effect, 1) + \" to \" + getTotalBonus(effect, 20);\r\n    return desc;\r\n}\r\n\r\nfunction attackBonusDescription(effect, level) {\r\n    let desc = \"\";\r\n    if (level) {\r\n        desc += \"(\" + getAttackBonus(effect, level) + \") \";\r\n    }\r\n    desc += getAttackBonus(effect, 1) + \" to \" + getAttackBonus(effect, 20);\r\n    return desc;\r\n}\r\n\r\n\r\n\r\nfunction totalDamageDescription(effect, level) {\r\n    // damageAbilityScore: new AbilityScore(),\r\n    // weaponDiceNum: new DiceNumber(),\r\n    // dieSize: new DieSize(),\r\n    // weaponSpec\r\n    if (level) {\r\n        const dice = \"\" + effect.weaponDiceNum.get(level) + \"d\" + effect.dieSize.get(level);\r\n        const staticDamage = (effect.damageAbilityScore.getMod(level) + (effect.weaponSpec.get(level) * effect.proficiency.getProf(level)));\r\n        const average = effect.weaponDiceNum.get(level) * (effect.dieSize.get(level) + 1) / 2 + staticDamage;\r\n        return \"(\" + average + \") \" + dice + \" + \" + staticDamage;\r\n    }\r\n    return \"\";\r\n}\r\n\r\nfunction getAttackBonus(effect, level) {\r\n    let total;\r\n\r\n    if (effect.useOverride.isTrue()) {\r\n        total = effect.override.get(level);\r\n    }\r\n    else {\r\n        total = effect.attackAbilityScore.getMod(level) + effect.proficiency.get(level) + effect.itemBonus.get(level);\r\n    }\r\n    total += effect.MAP.get(level);\r\n\r\n    return total;\r\n}\r\n\r\nfunction getTotalBonus(effect, level) {\r\n    let total = getAttackBonus(effect, level);\r\n\r\n    if (effect.useMiscModifiers.isTrue()) {\r\n\r\n        total += (\r\n            effect.circumstanceBonus.get(level) +\r\n            effect.statusBonus.get(level) +\r\n            -effect.circumstancePenalty.get(level) +\r\n            -effect.statusPenalty.get(level) +\r\n            -effect.itemPenalty.get(level) +\r\n            -effect.untypedPenalty.get(level)\r\n        );\r\n    }\r\n\r\n    return total;\r\n}\r\n\r\nfunction getCritSuccessPercent(bonus, DC, keen=false) {\r\n    const dif = bonus-DC;\r\n    let chance;\r\n    if (dif < -20) {\r\n        chance = 0;\r\n    } else if (dif < -9) {\r\n        chance = keen?10:5;\r\n    } else if (dif < 8) {\r\n        chance = (11 + dif) * 5;\r\n    } else {\r\n        chance = 95;\r\n    }\r\n      \r\n    return chance;\r\n}\r\n\r\nfunction getSuccessPercent(bonus, DC, keen=false) {\r\n    const dif = bonus-DC;\r\n    let chance;\r\n    if (dif < -29) {\r\n        chance = 0;\r\n    } else if (dif < -20) {\r\n        chance = 5;\r\n    } else if (dif < -9) {\r\n        chance = (keen?19:20 + dif) *5;\r\n    } else if (dif < -1) {\r\n        chance = 50;\r\n    } else if (dif < 9) {\r\n        chance = (8 - dif) * 5;\r\n    } else {\r\n        chance = 5;\r\n    }\r\n      \r\n    return chance;\r\n}\r\n\r\nfunction calculateExpectedDamage(effect, target) {\r\n    const level = target.selectedLevel;\r\n    if (!level) return;\r\n    const attackBonus = getTotalBonus(effect, level);\r\n    const diceNum = effect.weaponDiceNum.get(level);\r\n    const dieSize = effect.dieSize.get(level);\r\n    const staticDamage = (effect.damageAbilityScore.getMod(level) + (effect.weaponSpec.get(level) * effect.proficiency.getProf(level)));\r\n    const average = diceNum * (dieSize+1)/2 + staticDamage;\r\n    const AC = target.AC;\r\n    const critPercent = getCritSuccessPercent(attackBonus,AC);\r\n    const hitPercent = getSuccessPercent(attackBonus,AC);\r\n    return (hitPercent * average + critPercent * average * 2) / 100;\r\n}\r\n\r\nexport { totalBonusDescription, attackBonusDescription, totalDamageDescription, calculateExpectedDamage }","import React from 'react';\r\nimport { SelectLevel, CollapsableInput } from './CommonInputs'\r\n\r\nfunction MAPInput(props) {\r\n    // props: effect, onChange, selectedLevel\r\n    let MAP = props.effect.MAP;\r\n    let levelChange = MAP.levelChange;\r\n    if (levelChange === null) {\r\n        levelChange = \"never\"\r\n    }\r\n\r\n    return (\r\n        <CollapsableInput\r\n            description={\"Multiple Attack Penalty: \" + MAP.getDescription(props.selectedLevel)}\r\n            listInput={<div className=\"MAPInput\" >\r\n                <div>\r\n                    Number of Previous Attacks: {}\r\n                    <select\r\n                        value={MAP.getPrevAttacks()}\r\n                        onChange={props.onChange.bind(null, \"prevAttacks\")}\r\n                    >\r\n                        <option value=\"0\">\r\n                            0\r\n                                </option>\r\n                        <option value=\"1\">\r\n                            1\r\n                                </option>\r\n                        <option value=\"2\">\r\n                            2+\r\n                                </option>\r\n\r\n                    </select>\r\n                    {} x {}\r\n                    <select\r\n                        value={MAP.getInitial()}\r\n                        onChange={props.onChange.bind(null, \"initial\")}\r\n                    >\r\n                        <option value=\"-5\">\r\n                            -5\r\n                                </option>\r\n                        <option value=\"-4\">\r\n                            -4\r\n                                </option>\r\n                        <option value=\"-3\">\r\n                            -3\r\n                                </option>\r\n                        <option value=\"-2\">\r\n                            -2\r\n                                </option>\r\n                        <option value=\"-1\">\r\n                            -1\r\n                                </option>\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    (At level: {}\r\n                    <SelectLevel value={levelChange}\r\n                        onChange={props.onChange.bind(null, \"changeLevel\")}\r\n                    />\r\n                         , Change to: {}\r\n                    <select\r\n                        value={MAP.getChanged()}\r\n                        onChange={props.onChange.bind(null, \"changed\")}\r\n                    >\r\n                        <option value=\"-5\">\r\n                            -5\r\n                                </option>\r\n                        <option value=\"-4\">\r\n                            -4\r\n                                </option>\r\n                        <option value=\"-3\">\r\n                            -3\r\n                                </option>\r\n                        <option value=\"-2\">\r\n                            -2\r\n                                </option>\r\n                        <option value=\"-1\">\r\n                            -1\r\n                                </option>\r\n                        <option value=\"0\">\r\n                            0\r\n                                </option>\r\n                    </select>\r\n                    )\r\n</div>\r\n\r\n\r\n            </div>}\r\n        />\r\n\r\n    );\r\n}\r\n\r\nexport default MAPInput","import React from 'react';\r\nimport { CheckboxInput, CollapsableInput, ByLevelInput } from './CommonInputs'\r\n\r\n\r\nexport function OverrideInput(props) {\r\n    // props: effect, onEffectChange\r\n    return (\r\n        <div className=\"InputGroup OverrideInput\">\r\n            <CheckboxInput\r\n                checked={props.effect.useOverride.isTrue()}\r\n                onChange={props.onEffectChange.bind(null, \"useOverride\", null)}\r\n                label=\"Override Attack Bonus?\"\r\n            />\r\n            <CollapsableInput\r\n                description={\"Override: \" + props.effect.override.getDescription(props.selectedLevel)}\r\n                listInput={\r\n                    <ByLevelInput\r\n                        modifier={props.effect.override}\r\n                        onChange={props.onEffectChange.bind(null, \"override\", null)}\r\n                    />\r\n                }\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OverrideInput\r\n\r\n\r\n","import React from 'react';\r\nimport Proficiency from '../Model/Proficiency';\r\nimport { CheckboxInput, CollapsableInput, LevelSelection } from './CommonInputs'\r\n\r\nfunction ProficiencyPresets(props) {\r\n    return (\r\n        <div className=\"Presets ProficiencyPresets\">\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.proficiency.isFighter()}\r\n                onChange={props.onChange.bind(null, \"fighter\")}\r\n                label={\"Fighter\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.proficiency.isMartial()}\r\n                onChange={props.onChange.bind(null, \"martial\")}\r\n                label={\"Martial\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.proficiency.isCaster()}\r\n                onChange={props.onChange.bind(null, \"caster\")}\r\n                label={\"Caster\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.proficiency.isAlchemist()}\r\n                onChange={props.onChange.bind(null, \"alchemist\")}\r\n                label={\"Alchemist/Warpriest\"}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ProficiencyInputList(props) {\r\n    // props: proficiency, onChange\r\n    \r\n    let prof = props.proficiency;\r\n\r\n    let profList = prof.getProficiencies().map(\r\n        (profValue, index) => {\r\n            if (index === 0) {\r\n                return (\r\n                    <div key=\"initial\">\r\n                        <label> Initial: {}\r\n                            <select\r\n                                value={prof.getInitial()}\r\n                                onChange={props.onChange.bind(null,\"initial\")}\r\n                            >\r\n                                <option value=\"0\">\r\n                                    Untrained\r\n                                </option>\r\n                                <option value=\"1\">\r\n                                    Trained\r\n                                </option>\r\n                                <option value=\"2\">\r\n                                    Expert\r\n                                </option>\r\n                                <option value=\"3\">\r\n                                    Master\r\n                                </option>\r\n                                <option value=\"4\">\r\n                                    Legendary\r\n                                </option>\r\n                            </select>\r\n                        </label>\r\n                    </div>\r\n                );\r\n            } else {\r\n                let value = prof.getLevelAcquired(profValue);\r\n                if (value === null) value = \"never\";\r\n                return (\r\n                    <LevelSelection key={profValue} name={Proficiency.toName(profValue)}\r\n                        value={value} onChange={props.onChange.bind(null, profValue)}\r\n                    />\r\n                );\r\n            }\r\n        }\r\n    );\r\n    if (prof.getMax() < 4) {\r\n        profList.push(<LevelSelection key={prof.getMax() + 1} name={Proficiency.toName(prof.getMax() + 1)}\r\n            value=\"never\" onChange={props.onChange.bind(null, prof.getMax() + 1)}\r\n        />);\r\n    }\r\n\r\n    return (\r\n        <div className=\"ProficiencyInputList\">\r\n            {profList}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nfunction WeaponProficiencyInput(props) {\r\n    // props: effect, onEffectChange, selectedLevel\r\n    return (\r\n        <div className=\"InputGroup WeaponProficiencyInput\">\r\n            <ProficiencyPresets\r\n                proficiency={props.effect.proficiency}\r\n                onChange={props.onEffectChange.bind(null, \"proficiency\", null)}\r\n            />\r\n            <CollapsableInput\r\n                description={\"Proficiency: \" + props.effect.proficiency.getDescription(props.selectedLevel)}\r\n                listInput={\r\n                    <ProficiencyInputList\r\n                        proficiency={props.effect.proficiency}\r\n                        onChange={props.onEffectChange.bind(null, \"proficiency\", null)}\r\n                    />\r\n                }\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport { WeaponProficiencyInput }","import React from 'react';\r\nimport { CheckboxInput, CollapsableInput, LevelSelection } from './CommonInputs'\r\n\r\nfunction AbilityScoreInputList(props) {\r\n    // props: score, onChange\r\n\r\n    const score = props.score;\r\n    let scoreList = [];\r\n    scoreList.push(\r\n        <div key=\"initial\">\r\n            <label> Initial: {}\r\n                <select\r\n                    value={score.getInitial()}\r\n                    onChange={props.onChange.bind(null, \"initial\")}\r\n                >\r\n                    <option value=\"8\">\r\n                        8\r\n                    </option>\r\n                    <option value=\"10\">\r\n                        10\r\n                    </option>\r\n                    <option value=\"12\">\r\n                        12\r\n                    </option>\r\n                    <option value=\"14\">\r\n                        14\r\n                    </option>\r\n                    <option value=\"16\">\r\n                        16\r\n                    </option>\r\n                    <option value=\"18\">\r\n                        18\r\n                    </option>\r\n                </select>\r\n            </label>\r\n        </div>\r\n    );\r\n    const boosts = score.getBoosts();\r\n    for (let i = 0; i < boosts.length; i++) {\r\n        scoreList.push(\r\n            <div key={i}>\r\n                <label> Boost {(1 + i) * 5}: {}\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        checked={boosts[i]}\r\n                        onChange={props.onChange.bind(null, i)}\r\n                    />\r\n                </label>\r\n            </div>\r\n        );\r\n    }\r\n    let apexLevel = score.getApexLevel();\r\n    if (apexLevel === null) apexLevel = \"never\";\r\n    scoreList.push(\r\n        <LevelSelection key=\"apex\" name=\"Apex Level\"\r\n            value={apexLevel} onChange={props.onChange.bind(null, \"apex\")}\r\n        />\r\n    );\r\n\r\n    return (\r\n        <div className=\"AbilityScoreInput\">\r\n            {scoreList}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nfunction AbilityScorePresets(props) {\r\n    // props: score, onChange\r\n    return (\r\n        <div className=\"Presets AbilityScorePresets\">\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.score.is18a()}\r\n                onChange={props.onChange.bind(null, \"18a\")}\r\n                label={\"18a\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.score.is16a()}\r\n                onChange={props.onChange.bind(null, \"16a\")}\r\n                label={\"16a\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.score.is16pp()}\r\n                onChange={props.onChange.bind(null, \"16++\")}\r\n                label={\"16++\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.score.is14p()}\r\n                onChange={props.onChange.bind(null, \"14+\")}\r\n                label={\"14+\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.score.is10()}\r\n                onChange={props.onChange.bind(null, \"10\")}\r\n                label={\"10\"}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction AttackAbilityScoreInput(props) {\r\n    // props: effect, onChange\r\n    return (\r\n        <div className=\"InputGroup AbilityScoreInput\">\r\n            <AbilityScorePresets\r\n                score={props.effect.attackAbilityScore}\r\n                onChange={props.onChange}\r\n            />\r\n            <CollapsableInput\r\n                description={\"Attack Ability Score: \" + props.effect.attackAbilityScore.getDescription(props.selectedLevel)}\r\n                listInput={\r\n                    <AbilityScoreInputList\r\n                        score={props.effect.attackAbilityScore}\r\n                        onChange={props.onChange}\r\n                    />\r\n                }\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction DamageAbilityScoreInput(props) {\r\n    // props: effect, onChange\r\n    return (\r\n        <div className=\"InputGroup AbilityScoreInput\">\r\n            <AbilityScorePresets\r\n                score={props.effect.damageAbilityScore}\r\n                onChange={props.onChange}\r\n            />\r\n            <CollapsableInput\r\n                description={\"Damage Ability Score: \" + props.effect.damageAbilityScore.getDescription(props.selectedLevel)}\r\n                listInput={\r\n                    <AbilityScoreInputList\r\n                        score={props.effect.damageAbilityScore}\r\n                        onChange={props.onChange}\r\n                    />\r\n                }\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport { AttackAbilityScoreInput, DamageAbilityScoreInput }","import React from 'react';\r\nimport { CheckboxInput, CollapsableInput, ByLevelInput2 } from './CommonInputs'\r\n\r\nfunction ItemBonusPresets(props) {\r\n    return (\r\n        <div className=\"Presets ItemBonusPresets\">\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.itemBonus.isNone()}\r\n                onChange={props.onChange.bind(null, \"None\")}\r\n                label={\"None\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.itemBonus.isABPWeaponBonus()}\r\n                onChange={props.onChange.bind(null, \"ABPWeaponBonus\")}\r\n                label={\"ABP Weapon\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.itemBonus.isABPSkill1()}\r\n                onChange={props.onChange.bind(null, \"ABPSkill1\")}\r\n                label={\"ABP Skill Item 1\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.itemBonus.isABPSkill2()}\r\n                onChange={props.onChange.bind(null, \"ABPSkill2\")}\r\n                label={\"ABP Skill Item 2\"}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ItemBonusInput(props) {\r\n    return (\r\n        <div className=\"InputGroup ItemBonusInput\">\r\n            <ItemBonusPresets\r\n                itemBonus={props.effect.itemBonus}\r\n                onChange={props.onChange.bind(null,null)}\r\n            />\r\n            <CollapsableInput\r\n                description={\"Item Bonus: \" + props.effect.itemBonus.getDescription(props.selectedLevel)}\r\n                listInput={\r\n                    <ByLevelInput2\r\n                        modifier={props.effect.itemBonus}\r\n                        onChange={props.onChange}\r\n                    />\r\n                }\r\n            />\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default ItemBonusInput","import React from 'react';\r\nimport { CheckboxInput, CollapsableInput, ByLevelInput2 } from './CommonInputs'\r\n\r\nfunction BonusPresets(props) {\r\n    return (\r\n        <div className=\"Presets BonusPresets\">\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.modifier.is(0)}\r\n                onChange={props.onChange.bind(null, \"0\")}\r\n                label={\"+0\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.modifier.is(1)}\r\n                onChange={props.onChange.bind(null, \"+1\")}\r\n                label={\"+1\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.modifier.is(2)}\r\n                onChange={props.onChange.bind(null, \"+2\")}\r\n                label={\"+2\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.modifier.is(3)}\r\n                onChange={props.onChange.bind(null, \"+3\")}\r\n                label={\"+3\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.modifier.is(4)}\r\n                onChange={props.onChange.bind(null, \"+4\")}\r\n                label={\"+4\"}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction PenaltyPresets(props) {\r\n    return (\r\n        <div className=\"Presets PenaltyPresets\">\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.modifier.is(0)}\r\n                onChange={props.onChange.bind(null, \"0\")}\r\n                label={\"-0\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.modifier.is(1)}\r\n                onChange={props.onChange.bind(null, \"+1\")}\r\n                label={\"-1\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.modifier.is(2)}\r\n                onChange={props.onChange.bind(null, \"+2\")}\r\n                label={\"-2\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.modifier.is(3)}\r\n                onChange={props.onChange.bind(null, \"+3\")}\r\n                label={\"-3\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.modifier.is(4)}\r\n                onChange={props.onChange.bind(null, \"+4\")}\r\n                label={\"-4\"}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\n/* <CheckboxInput\r\n                checked={props.effect.useMiscModifiers.isTrue()}\r\n                onChange={props.onEffectChange.bind(null, \"useMiscModifiers\")}\r\n                label=\"Add Circumstance/Status Bonuses/Penalties\"\r\n            /> */\r\nfunction totalModDescription(effect, level) {\r\n    if (level) {\r\n        let total = (effect.circumstanceBonus.get(level) +\r\n            effect.statusBonus.get(level) +\r\n            -effect.circumstancePenalty.get(level) +\r\n            -effect.statusPenalty.get(level) +\r\n            -effect.itemPenalty.get(level) +\r\n            -effect.untypedPenalty.get(level))\r\n\r\n        return \"(\" + total + \")\";\r\n    }\r\n}\r\n\r\nfunction ModifierInput(props) {\r\n    // props: effect, onEffectChange\r\n    return (\r\n        <div className=\"ModifierInput\" >\r\n            <CollapsableInput\r\n                description={\"Circumstance/Status Bonuses/Penalties: \" + totalModDescription(props.effect, props.selectedLevel)}\r\n                listInput={\r\n                    <div className=\"ModifierInputList\">\r\n                        <div className=\"InputGroup\">\r\n                            <BonusPresets\r\n                                modifier={props.effect.statusBonus}\r\n                                onChange={props.onEffectChange.bind(null, \"statusBonus\", null)}\r\n                            />\r\n                            <CollapsableInput\r\n                                description={\"Status Bonus: \" + props.effect.statusBonus.getDescription(props.selectedLevel)}\r\n                                listInput={\r\n                                    <ByLevelInput2\r\n                                        modifier={props.effect.statusBonus}\r\n                                        onChange={props.onEffectChange.bind(null, \"statusBonus\")}\r\n                                    />\r\n                                }\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"InputGroup\">\r\n                            <BonusPresets\r\n                                modifier={props.effect.circumstanceBonus}\r\n                                onChange={props.onEffectChange.bind(null, \"circumstanceBonus\", null)}\r\n                            />\r\n                            <CollapsableInput\r\n                                description={\"Cicumstance Bonus: \" + props.effect.circumstanceBonus.getDescription(props.selectedLevel)}\r\n                                listInput={\r\n                                    <ByLevelInput2\r\n                                        modifier={props.effect.circumstanceBonus}\r\n                                        onChange={props.onEffectChange.bind(null, \"circumstanceBonus\")}\r\n                                    />\r\n                                }\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"InputGroup\">\r\n                            <PenaltyPresets\r\n                                modifier={props.effect.statusPenalty}\r\n                                onChange={props.onEffectChange.bind(null, \"statusPenalty\", null)}\r\n                            />\r\n                            <CollapsableInput\r\n                                description={\"Status Penalty: \" + props.effect.statusPenalty.getDescription(props.selectedLevel)}\r\n                                listInput={\r\n                                    <ByLevelInput2\r\n                                        modifier={props.effect.statusPenalty}\r\n                                        onChange={props.onEffectChange.bind(null, \"statusPenalty\")}\r\n                                    />\r\n                                }\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"InputGroup\">\r\n                            <PenaltyPresets\r\n                                modifier={props.effect.circumstancePenalty}\r\n                                onChange={props.onEffectChange.bind(null, \"circumstancePenalty\", null)}\r\n                            />\r\n                            <CollapsableInput\r\n                                description={\"Cicumstance Penalty: \" + props.effect.circumstancePenalty.getDescription(props.selectedLevel)}\r\n                                listInput={\r\n                                    <ByLevelInput2\r\n                                        modifier={props.effect.circumstancePenalty}\r\n                                        onChange={props.onEffectChange.bind(null, \"circumstancePenalty\")}\r\n                                    />\r\n                                }\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"InputGroup\">\r\n                            <PenaltyPresets\r\n                                modifier={props.effect.itemPenalty}\r\n                                onChange={props.onEffectChange.bind(null, \"itemPenalty\", null)}\r\n                            />\r\n                            <CollapsableInput\r\n                                description={\"Item Penalty: \" + props.effect.itemPenalty.getDescription(props.selectedLevel)}\r\n                                listInput={\r\n                                    <ByLevelInput2\r\n                                        modifier={props.effect.itemPenalty}\r\n                                        onChange={props.onEffectChange.bind(null, \"itemPenalty\")}\r\n                                    />\r\n                                }\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"InputGroup\">\r\n                            <PenaltyPresets\r\n                                modifier={props.effect.untypedPenalty}\r\n                                onChange={props.onEffectChange.bind(null, \"untypedPenalty\", null)}\r\n                            />\r\n                            <CollapsableInput\r\n                                description={\"Untyped Penalty: \" + props.effect.untypedPenalty.getDescription(props.selectedLevel)}\r\n                                listInput={\r\n                                    <ByLevelInput2\r\n                                        modifier={props.effect.untypedPenalty}\r\n                                        onChange={props.onEffectChange.bind(null, \"untypedPenalty\")}\r\n                                    />\r\n                                }\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                }\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ModifierInput","import React from 'react';\r\nimport { CheckboxInput, CollapsableInput, ByLevelInput, ByLevelInput2 } from './CommonInputs'\r\n\r\nfunction WeaponDiceNumPresets(props) {\r\n    // props: diceNum, onChange\r\n    return (\r\n        <div className=\"Presets WeaponDiceNumPresets\">\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.diceNum.isABPWeaponDiceNum()}\r\n                onChange={props.onChange.bind(null, \"ABPWeaponDiceNum\")}\r\n                label={\"ABP Weapon\"}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction WeaponDiceNumInput(props) {\r\n    // props: effect, onChange\r\n    return (\r\n        <div className=\"InputGroup WeaponDiceNumInput\" >\r\n            <WeaponDiceNumPresets \r\n                diceNum={props.effect.weaponDiceNum}\r\n                onChange={props.onChange.bind(null,null)}\r\n            />\r\n        \r\n        <CollapsableInput\r\n                description={\"Weapon Dice: \" + props.effect.weaponDiceNum.getDescription(props.selectedLevel)}\r\n                listInput={\r\n                    <ByLevelInput2\r\n                        modifier={props.effect.weaponDiceNum}\r\n                        onChange={props.onChange}\r\n                    />\r\n                }\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport { WeaponDiceNumInput }","import React from 'react';\r\nimport { CheckboxInput, CollapsableInput, ByLevelInput2 } from './CommonInputs'\r\n\r\nfunction DieSizePresets(props) {\r\n    // props: diceNum, onChange\r\n    return (\r\n        <div className=\"Presets DieSizePresets\">\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.dieSize.isd4()}\r\n                onChange={props.onChange.bind(null, \"d4\")}\r\n                label={\"d4\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.dieSize.isd6()}\r\n                onChange={props.onChange.bind(null, \"d6\")}\r\n                label={\"d6\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.dieSize.isd8()}\r\n                onChange={props.onChange.bind(null, \"d8\")}\r\n                label={\"d8\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.dieSize.isd10()}\r\n                onChange={props.onChange.bind(null, \"d10\")}\r\n                label={\"d10\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.dieSize.isd12()}\r\n                onChange={props.onChange.bind(null, \"d12\")}\r\n                label={\"d12\"}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction DieSizeInput(props) {\r\n    // props: effect, onChange\r\n    return (\r\n        <div className=\"InputGroup DieSizeInput\" >\r\n            <DieSizePresets \r\n                dieSize={props.effect.dieSize}\r\n                onChange={props.onChange.bind(null,null)}\r\n            />\r\n        \r\n        <CollapsableInput\r\n                description={\"Die Size: \" + props.effect.dieSize.getDieSizeDescription(props.selectedLevel)}\r\n                listInput={\r\n                    <ByLevelInput2\r\n                        modifier={props.effect.dieSize}\r\n                        onChange={props.onChange}\r\n                    />\r\n                }\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport { DieSizeInput }","import React from 'react';\r\nimport { CheckboxInput, CollapsableInput, ByLevelInput } from './CommonInputs'\r\n\r\nfunction WeaponSpecPresets(props) {\r\n    // props: diceNum, onChange\r\n    return (\r\n        <div className=\"Presets WeaponSpecPresets\">\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.weaponSpec.isWSMartial()}\r\n                onChange={props.onChange.bind(null, \"WSMartial\")}\r\n                label={\"Martial\"}\r\n            />\r\n            <CheckboxInput className=\"PresetItem\"\r\n                checked={props.weaponSpec.isWSCaster()}\r\n                onChange={props.onChange.bind(null, \"WSCaster\")}\r\n                label={\"Caster\"}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction WeaponSpecInput(props) {\r\n    // props: effect, onChange\r\n    return (\r\n        <div className=\"InputGroup WeaponSpecInput\" >\r\n            <WeaponSpecPresets \r\n                weaponSpec={props.effect.weaponSpec}\r\n                onChange={props.onChange}\r\n            />\r\n        \r\n        <CollapsableInput\r\n                description={\"Weapon Specialization: \" + props.effect.weaponSpec.getDescription(props.selectedLevel)}\r\n                listInput={\r\n                    <ByLevelInput\r\n                        modifier={props.effect.weaponSpec}\r\n                        onChange={props.onChange}\r\n                    />\r\n                }\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeaponSpecInput","import React from 'react';\r\nimport { CheckboxInput, CollapsableInput, LevelSelection } from './CommonInputs'\r\n\r\nfunction RuneTable(props) {\r\n    // props: runes, onChange\r\n    \r\n    const runes = props.runes;\r\n    let rows = [];\r\n    for(let index=0;index<runes.length;index++) {\r\n\r\n    }\r\n    const emptyEntry = <tr>\r\n        <td>\r\n        </td>\r\n    </tr>\r\n\r\n    return (\r\n        <div className=\"TableInput\">\r\n            <table>\r\n            <tbody>\r\n                <tr>\r\n                    <th>Rune Name</th>\r\n                    <th>Level Added</th>\r\n                    <th>Level Removed</th>\r\n                </tr>\r\n                {rows}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction RuneInput(props) {\r\n    // props: effect, onChange, selectedLevel\r\n    \r\n\r\n    return (\r\n        <div className=\"RuneInput\">\r\n        <CollapsableInput \r\n            description=\"Runes: \"\r\n            listInput={\r\n                <RuneTable \r\n                    runes={props.effect.runes}\r\n                    onChange={props.onChange}\r\n                />\r\n            }\r\n            \r\n        />\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default RuneInput","import React from 'react';\r\nimport update from 'immutability-helper';\r\n\r\nimport { CheckboxInput, CollapsableInput, ByLevelInput } from './Inputs/CommonInputs.js'\r\n\r\nimport Flag from './Model/Flag.js';\r\nimport MAP from './Model/MAP.js';\r\nimport Proficiency from './Model/Proficiency.js';\r\nimport AbilityScore from './Model/AbilityScore.js';\r\nimport Modifier from './Model/Modifier.js';\r\nimport AdditionalEffectArray from './Model/AdditionalEffectArray.js';\r\n\r\nimport { totalBonusDescription, attackBonusDescription, totalDamageDescription, calculateExpectedDamage } from './Calculation.js';\r\n\r\nimport MAPInput from './Inputs/MAPInput.js';\r\nimport OverrideInput from './Inputs/OverrideInput.js';\r\nimport { WeaponProficiencyInput } from './Inputs/ProficiencyInput.js';\r\nimport { AttackAbilityScoreInput, DamageAbilityScoreInput } from './Inputs/AbilityScoreInput.js';\r\nimport ItemBonusInput from './Inputs/ItemBonusInput.js';\r\nimport ModifierInput from './Inputs/ModifierInput.js';\r\nimport { WeaponDiceNumInput } from './Inputs/NumberDiceInput.js';\r\nimport { DieSizeInput } from './Inputs/DieSizeInput.js';\r\nimport WeaponSpecInput from './Inputs/WeaponSpecInput.js';\r\nimport RuneInput from './Inputs/RuneInput.js';\r\n\r\nimport './PF2App.css';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst DEFAULT_PROF = [1, 1, 5, 13];\r\nconst DEFAULT_ABSCORE = [18, [true, true, true, true], 17];\r\nconst DEFAULT_ITEMB = new Array(20).fill(0);\r\nfor (let i = 0; i < 20; i++) {\r\n    if (i + 1 >= 16) { DEFAULT_ITEMB[i] = 3; continue; }\r\n    if (i + 1 >= 10) { DEFAULT_ITEMB[i] = 2; continue; }\r\n    if (i + 1 >= 2) { DEFAULT_ITEMB[i] = 1; continue; }\r\n}\r\nconst DEFAULT_WS = new Array(20).fill(0);\r\nfor (let level = 7; level <= 20; level++) {\r\n    if (level < 15) {\r\n        DEFAULT_WS[level - 1] = 1;\r\n    }\r\n    if (level >= 15) {\r\n        DEFAULT_WS[level - 1] = 2;\r\n    }\r\n}\r\nconst DEFAULT_DICENUMBER = new Array(20).fill(1);\r\nfor (let i = 0; i < 20; i++) {\r\n    if (i + 1 >= 19) { DEFAULT_DICENUMBER[i] = 4; continue; }\r\n    if (i + 1 >= 12) { DEFAULT_DICENUMBER[i] = 3; continue; }\r\n    if (i + 1 >= 4) { DEFAULT_DICENUMBER[i] = 2; continue; }\r\n}\r\nconst DEFAULT_DIESIZE = new Array(20).fill(8);\r\n\r\n\r\n// function CheckInput(props) {\r\n//     return (\r\n\r\n//     );\r\n// }\r\n\r\n\r\nfunction StrikeInput(props) {\r\n    /*\r\n        Proficiency, Primary Ability Scor\r\n    */\r\n\r\n    return (\r\n        <div className=\"StrikeInput\" >\r\n            <CollapsableInput\r\n                description={\"Total Bonus: \" + totalBonusDescription(props.effect, props.selectedLevel)}\r\n                listInput={\r\n                    <div className=\"CheckInput\">\r\n                        <CollapsableInput\r\n                            description={\"Attack Bonus: \" + attackBonusDescription(props.effect, props.selectedLevel)}\r\n                            listInput={\r\n                                <div>\r\n                                    <OverrideInput\r\n                                        effect={props.effect}\r\n                                        onEffectChange={props.onEffectChange}\r\n                                        selectedLevel={props.selectedLevel}\r\n                                    />\r\n                                    <WeaponProficiencyInput\r\n                                        effect={props.effect}\r\n                                        onEffectChange={props.onEffectChange}\r\n                                        selectedLevel={props.selectedLevel}\r\n                                    />\r\n\r\n                                    <AttackAbilityScoreInput\r\n                                        effect={props.effect}\r\n                                        onChange={props.onEffectChange.bind(null, \"attackAbilityScore\", null)}\r\n                                        selectedLevel={props.selectedLevel}\r\n                                    />\r\n\r\n                                    <ItemBonusInput\r\n                                        effect={props.effect}\r\n                                        onChange={props.onEffectChange.bind(null, \"itemBonus\")}\r\n                                        selectedLevel={props.selectedLevel}\r\n                                    />\r\n                                </div>\r\n                            } />\r\n                        <ModifierInput\r\n                            effect={props.effect}\r\n                            onEffectChange={props.onEffectChange}\r\n                            selectedLevel={props.selectedLevel}\r\n                        />\r\n                        <MAPInput\r\n                            effect={props.effect}\r\n                            onChange={props.onEffectChange.bind(null, \"MAP\", null)}\r\n                            selectedLevel={props.selectedLevel}\r\n\r\n                        />\r\n                    </div>\r\n\r\n                }\r\n            />\r\n\r\n            <CollapsableInput\r\n                description={\"Total Damage: \" + totalDamageDescription(props.effect, props.selectedLevel)}\r\n                listInput={\r\n                    <div className=\"DamageInput\">\r\n                        <DamageAbilityScoreInput\r\n                            effect={props.effect}\r\n                            onChange={props.onEffectChange.bind(null, \"damageAbilityScore\", null)}\r\n                            selectedLevel={props.selectedLevel}\r\n                        />\r\n                        <WeaponDiceNumInput\r\n                            effect={props.effect}\r\n                            onChange={props.onEffectChange.bind(null, \"weaponDiceNum\")}\r\n                            selectedLevel={props.selectedLevel}\r\n                        />\r\n                        <DieSizeInput\r\n                            effect={props.effect}\r\n                            onChange={props.onEffectChange.bind(null, \"dieSize\")}\r\n                            selectedLevel={props.selectedLevel}\r\n                        />\r\n                        <WeaponSpecInput\r\n                            effect={props.effect}\r\n                            onChange={props.onEffectChange.bind(null, \"weaponSpec\", null)}\r\n                            selectedLevel={props.selectedLevel}\r\n                        />\r\n                        <RuneInput\r\n                            effect={props.effect}\r\n                            onChange={props.onEffectChange.bind(null, \"runes\")}\r\n                            selectedLevel={props.selectedLevel}\r\n                        />\r\n                    </div>\r\n                }\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction EffectInput(props) {\r\n    // props: effect, selectedLevel, onEffectChange\r\n    return (\r\n        <StrikeInput\r\n            effect={props.effect}\r\n            selectedLevel={props.selectedLevel}\r\n            onEffectChange={props.onEffectChange}\r\n        />\r\n    );\r\n}\r\n\r\nfunction DisplayOutput(props) {\r\n    // props: effect, target\r\n    return (\r\n        <div className=\"Display\">\r\n            <CollapsableInput\r\n                description={\"Expected Damage: \" + calculateExpectedDamage(props.effect, props.target)}\r\n                listInput=\"\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction TargetInput(props) {\r\n    return (\r\n        <div className=\"TargetInput\">\r\n            <div>\r\n                <label>Target Level:\r\n                <input type=\"number\"\r\n                        min=\"1\"\r\n                        max=\"20\"\r\n                        step=\"1\"\r\n                        value={props.target.selectedLevel}\r\n                        onChange={props.onTargetChange.bind(null, \"selectedLevel\")}\r\n                    /><br />\r\n                1\r\n                <input type=\"range\"\r\n                        min=\"1\"\r\n                        max=\"20\"\r\n                        step=\"1\"\r\n                        value={props.target.selectedLevel}\r\n                        onChange={props.onTargetChange.bind(null, \"selectedLevel\")}\r\n                    />\r\n                20\r\n            </label>\r\n            </div>\r\n            <div>\r\n                <label>Target AC: {}\r\n                    <input type=\"number\"\r\n                        value={props.target.AC}\r\n                        onChange={props.onTargetChange.bind(null, \"AC\")}\r\n                    />\r\n\r\n                </label>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\nclass PF2App extends React.Component {\r\n    /*\r\n        Target Selector\r\n        Graph Settings\r\n        Graph\r\n        Edit Current Effect\r\n        Select Effects\r\n    */\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            target: {\r\n                selectedLevel: 3,\r\n                AC: 15\r\n            },\r\n            routines: [\r\n                [\r\n                    { // effect\r\n                        MAP: new MAP(),\r\n\r\n                        useOverride: new Flag(),\r\n                        override: new Modifier(),\r\n\r\n                        proficiency: new Proficiency(...DEFAULT_PROF),\r\n                        attackAbilityScore: new AbilityScore(...DEFAULT_ABSCORE),\r\n                        itemBonus: new Modifier(DEFAULT_ITEMB),\r\n\r\n                        useMiscModifiers: new Flag(true),\r\n                        circumstanceBonus: new Modifier(),\r\n                        statusBonus: new Modifier(),\r\n                        circumstancePenalty: new Modifier(),\r\n                        statusPenalty: new Modifier(),\r\n                        itemPenalty: new Modifier(),\r\n                        untypedPenalty: new Modifier(),\r\n\r\n                        damageAbilityScore: new AbilityScore(...DEFAULT_ABSCORE),\r\n                        weaponDiceNum: new Modifier(DEFAULT_DICENUMBER),\r\n                        dieSize: new Modifier(DEFAULT_DIESIZE),\r\n                        weaponSpec: new Modifier(DEFAULT_WS),\r\n\r\n                        runes: new AdditionalEffectArray(),\r\n                    }\r\n                ]\r\n            ],\r\n            selectedRoutine: 0,\r\n            selectedEffect: 0,\r\n        };\r\n        // this.handleProficiencyChange = this.handleProficiencyChange.bind(this);\r\n        // this.handleAbilityScoreChange = this.handleAbilityScoreChange.bind(this);\r\n        this.handleEffectChange = this.handleEffectChange.bind(this);\r\n        this.handleTargetChange = this.handleTargetChange.bind(this);\r\n    }\r\n    handleTargetChange(propertyName, event) {\r\n        let newPropertyValue;\r\n        switch (propertyName) {\r\n            case \"selectedLevel\":\r\n                newPropertyValue = event.target.value;\r\n                break;\r\n            case \"AC\":\r\n                newPropertyValue = event.target.value;\r\n                break;\r\n            default:\r\n                newPropertyValue = event.target.value;\r\n        }\r\n        const newTarget = update(this.state.target, { [propertyName]: { $set: newPropertyValue } });\r\n\r\n        this.setState({ target: newTarget });\r\n    }\r\n\r\n    handleEffectChange(propertyName, index, key, event) {\r\n        const currentEffect = this.state.routines[this.state.selectedRoutine][this.state.selectedEffect];\r\n        const currentPropertyValue = currentEffect[propertyName];\r\n        const newPropertyValue = currentPropertyValue.createUpdated(key, event, index);\r\n\r\n        const newRoutines = update(this.state.routines, {\r\n            [this.state.selectedRoutine]: {\r\n                [this.state.selectedEffect]: {\r\n                    [propertyName]: { $set: newPropertyValue }\r\n                }\r\n            }\r\n        });\r\n\r\n        this.setState({ routines: newRoutines });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"PF2App\">\r\n                <TargetInput\r\n                    target={this.state.target}\r\n                    onTargetChange={this.handleTargetChange}\r\n                />\r\n                <DisplayOutput\r\n                    target={this.state.target}\r\n                    effect={this.state.routines[this.state.selectedRoutine][this.state.selectedEffect]}\r\n                />\r\n                <EffectInput\r\n                    effect={this.state.routines[this.state.selectedRoutine][this.state.selectedEffect]}\r\n                    selectedLevel={this.state.target.selectedLevel}\r\n                    onEffectChange={this.handleEffectChange}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PF2App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport PF2App from './PF2App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <PF2App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}